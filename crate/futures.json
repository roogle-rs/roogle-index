{"root":"0:0:1744","crate_version":"0.3.23","includes_private":false,"index":{"2:13597:30278":{"id":"2:13597:30278","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49872:4986","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8748:157":{"id":"2:8748:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8749:2758","2:8750:922","2:8751:3041","2:8754:3042","2:8755:495","2:8757:3043","2:8760:3044","2:8761:3045","2:8762:3046","2:8763:2284","2:8765:2532","2:8767:3047","2:8768:3048","2:8770:841","2:8773:2525","2:8780:2511","2:8782:2512","2:8785:2510","2:8786:2533","2:8787:2522","2:8789:2523","2:8791:3049","2:8794:1308","2:8795:2300","2:8796:2521","2:8800:2519","2:8803:2517","2:8804:2527","2:8805:2537","2:8807:2528","2:8808:2272","2:8810:3050","2:8813:3051","2:8815:3052","2:8825:3053","2:8840:3054","2:8842:3055","2:8846:3056","2:8855:2516","2:8858:3057","2:8860:3058","2:8863:276","2:8870:294","2:8877:3059","2:8884:3060","2:8893:3061","2:8903:1014","2:8910:3062","2:8917:2216","2:8918:3063","2:8919:3064","2:8931:3065","2:8938:3066","2:8950:3067","2:8957:3068","2:8958:2514","2:8963:3069","2:8966:3070","2:8969:2515","2:8970:3071","2:8972:3072","2:8974:3073","2:8976:415","2:8979:3074","2:8982:997","2:8985:3075","2:8988:604","2:8991:3076","2:8994:907","2:8996:826","2:8998:792","2:9000:713","2:9002:696","2:9004:3077","2:9005:3078","2:9013:3079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13915:138":{"id":"2:13915:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13916:181","2:13917:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23922:4716":{"id":"2:23922:4716","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23923:4719"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23918:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13584:56060":{"id":"2:13584:56060","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13660:61095":{"id":"2:13660:61095","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:9756:1665","glob":false}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::StreamExt","name":"_","id":"21:4468:1654","glob":false}},"2:3740:3562":{"id":"2:3740:3562","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3742:55009"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13648:61090":{"id":"2:13648:61090","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:15989:1870","`DoubleEndedIterator`":"2:8591:120","str::rmatch_indices":"1:15995:1875","self::pattern":"2:13202:4640"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49730:4978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::join","name":"join","id":"21:10419:1672","glob":false}},"2:3812:3566":{"id":"2:3812:3566","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13687:55977":{"id":"2:13687:55977","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13615:2299":{"id":"2:13615:2299","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:8591:120","self::pattern":"2:13202:4640","str::split_whitespace":"1:15995:1875","str::rsplit":"1:15995:1875","prim@char":"1:15989:1870"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49580:2948","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2572:127":{"id":"1:2572:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2573:55725","1:2575:59138","1:2576:59139","1:2577:58812"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10440:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10447:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13566:793":{"id":"2:13566:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15989:1870"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14390:4293":{"id":"2:14390:4293","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14391:58508","2:14392:58509","2:14393:58510","2:14394:58511","2:14395:58512","2:14396:58513","2:14397:2528"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:988:1650","glob":false}},"5:6085:2949":{"id":"5:6085:2949","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8361:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:15:3007":{"id":"24:15:3007","crate_id":24,"name":"Spawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:16:64029","24:17:4351"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3364:3537":{"id":"2:3364:3537","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3365:181","2:3366:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::never","name":"never","id":"21:8152:917","glob":false}},"21:7997:1659":{"id":"21:7997:1659","crate_id":21,"name":"SinkExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:7999:2238","21:8004:2239","21:8008:2916","21:8011:2917","21:8013:2240","21:8014:2229","21:8015:2231","21:8017:2233","21:8018:2236","21:8019:2232","21:8020:2237","21:8023:2918","21:8025:2919","21:8027:2920","21:8028:2921","21:8029:2922","21:8030:2923"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sink","id":"25:17:1657","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Item"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22952:4824":{"id":"2:22952:4824","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22953:4719","2:22954:60221","2:22955:1227","2:22956:1228","2:22957:41199","2:22958:60274","2:22959:60275","2:22960:60276","2:22961:60277","2:22962:60278","2:22963:60222","2:22964:60223","2:22965:60224","2:22966:60225","2:22967:60226","2:22968:60227","2:22969:60228"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23001:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:687:1649","glob":false}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:9738:1668","glob":false}},"29:39:1662":{"id":"29:39:1662","crate_id":29,"name":"AsyncRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:40:54060","29:41:54061"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3648:3559":{"id":"2:3648:3559","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3650:59684","2:3651:59685","2:3652:56095"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:4051:4184":{"id":"2:4051:4184","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4052:58812"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13592:2337":{"id":"2:13592:2337","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49566:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::io","name":"io","id":"21:8154:1680","glob":false}},"2:13227:4644":{"id":"2:13227:4644","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13229:55621","2:13230:60087","2:13231:60088"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13221:4643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3278:217":{"id":"2:3278:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:258:2034":{"id":"24:258:2034","crate_id":24,"name":"UnsafeFutureObj","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["24:261:55941","24:262:578"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"outlives":"'a"}],"implementations":[]}},"2:13574:55583":{"id":"2:13574:55583","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12673:5104"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5763:4139":{"id":"1:5763:4139","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5764:57844","1:5765:57845","1:5766:54333","1:5767:57846","1:5768:4465","1:5769:4466","1:5770:57847","1:5771:1304","1:5772:57848","1:5773:57849","1:5774:57850","1:5775:57851","1:5776:57852","1:5777:57853","1:5778:57854","1:5779:57855"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:177":{"id":"0:177","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::SinkExt","name":"_","id":"21:7997:1659","glob":false}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:127:1653","glob":false}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::enter","name":"enter","id":"31:173:1711","glob":false}},"2:3274:2263":{"id":"2:3274:2263","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13639:61088":{"id":"2:13639:61088","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8506:4691":{"id":"2:8506:4691","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8508:3072"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13642:1955":{"id":"2:13642:1955","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"1:15995:1875","`DoubleEndedIterator`":"2:8591:120","prim@char":"1:15989:1870","self::pattern":"2:13202:4640"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49784:4981","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4741:2324":{"id":"1:4741:2324","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4742:2298","1:4743:38163","1:4744:58685","1:4745:4050"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13568:61079":{"id":"2:13568:61079","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13212:4641":{"id":"2:13212:4641","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13214:4643","2:13215:60329","2:13216:60330","2:13217:60331","2:13218:60333","2:13219:60332","2:13220:60334"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6885:4166":{"id":"1:6885:4166","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6886:58141"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::try_join","name":"try_join","id":"21:10420:1675","glob":false}},"2:8556:2267":{"id":"2:8556:2267","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8558:37747","2:8560:6216","2:8561:58125"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future","name":"future","id":"21:168:693","glob":false}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1670","glob":false}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pending","name":"pending","id":"21:67:1673","glob":false}},"2:3559:2795":{"id":"2:3559:2795","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3561:237","2:3562:206","2:3563:59887"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6881:4152":{"id":"1:6881:4152","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6882:59017"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:7997:1659","glob":false}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:9756:1665","glob":false}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink","name":"sink","id":"21:7282:1658","glob":false}},"2:8543:136":{"id":"2:8543:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8545:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13636:61087":{"id":"2:13636:61087","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13627:61086":{"id":"2:13627:61086","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"1:15995:1875","self::pattern":"2:13202:4640","prim@char":"1:15989:1870","str::split":"1:15995:1875"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49648:4975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:142:1030":{"id":"0:142:1030","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:144","0:147","0:150","0:154","0:157","0:161","0:164","0:167","0:171","0:174","0:177","0:181","0:184","0:188","0:191","0:194","0:197","0:201","0:204","0:207","0:210"],"is_stripped":false}},"2:3734:137":{"id":"2:3734:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3736:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1661","glob":false}},"2:13674:61099":{"id":"2:13674:61099","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13202:4640","prim@char":"1:15989:1870"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3166:75":{"id":"2:3166:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13590:5005":{"id":"2:13590:5005","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15989:1870"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49550:4969","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13645:61089":{"id":"2:13645:61089","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8591:120","prim@char":"1:15989:1870","self::pattern":"2:13202:4640","str::matches":"1:15995:1875"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49802:4982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13683:4864":{"id":"2:13683:4864","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:13141:4316","FromStr::Err":"2:13141:4316"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47742:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13141:4316","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13141:4316","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22899:4812":{"id":"2:22899:4812","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22900:4719","2:22901:60221","2:22902:60673","2:22903:60674","2:22904:60675","2:22905:41199","2:22906:60676","2:22907:60677","2:22908:60678","2:22909:60679","2:22910:60680","2:22911:60681","2:22912:60682","2:22913:60683","2:22914:60684","2:22915:60685","2:22916:60278","2:22917:60686","2:22918:59802","2:22919:59801","2:22920:59803","2:22921:60222","2:22922:60223","2:22923:60224","2:22924:60225"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23001:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:27:1979":{"id":"20:27:1979","crate_id":20,"name":"FusedFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:28:2228"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:13915:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_channel","name":"channel","id":"27:0:1677","glob":false}},"2:3172:149":{"id":"2:3172:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3174:58683"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3169:74":{"id":"2:3169:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3171:59924"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5669:4172":{"id":"1:5669:4172","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5670:55618","1:5671:5236"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6103:61741":{"id":"5:6103:61741","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8361:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:139":{"id":"0:139","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:195:1716","glob":false}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:42:1664","glob":false}},"21:9738:1668":{"id":"21:9738:1668","crate_id":21,"name":"AsyncWriteExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9739:2233","21:9740:2229","21:9741:1958","21:9743:2302","21:9745:2303","21:9747:2289"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncWrite","id":"29:42:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13571:61081":{"id":"2:13571:61081","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15995:1875"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13680:61101":{"id":"2:13680:61101","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13202:4640","prim@char":"1:15989:1870"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13685:5148":{"id":"2:13685:5148","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13688:55978":{"id":"2:13688:55978","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:9751:1667","glob":false}},"2:3178:228":{"id":"2:3178:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3180:127","2:3181:1417"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:127:1653","glob":false}},"2:13232:4639":{"id":"2:13232:4639","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:4468:1654","glob":false}},"1:5749:4137":{"id":"1:5749:4137","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5750:54333","1:5751:55869","1:5752:55870"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:147":{"id":"0:147","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::Future","name":"Future","id":"2:13915:138","glob":false}},"20:44:1647":{"id":"20:44:1647","crate_id":20,"name":"TryFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:45:175","20:46:127","20:47:52935"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:13915:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"20:39:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1661","glob":false}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::Future","name":"Future","id":"2:13915:138","glob":false}},"2:13621:56089":{"id":"2:13621:56089","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:8591:120","prim@char":"1:15989:1870","self::pattern":"2:13202:4640","str::split":"1:15995:1875"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49598:4946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6883:4165":{"id":"1:6883:4165","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6884:55896"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10688:146":{"id":"2:10688:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10689:652","2:10690:1958","2:10691:57673","2:10692:57674","2:10693:57675","2:10694:57676","2:10695:57677","2:10696:57678","2:10697:57679","2:10698:57680","2:10699:57681","2:10700:57682","2:10701:57683","2:10702:57684","2:10703:57685","2:10704:1533"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::Stream","name":"Stream","id":"20:96:1652","glob":false}},"2:3104:2908":{"id":"2:3104:2908","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3103:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:44":{"id":"0:44","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:47:1663","glob":false}},"1:9365:4218":{"id":"1:9365:4218","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9366:57820","1:9367:57821","1:9368:57822","1:9369:57823","1:9370:57824","1:9371:37749","1:9372:57819"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12649:5141":{"id":"2:12649:5141","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12650:2758","2:12651:59641"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:47:1663":{"id":"29:47:1663","crate_id":29,"name":"AsyncSeek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:48:54071"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5008:4195":{"id":"1:5008:4195","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5009:2180","1:5010:58246"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2888:104":{"id":"2:2888:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2889:408","2:2890:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:9756:1665":{"id":"21:9756:1665","crate_id":21,"name":"AsyncBufReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9757:2288","21:9758:4012","21:9759:2297","21:9761:2294","21:9763:2290"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncBufRead","id":"29:49:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:4468:1654":{"id":"21:4468:1654","crate_id":21,"name":"StreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:4469:922","21:4470:767","21:4471:841","21:4474:2510","21:4475:2511","21:4478:2512","21:4482:2513","21:4485:2272","21:4487:2514","21:4492:432","21:4493:495","21:4494:2515","21:4495:2516","21:4499:294","21:4502:276","21:4505:2517","21:4506:2518","21:4508:2519","21:4511:2520","21:4515:2521","21:4520:2522","21:4523:2523","21:4526:2524","21:4528:2525","21:4531:2526","21:4535:2300","21:4536:1308","21:4537:2527","21:4538:2528","21:4539:2529","21:4540:1941","21:4542:2530","21:4544:2255","21:4545:2531","21:4546:2532","21:4548:2284","21:4550:2533","21:4551:2534","21:4552:2535","21:4553:2536","21:4555:2299","21:4557:2537","21:4559:2538","21:4561:2539","21:4563:2540","21:4564:2541"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Stream","id":"20:96:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9031:2762":{"id":"2:9031:2762","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8547:151":{"id":"2:8547:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8548:2758","2:8549:2760","2:8550:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4748:2945":{"id":"1:4748:2945","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4749:2288","1:4750:54029","1:4751:59050","1:4753:2297","1:4754:2294","1:4756:2299","1:4757:2290"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4666:2317","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:39:1662","glob":false}},"21:5885:1655":{"id":"21:5885:1655","crate_id":21,"name":"TryStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:5886:2234","21:5888:2689","21:5891:2235","21:5894:292","21:5897:2692","21:5900:2693","21:5902:2694","21:5904:2601","21:5905:3220","21:5906:3056","21:5909:3225","21:5912:3226","21:5915:3229","21:5919:3050","21:5921:3224","21:5922:3221","21:5925:3222","21:5929:2385","21:5930:3055","21:5934:3223","21:5935:3227","21:5936:3228","21:5937:3231","21:5938:3230"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"TryStream","id":"20:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6812:4162":{"id":"1:6812:4162","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6813:55817"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23237:14251":{"id":"2:23237:14251","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23238:60208","2:23239:60209","2:23240:60210"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23230:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3516:2265":{"id":"2:3516:2265","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3517:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5741:4136":{"id":"1:5741:4136","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5742:58974","1:5743:58976","1:5744:58975","1:5745:58977"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13662:61097":{"id":"2:13662:61097","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13202:4640","prim@char":"1:15989:1870"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13232:4639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3401:3546":{"id":"2:3401:3546","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:181","2:3404:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:116:1553":{"id":"0:116:1553","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`LocalPool`":"31:190:1715","`block_on`":"31:115:1709"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:118","0:121","0:124","0:127","0:130","0:133","0:136","0:139"],"is_stripped":false}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:5885:1655","glob":false}},"1:6459:4162":{"id":"1:6459:4162","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6460:4465","1:6461:4466","1:6462:55816","1:6463:58563","1:6465:58567","1:6467:58564","1:6468:58565","1:6470:58566"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6981:4151":{"id":"1:6981:4151","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6982:57547"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3389:3548":{"id":"2:3389:3548","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:181","2:3391:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3522:131":{"id":"2:3522:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3524:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3525:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:39:1662","glob":false}},"2:13658:61094":{"id":"2:13658:61094","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1744":{"id":"0:0:1744","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::future":"21:168:693","crate::channel":"27:0:1677","crate::stream":"21:2156:1651","crate::executor":"0:116:1553","crate::io":"21:8154:1680","crate::sink":"21:7282:1658"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:116:1553","0:142:1030","0:4","0:7","0:11","0:14","0:18","0:21","0:25","0:28","0:31","0:34","0:38","0:41","0:44","0:47","0:51","0:54","0:57","0:60","0:63","0:66","0:69","0:73","0:76","0:79","0:80","0:82","0:85","0:89","0:92","0:95","0:98","0:101","0:104","0:107","0:110","0:113"],"is_stripped":false}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1340","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:61738","5:6085:2949","5:6088:61739","5:6091:61740","5:6103:61741","5:6104:61742","5:6105:2119","5:6106:57145","5:6107:57146"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3376:3542":{"id":"2:3376:3542","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3378:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23285:4720":{"id":"2:23285:4720","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:23922:4716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23276:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:9738:1668","glob":false}},"2:3380:3541":{"id":"2:3380:3541","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3382:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3717:3560":{"id":"2:3717:3560","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3648:3559","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10451:4564":{"id":"2:10451:4564","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10452:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5833:2130":{"id":"5:5833:2130","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13591:4669":{"id":"2:13591:4669","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15989:1870"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49556:4970","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13654:61092":{"id":"2:13654:61092","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10457:189":{"id":"2:10457:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10458:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3577:3556":{"id":"2:3577:3556","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3579:181","2:3580:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13567:56050":{"id":"2:13567:56050","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13677:61100":{"id":"2:13677:61100","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13202:4640","prim@char":"1:15989:1870"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:110:1980":{"id":"20:110:1980","crate_id":20,"name":"FusedStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:111:2228"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Stream","id":"20:96:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8071:4538":{"id":"2:8071:4538","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8072:60103","2:8073:60104","2:8074:2536","2:8075:60100","2:8076:60105","2:8077:60102","2:8078:60101"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3729:224":{"id":"2:3729:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3730:181","2:3731:3562","2:3732:686","2:3733:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3734:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5797:4140":{"id":"1:5797:4140","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5798:55600","1:5799:55601","1:5800:55602","1:5801:55603"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13661:61096":{"id":"2:13661:61096","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_core::ready","name":"ready","id":"20:169:1669","glob":false}},"2:3372:3544":{"id":"2:3372:3544","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:1356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13651:61091":{"id":"2:13651:61091","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13202:4640","prim@char":"1:15989:1870","str::match_indices":"1:15995:1875","`DoubleEndedIterator`":"2:8591:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49748:4979","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3358:3538":{"id":"2:3358:3538","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3360:181","2:3361:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5819:4144":{"id":"1:5819:4144","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5820:54333"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3368:3540":{"id":"2:3368:3540","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3370:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:9721:1666","glob":false}},"2:13578:56057":{"id":"2:13578:56057","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47617:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13565":{"id":"2:13565","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12662:1340","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13566:793","2:13567:56050","2:13568:61079","2:13569:61080","2:13571:61081","2:13574:55583","2:13575:61082","2:13576:304","2:13577:56061","2:13578:56057","2:13580:56058","2:13582:56059","2:13584:56060","2:13586:4286","2:13587:61083","2:13588:56079","2:13589:56080","2:13590:5005","2:13591:4669","2:13592:2337","2:13593:30293","2:13594:30283","2:13595:2290","2:13596:61084","2:13597:30278","2:13598:56095","2:13601:56096","2:13604:56097","2:13607:3059","2:13611:5987","2:13615:2299","2:13618:30150","2:13621:56089","2:13624:61085","2:13627:61086","2:13630:56091","2:13633:56093","2:13636:61087","2:13639:61088","2:13642:1955","2:13645:61089","2:13648:61090","2:13651:61091","2:13654:61092","2:13656:61093","2:13658:61094","2:13660:61095","2:13661:61096","2:13662:61097","2:13665:61098","2:13668:12768","2:13671:56098","2:13674:61099","2:13677:61100","2:13680:61101","2:13683:4864","2:13685:5148","2:13686:55976","2:13687:55977","2:13688:55978","2:13689:61102","2:13691:4193","2:13692:61103"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13598:56095":{"id":"2:13598:56095","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13202:4640","prim@char":"1:15989:1870"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3525:132":{"id":"2:3525:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3527:181","2:3528:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9407:2636":{"id":"2:9407:2636","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10723:4247":{"id":"2:10723:4247","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10724:146","2:10725:31574","2:10726:59194"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13589:56080":{"id":"2:13589:56080","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15995:1875"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5757:4138":{"id":"1:5757:4138","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5758:54333","1:5759:55772"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13588:56079":{"id":"2:13588:56079","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15995:1875"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6107:57146":{"id":"5:6107:57146","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15995:1875"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:9721:1666","glob":false}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream","name":"stream","id":"21:2156:1651","glob":false}},"2:3337:3534":{"id":"2:3337:3534","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3339:181","2:3340:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13668:12768":{"id":"2:13668:12768","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15989:1870","self::pattern":"2:13202:4640"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3384:3543":{"id":"2:3384:3543","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3386:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13586:4286":{"id":"2:13586:4286","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:15995:1875","`str`":"1:15995:1875","crate::ops::Index":"2:3577:3556"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13607:3059":{"id":"2:13607:3059","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:13202:4640","prim@char":"1:15989:1870","`None`":"2:47617:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6106:57145":{"id":"5:6106:57145","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15995:1875"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink","name":"sink","id":"21:7282:1658","glob":false}},"2:10390:2328":{"id":"2:10390:2328","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10391:1533","2:10392:58779","2:10394:3863"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13587:61083":{"id":"2:13587:61083","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15995:1875","str::slice_unchecked":"1:15995:1875","crate::ops::IndexMut":"2:3581:3557"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13595:2290":{"id":"2:13595:2290","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49834:2316","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5811:4142":{"id":"1:5811:4142","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5812:57591"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5675:4170":{"id":"1:5675:4170","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5676:5912","1:5677:55583"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:9751:1667","glob":false}},"2:4000:68":{"id":"2:4000:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4001:1429"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"0:171":{"id":"0:171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::FutureExt","name":"_","id":"21:687:1649","glob":false}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future","name":"future","id":"21:168:693","glob":false}},"2:3435:3554":{"id":"2:3435:3554","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3437:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2957:177":{"id":"2:2957:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2958:415","2:2959:2216","2:2960:3063","2:2961:57800"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2926:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::lock","name":"lock","id":"21:9795:1679","glob":false}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream_select","name":"stream_select","id":"21:97:1676","glob":false}},"2:2926:124":{"id":"2:2926:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3182:227":{"id":"2:3182:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3184:127","2:3185:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14314:141":{"id":"2:14314:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14315:277","2:14316:518","2:14317:280","2:14318:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2921:183":{"id":"2:2921:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2923:604","2:2924:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13580:56058":{"id":"2:13580:56058","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47617:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"29:49:1661":{"id":"29:49:1661","crate_id":29,"name":"AsyncBufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:50:54028","29:51:54029"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncRead","id":"29:39:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13692:61103":{"id":"2:13692:61103","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15989:1870"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49897:4988","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:127:1653":{"id":"20:127:1653","crate_id":20,"name":"TryStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:128:175","20:129:127","20:130:53022"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Stream","id":"20:96:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"20:122:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:9751:1667":{"id":"21:9751:1667","crate_id":21,"name":"AsyncSeekExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9752:2298","21:9753:4050"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncSeek","id":"29:47:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:1075:4191":{"id":"1:1075:4191","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:5151","1:1077:5148","1:1078:57145","1:1079:57146","1:1080:55976","1:1081:55977","1:1082:55978"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:5151","5:785:55834","5:786:55835"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9035:4537":{"id":"2:9035:4537","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8071:4538","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9028:2761":{"id":"2:9028:2761","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3342:3539":{"id":"2:3342:3539","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:181","2:3345:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3406:3547":{"id":"2:3406:3547","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:181","2:3409:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10453:4571":{"id":"2:10453:4571","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10454:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:47:1663","glob":false}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:42:1013","glob":false}},"2:3396:3545":{"id":"2:3396:3545","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3398:181","2:3399:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4783:4602":{"id":"2:4783:4602","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4784:2758","2:4785:3084","2:4786:3042"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22988:4695":{"id":"2:22988:4695","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22989:60221","2:22990:1227","2:22991:1228","2:22992:60222","2:22993:60223","2:22994:60224","2:22995:60225","2:22996:60226","2:22997:60227","2:22998:60228"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23001:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23088:4221":{"id":"2:23088:4221","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23078:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:9721:1666":{"id":"21:9721:1666","crate_id":21,"name":"AsyncReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9722:2284","21:9724:2291","21:9726:2292","21:9728:2293","21:9730:2295","21:9732:2296","21:9734:2299","21:9735:2300"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncRead","id":"29:39:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:42:1664","glob":false}},"2:13221:4643":{"id":"2:13221:4643","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13223:4662","2:13224:922","2:13225:59384","2:13226:59385"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9408:4359":{"id":"2:9408:4359","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6104:61742":{"id":"5:6104:61742","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8361:216","`Box<str>`":"5:432:2268"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2268","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:5161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3492:116":{"id":"2:3492:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3493:221","2:3494:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_sink::Sink","name":"Sink","id":"25:17:1657","glob":false}},"2:10447:119":{"id":"2:10447:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10448:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6084:61738":{"id":"5:6084:61738","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2268","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:5161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2268","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:5161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6481:4159":{"id":"1:6481:4159","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6482:55937","1:6483:38311","1:6484:55938","1:6485:55939","1:6486:55940","1:6487:55941"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13594:30283":{"id":"2:13594:30283","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15995:1875"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49863:4985","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6579:4213":{"id":"1:6579:4213","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6580:57617","1:6581:57618"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:44:1647","glob":false}},"1:7817:4346":{"id":"1:7817:4346","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7818:57841"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13604:56097":{"id":"2:13604:56097","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15989:1870","self::pattern":"2:13202:4640"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10461:4574":{"id":"2:10461:4574","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10462:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3775:3565":{"id":"2:3775:3565","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6105:2119":{"id":"5:6105:2119","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8361:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13575:61082":{"id":"2:13575:61082","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select_biased","name":"select_biased","id":"21:10421:1674","glob":false}},"2:3505:1985":{"id":"2:3505:1985","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3506:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3492:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13930:150":{"id":"2:13930:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13931:181","2:13932:150","2:13933:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3352:3535":{"id":"2:3352:3535","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3354:181","2:3355:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13671:56098":{"id":"2:13671:56098","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15989:1870","self::pattern":"2:13202:4640"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::task","name":"task","id":"21:8042:1378","glob":false}},"2:13656:61093":{"id":"2:13656:61093","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:127":{"id":"0:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:206:1712","glob":false}},"2:13582:56059":{"id":"2:13582:56059","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3175:135":{"id":"2:3175:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3177:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13633:56093":{"id":"2:13633:56093","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:15995:1875","self::pattern":"2:13202:4640","prim@char":"1:15989:1870"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49702:4950","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13141:4316":{"id":"2:13141:4316","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13142:126","2:13143:58766"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13611:5987":{"id":"2:13611:5987","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47617:176","self::pattern":"2:13202:4640","prim@char":"1:15989:1870"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13596:61084":{"id":"2:13596:61084","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49844:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10455:4572":{"id":"2:10455:4572","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10456:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3427:3552":{"id":"2:3427:3552","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3429:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3417:3550":{"id":"2:3417:3550","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3419:181","2:3420:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:166:1714","glob":false}},"2:8616:2266":{"id":"2:8616:2266","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8617:793","2:8618:56050"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3310:2264":{"id":"2:3310:2264","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3581:3557":{"id":"2:3581:3557","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3583:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3577:3556","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3431:3553":{"id":"2:3431:3553","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5807:4141":{"id":"1:5807:4141","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5808:57845"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:5885:1655","glob":false}},"1:6809:4176":{"id":"1:6809:4176","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6810:55777","1:6811:55778"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10459:4573":{"id":"2:10459:4573","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10460:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:18:3006":{"id":"24:18:3006","crate_id":24,"name":"LocalSpawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:19:4131","24:20:4132"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13665:61098":{"id":"2:13665:61098","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13202:4640","prim@char":"1:15989:1870"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"25:17:1657":{"id":"25:17:1657","crate_id":25,"name":"Sink","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["25:19:127","25:20:14498","25:21:52942","25:22:52943","25:23:52944"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23025:4813":{"id":"2:23025:4813","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23026:4719","2:23027:1247","2:23028:1272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:11082:214":{"id":"2:11082:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11084:181","2:11085:56057","2:11086:56058","2:11087:56059","2:11088:56060","2:11089:753","2:11090:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11073:4156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6707:4139":{"id":"1:6707:4139","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6708:57624","1:6709:55739","1:6710:55740","1:6711:55742","1:6712:55741","1:6713:55743","1:6714:55744","1:6715:55746","1:6716:55747","1:6717:55750","1:6718:55751","1:6719:55752","1:6720:55753","1:6721:55754","1:6722:55755","1:6723:55748","1:6724:55749"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4723:2328":{"id":"1:4723:2328","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4724:1958","1:4725:2302","1:4727:3861","1:4728:2233","1:4729:2303","1:4730:3862","1:4731:3863","1:4740:2528"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13630:56091":{"id":"2:13630:56091","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:15995:1875","prim@char":"1:15989:1870","self::pattern":"2:13202:4640"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49684:4949","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on","name":"block_on","id":"31:115:1709","glob":false}},"2:3411:3549":{"id":"2:3411:3549","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:181","2:3414:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3519:130":{"id":"2:3519:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3521:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3522:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3423:3551":{"id":"2:3423:3551","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3281:220":{"id":"2:3281:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8591:120":{"id":"2:8591:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8592:55621","2:8593:55622","2:8594:55623","2:8595:55624","2:8599:55625","2:8602:5987"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2863:97":{"id":"2:2863:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2865:1940"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6088:61739":{"id":"5:6088:61739","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8361:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:43:1013","glob":false}},"2:13577:56061":{"id":"2:13577:56061","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16006:1884"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3347:3536":{"id":"2:3347:3536","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:181","2:3350:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:687:1649":{"id":"21:687:1649","crate_id":21,"name":"FutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:688:841","21:691:2598","21:693:2513","21:696:2599","21:698:2600","21:700:2601","21:701:2517","21:702:2602","21:703:2527","21:704:2537","21:706:2529","21:707:2603","21:708:2604","21:709:1941","21:711:2530","21:713:2605","21:714:2606","21:715:2607","21:716:2608"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:13915:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFutureExt","name":"_","id":"21:988:1650","glob":false}},"20:96:1652":{"id":"20:96:1652","crate_id":20,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:97:2758","20:98:3084","20:99:3042"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2967:184":{"id":"2:2967:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2969:997","2:2970:826","2:2971:792","2:2972:713","2:2973:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5837:2074":{"id":"5:5837:2074","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:1672"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:44:1647","glob":false}},"2:13576:304":{"id":"2:13576:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15995:1875","`u8`":"1:16006:1884"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:118:1710","glob":false}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:190:1715","glob":false}},"2:23613:4721":{"id":"2:23613:4721","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23614:1270","2:23615:1269","2:23616:1267","2:23617:1266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23025:4813","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10440:109":{"id":"2:10440:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10441:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13689:61102":{"id":"2:13689:61102","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15989:1870"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49879:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13569:61080":{"id":"2:13569:61080","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13691:4193":{"id":"2:13691:4193","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15989:1870"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49888:4194","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::Enter","name":"Enter","id":"31:164:1713","glob":false}},"2:13618:30150":{"id":"2:13618:30150","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15989:1870","self::pattern":"2:13202:4640"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12994:4943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::Sink","name":"Sink","id":"25:17:1657","glob":false}},"2:23618:14270":{"id":"2:23618:14270","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23619:59801","2:23620:59802","2:23621:59803"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23613:4721","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream","name":"stream","id":"21:2156:1651","glob":false}},"2:13593:30293":{"id":"2:13593:30293","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15995:1875"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49854:4984","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13624:61085":{"id":"2:13624:61085","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:15989:1870","self::pattern":"2:13202:4640","`DoubleEndedIterator`":"2:8591:120","str::split":"1:15995:1875","str::rsplit_terminator":"1:15995:1875"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49630:4974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13686:55976":{"id":"2:13686:55976","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6091:61740":{"id":"5:6091:61740","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8361:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:988:1650":{"id":"21:988:1650","crate_id":21,"name":"TryFutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:989:2688","21:991:2689","21:994:2690","21:998:2235","21:1001:2234","21:1003:2691","21:1005:292","21:1008:2692","21:1011:2693","21:1013:2694","21:1015:2385","21:1016:2695","21:1017:2696","21:1019:767","21:1020:2697"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"TryFuture","id":"20:44:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select","name":"select","id":"21:10422:1671","glob":false}},"1:4666:2317":{"id":"1:4666:2317","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4667:2291","1:4668:2292","1:4670:57971","1:4671:2295","1:4672:2296","1:4673:2293","1:4674:55822","1:4676:57972","1:4677:2528","1:4678:2337","1:4679:2284","1:4681:2300"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8510:4690":{"id":"2:8510:4690","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8512:3073"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3277:218":{"id":"2:3277:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:42:1664":{"id":"29:42:1664","crate_id":29,"name":"AsyncWrite","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:43:54079","29:44:54080","29:45:52943","29:46:52944"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3247:115":{"id":"2:3247:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3248:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3440:3555":{"id":"2:3440:3555","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3442:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2866:4539":{"id":"2:2866:4539","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:59589"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13601:56096":{"id":"2:13601:56096","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13202:4640","prim@char":"1:15989:1870"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:96:1652","glob":false}},"2:10678:142":{"id":"2:10678:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10679:715","2:10681:58175"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10449:4570":{"id":"2:10449:4570","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10450:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3269:211":{"id":"2:3269:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3279:106":{"id":"2:3279:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"paths":{"17:10015:45680":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:6885:4166":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:13957:4340":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"21:14614:2149":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"1:1472:2243":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:8748:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:12649:5141":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:5784:5600":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"12:472:63053":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:6959:4167":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:51492:59633":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"21:18664:2663":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"21:7997:1659":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"2:51904:59632":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:10899:45912":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:1597:2180":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7051:5626":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:10599:55734":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:51336:4758":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:13215:51167":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"7:38:43166":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:1497:4228":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"21:16609:2171":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"21:16371:2165":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"5:2553:5274":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:13549:51659":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:5412:5585":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:5208:4585":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:3960:41434":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11615:46359":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:49524:5053":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:12250:50496":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:9028:2761":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:1663:4227":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"31:164:1713":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"1:14604:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4160:41458":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:2155:2180":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"9:27:5362":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:10291:5867":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:1619:4234":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:6205:42521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:51184:4765":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:2754:5790":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:1302:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"27:515:3685":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"2:14006:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"21:15232:3092":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnordered"],"kind":"struct"},"31:118:1710":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"17:12143:50488":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:11350:11669":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"21:0:1648":{"crate_id":21,"path":["futures_util"],"kind":"module"},"1:13919:4338":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:5447:42106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:15214:4288":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:24704:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"21:18679:2094":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"2:3182:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:3197:2291":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:8250:2183":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:8506:4691":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:10609:4376":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"24:18:3006":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"1:4078:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"5:7824:61854":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4410:41482":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:56461:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:24198:60377":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:6672:2675":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:51761:4739":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"21:18275:2312":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"2:50355:5062":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"21:14861:2153":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"9:722:5314":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:3522:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:7208:5636":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:3521:43995":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"21:18640:2329":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"21:8042:1378":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"17:11409:46034":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:4885:4888":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:10407:5941":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:52509:4725":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:11262:2180":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"18:637:2156":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"21:13856:2156":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"17:12892:51054":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"12:1162:5443":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:49630:4974":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:2062:2937":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:7169:5553":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:16002:1880":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:13774:51713":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:49490:4961":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:7100:5630":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:23082:4219":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:8438:4225":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"21:18213:2311":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"2:4921:4889":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:3743:5958":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:766:63938":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:10390:2328":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:47961:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:2959:5800":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:10198:45693":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:48377:4564":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:22899:4812":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:15494:5473":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:50188:37711":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:11605:4307":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"21:13914:2137":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"17:10318:5892":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:11437:4091":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"12:750:2180":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:10545:45839":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:14951:58222":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"30:869:6004":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:3341:4412":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"30:826:5998":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:3519:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"18:885:5996":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"27:585:3692":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:46873:2146":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:2171:4257":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"21:13221:107":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"17:13785:51714":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:10775:45812":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10455:5889":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:51284:4766":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"21:10419:1672":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"12:2066:4259":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:5443:5587":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:9082:4478":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"12:880:4225":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"21:13119:2152":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"1:12133:2760":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:7141:5634":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:6643:5835":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:3577:3556":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"21:13298:2132":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"2:51951:59599":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:6141:5609":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"21:8154:1680":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"6:5240:42090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11102:45629":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:5763:4139":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13817:51718":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:6656:5836":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:7257:61846":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:510:45605":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"24:21:3008":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"2:3435:3554":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:4660:44595":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:5749:4137":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:9396:45617":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:10723:4247":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:7651:4335":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4142:41456":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:48213:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"18:704:2156":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:10688:4238":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"21:17568:2248":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"21:18850:2397":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"17:10814:5962":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:52163:4756":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:7685:4337":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"12:2280:4236":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:10622:45810":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"26:49:52775":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"5:8361:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:12222:50494":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:6097:39264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"28:55:2243":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"16:6980:5625":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"18:694:6004":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:8115:2760":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:32458:4358":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:12026:50419":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:3736:2310":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:4670:2937":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"17:9958:63917":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:2772:5823":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:12048:50420":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:2395:9973":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:5675:4170":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:2262:5271":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"21:12447:2075":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"17:10913:45921":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:8323:2122":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"21:10672:2039":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"2:3274:2263":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"21:18017:2309":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"5:8203:2760":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:1493:4227":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:12067:54342":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:11207:4199":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:24638:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"27:481:3681":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"17:13016:51057":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:11691:4312":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"12:952:4231":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:24363:5080":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:923:2142":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:6129:42517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:5396:5584":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:3104:2908":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:6035:5576":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:10530:45838":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"27:397:2644":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"1:9649:55868":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:10122:4929":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:3352:3535":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:820:8857":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"21:14541:2147":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"16:5217:5791":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"14:216:43920":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:7471:5534":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:8410:3692":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"17:9948:45626":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:3559:2795":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:4000:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:3275:4556":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:11393:4944":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:51685:4747":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:10451:4564":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:9131:45614":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:11142:45631":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:3368:3540":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:49419:4957":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"14:231:5155":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12512:50514":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"21:13669:68":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"21:10422:1671":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"17:12731:50595":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"13:120:43866":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:5941:5604":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:24090:5014":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:7184:5847":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"18:645:6001":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"21:591:2048":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"21:12126:2061":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"16:4903:44646":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:32524:60058":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:5408:5121":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:23001:4156":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:46743:2131":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:13452:51646":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"21:5885:1655":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"2:24290:37460":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:3007:5801":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:9240:5871":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"21:10016:3755":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"5:8295:5233":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:11381:46026":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:2314:5945":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"12:1682:5456":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:601:38441":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"21:18568:2325":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"1:15989:1870":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:900:4372":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"12:815:4228":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:6949:5846":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:9826:5892":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"21:15095:2157":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"21:4203:63962":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"2:13930:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:3314:5788":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:3166:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"30:853:142":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:8930:2184":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:4474:41490":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:22731:59583":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:13233:51208":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:47129:2182":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"21:18820:2400":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"2:24238:4866":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:521:38432":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13331:51280":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"21:11467:2062":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"21:18066:2310":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"1:10682:8967":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:15971:54339":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:12130:50487":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"21:12662:2080":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"21:16859:2177":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"5:4643:61845":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:32624:60056":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"2:2967:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:53007:4737":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:51731:4735":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"20:44:1647":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"2:3440:3555":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:8556:2267":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:4493:41492":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:12770:50661":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:5288:42092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"21:1567:2078":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"21:15390:2159":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"2:50549:4182":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:10721:9987":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:13196:51165":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:53479:19781":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:46861:2144":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:9656:58234":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:11195:4198":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"16:4198:44421":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:12607:50581":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:5260:42068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"21:18548:2323":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"2:46582:5041":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:3987:41284":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"30:941:63938":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:49388:4954":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:12003:50362":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"21:11288:2059":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"2:22952:4824":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:46883:2147":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:24327:37462":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:24968:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:15012:4341":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:6214:42522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"21:16411:2178":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"1:11172:4197":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:50140:4655":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"21:10051:3753":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"6:1544:39322":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:24214:37423":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:1157:8969":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:4277:41466":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:51314:4754":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:50103:4654":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:5156:4897":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13859:51727":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"21:16552:2173":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"26:65:52777":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"6:1576:39326":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:10253:5927":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:50076:4653":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:6721:55754":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:3375:5205":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:51637:4762":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:1531:39320":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:11591:46323":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"21:9429:1657":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"21:18722:2093":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"12:2036:2760":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:50532:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:50468:2794":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:7637:5637":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:696:4367":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:24836:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:5331:42096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:15024:4342":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"21:18498:2318":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"21:17362:2080":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"12:1203:5445":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:50286:4993":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:11314:5876":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11956:45846":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"21:11613:2058":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"2:3278:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"21:10420:1675":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"9:776:5360":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"5:4515:5246":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"12:2419:4245":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"21:16999:2183":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"2:3717:3560":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"21:11991:2054":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"2:47785:2180":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:10039:45682":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:10892:2954":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:24671:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:5522:4450":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:24182:4871":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:6764:2937":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:47617:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:12027:4341":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:46914:2151":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"12:2032:2180":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:47140:32989":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:46725:4781":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:3277:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"12:843:4223":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10925:45922":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:46440:4830":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4356:41475":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"21:11808:2053":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"17:12070:50426":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"21:661:58232":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"2:2194:33563":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"14:244:43913":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:46852:4778":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:3576:43996":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"21:10421:1674":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"2:22697:59415":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"21:8152:917":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"31:195:1716":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"17:11701:46420":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"21:18007:2308":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"2:10595:59824":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:4373:41477":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:13557:51660":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:6549:5554":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:46424:4828":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"18:857:5994":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:12250:4328":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:10266:5864":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:13345:51281":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:3812:3566":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:720:59825":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:621:63949":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:11907:50309":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:5811:4142":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"21:10395:2398":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"5:432:2268":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:7212:2243":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:2433:9985":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12469:50511":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:4287:41467":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:14802:4173":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"12:432:5448":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:49702:4950":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:11573:4951":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:5293:42093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:12740:55861":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:3337:3534":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:2188:4260":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:13138:51118":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:5478:42107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:1588:39327":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:47095:32985":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:5948:5796":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:6468:5617":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:4684:2261":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"21:16083:2169":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"1:2572:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"2:46040:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:3402:5524":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:10453:4571":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:4471:2962":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:10445:45739":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:4242:41464":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"12:353:63042":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:46577:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:2543:5886":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:4116:41453":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:5498:5589":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:50165:4657":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:24019:5012":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:13202:4640":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:51437:4738":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13755:51711":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:1626:39331":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:8325:5234":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:1152:8968":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:14566:55757":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:53441:4729":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:13915:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:4081:41449":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:12196:50492":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:24803:3182":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:6579:4213":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:11115:2262":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:3966:41435":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:46020:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:6120:42516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:49445:4779":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:46484:5124":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:5455:62357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:4066:4183":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:11680:4311":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"27:574:3691":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"6:4308:41469":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12237:50495":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"12:2052:4257":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:2177:4258":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"9:0:1842":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:3384:3543":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"21:17404:2759":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"21:14918:2154":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"1:15960:8971":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:9004:45610":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:13935:55854":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:2957:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:2888:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"12:1256:4237":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:12406:50506":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"12:940:4230":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:11689:46419":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:4032:3786":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:9930:63908":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:5959:5528":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:7309:5541":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:3406:3547":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"18:0:1850":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:48969:59827":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:4467:44522":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:13794:51717":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:7754:5640":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:2330:5270":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:10304:5870":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:47666:2759":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:53655:19791":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4332:41472":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:46753:2132":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"14:250:43919":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:11890:50308":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:9365:4218":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:11166:2316":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:22712:59415":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:8250:4245":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:11664:4309":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:49398:4955":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:13529:51657":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:2926:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:1669:39334":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:539:38435":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"21:45:2008":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"18:744:63934":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:37774:4686":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:51615:4759":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:15202:4282":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:4012:41440":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:45906:2764":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:5374:5583":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10068:5864":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:53563:19787":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:46544:5128":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:12431:50508":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:1653:4226":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:6954:2499":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"8:0:1841":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"12:1121:4235":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:23141:4719":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:994:5285":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:3370:4257":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:5819:4144":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:547:5781":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:5698:5597":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4321:41471":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:12957:51056":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:593:38440":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:46813:4784":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:49648:4975":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:1488:4226":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:15955:58856":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"27:474:3701":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"17:10476:5893":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"9:692:5313":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:48129:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:7354:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:10688:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"21:17276:3435":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"17:10874:45813":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:13735:51675":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"30:965:5988":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6902:41620":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:1415:2180":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:46476:4988":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:5998:38313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:1662:39333":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12634:50583":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:1642:4236":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"21:12209:2065":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"6:1727:39340":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"30:1032:5994":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:8496:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:52865:4769":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:3051:5859":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:14111:60086":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:10443:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:13428:51644":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:6331:5461":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:8071:4538":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:3364:3537":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:6286:5462":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12620:50582":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:3366:5814":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:3920:41432":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:4775:44614":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:6717:55750":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"21:17355:2760":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"1:10399:55828":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"21:12783:2085":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"21:12402:2074":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"17:11547:46320":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"21:9795:1679":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"2:5631:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:8510:4690":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"21:16322:2164":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"21:17150:2186":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"2:5034:4890":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:48951:3692":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:4512:2959":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:47793:2759":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:11487:4164":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:6407:5615":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"30:914:63950":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:13418:4457":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:22750:59588":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:1704:39337":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:23078:4156":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:5210:42087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:46824:2039":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"21:10844:2042":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"27:495:2644":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"1:4666:2317":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:3265:5808":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:7453:61846":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:5745:5599":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"14:47:43911":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"21:9353:2181":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"17:13180:51164":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:10949:45900":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"21:10917:2037":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"2:46530:5126":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:4038:41443":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:10440:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:3882:2313":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:14584:54343":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:157:38123":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:46904:2149":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:6184:42520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:10449:58239":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:1472:4235":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:15062:54323":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:8503:2644":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:49161:5146":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"21:4468:1654":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"5:8372:5152":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:22729:59587":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"21:16755:2175":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"17:12209:50493":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:11307:55762":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"2:11587:4952":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:3169:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:4075:41448":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:3883:41429":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:13421:51641":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:51455:59639":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:5433:42104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:12015:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:6643:38390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"21:10231:2613":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"1:10730:2128":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"2:50302:5001":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:6159:5540":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:53319:4726":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:46763:2133":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5366:42097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:5488:42108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:69:5185":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:4607:2181":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:3431:3553":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:8861:55821":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:6099:5607":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"18:668:6003":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"21:9874:2160":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"17:12674:50586":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"25:0:1656":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"6:1740:39341":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"21:18385:4018":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"16:2937:5822":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:23025:4813":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:50314:4994":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:12557:50517":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:4716:44603":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"18:169:52117":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:51829:4727":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"21:9218:2937":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"17:10988:45897":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"25:17:1657":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"16:4599:44582":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:6135:42518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:5669:4172":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:6075:5537":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:6883:4165":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:3269:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:12117:50486":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:6630:5834":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"21:67:1673":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"6:1567:39325":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:12738:4401":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:9275:43990":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11754:46539":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"21:17504:2247":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"2:23237:14251":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:6591:2035":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11031:45628":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10240:5924":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:28180:4694":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:4748:2945":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"27:0:1677":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"17:13404:51640":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:11305:45635":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"21:11747:2057":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"14:56:46036":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:11103:2260":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:5303:5579":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:527:38433":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:7063:5627":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"18:774:2156":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"18:820:5991":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:49863:4985":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13129:51117":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:12282:50498":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:10166:45695":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"21:12196:2064":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"1:8402:4391":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:23922:4716":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:4942:44661":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:7814:4344":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"21:17395:2180":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"2:48961:59818":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:49580:2948":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"21:11155:150":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"16:3743:44038":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"21:18768:63963":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"2:49834:2316":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:6812:4162":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"18:651:5998":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4386:41479":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:52005:59638":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"21:168:693":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"16:7323:5559":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"17:10136:45624":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:4402:41481":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:3746:3564":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11769:46542":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:4110:41452":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:7817:4346":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"28:41:2180":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"2:14390:4293":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:12240:3753":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:7355:5538":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:13037:51111":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"21:12261:2068":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"2:46842:2143":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"18:790:5988":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"12:2040:2243":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:5326:5580":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:10104:5971":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:7247:5571":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:4526:41495":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"21:13070:2129":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"20:194:3005":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"16:5668:5595":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"2:46563:4832":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"21:2156:1651":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"6:3972:41436":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:22684:4686":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:3516:2265":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:11282:45634":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:3648:2309":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:23230:4156":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:6104:4452":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4055:41445":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:10678:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"21:15458:2161":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"18:896:5997":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"21:11869:2052":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"6:6034:12365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5974:38354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:48650:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:50011:4651":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"30:986:5990":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"21:599:2664":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"21:17041:187":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"17:9160:5934":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:51140:59637":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:15993:1873":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:51206:4753":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"21:69:2010":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"16:7369:5539":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:8849:5931":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:10082:5969":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"18:729:63937":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:7810:2532":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:3729:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"12:2253:4234":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:4509:41493":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:15081:4275":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:9988:45679":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:1428:2759":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:50306:4999":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:513:38431":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:7308:55802":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:7699:4338":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:5547:41344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"27:598:3734":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"2:3347:3536":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"21:9721:1666":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"6:612:38443":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"15:230:5464":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"10:0:1843":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:12731:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:4218:41462":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"29:42:1664":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"2:11311:2948":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:11085:5937":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:24356:37461":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:6954:41627":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"18:837:4643":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:3172:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:5757:4138":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:4362:41476":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:5788:61846":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:4740:4713":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:2751:4179":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:49566:2946":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:374:5214":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:7463:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"12:777:2760":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:5460:5588":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:4732:58811":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:10455:4572":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:1607:2759":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"14:11:43911":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:52321:4748":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:6089:5606":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:88:38057":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:51230:4745":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:607:45606":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:12226:4477":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:11457:46036":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"12:2398:60208":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6490:5618":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:10093:5970":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"12:856:4224":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:7671:4336":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:15036:54336":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:13612:51671":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:626:38445":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"21:14028:2037":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"17:10340:5946":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:14571:4149":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"14:194:43912":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:542:5511":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:14561:55767":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:2183:4259":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"21:16140:2166":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"17:13247:51210":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:4215:2243":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:11369:4445":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:6433:5616":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:9793:58238":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"5:4306:2759":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:7264:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:10851:45815":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:10824:4401":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:13961:51762":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:3279:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:9916:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:1195:60809":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:5833:2130":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:7896:4788":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:16014:1892":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"18:811:5990":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"30:698:5999":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"30:976:5989":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:9636:45620":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"21:687:1649":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"2:23276:4156":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"21:12222:2066":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"16:5427:5586":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:9407:2636":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:46610:5043":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:49471:4959":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"21:10475:2036":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"2:51354:59631":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"21:10074:3752":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"2:23287:4719":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:634:38446":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:47111:32987":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:6881:4152":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:6688:42888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:38993:4606":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:13306:51278":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:9466:45619":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"21:7692:2249":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:46062:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:12105:4964":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:11945:45845":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:7025:5529":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:14278:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"27:21:64039":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"1:2793:4180":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"21:14493:2146":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"12:928:4226":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4346:41474":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:12298:4363":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:11671:46363":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"21:15451:2162":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"2:45933:2796":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"30:1012:4643":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:2456:6580":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:13840:51721":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:4510:2958":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:47835:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:2866:4539":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"9:749:5315":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"21:17005:2184":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"21:9999:3756":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"16:4689:44600":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:3417:3550":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:51783:4742":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:3194:4402":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:47120:2181":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:52659:4749":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:51474:4723":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:2269:4700":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:11822:46558":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"21:17437:2244":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"21:17627:211":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"2:11504:4947":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:294:63909":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"21:18789:63964":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"21:18102:2128":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"21:18631:2328":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"1:1507:4230":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:1912:39478":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:3770:44041":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:6016:42513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:15999:1877":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:48930:4625":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"9:469:43291":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:14:1958":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:50294:4998":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"28:37:2760":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"2:10459:4573":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:6459:4162":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:7849:61870":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:49165:5145":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:6809:4176":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"21:15735:2052":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"30:0:1850":{"crate_id":30,"path":["memchr"],"kind":"module"},"21:602:2049":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"1:16005:1883":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"21:18516:2320":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"6:1621:39330":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"27:467:5260":{"crate_id":27,"path":["futures_channel","mpsc","queue","Node"],"kind":"struct"},"2:6514:2135":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"22:7:1670":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"1:6221:4461":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"21:11191:2059":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"6:5378:42098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:11622:4308":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:23918:4156":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"21:17420:2242":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"6:4028:41442":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:11354:5874":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10028:45681":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:12482:50512":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4230:41463":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"21:18151:2242":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"6:4485:41491":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:9064:45612":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"21:43:1013":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"17:9716:63924":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:9326:5872":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"21:15193:63974":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"12:466:63052":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"21:13346:2133":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"5:8106:5161":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:2292:4705":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:12117:2180":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:8383:5153":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:8278:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:4446:41487":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:783:8857":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"15:269:5469":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"21:6790:63960":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"2:25370:4879":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:51160:59635":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:5204:42086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:4270:4463":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"27:394:202":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"17:12921:51055":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:50476:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"21:17413:2760":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"5:4443:2180":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"24:407:3447":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"2:5101:4896":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:9031:2762":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:10788:45811":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:5721:5598":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:782:2156":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:13472:51648":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"9:1020:5380":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"29:0:1660":{"crate_id":29,"path":["futures_io"],"kind":"module"},"2:11545:4949":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:618:38444":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:10422:45738":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:2861:5798":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:13873:51745":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:8947:4490":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"17:10187:45694":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8049:4391":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"27:460:3736":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"2:48922:59837":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:11532:4297":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:4425:41484":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"21:11686:2051":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"17:9431:45618":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"21:13415:2134":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"17:9920:45625":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4208:41461":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:3427:3552":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:5311:42095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"21:9513:2160":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"6:4088:41450":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"21:18392:2315":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"6:4127:41454":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:46712:2128":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:46138:3561":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:37750:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:12383:50505":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13094:51113":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"20:122:4156":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"21:7054:58235":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"16:6679:5838":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:5536:2675":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:48680:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:46084:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:7110:5631":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"21:16075:2170":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"1:11261:4203":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"16:7121:5632":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:8712:4472":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"21:15810:2038":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"1:12078:55803":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"21:988:1650":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"2:49802:4982":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:5605:4822":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"15:248:5465":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:6931:41624":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:13481:51649":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:50519:2379":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:52399:4736":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"27:509:202":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"6:6153:42519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:3525:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:1558:39324":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:10859:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:11514:46312":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:12157:50489":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:53403:4764":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:6114:42515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12573:50518":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:13323:51279":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:3494:43994":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:53117:4757":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:11094:1657":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"21:13791:2156":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"1:12009:4339":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:9873:45624":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:11002:45924":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:3396:3545":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:580:3880":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:12205:59840":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:51585:4755":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:9085:4331":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:5887:5786":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:57736:59816":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"12:379:5450":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:46145:4185":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:6873:5046":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:6914:41622":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:1674:4228":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"21:14970:2155":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"2:13427:37709":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"18:712:4686":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:10962:45899":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:4394:4428":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:4061:41446":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:3362:4259":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11603:46358":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"21:17335:3010":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"2:49598:4946":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"9:1075:5381":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:1132:4186":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:3686:44005":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"30:895:59825":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:46454:5129":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:46501:4194":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:7702:5547":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:46172:4802":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:7826:4801":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:5649:5594":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:3044:60954":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:4080:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:11563:46321":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:6057:39287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:6504:5619":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:50154:4656":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13763:51712":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:10503:5894":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:3561:2307":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:53365:4744":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:2508:4603":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:46734:4783":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:51252:4733":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:7620:5190":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:12072:4963":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:10725:5277":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:12348:50503":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"21:18835:2399":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"17:13584:51663":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:3077:5860":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:10846:4150":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:11146:2149":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:4392:41480":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:46657:10606":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:12125:4268":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:4439:44518":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:10660:45844":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:49319:4948":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:24311:37451":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:1551:39323":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:0:1849":{"crate_id":17,"path":["object"],"kind":"module"},"21:10614:2044":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"2:3310:2264":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:11514:12369":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:10900:2313":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"18:152:52116":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:1091:61846":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:47877:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:4005:41439":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:50343:4365":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"17:12170:50490":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"21:18737:2095":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"2:49748:4979":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:5566:5591":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:15220:4289":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:4400:4430":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:1501:4229":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:5348:5581":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:5584:8972":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:8543:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:5426:42103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:53525:19785":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:5362:5582":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"30:170:52117":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:24389:5030":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:14798:9987":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:11968:50315":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:7139:12368":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"21:18862:2396":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:9836:63926":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:8355:60864":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"6:6896:41619":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:5685:5596":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11937:45847":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"21:18580:2149":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"17:12758:50658":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"21:18658:3751":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"21:15144:2158":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"1:11363:4091":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:3175:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:2777:5273":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:9883:63923":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"21:15467:2045":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"6:6979:43074":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:15316:4205":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"21:10782:2040":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"17:10516:45741":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"12:183:5451":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:3155:5803":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"21:6302:2067":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"21:12053:2056":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"1:16007:1885":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:48003:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"21:18377:2246":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"16:6907:5624":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:3200:2296":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:13522:51656":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"24:380:64011":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"17:9706:45621":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:5880:4507":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"6:3877:41428":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:50322:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"21:16010:2058":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"21:16807:2176":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"2:49960:4642":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:6774:59788":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:10819:4217":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:4148:41457":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:47801:2760":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"21:15935:2054":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"1:8668:4471":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"12:1666:5455":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:3488:4225":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:50028:4652":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:13782:4348":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"21:97:1676":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"5:8176:5165":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:2883:5817":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10801:5961":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"27:487:3682":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"21:10032:3754":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"21:17131:2185":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"1:15995:1875":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"12:895:5435":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:4157:5965":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"24:15:3007":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"21:11238:2388":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"17:13595:51669":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13361:51610":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:6856:43047":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"21:16990:2182":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"21:10511:2039":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"6:4434:41485":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:4743:44606":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:16009:1887":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:13708:51673":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:10698:4239":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:5998:5556":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:15459:28367":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:5229:42089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:47810:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:32424:3526":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"26:0:1991":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"0:0:1744":{"crate_id":0,"path":["futures"],"kind":"module"},"6:161:38124":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:12543:50516":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"30:949:2156":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"21:18507:2319":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"5:8138:5287":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4440:41486":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"21:13021:2128":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"17:10394:5942":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:661:6002":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:24737:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:3129:5812":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:46397:4194":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:48702:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"9:1056:5373":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"21:17865:2252":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"2:47742:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:49500:4962":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:11221:4201":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"17:10831:5892":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"21:16274:2059":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"1:16008:1886":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:1235:5269":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:13232:4639":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:15987:1868":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:5398:42100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:1721:39339":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:6027:42514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:13278:4647":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:5257:43991":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:10705:9980":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:6012:5535":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:10571:5964":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:3759:2180":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:7415:5558":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12527:50515":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"21:12998:2090":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"31:173:1711":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"17:11653:46362":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13352:51293":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:11354:4943":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:46781:59678":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:9409:2635":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:9035:4537":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"21:42:1013":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"2:52209:4760":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:607:38442":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:4434:2961":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:15173:4280":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:2218:5207":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:11168:45632":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:586:38439":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:5390:42099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"30:843:6003":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:52445:4740":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:5030:4097":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:25001:5017":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:3177:5804":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"21:14249:2138":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"27:188:3689":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"21:11409:2060":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"1:1524:4232":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:1518:4231":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:12943:4977":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4464:41489":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:11136:2128":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:13975:51796":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"9:963:5378":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"21:12190:187":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"27:502:3683":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:8121:5286":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:11582:3692":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:3478:5809":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4532:41496":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:14929:58232":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"21:14103:2039":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"1:16003:1881":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:11922:50310":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:0:1848":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"21:13730:3091":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"6:4098:41451":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:46772:2134":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"31:190:1715":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"2:13141:4316":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:4639:2937":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:3648:3559":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:23824:59418":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:9259:43991":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:48914:4248":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"18:801:5989":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"21:4218:63968":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","InnerWaker"],"kind":"struct"},"17:9087:45613":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:14314:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:49854:4984":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:46537:5127":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:15376:4444":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:5149:42040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:6080:39261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:3581:3557":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"22:0:1989":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"1:12063:55760":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"2:3423:3551":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:46594:5042":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"13:232:63058":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:12673:5104":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:4965:4115":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:46464:5130":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:10558:45840":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:9755:4438":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:13899:51752":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:47919:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:16001:1879":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:49982:4645":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:49730:4978":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6050:5605":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:5415:2937":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:681:45607":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:49844:4983":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:6717:5623":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"30:919:63934":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"18:739:63950":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:6937:41625":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:1635:4223":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:12302:50499":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:49408:4956":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:5165:4584":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:3740:3562":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:13281:51275":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:52085:4768":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4256:41465":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:6707:4139":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:49550:4969":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:11466:4946":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:10598:45842":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:8591:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:5567:42136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:2397:9974":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:11073:4156":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:3325:4407":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:4495:44526":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:14041:2067":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:3492:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:11674:2180":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:51853:4728":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"21:18624:2327":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"21:4389:2160":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"1:10979:2259":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"7:85:43173":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:46507:5125":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:9796:63919":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:9661:55867":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"5:3772:2759":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:6026:5533":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:4351:44502":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:13073:51112":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:6341:4462":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:12279:4362":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"30:1060:5996":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:1457:4236":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:10643:45825":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"21:16682:2172":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"1:10884:4424":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:16013:1891":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"21:18159:106":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"21:18441:2316":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"6:5982:39260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:56396:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3734:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13463:51647":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:9489:58166":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:8311:4391":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:2458:9992":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:47683:5046":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:4573:44580":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"21:13539:2035":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"2:46179:4583":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:2397:2797":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:46893:4782":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"21:14796:2042":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"1:11411:4197":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:12746:45635":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:1733:4456":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:5008:4195":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"12:399:5449":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:13721:51674":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:6482:5831":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:5178:42084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:1843:61846":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:4975:44670":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"26:55:52776":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"17:11725:46530":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:10876:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:8309:5042":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11418:4511":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"21:6654:2188":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"2:47658:2180":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:56409:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:6925:41623":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:16004:1882":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:49897:4988":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:48045:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:11559:4950":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:13369:51611":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:10587:4156":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"31:0:1708":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"6:1712:39338":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:2905:5799":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:2162:2243":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:12041:4342":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:6665:42886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:48398:4572":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:3199:5805":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:12260:4275":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:1149:8966":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:6277:5612":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:5541:42135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:14030:4339":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:4516:41494":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:11244:4202":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"1:2362:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"30:708:63949":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"17:12417:50507":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:3380:3541":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"24:258:2034":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"9:809:3692":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"21:18671:63958":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"21:18574:2326":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"1:1041:4216":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:8146:60867":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11628:46360":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"18:829:5992":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:47734:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"28:50:2759":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"5:3039:60951":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:16000:1878":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:10614:4390":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"12:2269:4235":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:47102:2184":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:56448:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:46667:10605":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:3839:61846":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:7131:5633":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:11494:46252":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:49872:4986":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:5974:4512":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"21:10428:2035":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"18:611:5999":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:11286:2759":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:15397:4450":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"30:812:2156":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:2187:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:11278:4295":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"5:3341:5204":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"21:18726:2092":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"1:7954:55866":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"16:7868:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:9206:45615":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"21:1312:2067":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"16:6342:5614":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:11431:4945":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:49888:4194":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:3896:41430":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:51807:4724":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"12:971:4232":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:1446:4223":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:6250:42525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:15118:4350":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:48641:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:4179:41459":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:16012:1890":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:4198:41460":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:15994:1874":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:14099:58230":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:56026:4805":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:13965:2064":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12455:50510":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"21:9756:1665":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"12:2045:4225":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:12203:3687":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:5605:5592":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:6908:41621":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:8307:60170":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"5:3336:4258":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:10115:5972":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:3951:4225":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:1075:4191":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:49879:4987":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"21:13600:2136":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"1:1482:4225":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"21:12654:2079":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"17:13539:51658":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"21:12738:2084":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"1:12245:4484":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:7295:5543":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10058:5975":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:14227:2371":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:11784:46543":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:49997:4648":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:7111:61854":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:11640:46361":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"21:16483:2168":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"2:46403:30828":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:7782:5545":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:3351:4417":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:57757:59835":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"21:18805:2612":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"16:5273:43990":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:6243:42524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"12:1183:5444":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:3247:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:11068:5881":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"21:6995:3013":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"12:114:63056":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:8130:2243":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:3775:3565":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:3907:41431":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"21:9738:1668":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"16:6595:5551":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:14620:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"18:866:5995":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"20:0:1646":{"crate_id":20,"path":["futures_core"],"kind":"module"},"5:6257:5190":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:11433:46035":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:1600:39328":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"30:879:2156":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:49379:2154":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10364:5944":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12442:50509":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"20:169:1669":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"2:53616:19790":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:24935:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:24161:37435":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"5:1694:5266":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:9883:8857":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:15992:1872":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:4381:44508":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:13565:51661":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:23285:4720":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:3287:2925":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:14945:58228":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:1644:4224":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:24869:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:13655:4325":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"31:88:4092":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"12:1147:4236":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"21:18874:2402":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"1:3339:4411":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:46224:4848":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:53514:19784":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:1633:4235":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:52239:4763":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:10390:5891":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:9291:45598":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:9196:55821":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:13271:51213":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"0:116:1553":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"1:15990:1871":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:7721:5549":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"21:11114:2046":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"9:686:5311":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:47674:2760":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:11013:45627":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:3372:3544":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:53459:19779":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:6381:5550":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"14:189:43911":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"30:904:63937":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:7379:2760":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:50175:4658":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:53499:19783":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:15739:55961":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"21:11349:2388":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"17:13660:51672":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:7642:5191":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:14546:4177":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:49784:4981":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:7684:5548":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"21:13004:2091":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"20:39:4156":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"6:1526:39319":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:51415:4734":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:3103:5813":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:52475:4743":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:56422:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3396:4260":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:8154:4391":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"21:15657:2053":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"9:234:5338":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:6981:4151":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:9676:63911":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:4628:44587":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"21:17695:2250":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"16:6931:5845":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:56435:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11087:2183":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:24770:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:13432:37710":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"2:2283:4704":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:6518:5552":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"27:565:3690":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"5:8197:2760":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"21:12184:2063":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"6:4416:41483":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4315:41470":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"3:321:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:1011:2180":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"11:54:5433":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"12:869:2243":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:7079:5628":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:2733:5774":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"21:12909:2087":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"16:7281:5542":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:1748:39342":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"21:10977:2041":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"5:3970:61846":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:6719:55752":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"9:157:5330":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"30:153:52116":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"20:127:1653":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"2:10400:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:12769:55825":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"16:4871:44638":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"21:17346:2180":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"1:10969:3783":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:1939:4225":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:11130:45630":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:53593:19789":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"27:593:3697":{"crate_id":27,"path":["futures_channel","mpsc","SenderTask"],"kind":"struct"},"2:46523:4987":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:3040:60851":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:9408:4359":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"9:603:43395":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:4397:4429":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:6190:5611":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:4411:44514":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:6943:41626":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:32464:5065":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"1:9788:58225":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"16:5289:5536":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"21:1845:2088":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"16:7090:5629":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:4454:41488":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"21:17326:2759":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"17:9361:45616":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"21:12840:2086":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"0:142:1030":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"17:13908:51753":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"21:13971:2036":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"5:3038:5151":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"21:11025:2043":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"6:3981:41437":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:5516:5779":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:14232:2960":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"21:12300:201":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"1:4432:2960":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:11443:4464":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"30:1024:5993":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13747:51710":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:49556:4970":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13257:51211":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:2484:45727":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:10388:45607":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"21:18369:2314":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"2:47725:37670":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:38930:2906":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"21:15511:2050":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"17:12496:50513":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:10829:4149":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:8455:5186":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:6310:5613":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:1438:2760":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:1634:39332":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:49538:4815":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:8760:4481":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:10461:4574":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:1441:4234":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:11579:46322":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"21:18732:3993":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"12:1784:63045":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:12085:54332":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"19:117:63951":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:7997:3701":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"6:4379:41478":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:7949:2663":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"21:15301:3090":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"2:3103:4156":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"30:995:5991":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"9:41:5363":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:49458:4958":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:2310:5292":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:11159:2948":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:46412:4827":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"14:0:1846":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"21:7017:2189":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"2:13221:4643":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:51982:59636":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:3376:3542":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"30:1041:5995":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12183:50491":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:50458:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"21:14395:2139":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"16:7379:5560":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"12:2412:63047":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"21:10732:2038":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"12:2392:63049":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"28:203:2673":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"24:203:2033":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"12:1103:4234":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:6557:5620":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:3933:41433":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:6173:5610":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:4752:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:3658:58223":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"30:957:2156":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"29:49:1661":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"2:4783:4602":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:5216:42088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:3682:2950":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:1537:39321":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:11985:50318":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:3243:5807":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:11810:46557":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:11327:54308":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:46687:4779":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:13147:51119":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:3221:5806":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"18:136:52115":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:3281:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:3505:1985":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:12716:50594":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:51539:4767":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:15338:4443":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"21:17047:2068":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"16:7200:5555":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"21:15579:2051":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"2:12920:4976":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"21:7282:1658":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"1:5807:4141":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"21:16981:2181":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"21:11930:2055":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"1:6481:4159":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"13:0:1839":{"crate_id":13,"path":["std_detect"],"kind":"module"},"23:0:1990":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"21:9751:1667":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"1:12171:3689":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:5837:2074":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"30:836:6002":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:11461:4175":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:4803:44618":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:1486:4237":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:9740:4437":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"21:17922:2306":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"5:8262:4246":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:8432:5260":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"17:2512:5943":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:5952:4510":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:22988:4695":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:16011:1889":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:3358:3538":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:12959:4980":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:1606:39329":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:4378:2760":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"30:887:4686":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:24250:4867":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:3323:4406":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:4135:41455":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:1017:4391":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:8902:45608":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:9616:55850":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"21:17493:2246":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"16:5639:5593":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"17:13602:51670":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:13917:51754":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"15:0:1847":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:8547:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:50310:5000":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:11374:4446":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:50318:4995":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5186:42085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:47649:2758":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:5176:44847":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:5855:5601":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:2813:5816":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:14627:2260":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:5301:42094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:14596:4403":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:3048:60953":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"21:16960:3271":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"2:32472:60007":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"16:2792:5523":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"21:17316:3009":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"2:32820:4681":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"12:979:4233":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:12994:4943":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:6060:5577":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:11212:5935":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:13887:51751":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:6007:42512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:12093:50427":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"9:996:5379":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"29:47:1663":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"17:299:63912":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:6691:5622":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:5530:5590":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:1236:45696":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:10610:45843":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:7741:5639":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"21:17223:2187":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"1:10474:58235":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"27:533:3687":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"1:15468:55730":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:5439:42105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"21:8861:2183":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"1:5797:4140":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:9033:45611":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:4300:2964":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"1:8661:4469":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:7529:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:12360:50504":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:1764:39343":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:10667:8964":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:5085:4296":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"17:11713:46529":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:50298:4997":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:0:1331":{"crate_id":1,"path":["std"],"kind":"module"},"2:48087:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:5875:61886":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:50290:4996":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"20:27:1979":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"1:8215:3701":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"17:9756:63925":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:51385:4746":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:14217:1986":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"21:18527:2321":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"21:13258:2131":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"2:24273:37459":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:13953:51760":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:2981:5811":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"21:14019:2148":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"21:16972:2180":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"17:11234:5933":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:6688:5217":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"21:14160:2135":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"16:7768:5544":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:4599:61852":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:13227:4644":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:4699:61845":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"21:11107:2047":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"2:46833:4786":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:4271:44470":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"21:11071:2045":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"2:10728:4624":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:46165:4801":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"27:606:3735":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"1:10639:4098":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:10223:5885":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:53195:4741":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:46703:4780":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:9183:5880":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:2166:4225":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:5039:4891":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:53540:19786":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:565:38437":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:15110:55735":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:13583:55578":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:4008:45814":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:10836:4403":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:6130:5608":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:46795:2036":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"21:16209:2167":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"1:2594:55820":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"17:10147:45697":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:13155:51161":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:48171:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:3461:5810":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:3894:5261":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:3401:3546":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:1311:5976":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"9:927:43285":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:9529:4641":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13495:51651":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:3342:3539":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:8929:45609":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13515:51655":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:2219:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:3908:44155":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"20:110:1980":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"31:166:1714":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"2:24265:37441":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:8160:2760":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:10586:45841":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"9:900:43319":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:56383:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10464:5888":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:48255:5052":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"12:1238:5446":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:894:4371":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:12015:50418":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:6671:42887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:2839:5797":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:13564:9985":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"21:9960:162":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"6:6229:42523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:8954:5882":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12318:50500":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:15483:5473":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:12139:3686":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13167:51163":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:9161:4327":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5405:42101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:46924:2153":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:48738:4569":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"18:754:63943":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:4723:2328":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"27:521:3686":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"6:4538:41497":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:571:38438":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:4316:44491":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:5889:61881":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:2921:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:12660:50585":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13377:51638":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"31:206:1712":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"2:46804:2037":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"21:12990:2089":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"17:11797:46544":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:48939:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"30:137:52115":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:3329:2180":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:13440:51645":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:5982:4513":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:3340:5789":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"28:220:4234":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"1:2159:2760":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:4840:44631":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:2769:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"11:46:63041":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:5419:42102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6268:42526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"21:15022:2144":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"12:2059:4258":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:11530:46313":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:50561:4181":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:1651:4237":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:5741:4136":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:7792:5574":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:3411:3549":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:11082:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"30:820:6001":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"30:1071:5997":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:5582:42137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:3178:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:7277:55802":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:672:38475":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:12158:4270":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"30:1004:5992":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"28:211:4236":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"17:9646:63914":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:1530:4233":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:7155:5635":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:4296:41468":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:6475:2243":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:48617:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:11423:4514":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"7:0:1481":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:15988:1869":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"21:14313:2141":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"6:3993:41438":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:1215:5268":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:4741:2324":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"21:18489:2317":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"24:0:1743":{"crate_id":24,"path":["futures_task"],"kind":"module"},"21:17482:2245":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"17:12585:50532":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"20:96:1652":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"17:11474:46251":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:5398:4444":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:3389:3548":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:5247:42091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:12883:4973":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:49370:4953":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:0:1840":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:16010:1888":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:7238:5557":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"12:0:1845":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:48668:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"21:12573:2077":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"12:1703:5457":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4048:41444":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"30:929:63943":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:12646:50584":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:2027:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:45980:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"21:14735:2150":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"6:1694:39336":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:8338:5235":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:49480:4960":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:24902:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:13029:51109":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:9746:45622":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:9579:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:13573:51662":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:14238:2958":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"12:2404:63051":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:2863:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:9517:2946":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:5185:2674":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:3029:5802":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:5902:5602":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:10937:45923":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:22752:59585":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"24:237:2032":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"17:11181:45633":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:4728:4712":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4020:41441":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:12262:50497":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"21:16920:2174":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"12:764:2759":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"11:0:1844":{"crate_id":11,"path":["adler"],"kind":"module"},"1:5395:4443":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"21:18341:2313":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"21:18907:2989":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"21:17637:2187":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"21:14662:2151":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"2:10127:4930":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:50511:2378":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:1680:39335":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:4473:2963":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:23618:14270":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:15044:4362":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:10449:4570":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"21:14444:2140":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"2:53257:4761":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"31:115:1709":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"2:47716:5048":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"21:17431:2243":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"1:11429:4455":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"21:13181:2130":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"17:10489:45740":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:13293:51277":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"21:18537:2322":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"6:545:38436":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:11153:2946":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:533:38434":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:7659:5638":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:10588:4368":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"21:17086:2079":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"2:32284:5075":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:1618:2760":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5274:42069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:14815:4343":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:10457:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"21:17954:2307":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"21:18649:2330":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"17:9561:5883":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:46106:3558":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:14313:4098":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:9587:63921":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:6003:4516":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:4242:61846":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:53468:19780":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:15996:1876":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"21:14265:2143":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"1:8995:4357":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:2200:61851":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"21:14354:2142":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"1:12055:4343":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:11256:45597":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:4051:4184":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:5990:4515":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:7449:5546":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:5923:5603":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:10435:5890":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:7033:4785":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12687:50587":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:5869:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"21:12504:2076":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"1:7637:4334":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:24377:5031":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10975:45898":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:48635:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"6:6967:43073":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:13938:51755":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"29:39:1662":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"21:14257:2145":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"16:3297:5861":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"21:10566:2035":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"6:4067:41447":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"12:933:4229":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13507:51654":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:4340:41473":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11335:5875":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:10211:45699":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:15188:4281":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:8616:2266":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:9786:45623":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"12:2072:4260":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:8825:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:8001:4776":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:3758:4699":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:1459:4224":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:5238:43993":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:5111:4583":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:53488:19782":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"12:162:5447":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:10447:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:48384:4570":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:10048:45698":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:8510:4269":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:7754:4340":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:12700:50593":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:11017:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:49684:4949":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:14235:2962":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"21:11539:2050":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"27:550:3688":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"1:12255:4329":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"21:13480:2035":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"17:10127:5892":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:48754:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:6533:5829":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:6604:5621":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:11742:46538":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"21:17778:2251":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"1:14637:54351":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"21:6924:3011":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"21:15857:2055":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"12:787:4227":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:48391:4571":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:1190:8970":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"21:595:2663":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"21:15199:63971":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"1:12401:6580":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:16006:1884":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"21:16463:2179":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"2:23613:4721":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"21:18559:2324":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"18:849:5993":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:11465:12365":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:45996:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:9539:5932":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:12187:4271":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:9911:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:53578:19788":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:23812:4220":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:10974:3784":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:6858:5842":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"28:71:64056":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"2:23088:4221":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"28:0:1992":{"crate_id":28,"path":["slab"],"kind":"module"},"2:13212:4641":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"}},"external_crates":{"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"slab","html_root_url":null},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"futures_util","html_root_url":null},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"pin_project_lite","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"futures_macro","html_root_url":null},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"29":{"name":"futures_io","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"futures_sink","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"31":{"name":"futures_executor","html_root_url":null},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null}},"format_version":18}