{"root":"0:0:1742","crate_version":"0.3.21","includes_private":false,"index":{"2:22804:4665":{"id":"2:22804:4665","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22805:4651","2:22806:60058","2:22807:1227","2:22808:1228","2:22809:41158","2:22810:60121","2:22811:60122","2:22812:60123","2:22813:60124","2:22814:60125","2:22815:60059","2:22816:60060","2:22817:60061","2:22818:60062","2:22819:60063","2:22820:60064","2:22821:60065"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,65],"end":[195,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:168:1712","glob":false}},"2:9259:2632":{"id":"2:9259:2632","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13419:54718":{"id":"2:13419:54718","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8448:120":{"id":"2:8448:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8449:58703","2:8450:58704","2:8451:58705","2:8452:58706","2:8456:58707","2:8459:5952"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4748:2940":{"id":"1:4748:2940","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4749:2285","1:4750:53987","1:4751:58922","1:4753:2294","1:4754:2291","1:4756:2296","1:4757:2287"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4666:2313","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6459:4132":{"id":"1:6459:4132","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6460:57146","1:6461:38270","1:6462:57147","1:6463:57148","1:6464:57149","1:6465:57150"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13428:304":{"id":"2:13428:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:16021:1882","str::as_mut_ptr":"1:16010:1873"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:171":{"id":"0:171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[242,28],"end":[242,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::FutureExt","name":"_","id":"21:690:1647","glob":false}},"2:13423:60921":{"id":"2:13423:60921","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:16010:1873"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,23],"end":[131,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::join","name":"join","id":"21:10272:1670","glob":false}},"1:4741:2320":{"id":"1:4741:2320","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4742:2295","1:4743:38122","1:4744:57316","1:4745:4016"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10575:4199":{"id":"2:10575:4199","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10576:146","2:10577:31538","2:10578:56750"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[103,39],"end":[103,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:44:1645","glob":false}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,60],"end":[250,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:42:1662","glob":false}},"24:18:3001":{"id":"24:18:3001","crate_id":24,"name":"LocalSpawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:19:4098","24:20:4099"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3269:211":{"id":"2:3269:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12501:5106":{"id":"2:12501:5106","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12502:2754","2:12503:60747"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9343:4123":{"id":"1:9343:4123","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9344:57393","1:9345:57394","1:9346:57395","1:9347:57396","1:9348:57397","1:9349:37708","1:9350:57392"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1340","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:61578","5:6085:2944","5:6088:61579","5:6091:61580","5:6103:61581","5:6104:61582","5:6105:2118","5:6106:55853","5:6107:55854"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3417:3539":{"id":"2:3417:3539","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3419:181","2:3420:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:9646:1666":{"id":"21:9646:1666","crate_id":21,"name":"AsyncWriteExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9647:2231","21:9648:2227","21:9649:1956","21:9651:2299","21:9653:2300","21:9655:2286"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"29:42:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:127":{"id":"0:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,42],"end":[195,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:208:1710","glob":false}},"25:17:1655":{"id":"25:17:1655","crate_id":25,"name":"Sink","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["25:19:127","25:20:14461","25:21:52898","25:22:52899","25:23:52900"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10305:4575":{"id":"2:10305:4575","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10306:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3734:137":{"id":"2:3734:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3736:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:42:1662":{"id":"29:42:1662","crate_id":29,"name":"AsyncWrite","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:43:54037","29:44:54038","29:45:52899","29:46:52900"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3358:3527":{"id":"2:3358:3527","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3360:181","2:3361:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6787:4163":{"id":"1:6787:4163","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6788:54647","1:6789:56534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:4450:1652","glob":false}},"21:9629:1664":{"id":"21:9629:1664","crate_id":21,"name":"AsyncReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9630:2282","21:9632:2288","21:9634:2289","21:9636:2290","21:9638:2292","21:9640:2293","21:9642:2296","21:9643:2297"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"29:39:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[256,30],"end":[256,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:9629:1664","glob":false}},"20:110:1978":{"id":"20:110:1978","crate_id":20,"name":"FusedStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:111:2226"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"20:96:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream","name":"stream","id":"21:2138:1649","glob":false}},"2:23089:14214":{"id":"2:23089:14214","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23090:60016","2:23091:60017","2:23092:60018"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23082:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13503:60931":{"id":"2:13503:60931","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"1:16010:1873","prim@char":"1:16004:1868","`DoubleEndedIterator`":"2:8448:120","self::pattern":"2:13054:4508"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49630:4944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5775:4150":{"id":"1:5775:4150","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5776:56516","1:5777:56517","1:5778:56518","1:5779:56519"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13442:4970":{"id":"2:13442:4970","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:16004:1868"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49432:4934","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3406:3536":{"id":"2:3406:3536","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:181","2:3409:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3337:3523":{"id":"2:3337:3523","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3339:181","2:3340:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,68],"end":[122,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:9646:1666","glob":false}},"1:5797:4154":{"id":"1:5797:4154","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5798:54294"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8413:2265":{"id":"2:8413:2265","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8415:37706","2:8417:6183","2:8418:56686"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,49],"end":[250,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:47:1661","glob":false}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,57],"end":[119,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:42:1662","glob":false}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[242,44],"end":[242,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFutureExt","name":"_","id":"21:991:1648","glob":false}},"2:13444:2333":{"id":"2:13444:2333","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49448:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8880:2757":{"id":"2:8880:2757","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5008:4103":{"id":"1:5008:4103","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5009:2179","1:5010:56847"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10309:189":{"id":"2:10309:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10310:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10292:109":{"id":"2:10292:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10293:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3389:3537":{"id":"2:3389:3537","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:181","2:3391:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,35],"end":[119,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:39:1660","glob":false}},"2:3175:135":{"id":"2:3175:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3177:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13421:60920":{"id":"2:13421:60920","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22751:4650":{"id":"2:22751:4650","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22752:4651","2:22753:60058","2:22754:60222","2:22755:60223","2:22756:60224","2:22757:41158","2:22758:60225","2:22759:60226","2:22760:60227","2:22761:60228","2:22762:60229","2:22763:60230","2:22764:60231","2:22765:60232","2:22766:60233","2:22767:60234","2:22768:60125","2:22769:60235","2:22770:59617","2:22771:59616","2:22772:59618","2:22773:60059","2:22774:60060","2:22775:60061","2:22776:60062"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13456:54766":{"id":"2:13456:54766","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:16004:1868","self::pattern":"2:13054:4508"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,31],"end":[135,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::never","name":"never","id":"21:8119:917","glob":false}},"2:13539:54671":{"id":"2:13539:54671","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6088:61579":{"id":"5:6088:61579","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13476:60925":{"id":"2:13476:60925","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13054:4508","str::split":"1:16010:1873","str::rsplit_terminator":"1:16010:1873","prim@char":"1:16004:1868","`DoubleEndedIterator`":"2:8448:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49512:4939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:127:1651":{"id":"20:127:1651","crate_id":20,"name":"TryStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:128:175","20:129:127","20:130:52978"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"20:96:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:122:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2572:127":{"id":"1:2572:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2573:54463","1:2575:59010","1:2576:59011","1:2577:57412"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10299:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:44":{"id":"0:44","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,46],"end":[119,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:47:1661","glob":false}},"2:2967:184":{"id":"2:2967:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2969:997","2:2970:826","2:2971:792","2:2972:713","2:2973:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:7964:1657":{"id":"21:7964:1657","crate_id":21,"name":"SinkExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:7966:2236","21:7971:2237","21:7975:2911","21:7978:2912","21:7980:2238","21:7981:2227","21:7982:2229","21:7984:2231","21:7985:2234","21:7986:2230","21:7987:2235","21:7990:2913","21:7992:2914","21:7994:2915","21:7995:2916","21:7996:2917","21:7997:2918"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sink","id":"25:17:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Item"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6107:55854":{"id":"5:6107:55854","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:16010:1873"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3812:3555":{"id":"2:3812:3555","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13470:30114":{"id":"2:13470:30114","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13054:4508","prim@char":"1:16004:1868"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12846:4907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8473:2264":{"id":"2:8473:2264","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8474:793","2:8475:54718"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8602:157":{"id":"2:8602:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8603:2754","2:8604:922","2:8605:3036","2:8608:3037","2:8609:495","2:8611:3038","2:8614:3039","2:8615:3040","2:8616:3041","2:8617:2282","2:8619:2528","2:8621:3042","2:8622:3043","2:8624:841","2:8627:2521","2:8634:2507","2:8636:2508","2:8639:2506","2:8640:2529","2:8641:2518","2:8643:2519","2:8645:3044","2:8648:1308","2:8649:2297","2:8650:2517","2:8654:2515","2:8657:2513","2:8658:2523","2:8659:2533","2:8661:2524","2:8662:2270","2:8664:3045","2:8667:3046","2:8669:3047","2:8679:3048","2:8694:3049","2:8696:3050","2:8700:3051","2:8709:2512","2:8712:3052","2:8714:3053","2:8717:276","2:8724:294","2:8731:3054","2:8738:3055","2:8747:3056","2:8757:1014","2:8764:3057","2:8771:2215","2:8772:3058","2:8773:3059","2:8785:3060","2:8792:3061","2:8804:3062","2:8811:3063","2:8812:2510","2:8817:3064","2:8820:3065","2:8823:2511","2:8824:3066","2:8826:3067","2:8828:415","2:8831:3068","2:8834:997","2:8837:3069","2:8840:604","2:8843:3070","2:8846:907","2:8848:826","2:8850:792","2:8852:713","2:8854:696","2:8856:3071","2:8857:3072","2:8865:3073"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3342:3528":{"id":"2:3342:3528","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:181","2:3345:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3427:3541":{"id":"2:3427:3541","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3429:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13417":{"id":"2:13417","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12514:1340","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13418:793","2:13419:54718","2:13420:60919","2:13421:60920","2:13423:60921","2:13426:56509","2:13427:60922","2:13428:304","2:13429:54729","2:13430:54725","2:13432:54726","2:13434:54727","2:13436:54728","2:13438:4230","2:13439:60923","2:13440:54748","2:13441:54749","2:13442:4970","2:13443:4537","2:13444:2333","2:13445:30257","2:13446:30247","2:13447:2287","2:13448:60924","2:13449:30242","2:13450:54764","2:13453:54765","2:13456:54766","2:13459:3054","2:13463:5952","2:13467:2296","2:13470:30114","2:13473:54758","2:13476:60925","2:13479:60926","2:13482:54760","2:13485:54762","2:13488:60927","2:13491:60928","2:13494:1953","2:13497:60929","2:13500:60930","2:13503:60931","2:13506:60932","2:13508:60933","2:13510:60934","2:13512:60935","2:13513:60936","2:13514:60937","2:13517:60938","2:13520:12731","2:13523:54767","2:13526:60939","2:13529:60940","2:13532:60941","2:13535:4828","2:13537:5113","2:13538:54670","2:13539:54671","2:13540:54672","2:13541:60942","2:13543:4188","2:13544:60943"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[143,0],"end":[143,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_channel","name":"channel","id":"27:0:1675","glob":false}},"2:3380:3530":{"id":"2:3380:3530","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3382:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13447:2287":{"id":"2:13447:2287","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49716:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4723:2324":{"id":"1:4723:2324","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4724:1956","1:4725:2299","1:4727:3848","1:4728:2231","1:4729:2300","1:4730:3849","1:4731:3850","1:4740:2524"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13520:12731":{"id":"2:13520:12731","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13054:4508","prim@char":"1:16004:1868"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2863:97":{"id":"2:2863:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2865:1938"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3729:224":{"id":"2:3729:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3730:181","2:3731:3551","2:3732:686","2:3733:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3734:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:139":{"id":"0:139","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[196,8],"end":[196,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:197:1714","glob":false}},"2:3775:3554":{"id":"2:3775:3554","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:177":{"id":"0:177","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,4],"end":[244,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::SinkExt","name":"_","id":"21:7964:1657","glob":false}},"2:13506:60932":{"id":"2:13506:60932","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10540:146":{"id":"2:10540:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10541:652","2:10542:1956","2:10543:59069","2:10544:59070","2:10545:59071","2:10546:59072","2:10547:59073","2:10548:59074","2:10549:59075","2:10550:59076","2:10551:59077","2:10552:59078","2:10553:59079","2:10554:59080","2:10555:59081","2:10556:1533"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13538:54670":{"id":"2:13538:54670","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8367:4658":{"id":"2:8367:4658","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8369:3067"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8404:151":{"id":"2:8404:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8405:2754","2:8406:2756","2:8407:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13438:4230":{"id":"2:13438:4230","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3577:3545","str::slice_mut_unchecked":"1:16010:1873","`str`":"1:16010:1873"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:8887:4627":{"id":"2:8887:4627","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7928:4628","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[125,0],"end":[125,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_core::ready","name":"ready","id":"20:169:1667","glob":false}},"29:47:1661":{"id":"29:47:1661","crate_id":29,"name":"AsyncSeek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:48:54029"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2888:104":{"id":"2:2888:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2889:408","2:2890:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22877:4653":{"id":"2:22877:4653","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22878:4651","2:22879:1247","2:22880:1272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6685:4149":{"id":"1:6685:4149","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6686:57194","1:6687:54469","1:6688:54470","1:6689:54472","1:6690:54471","1:6691:54473","1:6692:54474","1:6693:54476","1:6694:54477","1:6695:54480","1:6696:54481","1:6697:54482","1:6698:54483","1:6699:54484","1:6700:54485","1:6701:54478","1:6702:54479"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[150,0],"end":[150,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::io","name":"io","id":"21:8121:1678","glob":false}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,38],"end":[131,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:43:1013","glob":false}},"2:10301:4581":{"id":"2:10301:4581","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10302:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3648:3548":{"id":"2:3648:3548","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3650:59562","2:3651:59563","2:3652:54764"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,31],"end":[108,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:96:1650","glob":false}},"0:142:1030":{"id":"0:142:1030","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[222,0],"end":[222,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:144","0:147","0:150","0:154","0:157","0:161","0:164","0:167","0:171","0:174","0:177","0:181","0:184","0:188","0:191","0:194","0:197","0:201","0:204","0:207","0:210"],"is_stripped":false}},"1:7795:4304":{"id":"1:7795:4304","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7796:57429"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[247,44],"end":[247,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:5869:1653","glob":false}},"2:13485:54762":{"id":"2:13485:54762","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13054:4508","prim@char":"1:16004:1868","str::splitn":"1:16010:1873"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49584:4914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:116:1553":{"id":"0:116:1553","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[154,0],"end":[154,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`LocalPool`":"31:192:1713","`block_on`":"31:117:1707"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:118","0:121","0:124","0:127","0:130","0:133","0:136","0:139"],"is_stripped":false}},"2:12993:4240":{"id":"2:12993:4240","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12994:126","2:12995:56705"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:96:1650":{"id":"20:96:1650","crate_id":20,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:97:2754","20:98:3078","20:99:3037"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6106:55853":{"id":"5:6106:55853","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:16010:1873"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13439:60923":{"id":"2:13439:60923","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3581:3546","`str`":"1:16010:1873","str::slice_unchecked":"1:16010:1873"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,18],"end":[195,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:120:1708","glob":false}},"2:13479:60926":{"id":"2:13479:60926","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"1:16010:1873","self::pattern":"2:13054:4508","prim@char":"1:16004:1868","str::split":"1:16010:1873"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49530:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3278:217":{"id":"2:3278:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13441:54749":{"id":"2:13441:54749","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:16010:1873"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13532:60941":{"id":"2:13532:60941","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:16004:1868","self::pattern":"2:13054:4508"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,21],"end":[119,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1659","glob":false}},"2:13467:2296":{"id":"2:13467:2296","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"1:16010:1873","self::pattern":"2:13054:4508","prim@char":"1:16004:1868","`DoubleEndedIterator`":"2:8448:120","str::split_whitespace":"1:16010:1873"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49462:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[247,28],"end":[247,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::StreamExt","name":"_","id":"21:4450:1652","glob":false}},"2:3104:2903":{"id":"2:3104:2903","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3103:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13491:60928":{"id":"2:13491:60928","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[256,49],"end":[256,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:9659:1665","glob":false}},"2:3516:2263":{"id":"2:3516:2263","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3517:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5833:2129":{"id":"5:5833:2129","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3401:3535":{"id":"2:3401:3535","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:181","2:3404:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13543:4188":{"id":"2:13543:4188","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:16004:1868"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49770:4189","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[256,8],"end":[256,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:9664:1663","glob":false}},"1:4666:2313":{"id":"1:4666:2313","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4667:2288","1:4668:2289","1:4670:56542","1:4671:2292","1:4672:2293","1:4673:2290","1:4674:56541","1:4676:56543","1:4677:2524","1:4678:2333","1:4679:2282","1:4681:2297"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8363:4657":{"id":"2:8363:4657","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8365:3066"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5735:4148":{"id":"1:5735:4148","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5736:54294","1:5737:54514"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3525:132":{"id":"2:3525:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3527:181","2:3528:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:27:1977":{"id":"20:27:1977","crate_id":20,"name":"FusedFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:28:2226"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13767:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,52],"end":[135,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::task","name":"task","id":"21:8009:1378","glob":false}},"2:23774:4652":{"id":"2:23774:4652","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23775:4651"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23770:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:1075:4186":{"id":"1:1075:4186","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:5130","1:1077:5113","1:1078:55853","1:1079:55854","1:1080:54670","1:1081:54671","1:1082:54672"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8883:2758":{"id":"2:8883:2758","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13526:60939":{"id":"2:13526:60939","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13054:4508","prim@char":"1:16004:1868"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"29:49:1659":{"id":"29:49:1659","crate_id":29,"name":"AsyncBufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:50:53986","29:51:53987"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"29:39:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3423:3540":{"id":"2:3423:3540","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10299:119":{"id":"2:10299:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10300:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13064:4507":{"id":"2:13064:4507","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13066:4510","2:13067:60172","2:13068:60173","2:13069:60174","2:13070:60176","2:13071:60175","2:13072:60177"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13432:54726":{"id":"2:13432:54726","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47495:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5837:2072":{"id":"5:5837:2072","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:1670"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6959:4134":{"id":"1:6959:4134","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6960:57169"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,29],"end":[131,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pending","name":"pending","id":"21:67:1671","glob":false}},"2:22940:4126":{"id":"2:22940:4126","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22930:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6105:2118":{"id":"5:6105:2118","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5741:4149":{"id":"1:5741:4149","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5742:58863","1:5743:54521","1:5744:54294","1:5745:58864","1:5746:4431","1:5747:4432","1:5748:58865","1:5749:1304","1:5750:58866","1:5751:58867","1:5752:58868","1:5753:58869","1:5754:58870","1:5755:58871","1:5756:58872","1:5757:58873"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9260:4325":{"id":"2:9260:4325","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3559:2791":{"id":"2:3559:2791","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3561:237","2:3562:206","2:3563:59868"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2921:183":{"id":"2:2921:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2923:604","2:2924:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13434:54727":{"id":"2:13434:54727","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:23470:14233":{"id":"2:23470:14233","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23471:59616","2:23472:59617","2:23473:59618"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23465:4654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5653:4180":{"id":"1:5653:4180","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5654:5888","1:5655:56509"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3172:149":{"id":"2:3172:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3174:57273"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[126,0],"end":[126,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1668","glob":false}},"2:13420:60919":{"id":"2:13420:60919","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3581:3546":{"id":"2:3581:3546","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3583:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3577:3545","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:5869:1653":{"id":"21:5869:1653","crate_id":21,"name":"TryStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:5870:2232","21:5872:2685","21:5875:2233","21:5878:292","21:5881:2688","21:5884:2689","21:5886:2690","21:5888:2597","21:5889:3214","21:5890:3051","21:5893:3219","21:5896:3220","21:5899:3223","21:5903:3045","21:5905:3218","21:5906:3215","21:5909:3216","21:5913:2381","21:5914:3050","21:5918:3217","21:5919:3221","21:5920:3222","21:5921:3225","21:5922:3224"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryStream","id":"20:127:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,42],"end":[236,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:44:1645","glob":false}},"2:8400:136":{"id":"2:8400:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8402:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2866:4671":{"id":"2:2866:4671","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:59460"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13446:30247":{"id":"2:13446:30247","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:16010:1873"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49745:4950","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10313:4585":{"id":"2:10313:4585","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10314:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3717:3549":{"id":"2:3717:3549","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3648:3548","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6084:61578":{"id":"5:6084:61578","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:5123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:5123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13497:60929":{"id":"2:13497:60929","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13054:4508","str::matches":"1:16010:1873","`DoubleEndedIterator`":"2:8448:120","prim@char":"1:16004:1868"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49684:4947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13427:60922":{"id":"2:13427:60922","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3279:106":{"id":"2:3279:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13084:4512":{"id":"2:13084:4512","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,8],"end":[195,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on","name":"block_on","id":"31:117:1707","glob":false}},"5:6091:61580":{"id":"5:6091:61580","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,32],"end":[237,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::Sink","name":"Sink","id":"25:17:1655","glob":false}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,35],"end":[195,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::enter","name":"enter","id":"31:175:1709","glob":false}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,28],"end":[236,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future","name":"future","id":"21:168:693","glob":false}},"1:5789:4152":{"id":"1:5789:4152","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5790:57186"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,23],"end":[135,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future","name":"future","id":"21:168:693","glob":false}},"2:3522:131":{"id":"2:3522:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3524:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3525:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13453:54765":{"id":"2:13453:54765","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13054:4508","prim@char":"1:16004:1868"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3347:3525":{"id":"2:3347:3525","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:181","2:3350:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13540:54672":{"id":"2:13540:54672","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3166:75":{"id":"2:3166:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,0],"end":[113,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_sink::Sink","name":"Sink","id":"25:17:1655","glob":false}},"2:3372:3533":{"id":"2:3372:3533","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:1356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13488:60927":{"id":"2:13488:60927","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3182:227":{"id":"2:3182:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3184:127","2:3185:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3281:220":{"id":"2:3281:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3431:3542":{"id":"2:3431:3542","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,40],"end":[122,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:9629:1664","glob":false}},"2:13517:60938":{"id":"2:13517:60938","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13054:4508","prim@char":"1:16004:1868"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,59],"end":[131,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::try_join","name":"try_join","id":"21:10273:1673","glob":false}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,44],"end":[131,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select_biased","name":"select_biased","id":"21:10274:1672","glob":false}},"2:13494:1953":{"id":"2:13494:1953","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"1:16010:1873","`DoubleEndedIterator`":"2:8448:120","prim@char":"1:16004:1868","self::pattern":"2:13054:4508"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49666:4946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:127:1651","glob":false}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3352:3524":{"id":"2:3352:3524","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3354:181","2:3355:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13418:793":{"id":"2:13418:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:16004:1868"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2926:124":{"id":"2:2926:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13430:54725":{"id":"2:13430:54725","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47495:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6861:4137":{"id":"1:6861:4137","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6862:57106"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10242:2324":{"id":"2:10242:2324","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10243:1533","2:10244:56718","2:10246:3850"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13500:60930":{"id":"2:13500:60930","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:8448:120","prim@char":"1:16004:1868","self::pattern":"2:13054:4508","str::rmatch_indices":"1:16010:1873"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49612:4943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13782:150":{"id":"2:13782:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13783:181","2:13784:150","2:13785:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6437:4129":{"id":"1:6437:4129","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6438:4431","1:6439:4432","1:6440:54356","1:6441:54357","1:6443:54361","1:6445:54358","1:6446:54359","1:6448:54360"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,0],"end":[146,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::lock","name":"lock","id":"21:9703:1677","glob":false}},"2:23465:4654":{"id":"2:23465:4654","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23466:1270","2:23467:1269","2:23468:1267","2:23469:1266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22877:4653","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:690:1647":{"id":"21:690:1647","crate_id":21,"name":"FutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:691:841","21:694:2594","21:696:2509","21:699:2595","21:701:2596","21:703:2597","21:704:2513","21:705:2598","21:706:2523","21:707:2533","21:709:2525","21:710:2599","21:711:2600","21:712:1939","21:714:2526","21:716:2601","21:717:2602","21:718:2603","21:719:2604"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13767:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,44],"end":[135,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream","name":"stream","id":"21:2138:1649","glob":false}},"1:6859:4135":{"id":"1:6859:4135","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6860:56405"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13523:54767":{"id":"2:13523:54767","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13054:4508","prim@char":"1:16004:1868"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5719:4147":{"id":"1:5719:4147","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5720:54583","1:5721:54585","1:5722:54584","1:5723:54586"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13535:4828":{"id":"2:13535:4828","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12993:4240","`FromStr`":"2:12993:4240"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12993:4240","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12993:4240","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6085:2944":{"id":"5:6085:2944","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::Stream","name":"Stream","id":"20:96:1650","glob":false}},"2:10303:4582":{"id":"2:10303:4582","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10304:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13473:54758":{"id":"2:13473:54758","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:16010:1873","`DoubleEndedIterator`":"2:8448:120","self::pattern":"2:13054:4508","prim@char":"1:16004:1868"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49480:4910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13508:60933":{"id":"2:13508:60933","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2957:177":{"id":"2:2957:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2958:415","2:2959:2215","2:2960:3058","2:2961:56480"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2926:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3376:3531":{"id":"2:3376:3531","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3378:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14242:4221":{"id":"2:14242:4221","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14243:56260","2:14244:56261","2:14245:56262","2:14246:56263","2:14247:56264","2:14248:56265","2:14249:2524"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13510:60934":{"id":"2:13510:60934","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,38],"end":[135,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink","name":"sink","id":"21:7249:1656","glob":false}},"2:3274:2261":{"id":"2:3274:2261","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4051:4171":{"id":"2:4051:4171","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4052:57412"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13445:30257":{"id":"2:13445:30257","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:16010:1873"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49736:4949","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13426:56509":{"id":"2:13426:56509","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12525:5069"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,58],"end":[195,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::Enter","name":"Enter","id":"31:166:1711","glob":false}},"29:39:1660":{"id":"29:39:1660","crate_id":29,"name":"AsyncRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:40:54018","29:41:54019"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3396:3534":{"id":"2:3396:3534","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3398:181","2:3399:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10530:142":{"id":"2:10530:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10531:715","2:10533:56316"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13429:54729":{"id":"2:13429:54729","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16021:1882"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13073:4510":{"id":"2:13073:4510","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13075:4530","2:13076:922","2:13077:60351","2:13078:60352"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5647:4178":{"id":"1:5647:4178","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5648:56513","1:5649:5201"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[103,31],"end":[103,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::Future","name":"Future","id":"2:13767:138","glob":false}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,38],"end":[131,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:42:1013","glob":false}},"2:3435:3543":{"id":"2:3435:3543","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3437:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5727:4146":{"id":"1:5727:4146","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5728:54294","1:5729:56780","1:5730:56781"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13537:5113":{"id":"2:13537:5113","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,24],"end":[250,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1659","glob":false}},"2:13767:138":{"id":"2:13767:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13768:181","2:13769:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,26],"end":[237,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink","name":"sink","id":"21:7249:1656","glob":false}},"0:147":{"id":"0:147","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,34],"end":[236,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::Future","name":"Future","id":"2:13767:138","glob":false}},"2:13544:60943":{"id":"2:13544:60943","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:16004:1868"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49779:4953","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7928:4628":{"id":"2:7928:4628","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7929:59707","2:7930:59708","2:7931:2532","2:7932:59704","2:7933:59709","2:7934:59706","2:7935:59705"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3384:3532":{"id":"2:3384:3532","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3386:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10311:4584":{"id":"2:10311:4584","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10312:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3169:74":{"id":"2:3169:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3171:59905"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13513:60936":{"id":"2:13513:60936","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3740:3551":{"id":"2:3740:3551","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3742:58051"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[139,0],"end":[139,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream_select","name":"stream_select","id":"21:97:1674","glob":false}},"2:4783:4649":{"id":"2:4783:4649","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4784:2754","2:4785:3078","2:4786:3037"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,38],"end":[250,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:39:1660","glob":false}},"2:13459:3054":{"id":"2:13459:3054","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:16004:1868","self::pattern":"2:13054:4508","`None`":"2:47495:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13443:4537":{"id":"2:13443:4537","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:16004:1868"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49438:4935","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13440:54748":{"id":"2:13440:54748","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:16010:1873"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3178:228":{"id":"2:3178:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3180:127","2:3181:1417"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:5130","5:785:54530","5:786:54531"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3440:3544":{"id":"2:3440:3544","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3442:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13449:30242":{"id":"2:13449:30242","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49754:4951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10307:4583":{"id":"2:10307:4583","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10308:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3505:1983":{"id":"2:3505:1983","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3506:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3492:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6103:61581":{"id":"5:6103:61581","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13512:60935":{"id":"2:13512:60935","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3492:116":{"id":"2:3492:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3493:221","2:3494:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1742":{"id":"0:0:1742","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[258,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# if cfg!(miri) { return; } // https://github.com/rust-lang/miri/issues/1038\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::stream":"21:2138:1649","crate::sink":"21:7249:1656","crate::future":"21:168:693","crate::executor":"0:116:1553","crate::io":"21:8121:1678","crate::channel":"27:0:1675"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:116:1553","0:142:1030","0:4","0:7","0:11","0:14","0:18","0:21","0:25","0:28","0:31","0:34","0:38","0:41","0:44","0:47","0:51","0:54","0:57","0:60","0:63","0:66","0:69","0:73","0:76","0:79","0:80","0:82","0:85","0:89","0:92","0:95","0:98","0:101","0:104","0:107","0:110","0:113"],"is_stripped":false}},"2:3519:130":{"id":"2:3519:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3521:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3522:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3277:218":{"id":"2:3277:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13529:60940":{"id":"2:13529:60940","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13054:4508","prim@char":"1:16004:1868"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3577:3545":{"id":"2:3577:3545","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3579:181","2:3580:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13450:54764":{"id":"2:13450:54764","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13054:4508","prim@char":"1:16004:1868"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4000:68":{"id":"2:4000:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4001:1429"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,42],"end":[105,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:991:1648","glob":false}},"2:13448:60924":{"id":"2:13448:60924","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49726:4948","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13463:5952":{"id":"2:13463:5952","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47495:176","self::pattern":"2:13054:4508","prim@char":"1:16004:1868"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[129,0],"end":[129,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select","name":"select","id":"21:10275:1669","glob":false}},"2:3364:3526":{"id":"2:3364:3526","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3365:181","2:3366:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13436:54728":{"id":"2:13436:54728","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10934:214":{"id":"2:10934:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10936:181","2:10937:54725","2:10938:54726","2:10939:54727","2:10940:54728","2:10941:753","2:10942:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10925:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,54],"end":[122,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:9659:1665","glob":false}},"5:6104:61582":{"id":"5:6104:61582","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:2266","`String`":"5:8368:216"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:5123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:44:1645":{"id":"20:44:1645","crate_id":20,"name":"TryFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:45:175","20:46:127","20:47:52891"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13767:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:39:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13482:54760":{"id":"2:13482:54760","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:16004:1868","str::rsplitn":"1:16010:1873","self::pattern":"2:13054:4508"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49566:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:9664:1663":{"id":"21:9664:1663","crate_id":21,"name":"AsyncBufReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9665:2285","21:9666:3978","21:9667:2294","21:9669:2291","21:9671:2287"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"29:49:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3310:2262":{"id":"2:3310:2262","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22840:4641":{"id":"2:22840:4641","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22841:60058","2:22842:1227","2:22843:1228","2:22844:60059","2:22845:60060","2:22846:60061","2:22847:60062","2:22848:60063","2:22849:60064","2:22850:60065"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,42],"end":[110,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:5869:1653","glob":false}},"24:15:3002":{"id":"24:15:3002","crate_id":24,"name":"Spawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:16:63961","24:17:4309"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13514:60937":{"id":"2:13514:60937","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13054:4508","prim@char":"1:16004:1868"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13084:4512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23137:4740":{"id":"2:23137:4740","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23774:4652","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23128:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,23],"end":[122,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:9664:1663","glob":false}},"21:9659:1665":{"id":"21:9659:1665","crate_id":21,"name":"AsyncSeekExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9660:2295","21:9661:4016"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"29:47:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14166:141":{"id":"2:14166:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14167:277","2:14168:518","2:14169:280","2:14170:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13079:4511":{"id":"2:13079:4511","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13081:58703","2:13082:59776","2:13083:59777"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13073:4510","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:690:1647","glob":false}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,77],"end":[195,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:192:1713","glob":false}},"1:6790:4129":{"id":"1:6790:4129","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6791:54335"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6863:4138":{"id":"1:6863:4138","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6864:58911"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:7964:1657","glob":false}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,39],"end":[108,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:127:1651","glob":false}},"1:5785:4151":{"id":"1:5785:4151","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5786:54521"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:4450:1652":{"id":"21:4450:1652","crate_id":21,"name":"StreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:4451:922","21:4452:767","21:4453:841","21:4456:2506","21:4457:2507","21:4460:2508","21:4464:2509","21:4467:2270","21:4469:2510","21:4474:432","21:4475:495","21:4476:2511","21:4477:2512","21:4481:294","21:4484:276","21:4487:2513","21:4488:2514","21:4490:2515","21:4493:2516","21:4497:2517","21:4502:2518","21:4505:2519","21:4508:2520","21:4510:2521","21:4513:2522","21:4517:2297","21:4518:1308","21:4519:2523","21:4520:2524","21:4521:2525","21:4522:1939","21:4524:2526","21:4526:2253","21:4527:2527","21:4528:2528","21:4530:2282","21:4532:2529","21:4533:2530","21:4534:2531","21:4535:2532","21:4537:2296","21:4539:2533","21:4541:2534","21:4543:2535","21:4545:2536","21:4546:2537"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"20:96:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3368:3529":{"id":"2:3368:3529","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3370:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:258:2032":{"id":"24:258:2032","crate_id":24,"name":"UnsafeFutureObj","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["24:261:57150","24:262:578"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"outlives":"'a"}],"implementations":[]}},"2:3411:3538":{"id":"2:3411:3538","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:181","2:3414:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[256,68],"end":[256,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:9646:1666","glob":false}},"1:6557:4182":{"id":"1:6557:4182","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6558:57243","1:6559:57244"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3247:115":{"id":"2:3247:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3248:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:991:1648":{"id":"21:991:1648","crate_id":21,"name":"TryFutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:992:2684","21:994:2685","21:997:2686","21:1001:2233","21:1004:2232","21:1006:2687","21:1008:292","21:1011:2688","21:1014:2689","21:1016:2690","21:1018:2381","21:1019:2691","21:1020:2692","21:1022:767","21:1023:2693"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFuture","id":"20:44:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13541:60942":{"id":"2:13541:60942","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:16004:1868"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49761:4952","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"2:22853:4127":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:49480:4910":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"21:168:693":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"21:67:1671":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"2:52006:4786":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"18:637:2155":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:15032:4300":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:11685:4281":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:4066:4170":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:46659:59174":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"3:321:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:1526:39278":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:7514:5523":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:56351:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"21:18289:2318":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"2:51339:4756":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:2397:2793":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:6021:5761":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"21:12851:2088":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"6:5544:41303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"21:13824:2034":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"21:14875:2143":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"5:8146:60883":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:10407:5865":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:49666:4946":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:8400:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:48850:59593":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"14:244:43870":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:1472:4253":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:24052:60322":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:15412:4416":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4256:41424":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:13098:51070":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:28054:4661":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:565:38396":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"21:17143:2755":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"2:22940:4126":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"21:10328:2034":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"6:5257:42027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:32696:4735":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10477:5924":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:15045:54330":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"21:18311:2320":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"17:10224:45657":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:3800:43998":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"21:18489:2093":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"5:5875:61818":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"6:1764:39302":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:4643:61819":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"21:18416:2659":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"1:14808:4181":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:1674:4246":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:8463:5151":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:3522:43951":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:539:38394":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:2362:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:10081:5877":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:10377:5869":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:8138:5206":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:7927:2659":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:12065:54320":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"21:15154:3084":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"5:7642:5156":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:52403:4761":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:3516:2263":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:47553:2756":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:16022:1883":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:5538:42092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:14804:9950":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:49584:4914":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:11962:45805":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"27:600:3723":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"6:4340:41432":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:5889:61828":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:47018:32953":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:13130:4515":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:24567:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:7333:5522":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:16028:1889":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:5672:5557":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:24771:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:14936:56826":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"21:17682:2250":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"1:5376:4410":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:11231:5855":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:4379:41437":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:7549:5511":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:4699:61819":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"21:17835:2306":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"1:10677:4256":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:4028:41401":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13574:51617":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"21:7021:56799":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"26:49:52731":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"18:645:5966":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:10934:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:50178:4963":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:52589:4767":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:5595:5555":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:53428:19745":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"20:110:1978":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"1:2166:4191":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:22840:4641":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:12023:4299":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:3392:5779":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"18:767:63886":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12610:50490":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11696:46321":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"9:996:5344":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:3372:3533":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:10211:45651":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:1704:39296":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5736:5560":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"12:432:5413":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:10543:45796":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:8954:5909":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"30:843:5968":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:6893:41578":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"27:481:3670":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"1:1633:4253":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"2:48832:3681":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:5423:42060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:47926:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4410:41441":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:11015:45882":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"12:2036:2756":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:49352:4924":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:9961:45584":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:1635:4242":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:6269:5576":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"21:15863:2056":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"2:50170:4958":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"21:14248:2138":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"1:8639:4435":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"0:116:1553":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"2:48820:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"21:10275:1669":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"16:7236:5599":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:5631:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:5328:42053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:6199:4427":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:24250:4995":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:11360:4411":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:7649:4294":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:6807:5588":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:10705:5244":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:3351:4383":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:4639:2932":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:1912:39437":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"21:18279:2317":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"2:23128:4127":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"21:16802:2180":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"17:9659:63858":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:11283:4909":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:4032:3773":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6166:5571":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"14:194:43869":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:9971:63849":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"21:14102:2137":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"2:46290:30792":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:10684:9943":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:5034:4854":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"18:705:2155":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:16009:1872":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:4397:4395":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:49754:4951":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13402:51596":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:15509:5438":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:12456:50466":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12010:50276":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:2889:5782":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:38808:2901":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"21:12300:2073":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"6:3877:41387":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:16029:1890":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:2733:5739":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:51821:59526":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:11163:2943":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:6685:4149":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:136:52073":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:24147:37419":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"21:12857:2089":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"6:3960:41393":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"21:13956:2037":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"21:13268:2133":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"18:791:5953":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:5456:5549":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:12772:4941":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:12568:50474":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:49361:4925":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:51253:59469":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:3347:3525":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:3423:3540":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:51769:4746":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:12208:50449":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:52246:4766":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4230:41422":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:3195:5769":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:11434:4430":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"28:41:2179":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"21:12515:2078":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"2:7858:4732":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:9174:58829":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:9689:63856":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:3658:56829":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"18:775:2155":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:5707:5558":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"17:12699:50544":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"12:2059:4193":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:14079:2367":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:4110:41411":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:3338:5753":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:4734:44557":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:10489:5926":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:24215:37420":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:11358:5906":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"21:17321:2245":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"17:11045:45586":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"28:50:2755":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"21:14467:2148":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"1:16010:1873":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"29:39:1660":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"2:2283:4633":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:7146:5591":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"21:9261:2180":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"2:45968:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:8908:2183":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"21:17040:2186":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"16:7761:5603":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:3740:3551":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10279:5877":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"21:17884:2307":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"6:4532:41455":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"9:686:5276":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:15754:56165":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:11932:50267":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:3577:3545":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:45945:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"21:13111:2130":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"1:9634:56823":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"17:9896:63850":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:14242:4221":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:3488:5775":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"30:137:52073":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"21:11906:2054":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"16:6413:5426":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:607:38401":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:6459:4132":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:49420:4625":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:1588:39286":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:12158:4213":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:1190:8933":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"21:14823:2154":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"2:8107:2182":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:46453:4796":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:46980:2183":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:14609:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:3682:2945":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:5960:4479":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"21:11202:2384":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"17:12507:50470":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:2183:4194":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"14:216:43877":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:6863:4138":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:12405:6545":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"14:56:45994":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:3384:3532":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:3040:60852":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:5290:42050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:5165:4595":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:46391:4189":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"27:509:202":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:50194:4965":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:7117:12331":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"21:6286:2065":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"1:6699:54484":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:10827:5904":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:10558:45797":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:5579:42094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:12811:4945":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:12480:50468":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:53480:19749":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:24237:4996":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:3431:3542":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:10311:4584":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:13532:51612":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:2310:5257":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4434:41444":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:10957:3771":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:13348:51237":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:13064:4507":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:3103:4127":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10061:45656":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:3736:2307":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:5273:5756":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"29:47:1661":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"17:12385:50462":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:24805:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"12:787:4245":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13446:51599":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"30:987:5955":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"21:11466:2056":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"21:13199:2132":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"12:2269:4253":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:4516:41453":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:24169:37410":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:8887:4627":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:51316:4752":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:16027:1888":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"24:18:3001":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"12:1147:4254":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:13963:51713":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:4955:44603":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"21:17172:2756":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"21:17454:2186":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"2:9979:4894":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:11086:2258":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:51147:4751":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"9:692:5278":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"16:7571:5499":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:10618:4065":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"21:13881:2035":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"17:13898:51703":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:6964:43030":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"30:1005:5957":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"21:17772:2304":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"21:14515:2150":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"2:46473:5006":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:13079:4511":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:894:4337":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"21:16811:2181":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"1:4607:2180":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"21:18474:2091":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"1:7792:4302":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:9933:45583":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"12:162:5412":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:13370:51239":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:11409:4477":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:5430:42061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:4400:4396":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"18:886:5961":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:10816:4369":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:15975:8934":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"21:45:2006":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"5:1597:2179":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:5308:42052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:24106:4831":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:3435:3543":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"21:11262:2058":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"16:6208:5573":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:3264:5772":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6569:5796":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:8250:4198":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"21:14588:2149":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"6:4509:41452":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:24129:37418":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4075:41407":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:9886:45582":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"12:1103:4252":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"20:27:1977":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"31:120:1708":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"30:1033:5959":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:52085:4774":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:1428:2755":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:12083:54265":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"17:13760:51633":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:1727:39299":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"28:211:4254":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"23:0:1988":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"24:0:1741":{"crate_id":24,"path":["futures_task"],"kind":"module"},"16:4671:44544":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:16025:1886":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"21:7659:2247":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"26:0:1989":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"6:5298:42051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:13192:51121":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"21:17230:2756":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"16:6424:5579":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:8849:5851":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:11070:2182":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"21:16175:2163":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"13:232:62998":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"12:1666:5420":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4142:41415":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:11340:11632":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:32348:59943":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:1482:4191":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"18:169:52075":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:9404:45575":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:11268:4237":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:15970:57304":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:10200:45652":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:7786:5513":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:10710:2127":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"16:3241:5771":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:2594:57271":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"2:32400:59967":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:46427:5092":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:53255:4744":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:49612:4943":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:12525:5069":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:8738:4447":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"12:2052:4192":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"21:5869:1653":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"2:5605:4614":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:46771:4706":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:47968:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:8160:2756":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:8298:5198":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:50058:4526":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:46397:5090":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:0:1846":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:47622:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:49880:4516":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:5475:42064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:14550:4164":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:13637:51629":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:6744:5801":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:5855:5565":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:9974:4893":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:13659:4241":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:13842:51676":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:6934:41584":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:2572:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"2:11425:4915":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:23871:4977":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:7823:5514":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"14:11:43868":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:3018:5766":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"12:2419:4198":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:8130:2241":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"12:940:4248":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:49684:4947":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:10252:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:47674:2755":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"21:18520:63904":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"2:51285:4764":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:6695:54480":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"14:189:43868":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"27:521:3675":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"1:11457:12328":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:12142:50444":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:4304:44427":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"21:18392:2325":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"1:3648:2306":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:6634:59548":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"30:170:52075":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:12771:45593":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:4306:2755":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:5175:42041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:57678:59601":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:50206:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:13386:51568":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:47716:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"24:380:63951":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"21:43:1013":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"21:10467:2042":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"17:11304:45592":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6554:5582":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"12:2032:2179":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:49911:4520":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"19:117:63892":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:13817:2062":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4012:41399":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"21:9758:162":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"17:681:45565":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:4790:44563":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"27:576:3680":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"6:4425:41443":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"21:15304:2161":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"30:920:63875":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:50241:5027":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:10667:4201":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:6176:5572":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:16023:1884":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:16008:1871":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:10403:5875":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:6082:4418":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:6111:42472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"11:54:5398":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:1075:4186":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:4321:41430":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:14633:2258":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:3362:4194":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:8132:4357":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"17:8929:45567":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"12:815:4246":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:9639:54547":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"30:826:5963":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:49842:4509":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:10295:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:3352:3524":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"21:18602:2393":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"2:48561:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:4535:44483":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:50174:4961":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"21:14297:2139":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"2:9260:4325":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:6954:2495":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:12795:4942":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"21:12153:201":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"21:14997:2157":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"6:4061:41405":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:8379:5124":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:11479:4136":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:11318:4910":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:3118:5778":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"12:764:2755":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13497:51606":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:46682:2035":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:46353:5095":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:3488:4191":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"21:12357:2074":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"21:17444:211":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"17:13258:51166":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"18:152:52074":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"21:16406:2172":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:11993:50273":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:607:45564":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:88:38016":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:13377:51251":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:48531:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"6:601:38400":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"12:1183:5409":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"27:495:2640":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"2:49269:4918":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:1626:39290":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:3194:4368":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:5201:42043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:49865:4513":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:4008:45772":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:12010:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:3933:41392":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:7378:5507":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"30:930:63885":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:14034:4297":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"21:11600:2055":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"2:49736:4949":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:49462:2943":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:6859:4135":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:5295:43950":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:51397:59528":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:7894:5539":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:2269:4630":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:3287:2920":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"21:17221:2755":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"16:7195:5595":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:48635:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"21:18332:2148":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"16:2945:5787":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"21:18241:2313":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"14:47:43868":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:15331:4113":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:6731:5800":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:12408:50463":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:3218:5770":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:12537:50472":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:11981:45804":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:3278:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:3401:3535":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"21:11091:2384":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"17:294:63864":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:37627:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:6257:5155":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12712:50545":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12442:50465":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:52438:4743":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:7870:5509":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"12:2253:4252":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:5971:38313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:8803:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:6591:5584":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:5330:43947":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:13884:51685":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:48279:4583":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"21:69:2008":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"5:6672:2671":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:4473:2958":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:46111:4802":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"7:38:43123":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:50186:4966":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:12182:50447":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:7250:5600":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:2177:4193":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13685:51630":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12327:50457":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:51744:4745":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"9:27:5327":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"21:2138:1649":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"2:3717:3549":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"27:397:2640":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"17:10028:45638":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"30:958:2155":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:6004:42469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:4443:2179":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:24669:3176":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:11524:4266":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:51076:4783":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"21:18268:2316":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"12:114:62983":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"21:17212:2179":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"2:3247:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"21:16062:2166":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"2:49289:4920":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:25243:4843":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:3310:2262":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:47884:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:1843:61801":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"21:9659:1665":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"2:22877:4653":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:14575:4159":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"21:10830:2039":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"17:299:63851":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13788:51670":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:49200:4912":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"9:41:5328":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"6:4464:41448":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:7663:4295":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:53129:4759":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:10041:45639":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:3044:60910":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"21:18431:2092":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"21:9421:2159":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"15:269:5434":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:7073:5590":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:38871:4505":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:14565:54494":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:6101:5498":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13540:51613":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:8180:2121":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:9759:45580":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:612:38402":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"21:18129:2244":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"2:3275:4502":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:22549:60371":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:3182:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:2773:5788":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:5029:44627":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"21:13392:2033":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"6:1544:39281":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"21:12762:2085":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"21:10248:2394":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"2:23770:4127":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:11411:4914":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:1748:39301":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:10242:2324":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"31:175:1709":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"5:3396:4195":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"28:55:2241":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"22:0:1987":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"6:4020:41400":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:13942:51712":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:5647:4178":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:9839:5879":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:12373:50461":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:48583:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:16004:1868":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:12946:51013":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"9:900:43276":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"18:812:5955":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:47562:5011":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:7975:3690":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"30:942:63886":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:11297:54510":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"21:15936:2168":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"6:5564:42093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"21:1315:2065":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"21:16781:3265":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"1:5952:4478":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"9:0:1840":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:46720:2142":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:4510:2953":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"21:18587:2395":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"21:17825:2305":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"2:52796:4787":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:2187:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"21:12255:2072":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"2:51358:59494":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:1606:39288":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4446:41446":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"30:1013:4510":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:7406:5506":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:53518:19751":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:69:5150":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:22934:4124":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:12993:4240":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:55967:4693":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"26:55:52732":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"2:46420:5091":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:5785:4151":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:49530:4940":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:56325:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:5584:8935":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:12262:50453":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:15053:4328":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:16015:1876":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:12234:50451":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:48258:4582":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11970:45803":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:5717:5559":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"12:895:5400":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"14:250:43876":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:47545:2755":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:3648:3548":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:5373:4409":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:4471:2957":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:11414:4480":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:2926:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:513:38390":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12741:50552":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:56403:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3341:5189":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:9467:57270":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:10117:5936":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:47596:5013":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"21:6760:63900":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"1:1619:4252":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:3427:3541":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:14:1956":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:4160:41417":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11539:46270":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:10435:45696":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:47614:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:46059:4675":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:12735:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"30:905:63872":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"21:6626:2187":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"12:933:4247":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:12795:50619":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:7629:4293":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:53380:4747":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"21:15085:3086":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnordered"],"kind":"struct"},"2:53595:19754":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:5244:42048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:8121:5205":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:13306:51233":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"21:18320:2321":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"12:1682:5421":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:45784:2760":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:6265:42483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12073:50378":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:12038:4300":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:10571:45798":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:46761:2146":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"7:0:1481":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:2843:5762":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:46366:4953":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"27:502:3672":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"1:16011:1874":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:13429:51598":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"9:1056:5338":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:11428:4057":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:9440:45576":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:11678:46320":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:22564:60371":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:4242:41423":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:10874:2949":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:49042:5111":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:11519:46210":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:46802:2152":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10611:45800":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"30:1061:5961":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"21:15046:63911":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"1:12203:3676":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:51523:4777":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:1694:39295":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:6790:4129":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:9034:45569":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12552:50473":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:3269:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:53050:4775":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:11277:45555":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"13:120:43823":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:13587:54551":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:5789:4152":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"27:534:3676":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"21:15510:2051":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"12:399:5414":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:9600:63857":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:10565:4127":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:13520:51609":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:5039:4855":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:47800:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:46312:4792":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"12:466:62987":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6718:5799":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:6150:42476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:12257:4320":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"27:552:3677":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"16:6605:5517":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:1459:4243":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:49326:4922":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"21:690:1647":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"20:0:1644":{"crate_id":20,"path":["futures_core"],"kind":"module"},"2:24035:4835":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:5505:5552":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:5561:5554":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13819:51675":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:3970:61801":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6668:42844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:46031:4172":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:6240:42481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"21:15320:2043":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"17:11026:45585":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"21:10084:2609":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"5:3038:5130":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:12051:50377":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:900:4338":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"21:17977:106":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"17:13746:51632":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"21:17248:2241":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:3743:5900":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:8646:4437":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13865:51679":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:13620:51627":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:51234:4776":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:12028:50320":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:1644:4243":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4346:41433":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:626:38404":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:14130:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:15986:54317":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:6999:5589":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"21:6962:3008":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"16:4995:44618":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"21:17512:2248":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"30:977:5954":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:8690:4438":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:5360:5544":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:5402:42058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:13282:51169":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"18:745:63875":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12685:50543":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:4135:41414":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:6780:5587":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"12:353:62988":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:8263:4259":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"18:821:5956":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:6475:2241":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:5500:4416":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:4051:4171":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:10587:4342":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:46052:4674":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"27:474:3690":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"2:48803:59585":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:7158:5592":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:6685:42845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:46691:4702":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:3376:3531":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"21:14394:2146":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"12:952:4249":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:24703:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:10458:45697":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:53556:19753":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:53533:19752":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:13477:51604":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:4416:41442":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:23774:4652":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:5185:2670":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:32500:60000":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:10701:9950":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:50023:4523":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"21:13453:2135":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"1:3341:4378":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"27:467:5227":{"crate_id":27,"path":["futures_channel","mpsc","queue","Node"],"kind":"struct"},"6:3981:41396":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:51445:4785":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:12756:50553":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"27:608:3724":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"21:16224:2164":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"2:10305:4575":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"21:42:1013":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"21:14346:2145":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"1:12282:4328":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:13933:51711":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10926:45879":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"20:44:1645":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"6:4048:41403":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"24:203:2031":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"2:48516:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"27:394:202":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"2:47691:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:12132:2756":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"31:197:1714":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"12:183:5416":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"21:15243:2158":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"27:21:63979":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"21:18659:2984":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"2:50048:4525":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:46739:2143":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:23137:4740":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:6861:4137":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"21:9703:1677":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"2:8473:2264":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:7507:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"25:0:1654":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"21:6984:2188":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"2:2194:33520":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"12:750:2179":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:5968:4481":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:6252:5575":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:4270:4429":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"21:18557:2608":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"1:1157:8932":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"21:16907:2077":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"6:4402:41440":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:11957:4929":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:1302:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:15391:4410":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:4641:44539":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"8:0:1839":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:6077:39220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"18:783:2155":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"9:469:43248":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:22536:4645":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:1438:2756":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"15:230:5429":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:12287:50455":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11434:45992":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:9210:45573":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4362:41435":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13978:51718":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:1195:62188":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"21:15432:2049":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"17:14000:51754":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:4127:41413":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:16016:1877":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:2162:2241":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:7732:4298":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:12501:5106":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"20:127:1651":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"2:46374:5089":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:4670:2932":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:3775:3554":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:52939:4755":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13356:51238":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"21:18614:2392":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"16:5753:5561":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:22993:4651":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:3329:2179":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:2292:4634":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:15072:54275":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"21:595:2659":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"18:740:63887":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:838:4510":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"12:2045:4191":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:10377:57264":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"28:220:4252":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"6:5363:42054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:432:2266":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"30:966:5953":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:4723:2324":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"21:15588:2050":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"21:18376:2323":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"6:161:38083":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:49300:4921":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:12307:50456":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:50190:4964":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:49986:4522":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:14958:56819":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:11767:46496":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:37651:4645":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:3883:41388":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:6697:54482":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:8973:4323":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:16007:1870":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:8388:3681":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"6:6031:12328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:7843:5604":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:7392:5508":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6032:5493":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:4515:5216":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"17:10975:45857":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:3104:2903":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:51925:59491":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:10317:5867":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:5101:4860":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:14643:54308":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:50071:37670":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"6:6211:42479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:9280:43947":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:3325:4373":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:4599:61823":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:51378:4741":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:2188:4195":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:24068:37382":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:49405:5018":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:1600:39287":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:6014:5569":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11337:5922":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:11137:2941":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"29:42:1662":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"2:10292:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:11665:46319":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:5837:2072":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:7226:5598":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:47007:2181":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"31:168:1712":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"2:47758:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:15353:4409":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:7332:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"21:17595:2249":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"2:3277:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"18:858:5959":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:49381:4927":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:12171:3678":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:24013:37394":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:10809:4159":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:9849:63865":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:10866:4390":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:672:38434":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:10447:59607":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:12138:3675":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"21:4185:63899":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"18:661:5967":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"21:14948:2156":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"17:12195:50448":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:13582:51618":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"21:13074:107":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"2:52132:4778":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:11317:54315":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"30:853:142":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:6768:5803":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:10236:5840":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:4752:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"21:9837:3740":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"1:10858:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:8602:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:13767:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:14601:4369":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:10580:4663":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:3714:43962":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:4315:41429":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:48272:4575":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"21:14013:2134":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"17:10052:45640":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:696:4333":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:5285:42049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:12061:54507":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"6:6940:41585":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:13799:51671":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:46631:2131":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:4432:2955":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:4038:41402":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:49779:4953":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"21:13151:2131":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"1:15185:4224":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:10530:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:13422:4423":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"30:698:5964":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:5183:42042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:10962:2257":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:634:38405":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:3505:1983":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:52372:4758":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:3039:60912":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:2397:9937":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:15229:4232":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:8880:2757":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:593:38399":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"21:9955:2159":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"6:1567:39284":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:4440:41445":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:16019:1880":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"21:11783:2053":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"21:9814:3741":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"16:2754:5755":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"21:17969:2240":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4081:41408":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:14236:2955":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:13279:37668":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"2:46413:4952":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:2433:9948":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:11100:5859":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:9768:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:11354:4057":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:11180:4106":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"17:11628:46316":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:571:38397":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:7677:4296":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"21:7249:1656":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"1:15122:54487":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:53341:4782":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:9733:4404":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:13221:51123":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:11615:4277":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:12343:50458":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:3758:4613":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:13172:51077":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:3581:3546":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"21:13034:2129":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"6:3907:41390":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:7477:5525":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:4417:44465":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"21:1833:2086":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"17:9719:45579":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:6964:5011":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:6688:5171":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:374:5197":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11378:5905":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11482:45994":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"21:10770:2035":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"2:53454:19747":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:16026:1887":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:5797:4154":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:5433:5548":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:5408:5086":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"21:991:1648":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"17:12521:50471":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"27:188:3678":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"6:1712:39297":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"9:749:5280":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:13240:51125":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:8313:5007":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:12735:4938":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"21:13644:2155":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"21:13333:2033":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"5:8197:2756":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12221:50450":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"21:11661:2051":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"21:14166:2140":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"21:13767:2136":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"16:5766:5562":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:12040:50376":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"18:695:5969":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12645:50540":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"9:963:5343":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:11809:46501":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:3429:5489":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:5314:43948":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:51124:4763":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:14626:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"24:237:2030":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"6:6905:41580":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:1493:4245":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11458:45993":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"21:18326:2322":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"17:10887:45771":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:49260:2153":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:6087:5500":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:15483:54509":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"12:880:4191":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:4373:41436":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:3920:41391":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:56338:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:4762:44560":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"21:18484:5981":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"21:15364:2048":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"16:4477:44475":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:46561:10568":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"27:587:3681":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"17:11604:46280":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"21:12591:2082":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"17:10599:45799":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"12:1256:4255":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:6922:41582":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:5387:42056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"24:21:3003":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"1:1152:8931":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"21:18541:63906":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"2:10540:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"11:46:62982":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:13786:4306":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:1472:2241":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:3440:3544":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"30:996:5956":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:7295:5520":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:46551:10569":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:2888:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"21:0:1646":{"crate_id":21,"path":["futures_util"],"kind":"module"},"2:46581:4699":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10502:45698":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:46702:2037":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"21:8119:917":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"17:11001:45855":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:45812:2792":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:11794:46500":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:13961:4298":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:13810:51672":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:46066:4594":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:23465:4654":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:3091:5825":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"12:928:4244":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:4823:44571":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:5226:42046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"21:9795:3742":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"16:4614:44537":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"21:16826:2183":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"2:3729:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:24093:4830":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:3896:41389":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"9:927:43242":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:11098:2260":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"30:836:5967":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:6054:39246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:9088:45571":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:45922:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:10646:8927":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:48094:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"21:16952:2184":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"16:547:5746":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:10366:45565":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:12247:4450":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:3839:61801":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:3166:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:3145:5777":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:11150:2312":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:10299:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:48795:4260":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:46284:4189":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:10309:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:4055:41404":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:23676:60375":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:13180:51119":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:5156:4861":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:5452:62496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:13772:51668":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10266:5834":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:5395:42057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:7212:2241":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:2957:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"21:9646:1666":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"17:11118:45587":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11726:46378":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:7303:5601":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"21:17299:2243":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"30:880:2155":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:8839:58829":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:4666:2313":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"21:11844:2052":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"2:3274:2261":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:2200:61827":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:1215:5235":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:8474:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:10353:5871":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4277:41425":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:13073:4510":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:9259:2632":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:5580:5744":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:12467:50467":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:53465:19748":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13331:51236":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:51642:4753":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:9060:4444":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:49251:4917":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:4704:44552":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"12:0:1843":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:3406:3536":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:4921:4853":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"9:157:5295":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:10673:45802":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"21:4450:1652":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"2:23942:4979":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:3172:5768":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:11835:46515":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"21:16793:2179":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"2:3281:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:5536:2671":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"18:730:63872":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:12252:4319":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:7795:4304":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:6126:42474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:6132:42475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:53192:4779":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"21:17385:2246":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"2:14069:1984":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:14588:54293":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:10962:45858":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:49339:4923":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"21:18250:2314":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"2:46503:5008":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"21:11722:2050":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"2:57699:59606":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:9627:54553":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:1497:4246":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:8330:5199":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:1939:4191":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:52325:4754":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:14166:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:11402:4105":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"21:12843:2087":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"17:13453:51602":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:15235:4233":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:11114:2179":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:1011:2179":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:23089:14214":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:3604:43953":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:1017:4357":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:51673:4757":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"21:17254:2242":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"2:48052:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:46343:5094":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"20:96:1650":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"21:12874:2127":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"5:5833:2129":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:11658:4278":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:49726:4948":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"30:1042:5960":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"30:1072:5962":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12783:50616":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:10623:45801":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"21:17739:2303":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"2:46603:4700":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:10095:5934":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:9649:45578":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11588:46279":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"21:10635:2038":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"30:820:5966":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:4005:41398":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"30:0:1848":{"crate_id":30,"path":["memchr"],"kind":"module"},"17:13924:51710":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"21:18401:2326":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"2:46612:4701":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"12:2072:4195":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:2508:4686":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:3339:4377":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:7185:5594":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:11668:2179":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:3772:43995":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:3746:3553":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12431:50464":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"18:611:5964":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:11245:4908":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:533:38393":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"21:17237:2240":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"17:9799:45581":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12118:50385":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"12:379:5415":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"27:0:1675":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"6:4098:41410":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:0:1331":{"crate_id":1,"path":["std"],"kind":"module"},"16:3549:43952":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:5727:4146":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"12:856:4243":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12095:50384":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:542:5476":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:820:8820":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"17:12247:50452":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:5384:5545":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:5981:4482":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:5208:4596":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:48811:4664":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:50228:4331":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:13858:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:3041:5767":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:23470:14233":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:5421:5547":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"20:39:4127":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"6:6899:41579":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:24839:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:16003:1867":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:22583:60746":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:22604:60741":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:10882:2309":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:2395:9936":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:12242:3741":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:1740:39300":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:2512:5866":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:46751:2145":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"25:17:1655":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"2:53408:19743":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"31:117:1707":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"21:16661:2175":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"5:8176:5118":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"30:870:5969":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"21:14649:2040":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"1:4394:4394":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"12:843:4242":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"11:0:1842":{"crate_id":11,"path":["adler"],"kind":"module"},"2:46673:2034":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"21:10272:1670":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"1:13568:9948":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:8362:60857":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:12262:4218":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"30:1025:5958":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:10071:5940":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:3972:41395":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:3337:3523":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:51099:4771":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10160:45655":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:22804:4665":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:49438:4935":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:7453:5503":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:3519:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"21:10273:1673":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"2:50451:4168":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:3320:5826":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:7119:5494":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:56364:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:11356:4911":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:10448:5842":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:51696:4760":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"24:15:3002":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"6:3987:41243":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:46973:32949":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"9:234:5303":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:12494:50469":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10801:45769":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:49371:4926":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"21:11320:2060":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"2:50398:2374":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:14821:4301":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"12:1121:4253":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"21:6891:3006":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"1:8481:2640":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:783:8820":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:47495:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:6511:2033":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:46641:2132":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:6319:4428":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:5790:5563":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:13782:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:16005:1869":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:2219:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:49770:4189":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:6976:43031":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:1669:39293":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:46989:32951":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:9718:4403":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"13:0:1837":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:7264:5518":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"21:15928:2169":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"6:4454:41447":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:10304:5868":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:1642:4254":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"12:2040:2241":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:11138:2755":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:3939:44112":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"21:7964:1657":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"6:1680:39294":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:16020:1881":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:12744:54545":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"21:18383:2324":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"5:1607:2755":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"22:7:1668":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"21:11539:2049":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"21:17920:2127":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"6:1551:39282":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:1518:4249":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"21:16713:2176":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"21:16127:2057":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"5:1441:4252":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:12846:4907":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"27:487:3671":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"18:867:5960":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:527:38392":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:11598:4276":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:50344:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:10452:56799":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"12:2404:62994":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"28:0:1990":{"crate_id":28,"path":["slab"],"kind":"module"},"16:7928:4674":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:2553:5241":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:6577:5583":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:5927:5566":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:10584:5911":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:50421:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"9:1020:5345":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:4728:4667":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:2967:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"21:4200:63912":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","InnerWaker"],"kind":"struct"},"17:13465:51603":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:6491:5580":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:11572:46278":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:1311:5941":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:6152:5502":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:4157:5912":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:53439:19746":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:9476:45577":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:10427:56832":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"21:18300:2319":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"5:8391:5125":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:1501:4247":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"12:2392:62997":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:8925:4456":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"17:0:1847":{"crate_id":17,"path":["object"],"kind":"module"},"1:11130:2148":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:4732:56749":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"21:661:56826":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"18:802:5954":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:50407:2375":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:11674:4280":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"18:721:59594":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:13163:51076":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:1149:8929":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"21:12062:2063":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"2:49432:4934":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:2751:4166":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"28:37:2756":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"2:3492:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:9368:45574":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"21:10419:2033":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"1:11575:3681":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:3279:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"21:1570:2076":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"16:5522:5553":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:14952:56822":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:6911:41581":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:4287:41426":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:6013:42470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:10140:5879":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"14:231:5127":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"21:97:1674":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"1:9771:56840":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"6:1621:39289":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:5858:4473":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"21:16536:2171":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"17:13609:51621":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:46711:4704":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"20:122:4127":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"12:2280:4254":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"21:10924:2043":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"1:3323:4372":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:9186:5908":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:10575:4199":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:46299:4791":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:5436:42062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:23139:4651":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:32159:5040":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:10804:4367":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:48136:5017":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:6620:5794":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"18:651:5963":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:16018:1879":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:11328:45593":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:923:2141":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:2171:4192":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"26:65:52733":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"5:3375:5190":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"21:10967:2044":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"21:16862:187":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"2:46998:2180":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"21:16264:2177":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"2:7670:2528":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:53503:19750":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:1530:4251":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:13041:51015":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:11420:4421":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:15130:4308":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:2968:5765":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:11208:4109":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"1:9594:56254":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:5472:5550":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"21:15663:2036":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"2:50198:4959":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:7111:61807":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:48010:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:12004:4297":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:49761:4952":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:4538:41456":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:48619:4580":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"30:812:2155":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12155:50445":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"21:12972:2151":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"2:4000:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:8902:45566":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:10331:5879":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:11453:4162":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:13564:51616":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"21:16316:2178":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"2:51051:59527":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"21:15710:2053":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"16:7342:5536":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:53399:19742":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:3169:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"0:142:1030":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"2:7756:4676":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:12917:51012":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:1662:39292":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:0:1838":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:11250:4111":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"5:3772:2755":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"9:603:43352":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:2794:5488":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"18:850:5958":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13054:51067":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:2991:5776":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"21:9337:1655":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"17:13590:51619":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:3370:4192":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:3368:3529":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:1132:4173":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:9005:45568":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:23664:4125":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"21:591:2046":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"17:9943:63866":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:668:5968":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"29:0:1658":{"crate_id":29,"path":["futures_io"],"kind":"module"},"17:11822:46502":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12982:51014":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"21:12043:187":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"6:545:38395":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:24601:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:50202:4960":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"21:18144:2311":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"1:16017:1878":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"30:888:4645":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11159:45589":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:9162:5854":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:13054:4508":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:5237:42047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:5346:5501":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:5375:42055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"9:809:3681":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"21:9126:2932":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"6:4179:41418":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:3396:3534":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:6557:4182":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:12057:59864":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"21:18259:2315":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"2:4783:4649":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"21:13583:3085":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"5:7849:61803":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:4890:44588":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:49279:4919":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:50439:4169":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:4922:44595":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12725:50551":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:2159:2756":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:51546:4780":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:46590:2127":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:4300:2959":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"1:5735:4148":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:6357:5577":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:5485:42065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:11120:2127":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"21:10960:2045":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"2:8164:60118":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:5653:4180":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"21:16868:2066":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"16:7024:5810":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"21:12037:2061":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"5:2262:5238":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"15:0:1845":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:9296:45556":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:3525:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:3759:2179":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:1091:61801":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"24:407:3436":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"31:88:4058":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"1:12742:4367":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:10529:45699":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:13488:51605":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:2458:9955":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:8367:4658":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"12:1203:5410":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:22930:4127":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:4885:4852":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:10001:45637":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"9:722:5279":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:9766:56841":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"1:15019:4299":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:51595:4765":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:2921:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10950:45881":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"12:1784:62991":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:10301:4581":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"21:18478:2090":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"5:2218:5192":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:22581:60743":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:10826:4160":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"21:4371:2159":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"17:12168:50446":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"18:713:4645":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:6219:5574":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:11640:46317":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:16021:1882":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:3894:5228":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:994:5204":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:11232:4110":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"6:4386:41438":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:11439:4916":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:4378:2756":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:47842:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:6366:5427":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:48265:4581":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"30:896:59594":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"21:9664:1663":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"17:10656:45783":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:6893:4703":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"31:192:1713":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"16:7738:5602":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:3364:3526":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:6636:5519":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:4965:4082":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:2543:5923":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:7441:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:9809:63852":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:13912:51709":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:46434:5093":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:8413:2265":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:46650:2133":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:6518:5581":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:12187:4214":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:49894:4519":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:4740:4668":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:4078:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:14317:4065":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:49046:5110":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:24737:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:6937:4139":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:6238:5505":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:51180:4784":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"30:708:63882":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"6:4148:41416":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:45991:3547":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:4218:41421":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:3966:41394":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:8344:5200":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:10799:4161":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:10516:5927":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:13284:37669":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"2:47682:2756":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:7286:58823":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9861:8820":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:13554:51615":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:6072:5521":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:3734:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:11750:46488":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:5979:39219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:5030:4064":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:3365:5754":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:13893:2065":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:3342:3528":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:56377:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:6662:42843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:14239:2957":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:6136:5542":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:3048:60909":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:10840:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:9063:4315":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"21:11979:2059":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"1:10592:4356":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:6682:5516":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:24185:37421":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"21:17093:3424":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"17:11847:46516":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:52163:4781":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:4080:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:2816:5781":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13547:51614":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:5444:42063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:4448:44471":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"21:14110:2144":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"16:7804:5512":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:5930:4476":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:10307:4583":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:7467:5504":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:8488:4212":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:6226:42480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6024:42471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:6640:38349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:2912:5764":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:8446:4191":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:10468:5925":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:11082:5857":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:11143:2943":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:46486:5007":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13205:51122":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"21:10585:2036":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"17:13733:51631":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"21:10878:2041":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"17:12275:50454":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4493:41451":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:5416:42059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:7379:2756":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:8193:3690":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:1415:2179":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"21:17152:3005":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"17:510:45563":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:9332:5921":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:4296:41427":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:24635:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:9551:5852":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:14570:54496":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"21:12075:2064":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"2:46792:2150":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:9343:4123":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:3336:4193":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6126:5570":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7042:5811":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"21:11141:2057":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"17:2484:45685":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:6110:5541":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:6438:2134":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:4308:41428":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:10566:4334":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"21:10364:2037":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"17:13986:51720":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:3561:2304":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"21:13709:2155":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"5:1694:5233":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:12632:50539":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:10988:45856":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:12302:4329":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"9:1075:5346":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:13084:4512":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:49745:4950":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:2062:2932":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:10420:5864":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:897:5962":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"21:599:2660":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"1:2793:4167":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:157:38082":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"21:16820:2182":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"1:4684:2259":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:8410:5227":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:8380:4357":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"27:595:3686":{"crate_id":27,"path":["futures_channel","mpsc","SenderTask"],"kind":"struct"},"21:18423:63901":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"2:46730:4705":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:11616:46281":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:4350:44448":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:6202:42478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"21:18093:2309":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"17:11915:50266":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:1457:4254":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:51211:4772":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:5415:2932":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4474:41449":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:10128:5937":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"18:830:5957":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:13963:60024":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"20:194:3000":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"1:2027:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:8027:4357":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:16024:1885":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:10912:45870":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"14:0:1844":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:10864:45773":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:4198:41419":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:1721:39298":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:9264:43948":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:5488:5551":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:1507:4248":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:24121:37400":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:5632:5556":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4116:41412":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:56390:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13780:51669":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:1653:4244":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:7453:61801":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"27:567:3679":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"17:12659:50541":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:1531:39279":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"21:12114:2066":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"2:48522:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:12124:4211":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:49959:4521":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:7615:4292":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:47537:2179":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:6464:5515":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"9:776:5325":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"0:0:1742":{"crate_id":0,"path":["futures"],"kind":"module"},"2:2769:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:9139:4318":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:3287:5773":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"21:12049:2062":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"21:16971:2185":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"16:7884:5510":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13062:51069":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"21:602:2047":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"17:13598:51620":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:3197:2288":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:13939:54556":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:4242:61801":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:10925:4127":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:11077:1655":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:9133:45572":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:15216:4226":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"12:869:2241":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:13923:4296":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:24533:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:6094:39223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"21:16609:2174":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"2:32340:5030":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"16:4230:44378":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:8404:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:6853:43004":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:8203:2756":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:45860:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:11199:45591":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:10952:3770":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:3993:41397":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:16014:1875":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"21:15052:63903":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"2:50182:4962":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"12:1703:5422":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:6959:4134":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:11254:5853":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:2330:5237":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:11947:50268":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"31:0:1706":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"2:3559:2791":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:4748:2940":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:4386:44459":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:5815:5564":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"30:950:2155":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"21:14118:2142":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"1:12053:4301":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"21:12636:2083":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"21:11044:2057":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"5:7257:61801":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:13154:51075":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:10303:4582":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"12:2398:60016":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:7620:5155":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:51030:59492":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:51721:4742":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:11555:46271":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"12:2066:4194":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4208:41420":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:15498:5438":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:11156:4105":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:6437:4129":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:1488:4244":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:1634:39291":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:6691:5586":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"21:11392:2048":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"12:1162:5408":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:1235:5236":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:11365:4412":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"21:8121:1678":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"31:208:1710":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"1:15474:28330":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"27:515:3674":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"24:258:2032":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"21:16774:2173":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"6:4088:41409":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:10788:45770":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:53419:19744":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:15092:4218":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"5:3882:2309":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:48549:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:22602:60745":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"21:9629:1664":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"21:18121:2310":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"16:5960:5751":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"21:16463:2170":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"12:971:4250":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:12116:2179":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:4512:2954":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"28:203:2669":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"21:8009:1378":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"2:32334:4324":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:10253:5831":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:50362:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"12:1238:5411":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:5775:4150":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:3812:3555":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:0:1848":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:49716:2312":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:5271:42028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:8883:2758":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:3389:3537":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"21:13872:2147":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"2:3358:3527":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13394:51569":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:49512:4939":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:45901:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:51492:4773":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:11397:4913":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:4356:41434":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:4852:44575":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:10106:5935":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"21:10525:2037":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"17:13272:51168":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:1576:39285":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:3172:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:9528:2941":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:51901:59530":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:12076:58825":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"1:6787:4163":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:1733:4422":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"12:2412:62995":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11738:46487":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11714:46377":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"12:979:4251":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:9574:5858":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:11924:4928":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:1446:4242":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:13318:51235":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"18:621:63882":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:1236:45654":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"21:17310:2244":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"21:17163:2179":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"1:5719:4147":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:1558:39283":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:10635:45768":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"21:10697:2040":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"1:10577:54502":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"16:7856:5605":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:47605:37629":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:51869:59529":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:3175:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:4485:41450":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:14103:56824":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:5213:42045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:3951:4191":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:10814:5903":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"10:0:1841":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:10938:45880":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:7279:5812":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11653:46318":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:9245:5835":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:48498:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"27:460:3725":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"6:586:38398":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:15201:4225":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:5996:5568":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:9065:45570":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:46782:2148":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:10149:45582":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:4741:2320":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:13296:51171":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:45876:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:47528:2754":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:6764:2932":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10844:5879":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:2155:2179":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"21:10281:2033":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"2:22751:4650":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"30:915:63887":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:49566:4913":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:618:38403":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:5741:4149":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:14242:2953":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"21:16337:2167":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"6:5995:38272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:6951:41586":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:46024:3550":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:2863:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"21:18193:2312":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"5:1663:4245":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:4067:41406":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"21:11008:150":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"21:14714:2152":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"5:2777:5240":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:6181:42477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:9729:63862":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"12:777:2756":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"21:18031:2308":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"2:3380:3530":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"28:71:63996":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"2:49448:2941":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:7255:58823":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13506:51607":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11406:45984":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:12227:4443":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:10313:4585":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:49630:4944":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:50354:2790":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"21:13522:68":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"1:2456:6545":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:3064:5824":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:5231:44804":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:6391:5578":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:11499:46209":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:5008:4103":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"1:16002:1866":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:9381:4507":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:6949:5807":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:4215:2241":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:12773:58828":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"16:5407:5546":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:7824:61807":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"21:12693:2084":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"17:11147:45588":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:7216:5597":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"30:153:52074":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11779:46497":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"31:166:1711":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"2:8363:4657":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:23082:4127":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:10661:8930":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:1618:2756":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:46621:2130":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11193:4107":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:5111:4594":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"21:8769:2182":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"1:1651:4255":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"21:15788:2052":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"1:1524:4250":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:2314:5870":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:47666:2179":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"21:18137:3984":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"21:10274:1672":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"21:15993:2165":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"17:12598:50476":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:48842:59605":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:3506:5774":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:7205:5596":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:3178:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:11206:4907":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:1537:39280":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10179:45653":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:46328:4794":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"21:14207:2141":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"6:5207:42044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"21:18626:2398":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"2:3411:3538":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"21:17133:3004":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"2:2866:4671":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"21:12507:2077":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"6:6928:41583":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:24499:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:13627:51628":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:12671:50542":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"7:85:43130":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"21:14771:2153":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"6:521:38391":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:6247:42482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:53302:4762":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:1486:4255":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"15:248:5430":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:4434:2956":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:4506:44479":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"20:169:1667":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"6:4526:41454":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:3522:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:3417:3539":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:5788:61801":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:9763:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"18:755:63885":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:32299:3515":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:50037:4524":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11186:45590":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:8115:2756":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:4332:41431":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8289:4357":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:46468:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:7174:5593":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:9769:63854":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:6644:5585":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:580:3867":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:6117:42473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"21:18572:2396":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"2:8448:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:8106:5123":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:11506:12332":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"12:472:62984":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"21:17179:2078":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"29:49:1659":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"6:5146:41999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:5975:5567":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"21:12923:2128":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"21:15311:2160":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:7932:54555":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"6:4392:41439":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12582:50475":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:2866:5763":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:9261:2631":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:1041:4185":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:24222:5045":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:7420:5524":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:7928:4628":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:3200:2293":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"21:12426:2075":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"21:18410:3743":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"17:13119:51071":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:24873:4982":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"}},"external_crates":{"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"slab","html_root_url":null},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"21":{"name":"futures_util","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"futures_channel","html_root_url":null},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"31":{"name":"futures_executor","html_root_url":null},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"futures_task","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"29":{"name":"futures_io","html_root_url":null},"30":{"name":"memchr","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null}},"format_version":17}