{"root":"0:0:2983","crate_version":"1.0.90","includes_private":false,"index":{"0:493:462":{"id":"0:493:462","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[255,9],"end":[255,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:407":{"id":"0:407","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,27],"end":[94,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2662:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3138:4660-0:421:2130":{"id":"a:2:3138:4660-0:421:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:4660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13170:3028":{"id":"2:13170:3028","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41582:190","prim@char":"1:12296:458","self::pattern":"2:12812:5266"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:5261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13251:29977":{"id":"2:13251:29977","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:974:40381"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13213:3304":{"id":"2:13213:3304","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253:2585":{"id":"0:253:2585","crate_id":0,"name":"compile","span":{"filename":"src/lib.rs","begin":[1372,4],"end":[1376,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\n# Library name\n\nThe `output` string argument determines the file name for the compiled\nlibrary. The Rust compiler will create an assembly named \"lib\"+output+\".a\".\nMSVC will create a file named output+\".lib\".\n\nThe choice of `output` is close to arbitrary, but:\n\n- must be nonempty,\n- must not contain a path separator (`/`),\n- must be unique across all `compile` invocations made by the same build\n  script.\n\nIf your build script compiles a single source file, the base name of\nthat source file would usually be reasonable:\n\n```no_run\ncc::Build::new().file(\"blobstore.c\").compile(\"blobstore\");\n```\n\nCompiling multiple source files, some people use their crate's name, or\ntheir crate's name + \"-cc\".\n\nOtherwise, please use your imagination.\n\nFor backwards compatibility, if `output` starts with \"lib\" *and* ends\nwith \".a\", a second \"lib\" prefix and \".a\" suffix do not get added on,\nbut this usage is deprecated; please omit `lib` and `.a` in the argument\nthat you pass.\n\n# Panics\n\nPanics if `output` is not formatted correctly or if one of the underlying\ncompiler commands fails. It can also panic if it fails reading file names\nor creating directories.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13134:2279":{"id":"2:13134:2279","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41582:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:400:3547":{"id":"0:400:3547","crate_id":0,"name":"Vs17","span":{"filename":"src/windows/find_tools.rs","begin":[106,4],"end":[106,8]},"visibility":"default","docs":"Visual Studio 17 (2022)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:182:918":{"id":"0:182:918","crate_id":0,"name":"include","span":{"filename":"src/lib.rs","begin":[435,4],"end":[438,5]},"visibility":"public","docs":"Add a directory to the `-I` or include path for headers\n\n# Example\n\n```no_run\nuse std::path::Path;\n\nlet library_path = Path::new(\"/path/to/library\");\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .include(library_path)\n    .include(\"src\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2848:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5392:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13131:35177":{"id":"2:13131:35177","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:348":{"id":"0:348","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3733,0],"end":[3737,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:349:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:149:2295":{"id":"0:149:2295","crate_id":0,"name":"to_command","span":{"filename":"src/tool.rs","begin":[219,4],"end":[241,5]},"visibility":"public","docs":"Converts this compiler into a `Command` that's ready to be run.\n\nThis is useful for when the compiler needs to be executed and the\ncommand returned will already have the initial arguments and environment\nvariables configured.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5598:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:2163":{"id":"0:201:2163","crate_id":0,"name":"static_flag","span":{"filename":"src/lib.rs","begin":[730,4],"end":[733,5]},"visibility":"public","docs":"Set the `-static` flag.\n\nWhen enabled on systems that support dynamic linking, this prevents\nlinking with the shared libraries.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .static_flag(true)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13154:32311":{"id":"2:13154:32311","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43716:4155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2893:136":{"id":"2:2893:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,31],"end":[94,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3098:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:224:861":{"id":"0:224:861","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[1023,4],"end":[1026,5]},"visibility":"public","docs":"Configures the host assumed by this configuration.\n\nThis option is automatically scraped from the `HOST` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .host(\"arm-linux-gnueabihf\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["host",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32073:4292-0:391:3537":{"id":"a:2:32073:4292-0:391:3537","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32073:4292","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:405":{"id":"0:405","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,16],"end":[94,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2657:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:406:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:243:2169":{"id":"0:243:2169","crate_id":0,"name":"emit_rerun_if_env_changed","span":{"filename":"src/lib.rs","begin":[1183,4],"end":[1186,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo to detect environment\nchanges that should trigger a rebuild.\n\nThis has no effect if the `cargo_metadata` option is `false`.\n\nThis option defaults to `true`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["emit_rerun_if_env_changed",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:787":{"id":"0:176:787","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[345,4],"end":[347,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10218:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10199:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:516":{"id":"0:516","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[321,9],"end":[321,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2623:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:517:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2890-0:513:136":{"id":"b:2:2890-0:513:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13246:28016":{"id":"2:13246:28016","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:231:491":{"id":"0:231:491","crate_id":0,"name":"compiler","span":{"filename":"src/lib.rs","begin":[1082,4],"end":[1085,5]},"visibility":"public","docs":"Configures the compiler to be used to produce output.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["compiler",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2848:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5392:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:235:2156":{"id":"0:235:2156","crate_id":0,"name":"ranlib","span":{"filename":"src/lib.rs","begin":[1102,4],"end":[1105,5]},"visibility":"public","docs":"Configures the tool used to index archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ranlib",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2848:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5392:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:3107":{"id":"0:154:3107","crate_id":0,"name":"cc_env","span":{"filename":"src/tool.rs","begin":[269,4],"end":[283,5]},"visibility":"public","docs":"Returns the compiler command in format of CC environment variable.\nOr empty string if CC env was not present\n\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:2048:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13142:35178":{"id":"2:13142:35178","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12302:1700","str::slice_mut_unchecked":"2:13143:35179","crate::ops::Index":"2:39146:5109"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:254:2591":{"id":"0:254:2591","crate_id":0,"name":"compile_intermediates","span":{"filename":"src/lib.rs","begin":[1383,4],"end":[1388,5]},"visibility":"public","docs":"Run the compiler, generating intermediate files, but without linking\nthem into an archive file.\n\nThis will return a list of compiled object files, in the same order\nas they were passed in as `file`/`files` methods.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:7048:263","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5280:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:264:2286":{"id":"0:264:2286","crate_id":0,"name":"try_get_compiler","span":{"filename":"src/lib.rs","begin":[1711,4],"end":[1785,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis will return a result instead of panicking; see\n[`get_compiler()`](Self::get_compiler) for the complete description.","links":{"Self::get_compiler":"0:263:2546"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41713:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5854-0:513:136":{"id":"b:5:5854-0:513:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10249:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32015:4291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5856:1759"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:241:1287":{"id":"0:241:1287","crate_id":0,"name":"pic","span":{"filename":"src/lib.rs","begin":[1157,4],"end":[1160,5]},"visibility":"public","docs":"Configures whether the compiler will emit position independent code.\n\nThis option defaults to `false` for `windows-gnu` and bare metal targets and\nto `true` for all other targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pic",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3721:1799":{"id":"2:3721:1799","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39315:9192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174:817":{"id":"0:174:817","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[339,4],"end":[341,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"io::Error","id":"1:3031:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41675:4468-0:421:2130":{"id":"a:2:41675:4468-0:421:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41675:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13198:28806":{"id":"2:13198:28806","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:5261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13201:4058":{"id":"2:13201:4058","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12812:5266","`DoubleEndedIterator`":"2:8201:129","prim@char":"1:12296:458","str::rmatches":"2:13204:35183"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43666:5286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:2145":{"id":"0:202:2145","crate_id":0,"name":"no_default_flags","span":{"filename":"src/lib.rs","begin":[741,4],"end":[744,5]},"visibility":"public","docs":"Disables the generation of default compiler flags. The default compiler\nflags may cause conflicts in some cross compiling scenarios.\n\nSetting the `CRATE_CC_NO_DEFAULTS` environment variable has the same\neffect as setting this to `true`. The presence of the environment\nvariable and the value of `no_default_flags` will be OR'd together.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["no_default_flags",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5622:28014":{"id":"5:5622:28014","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13247:28017"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:215:2148":{"id":"0:215:2148","crate_id":0,"name":"cpp_link_stdlib","span":{"filename":"src/lib.rs","begin":[941,4],"end":[947,5]},"visibility":"public","docs":"Set the standard library to link against when compiling with C++\nsupport.\n\nIf the `CXXSTDLIB` environment variable is set, its value will\noverride the default value, but not the value explicitly set by calling\nthis function.\n\nA value of `None` indicates that no automatic linking should happen,\notherwise cargo will link against the specified library.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n- `c++_shared` or `c++_static` for Android\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .cpp_link_stdlib(\"stdc++\")\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_link_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13247:28017":{"id":"2:13247:28017","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:2147":{"id":"0:208:2147","crate_id":0,"name":"cpp","span":{"filename":"src/lib.rs","begin":[779,4],"end":[782,5]},"visibility":"public","docs":"Set C++ support.\n\nThe other `cpp_*` options will only become active if this is set to\n`true`.\n\nThe name of the C++ standard library to link is decided by:\n1. If [`cpp_link_stdlib`](Build::cpp_link_stdlib) is set, use its value.\n2. Else if the `CXXSTDLIB` environment variable is set, use its value.\n3. Else the default is `libc++` for OS X and BSDs, `libc++_shared` for Android,\n`None` for MSVC and `libstdc++` for anything else.","links":{"Build::cpp_link_stdlib":"0:215:2148"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:727-0:450:2136":{"id":"b:5:727-0:450:2136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2623:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:3272","5:730:2311","5:731:4752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2610-0:391:3537":{"id":"b:2:2610-0:391:3537","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32015:4291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2604:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:27750"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:152:329":{"id":"0:152:329","crate_id":0,"name":"args","span":{"filename":"src/tool.rs","begin":[253,4],"end":[255,5]},"visibility":"public","docs":"Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"OsString","id":"1:2048:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:1161":{"id":"0:181:1161","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[374,4],"end":[418,5]},"visibility":"public","docs":"Construct a new instance of a blank set of configuration.\n\nThis builder is finished with the [`compile`] function.\n\n[`compile`]: struct.Build.html#method.compile","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13130:3855":{"id":"2:13130:3855","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12360:3302"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3138:4660-0:391:3537":{"id":"a:2:3138:4660-0:391:3537","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:4660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13163:2516":{"id":"2:13163:2516","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:5266"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:5261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:727-0:391:3537":{"id":"b:5:727-0:391:3537","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2623:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:3272","5:730:2311","5:731:4752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13210:35185":{"id":"2:13210:35185","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12812:5266","`DoubleEndedIterator`":"2:8201:129","prim@char":"1:12296:458","str::match_indices":"2:13207:35184"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43630:5285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:5261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13217:3708":{"id":"2:13217:3708","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2895-0:513:136":{"id":"b:2:2895-0:513:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2898:136","2:2899:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:199:2327":{"id":"0:199:2327","crate_id":0,"name":"try_flags_from_environment","span":{"filename":"src/lib.rs","begin":[692,4],"end":[696,5]},"visibility":"public","docs":"Add flags from the specified environment variable.\n\nNormally the `cc` crate will consult with the standard set of environment\nvariables (such as `CFLAGS` and `CXXFLAGS`) to construct the compiler invocation. Use of\nthis method provides additional levers for the end user to use when configuring the build\nprocess.\n\nJust like the standard variables, this method will search for an environment variable with\nappropriate target prefixes, when appropriate.\n\n# Examples\n\nThis method is particularly beneficial in introducing the ability to specify crate-specific\nflags.\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .try_flags_from_environment(concat!(env!(\"CARGO_PKG_NAME\"), \"_CFLAGS\"))\n    .expect(\"the environment variable must be specified and UTF-8\")\n    .compile(\"foo\");\n```\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["environ_key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41713:225","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13136:28768":{"id":"2:13136:28768","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41582:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13252:35191":{"id":"2:13252:35191","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4898:35191"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43761:5279","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13127:35176":{"id":"2:13127:35176","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13125:35175"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:513:136":{"id":"0:513:136","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[322,0],"end":[327,1]},"visibility":"public","docs":"Represents an internal error that occurred, with an explanation.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:3103:246-0:513:136","a:2:32014:236-0:513:136","a:2:41675:4468-0:513:136","a:2:41674:4469-0:513:136","a:2:32073:4292-0:513:136","a:2:3138:4660-0:513:136","b:2:2895-0:513:136","b:2:2884-0:513:136","b:2:2610-0:513:136","b:2:2607-0:513:136","b:2:2880-0:513:136","b:2:3719-0:513:136","b:2:2890-0:513:136","b:5:727-0:513:136","b:5:5854-0:513:136","0:175","0:518","0:173","0:177","0:516"]}}},"2:13143:35179":{"id":"2:13143:35179","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12302:1700","crate::ops::IndexMut":"2:3379:5110","str::slice_unchecked":"2:13142:35178"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13227:3378":{"id":"2:13227:3378","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:5266"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3719-0:421:2130":{"id":"b:2:3719-0:421:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32015:4291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3717:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3721:1799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13233:3110":{"id":"2:13233:3110","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:5266"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:5261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13242:2896":{"id":"2:13242:2896","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12773:135","`FromStr`":"2:12772:3580"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41713:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12772:3580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12772:3580","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41675:4468-0:450:2136":{"id":"a:2:41675:4468-0:450:2136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41675:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:495:787":{"id":"0:495:787","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[255,16],"end":[255,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10218:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10199:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13152:3054":{"id":"2:13152:3054","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13153:3291"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43736:5270","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32014:236-0:391:3537":{"id":"a:2:32014:236-0:391:3537","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32014:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2886:817":{"id":"2:2886:817","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:2162":{"id":"0:200:2162","crate_id":0,"name":"shared_flag","span":{"filename":"src/lib.rs","begin":[711,4],"end":[714,5]},"visibility":"public","docs":"Set the `-shared` flag.\n\nWhen enabled, the compiler will produce a shared object which can\nthen be linked with other objects to form an executable.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["shared_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:262:2671":{"id":"0:262:2671","crate_id":0,"name":"expand","span":{"filename":"src/lib.rs","begin":[1675,4],"end":[1680,5]},"visibility":"public","docs":"Run the compiler, returning the macro-expanded version of the input files.\n\nThis is only relevant for C and C++ files.\n\n# Panics\nPanics if more than one file is present in the config, or if compiler\npath has an invalid file name.\n\n# Example\n```no_run\nlet out = cc::Build::new().file(\"src/foo.c\").expand();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13124:35174":{"id":"2:13124:35174","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32073:4292-0:421:2130":{"id":"a:2:32073:4292-0:421:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32073:4292","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:186:2230":{"id":"0:186:2230","crate_id":0,"name":"define","span":{"filename":"src/lib.rs","begin":[480,4],"end":[484,5]},"visibility":"public","docs":"Specify a `-D` variable with an optional value.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .define(\"FOO\", \"BAR\")\n    .define(\"BAZ\", None)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["val",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13186:35182":{"id":"2:13186:35182","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12812:5266","str::split":"2:13174:2868","prim@char":"1:12296:458","str::split_terminator":"2:13183:35181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43530:5291","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:5261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13221:35189":{"id":"2:13221:35189","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:5266"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12838:5259","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13151:4960":{"id":"2:13151:4960","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43448:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177":{"id":"0:177","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[350,0],"end":[350,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","source","description","type_id","cause"],"trait":{"name":"Error","id":"2:2943:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13150:9437":{"id":"2:13150:9437","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12296:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43438:5274","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:431":{"id":"0:431","crate_id":0,"name":null,"span":{"filename":"src/tool.rs","begin":[18,9],"end":[18,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_docs)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2623:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:432:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2880-0:421:2130":{"id":"b:2:2880-0:421:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2883:2191"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2895-0:450:2136":{"id":"b:2:2895-0:450:2136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2898:136","2:2899:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32014:236-0:450:2136":{"id":"a:2:32014:236-0:450:2136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32014:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:729:3272":{"id":"5:729:3272","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:223:1725":{"id":"0:223:1725","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[1005,4],"end":[1008,5]},"visibility":"public","docs":"Configures the target this configuration will be compiling for.\n\nThis option is automatically scraped from the `TARGET` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .target(\"aarch64-linux-android\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3719-0:450:2136":{"id":"b:2:3719-0:450:2136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32015:4291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3717:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3721:1799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5620:35889":{"id":"5:5620:35889","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:295:2171","`String`":"5:7632:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2171","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:244:2161":{"id":"0:244:2161","crate_id":0,"name":"static_crt","span":{"filename":"src/lib.rs","begin":[1191,4],"end":[1194,5]},"visibility":"public","docs":"Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.\n\nThis option defaults to `false`, and affect only msvc targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_crt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32014:236-0:421:2130":{"id":"a:2:32014:236-0:421:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32014:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13207:35184":{"id":"2:13207:35184","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12812:5266","`DoubleEndedIterator`":"2:8201:129","prim@char":"1:12296:458","str::rmatch_indices":"2:13210:35185"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43612:5284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3103:246-0:391:3537":{"id":"a:2:3103:246-0:391:3537","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13189:28802":{"id":"2:13189:28802","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:5266","str::rsplitn":"2:13192:28804"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43566:5290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240:2485":{"id":"0:240:2485","crate_id":0,"name":"link_lib_modifier","span":{"filename":"src/lib.rs","begin":[1148,4],"end":[1151,5]},"visibility":"public","docs":"Adds a native library modifier that will be added to the\n`rustc-link-lib=static:MODIFIERS=LIBRARY_NAME` metadata line\nemitted for cargo if `cargo_metadata` is enabled.\nSee <https://doc.rust-lang.org/rustc/command-line-arguments.html#-l-link-the-generated-crate-to-a-native-library>\nfor the list of modifiers accepted by rustc.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["link_lib_modifier",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:394:3541":{"id":"0:394:3541","crate_id":0,"name":"Vs14","span":{"filename":"src/windows/find_tools.rs","begin":[100,4],"end":[100,8]},"visibility":"default","docs":"Visual Studio 14 (2015)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:159:2743":{"id":"0:159:2743","crate_id":0,"name":"is_like_msvc","span":{"filename":"src/tool.rs","begin":[321,4],"end":[326,5]},"visibility":"public","docs":"Whether the tool is MSVC-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41674:4469-0:513:136":{"id":"a:2:41674:4469-0:513:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41674:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13153:3291":{"id":"2:13153:3291","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13152:3054"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43745:5268","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:494":{"id":"0:494","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[255,16],"end":[255,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10244:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:495:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:411:462":{"id":"0:411:462","crate_id":0,"name":"clone","span":{"filename":"src/windows/find_tools.rs","begin":[94,37],"end":[94,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:406:685":{"id":"0:406:685","crate_id":0,"name":"eq","span":{"filename":"src/windows/find_tools.rs","begin":[94,16],"end":[94,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:2244":{"id":"0:192:2244","crate_id":0,"name":"remove_flag","span":{"filename":"src/lib.rs","begin":[520,4],"end":[523,5]},"visibility":"public","docs":"Removes a compiler flag that was added by [`Build::flag`].\n\nWill not remove flags added by other means (default flags,\nflags from env, and so on).\n\n# Example\n```\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"unwanted_flag\")\n    .remove_flag(\"unwanted_flag\");\n```","links":{"`Build::flag`":"0:191:2238"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32073:4292-0:513:136":{"id":"a:2:32073:4292-0:513:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32073:4292","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:518":{"id":"0:518","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[321,16],"end":[321,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10244:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:519:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2609:2117":{"id":"2:2609:2117","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5608:35887":{"id":"5:5608:35887","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13236:3787":{"id":"2:13236:3787","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:5266"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173":{"id":"0:173","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[338,0],"end":[342,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"1:3031:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:174:817"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13166:2525":{"id":"2:13166:2525","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41582:190","prim@char":"1:12296:458","self::pattern":"2:12812:5266"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5623:28015":{"id":"5:5623:28015","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13248:28018"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2899:1784":{"id":"2:2899:1784","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41713:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:228:2154":{"id":"0:228:2154","crate_id":0,"name":"force_frame_pointer","span":{"filename":"src/lib.rs","begin":[1062,4],"end":[1065,5]},"visibility":"public","docs":"Configures whether the compiler will emit instructions to store\nframe pointers during codegen.\n\nThis option is automatically enabled when debug information is emitted.\nOtherwise the target platform compiler's default will be used.\nYou can use this option to force a specific setting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["force",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3103:246-0:513:136":{"id":"a:2:3103:246-0:513:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13122:981":{"id":"2:13122:981","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12296:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2880-0:513:136":{"id":"b:2:2880-0:513:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2883:2191"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:392:3539":{"id":"0:392:3539","crate_id":0,"name":"Vs12","span":{"filename":"src/windows/find_tools.rs","begin":[98,4],"end":[98,8]},"visibility":"default","docs":"Visual Studio 12 (2013)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:219:2149":{"id":"0:219:2149","crate_id":0,"name":"cpp_set_stdlib","span":{"filename":"src/lib.rs","begin":[982,4],"end":[990,5]},"visibility":"public","docs":"Force the C++ compiler to use the specified standard library.\n\nSetting this option will automatically set `cpp_link_stdlib` to the same\nvalue.\n\nThe default value of this option is always `None`.\n\nThis option has no effect when compiling for a Visual Studio based\ntarget.\n\nThis option sets the `-stdlib` flag, which is only supported by some\ncompilers (clang, icc) but not by others (gcc). The library will not\ndetect which compiler is used, as such it is the responsibility of the\ncaller to ensure that this option is only used in conjunction with a\ncompiler which supports the `-stdlib` flag.\n\nA value of `None` indicates that no specific C++ standard library should\nbe used, otherwise `-stdlib` is added to the compile invocation.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .cpp_set_stdlib(\"c++\")\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_set_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213:2115":{"id":"0:213:2115","crate_id":0,"name":"warnings","span":{"filename":"src/lib.rs","begin":[887,4],"end":[891,5]},"visibility":"public","docs":"Set warnings flags.\n\nAdds some flags:\n- \"-Wall\" for MSVC.\n- \"-Wall\", \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:2146":{"id":"0:205:2146","crate_id":0,"name":"files","span":{"filename":"src/lib.rs","begin":[753,4],"end":[762,5]},"visibility":"public","docs":"Add files which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8163:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:8163:164","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2848:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5392:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:3903":{"id":"0:156:3903","crate_id":0,"name":"is_like_gnu","span":{"filename":"src/tool.rs","begin":[300,4],"end":[302,5]},"visibility":"public","docs":"Whether the tool is GNU Compiler Collection-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13149:3901":{"id":"2:13149:3901","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12296:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43432:5275","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2884-0:450:2136":{"id":"b:2:2884-0:450:2136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2886:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2898:136":{"id":"2:2898:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31938:4218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:203:776":{"id":"0:203:776","crate_id":0,"name":"file","span":{"filename":"src/lib.rs","begin":[747,4],"end":[750,5]},"visibility":"public","docs":"Add a file which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2848:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5392:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:434:787":{"id":"0:434:787","crate_id":0,"name":"fmt","span":{"filename":"src/tool.rs","begin":[18,16],"end":[18,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10218:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10199:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:2349":{"id":"0:207:2349","crate_id":0,"name":"get_files","span":{"filename":"src/lib.rs","begin":[765,4],"end":[767,5]},"visibility":"public","docs":"Get the files which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"impl_trait":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8309:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5392:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:682":{"id":"0:153:682","crate_id":0,"name":"env","span":{"filename":"src/tool.rs","begin":[261,4],"end":[263,5]},"visibility":"public","docs":"Returns the set of environment variables needed for this compiler to\noperate.\n\nThis is typically only used for MSVC compilers currently.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"tuple":[{"resolved_path":{"name":"OsString","id":"1:2048:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"OsString","id":"1:2048:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2880-0:391:3537":{"id":"b:2:2880-0:391:3537","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2883:2191"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5605:2781":{"id":"5:5605:2781","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13250:29976":{"id":"2:13250:29976","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:974:40381"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2607-0:513:136":{"id":"b:2:2607-0:513:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32015:4291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2601:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:2117"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13204:35183":{"id":"2:13204:35183","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12812:5266","`DoubleEndedIterator`":"2:8201:129","prim@char":"1:12296:458","str::matches":"2:13201:4058"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43684:5287","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:5261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:4179":{"id":"5:5621:4179","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:421:2130":{"id":"0:421:2130","crate_id":0,"name":"Tool","span":{"filename":"src/tool.rs","begin":[20,0],"end":[30,1]},"visibility":"public","docs":"Configuration used to represent an invocation of a C compiler.\n\nThis can be used to figure out what compiler is in use, what the arguments\nto it are, and what the environment variables look like for the compiler.\nThis can be used to further configure other build systems (e.g. forward\nalong CC and/or CFLAGS) or the `to_command` method can be used to run the\ncompiler itself.","links":{},"attrs":["#[allow(missing_docs)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:135","a:2:3103:246-0:421:2130","a:2:32014:236-0:421:2130","a:2:41675:4468-0:421:2130","a:2:41674:4469-0:421:2130","a:2:32073:4292-0:421:2130","a:2:3138:4660-0:421:2130","b:2:2895-0:421:2130","b:2:2884-0:421:2130","b:2:2610-0:421:2130","b:2:2607-0:421:2130","b:2:2880-0:421:2130","b:2:3719-0:421:2130","b:2:2890-0:421:2130","b:5:727-0:421:2130","0:433","0:431"]}}},"0:391:3537":{"id":"0:391:3537","crate_id":0,"name":"VsVers","span":{"filename":"src/windows/find_tools.rs","begin":[96,0],"end":[107,1]},"visibility":"public","docs":"A version of Visual Studio","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:392:3539","0:394:3541","0:396:3543","0:398:3545","0:400:3547"],"impls":["a:2:3103:246-0:391:3537","a:2:32014:236-0:391:3537","a:2:41675:4468-0:391:3537","a:2:41674:4469-0:391:3537","a:2:32073:4292-0:391:3537","a:2:3138:4660-0:391:3537","b:2:2895-0:391:3537","b:2:2884-0:391:3537","b:2:2610-0:391:3537","b:2:2607-0:391:3537","b:2:2880-0:391:3537","b:2:3719-0:391:3537","b:2:2890-0:391:3537","b:5:727-0:391:3537","0:410","0:405","0:409","0:404","0:402","0:407"]}}},"2:13180:28800":{"id":"2:13180:28800","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12812:5266","`DoubleEndedIterator`":"2:8201:129","prim@char":"1:12296:458","str::split":"2:13174:2868"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43480:5288","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:5261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2610-0:450:2136":{"id":"b:2:2610-0:450:2136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32015:4291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2604:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:27750"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13160:2515":{"id":"2:13160:2515","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:5266"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/tool.rs","begin":[32,0],"end":[327,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:149:2295","0:151:1283","0:152:329","0:153:682","0:154:3107","0:155:3927","0:156:3903","0:157:3904","0:159:2743"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:396:3543":{"id":"0:396:3543","crate_id":0,"name":"Vs15","span":{"filename":"src/windows/find_tools.rs","begin":[102,4],"end":[102,8]},"visibility":"default","docs":"Visual Studio 15 (2017)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2884-0:513:136":{"id":"b:2:2884-0:513:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2886:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5611:3385":{"id":"5:5611:3385","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:189:2234":{"id":"0:189:2234","crate_id":0,"name":"object","span":{"filename":"src/lib.rs","begin":[487,4],"end":[490,5]},"visibility":"public","docs":"Add an arbitrary object file to link in","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["obj",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2848:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5392:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13215:35186":{"id":"2:13215:35186","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:214:2165":{"id":"0:214:2165","crate_id":0,"name":"extra_warnings","span":{"filename":"src/lib.rs","begin":[910,4],"end":[913,5]},"visibility":"public","docs":"Set extra warnings flags.\n\nAdds some flags:\n- nothing for MSVC.\n- \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\n// Disables -Wextra, -Wall remains enabled:\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .extra_warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2610-0:421:2130":{"id":"b:2:2610-0:421:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32015:4291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2604:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:27750"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13219:35187":{"id":"2:13219:35187","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:391:3537":{"id":"b:2:2890-0:391:3537","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2607-0:421:2130":{"id":"b:2:2607-0:421:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32015:4291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2601:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:2117"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:226:2444":{"id":"0:226:2444","crate_id":0,"name":"opt_level_str","span":{"filename":"src/lib.rs","begin":[1041,4],"end":[1044,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:2315":{"id":"0:198:2315","crate_id":0,"name":"flag_if_supported","span":{"filename":"src/lib.rs","begin":[664,4],"end":[667,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler if it supports it\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag_if_supported(\"-Wlogical-op\") // only supported by GCC\n    .flag_if_supported(\"-Wunreachable-code\") // only supported by clang\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13123:2309":{"id":"2:13123:2309","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:293:3069":{"id":"0:293:3069","crate_id":0,"name":"get_archiver","span":{"filename":"src/lib.rs","begin":[3047,4],"end":[3052,5]},"visibility":"public","docs":"Get the archiver (ar) that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5631:5253"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5598:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13156:33358":{"id":"2:13156:33358","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43754:5267","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13195:3526":{"id":"2:13195:3526","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238:2474":{"id":"0:238:2474","crate_id":0,"name":"cargo_warnings","span":{"filename":"src/lib.rs","begin":[1128,4],"end":[1131,5]},"visibility":"public","docs":"Define whether compile warnings should be emitted for cargo. Defaults to\n`true`.\n\nIf disabled, compiler messages will not be printed.\nIssues unrelated to the compilation will always produce cargo warnings regardless of this setting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41675:4468-0:513:136":{"id":"a:2:41675:4468-0:513:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41675:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13192:28804":{"id":"2:13192:28804","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12296:458","str::splitn":"2:13189:28802","self::pattern":"2:12812:5266"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43584:5289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:5261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13121":{"id":"2:13121","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13122:981","2:13123:2309","2:13124:35174","2:13125:35175","2:13127:35176","2:13130:3855","2:13131:35177","2:13132:334","2:13133:28771","2:13134:2279","2:13136:28768","2:13138:28769","2:13140:28770","2:13142:35178","2:13143:35179","2:13144:3027","2:13145:28793","2:13146:28796","2:13147:28797","2:13149:3901","2:13150:9437","2:13151:4960","2:13152:3054","2:13153:3291","2:13154:32311","2:13155:35180","2:13156:33358","2:13157:2297","2:13160:2515","2:13163:2516","2:13166:2525","2:13170:3028","2:13174:2868","2:13177:3835","2:13180:28800","2:13183:35181","2:13186:35182","2:13189:28802","2:13192:28804","2:13195:3526","2:13198:28806","2:13201:4058","2:13204:35183","2:13207:35184","2:13210:35185","2:13213:3304","2:13215:35186","2:13217:3708","2:13219:35187","2:13220:35188","2:13221:35189","2:13224:3030","2:13227:3378","2:13230:3106","2:13233:3110","2:13236:3787","2:13239:35190","2:13242:2896","2:13244:28012","2:13245:29972","2:13246:28016","2:13247:28017","2:13248:28018","2:13249:29975","2:13250:29976","2:13251:29977","2:13252:35191","2:13254:10836","2:13255:35192"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:211:1692":{"id":"0:211:1692","crate_id":0,"name":"std","span":{"filename":"src/lib.rs","begin":[842,4],"end":[845,5]},"visibility":"public","docs":"Specify the C or C++ language standard version.\n\nThese values are common to modern versions of GCC, Clang and MSVC:\n- `c11` for ISO/IEC 9899:2011\n- `c17` for ISO/IEC 9899:2018\n- `c++14` for ISO/IEC 14882:2014\n- `c++17` for ISO/IEC 14882:2017\n- `c++20` for ISO/IEC 14882:2020\n\nOther values have less broad support, e.g. MSVC does not support `c++11`\n(`c++14` is the minimum), `c89` (omit the flag instead) or `c99`.\n\nFor compiling C++ code, you should also set `.cpp(true)`.\n\nThe default is that no standard flag is passed to the compiler, so the\nlanguage version will be the compiler's default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/modern.cpp\")\n    .cpp(true)\n    .std(\"c++17\")\n    .compile(\"modern\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["std",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41674:4469-0:421:2130":{"id":"a:2:41674:4469-0:421:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41674:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13145:28793":{"id":"2:13145:28793","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13144:3027","str::split_at_mut_checked":"2:13147:28797"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13245:29972":{"id":"2:13245:29972","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39501:16147","Self::is_ascii":"2:13244:28012"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39501:16147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3719-0:391:3537":{"id":"b:2:3719-0:391:3537","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32015:4291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3717:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3721:1799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:730:2311":{"id":"5:730:2311","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:2225":{"id":"0:184:2225","crate_id":0,"name":"includes","span":{"filename":"src/lib.rs","begin":[458,4],"end":[467,5]},"visibility":"public","docs":"Add multiple directories to the `-I` include path.\n\n# Example\n\n```no_run\n# use std::path::Path;\n# let condition = true;\n#\nlet mut extra_dir = None;\nif condition {\n    extra_dir = Some(Path::new(\"/path/to\"));\n}\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .includes(extra_dir)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dirs",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8163:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:8163:164","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2848:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5392:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32014:236-0:513:136":{"id":"a:2:32014:236-0:513:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32014:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:255:2592":{"id":"0:255:2592","crate_id":0,"name":"try_compile_intermediates","span":{"filename":"src/lib.rs","begin":[1394,4],"end":[1401,5]},"visibility":"public","docs":"Run the compiler, generating intermediate files, but without linking\nthem into an archive file.\n\nThis will return a result instead of panicking; see `compile_intermediates()` for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41713:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7048:263","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5280:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41674:4469-0:450:2136":{"id":"a:2:41674:4469-0:450:2136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41674:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2890-0:421:2130":{"id":"b:2:2890-0:421:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13177:3835":{"id":"2:13177:3835","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:5266"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12628:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2895-0:391:3537":{"id":"b:2:2895-0:391:3537","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2898:136","2:2899:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:402":{"id":"0:402","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10244:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:403:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13157:2297":{"id":"2:13157:2297","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:5266"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:175":{"id":"0:175","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[344,0],"end":[348,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10249:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:176:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13255:35192":{"id":"2:13255:35192","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4896:35192"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43779:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:2525":{"id":"0:36:2525","crate_id":0,"name":"find","span":{"filename":"src/windows/find_tools.rs","begin":[51,0],"end":[53,1]},"visibility":"public","docs":"Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.\n\nThe `target` argument is the target that the tool should work for (e.g.\ncompile or link for) and the `tool` argument is the tool to find (e.g.\n`cl.exe` or `link.exe`).\n\nThis function will return `None` if the tool could not be found, or it will\nreturn `Some(cmd)` which represents a command that's ready to execute the\ntool with the appropriate environment variables set.\n\nNote that this function always returns `None` for non-MSVC targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::process::Command","id":"1:5598:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13155:35180":{"id":"2:13155:35180","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43726:5283","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:433":{"id":"0:433","crate_id":0,"name":null,"span":{"filename":"src/tool.rs","begin":[18,16],"end":[18,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_docs)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10244:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:434:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5604:35886":{"id":"5:5604:35886","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2171","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:295:2171","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:2151":{"id":"0:210:2151","crate_id":0,"name":"cudart","span":{"filename":"src/lib.rs","begin":[809,4],"end":[814,5]},"visibility":"public","docs":"Link CUDA run-time.\n\nThis option mimics the `--cudart` NVCC command-line option. Just like\nthe original it accepts `{none|shared|static}`, with default being\n`static`. The method has to be invoked after `.cuda(true)`, or not\nat all, if the default is right for the project.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cudart",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13146:28796":{"id":"2:13146:28796","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13147:28797"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:248:2509":{"id":"0:248:2509","crate_id":0,"name":"try_compile","span":{"filename":"src/lib.rs","begin":[1209,4],"end":[1333,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThis will return a result instead of panicking; see compile() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41713:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2607-0:391:3537":{"id":"b:2:2607-0:391:3537","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32015:4291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2601:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:2117"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3103:246-0:450:2136":{"id":"a:2:3103:246-0:450:2136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2610-0:513:136":{"id":"b:2:2610-0:513:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32015:4291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2604:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:27750"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:239:2479":{"id":"0:239:2479","crate_id":0,"name":"cargo_debug","span":{"filename":"src/lib.rs","begin":[1138,4],"end":[1141,5]},"visibility":"public","docs":"Define whether debug information should be emitted for cargo. Defaults to whether\nor not the environment variable `CC_ENABLE_DEBUG_OUTPUT` is set.\n\nIf enabled, the compiler will emit debug information when generating object files,\nsuch as the command invoked and the exit status.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_debug",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212:2164":{"id":"0:212:2164","crate_id":0,"name":"warnings_into_errors","span":{"filename":"src/lib.rs","begin":[866,4],"end":[869,5]},"visibility":"public","docs":"Set warnings into errors flag.\n\nDisabled by default.\n\nWarning: turning warnings into errors only make sense\nif you are a developer of the crate using cc-rs.\nSome warnings only appear on some architecture or\nspecific version of the compiler. Any user of this crate,\nor any other crate depending on it, could fail during\ncompile time.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings_into_errors(true)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings_into_errors",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:237:2284":{"id":"0:237:2284","crate_id":0,"name":"cargo_metadata","span":{"filename":"src/lib.rs","begin":[1118,4],"end":[1121,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.\n\nThe emitted metadata is:\n\n - `rustc-link-lib=static=`*compiled lib*\n - `rustc-link-search=native=`*target folder*\n - When target is MSVC, the ATL-MFC libs are added via `rustc-link-search=native=`\n - When C++ is enabled, the C++ stdlib is added via `rustc-link-lib`\n - If `emit_rerun_if_env_changed` is not `false`, `rerun-if-env-changed=`*env*\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_metadata",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:450:2136":{"id":"0:450:2136","crate_id":0,"name":"Build","span":{"filename":"src/lib.rs","begin":[256,0],"end":[298,1]},"visibility":"public","docs":"A builder for compilation of a native library.\n\nA `Build` is the main type of the `cc` crate and is used to control all the\nvarious configuration options and such of a compile. You'll find more\ndocumentation on each method itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:180","a:2:3103:246-0:450:2136","a:2:32014:236-0:450:2136","a:2:41675:4468-0:450:2136","a:2:41674:4469-0:450:2136","a:2:32073:4292-0:450:2136","a:2:3138:4660-0:450:2136","b:2:2895-0:450:2136","b:2:2884-0:450:2136","b:2:2610-0:450:2136","b:2:2607-0:450:2136","b:2:2880-0:450:2136","b:2:3719-0:450:2136","b:2:2890-0:450:2136","b:5:727-0:450:2136","0:348","0:494","0:492"]}}},"2:13125:35175":{"id":"2:13125:35175","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180":{"id":"0:180","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,0],"end":[3731,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:181:1161","0:182:918","0:184:2225","0:186:2230","0:189:2234","0:191:2238","0:192:2244","0:194:2250","0:195:2257","0:197:2275","0:198:2315","0:199:2327","0:200:2162","0:201:2163","0:202:2145","0:203:776","0:205:2146","0:207:2349","0:208:2147","0:209:2150","0:210:2151","0:211:1692","0:212:2164","0:213:2115","0:214:2165","0:215:2148","0:219:2149","0:223:1725","0:224:861","0:225:2153","0:226:2444","0:227:593","0:228:2154","0:229:2152","0:231:491","0:233:2155","0:235:2156","0:237:2284","0:238:2474","0:239:2479","0:240:2485","0:241:1287","0:242:2160","0:243:2169","0:244:2161","0:248:2509","0:253:2585","0:254:2591","0:255:2592","0:260:2661","0:262:2671","0:263:2546","0:264:2286","0:293:3069","0:294:3070","0:297:3079","0:298:3080"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13248:28018":{"id":"2:13248:28018","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263:2546":{"id":"0:263:2546","crate_id":0,"name":"get_compiler","span":{"filename":"src/lib.rs","begin":[1700,4],"end":[1705,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis function will return a `Tool` which represents the culmination\nof this configuration at a snapshot in time. The returned compiler can\nbe inspected (e.g. the path, arguments, environment) to forward along to\nother tools, or the `to_command` method can be used to invoke the\ncompiler itself.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5619:35888":{"id":"5:5619:35888","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:517:462":{"id":"0:517:462","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[321,9],"end":[321,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2126":{"id":"0:26:2126","crate_id":0,"name":"find_tools","span":{"filename":"src/windows/find_tools.rs","begin":[11,0],"end":[1071,1]},"visibility":"public","docs":"A helper module to looking for windows-specific tools:\n1. On Windows host, probe the Windows Registry if needed;\n2. On non-Windows host, check specified environment variables.","links":{},"attrs":["#![allow(clippy::upper_case_acronyms)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:36:2525","0:38:2987","0:391:3537","0:42:3551"],"is_stripped":false}}},"b:2:2884-0:391:3537":{"id":"b:2:2884-0:391:3537","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2886:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:194:2250":{"id":"0:194:2250","crate_id":0,"name":"ar_flag","span":{"filename":"src/lib.rs","begin":[536,4],"end":[539,5]},"visibility":"public","docs":"Add a flag to the invocation of the ar\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .file(\"src/bar.c\")\n    .ar_flag(\"/NODEFAULTLIB:libc.dll\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:225:2153":{"id":"0:225:2153","crate_id":0,"name":"opt_level","span":{"filename":"src/lib.rs","begin":[1032,4],"end":[1035,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"primitive":"u32"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2607-0:450:2136":{"id":"b:2:2607-0:450:2136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32015:4291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2601:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:2117"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2890-0:450:2136":{"id":"b:2:2890-0:450:2136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5856:1759":{"id":"5:5856:1759","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32073:4292-0:450:2136":{"id":"a:2:32073:4292-0:450:2136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32073:4292","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:349:60":{"id":"0:349:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[3734,4],"end":[3736,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13174:2868":{"id":"2:13174:2868","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12812:5266","`DoubleEndedIterator`":"2:8201:129","prim@char":"1:12296:458","str::split_whitespace":"2:13152:3054","str::rsplit":"2:13180:28800"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43462:4159","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13147:28797":{"id":"2:13147:28797","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13146:28796"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41674:4469-0:391:3537":{"id":"a:2:41674:4469-0:391:3537","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41674:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13133:28771":{"id":"2:13133:28771","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12313:1829"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603":{"id":"5:5603","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5604:35886","5:5605:2781","5:5608:35887","5:5611:3385","5:5619:35888","5:5620:35889","5:5621:4179","5:5622:28014","5:5623:28015"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2884-0:421:2130":{"id":"b:2:2884-0:421:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2886:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13132:334":{"id":"2:13132:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13133:28771","`u8`":"1:12313:1829"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:727-0:421:2130":{"id":"b:5:727-0:421:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2623:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:3272","5:730:2311","5:731:4752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13249:29975":{"id":"2:13249:29975","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:974:40381"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:229:2152":{"id":"0:229:2152","crate_id":0,"name":"out_dir","span":{"filename":"src/lib.rs","begin":[1072,4],"end":[1075,5]},"visibility":"public","docs":"Configures the output directory where all object files and static\nlibraries will be located.\n\nThis option is automatically scraped from the `OUT_DIR` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["out_dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2848:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5392:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13244:28012":{"id":"2:13244:28012","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197:2275":{"id":"0:197:2275","crate_id":0,"name":"is_flag_supported","span":{"filename":"src/lib.rs","begin":[590,4],"end":[651,5]},"visibility":"public","docs":"Run the compiler to test if it accepts the given flag.\n\nFor a convenience method for setting flags conditionally,\nsee `flag_if_supported()`.\n\nIt may return error if it's unable to run the compiler with a test file\n(e.g. the compiler is missing or a write to the `out_dir` failed).\n\nNote: Once computed, the result of this call is stored in the\n`known_flag_support` field. If `is_flag_supported(flag)`\nis called again, the result will be read from the hash table.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41713:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}},{"type":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41675:4468-0:391:3537":{"id":"a:2:41675:4468-0:391:3537","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41675:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:432:462":{"id":"0:432:462","crate_id":0,"name":"clone","span":{"filename":"src/tool.rs","begin":[18,9],"end":[18,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294:3070":{"id":"0:294:3070","crate_id":0,"name":"try_get_archiver","span":{"filename":"src/lib.rs","begin":[3058,4],"end":[3060,5]},"visibility":"public","docs":"Get the archiver that's in use for this configuration.\n\nThis will return a result instead of panicking;\nsee [`Self::get_archiver`] for the complete description.","links":{"`Self::get_archiver`":"0:293:3069"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41713:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5598:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:3904":{"id":"0:157:3904","crate_id":0,"name":"is_like_clang","span":{"filename":"src/tool.rs","begin":[305,4],"end":[307,5]},"visibility":"public","docs":"Whether the tool is Clang-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13144:3027":{"id":"2:13144:3027","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13146:28796","str::split_at_mut":"2:13145:28793"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:242:2160":{"id":"0:242:2160","crate_id":0,"name":"use_plt","span":{"filename":"src/lib.rs","begin":[1172,4],"end":[1175,5]},"visibility":"public","docs":"Configures whether the Procedure Linkage Table is used for indirect\ncalls into shared libraries.\n\nThe PLT is used to provide features like lazy binding, but introduces\na small performance loss due to extra pointer indirection. Setting\n`use_plt` to `false` can provide a small performance increase.\n\nNote that skipping the PLT requires a recent version of GCC/Clang.\n\nThis only applies to ELF targets. It has no effect on other platforms.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["use_plt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3138:4660-0:450:2136":{"id":"a:2:3138:4660-0:450:2136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:4660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:519:787":{"id":"0:519:787","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[321,16],"end":[321,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10218:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10199:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3103:246-0:421:2130":{"id":"a:2:3103:246-0:421:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2894:1786":{"id":"2:2894:1786","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41713:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13138:28769":{"id":"2:13138:28769","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:227:593":{"id":"0:227:593","crate_id":0,"name":"debug","span":{"filename":"src/lib.rs","begin":[1051,4],"end":[1054,5]},"visibility":"public","docs":"Configures whether the compiler will emit debug information when\ngenerating object files.\n\nThis option is automatically scraped from the `DEBUG` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["debug",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:195:2257":{"id":"0:195:2257","crate_id":0,"name":"asm_flag","span":{"filename":"src/lib.rs","begin":[555,4],"end":[558,5]},"visibility":"public","docs":"Add a flag that will only be used with assembly files.\n\nThe flag will be applied to input files with either a `.s` or\n`.asm` extension (case insensitive).\n\n# Example\n\n```no_run\ncc::Build::new()\n    .asm_flag(\"-Wa,-defsym,abc=1\")\n    .file(\"src/foo.S\")  // The asm flag will be applied here\n    .file(\"src/bar.c\")  // The asm flag will not be applied here\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191:2238":{"id":"0:191:2238","crate_id":0,"name":"flag","span":{"filename":"src/lib.rs","begin":[502,4],"end":[505,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"-ffunction-sections\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:233:2155":{"id":"0:233:2155","crate_id":0,"name":"archiver","span":{"filename":"src/lib.rs","begin":[1092,4],"end":[1095,5]},"visibility":"public","docs":"Configures the tool used to assemble archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["archiver",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2848:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5392:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2880-0:450:2136":{"id":"b:2:2880-0:450:2136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2883:2191"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13220:35188":{"id":"2:13220:35188","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403:787":{"id":"0:403:787","crate_id":0,"name":"fmt","span":{"filename":"src/windows/find_tools.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10218:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10199:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13254:10836":{"id":"2:13254:10836","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4899:10836"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43770:5280","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:3551":{"id":"0:42:3551","crate_id":0,"name":"find_vs_version","span":{"filename":"src/windows/find_tools.rs","begin":[113,0],"end":[156,1]},"visibility":"public","docs":"Find the most recent installed version of Visual Studio\n\nThis is used by the cmake crate to figure out the correct\ngenerator.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41713:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2883:2191":{"id":"2:2883:2191","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2857:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3719-0:513:136":{"id":"b:2:3719-0:513:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32015:4291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3717:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3721:1799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:404":{"id":"0:404","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,16],"end":[94,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32016:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:151:1283":{"id":"0:151:1283","crate_id":0,"name":"path","span":{"filename":"src/tool.rs","begin":[247,4],"end":[249,5]},"visibility":"public","docs":"Returns the path for this compiler.\n\nNote that this may not be a path to a file on the filesystem, e.g. \"cc\",\nbut rather something which will be resolved when a process is spawned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5392:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492":{"id":"0:492","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[255,9],"end":[255,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2623:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:493:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2895-0:421:2130":{"id":"b:2:2895-0:421:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2898:136","2:2899:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65-0:26:2126":{"id":"0:65-0:26:2126","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[241,0],"end":[241,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"windows::find_tools","name":"windows_registry","id":"0:26:2126","glob":false}}},"0:38:2987":{"id":"0:38:2987","crate_id":0,"name":"find_tool","span":{"filename":"src/windows/find_tools.rs","begin":[58,0],"end":[91,1]},"visibility":"public","docs":"Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Tool","id":"0:421:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169-0:421:2130":{"id":"0:169-0:421:2130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[247,0],"end":[247,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tool::Tool","name":"Tool","id":"0:421:2130","glob":false}}},"2:2612:27750":{"id":"2:2612:27750","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13140:28770":{"id":"2:13140:28770","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:260:2661":{"id":"0:260:2661","crate_id":0,"name":"try_expand","span":{"filename":"src/lib.rs","begin":[1623,4],"end":[1661,5]},"visibility":"public","docs":"This will return a result instead of panicking; see expand() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41713:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:3079":{"id":"0:297:3079","crate_id":0,"name":"get_ranlib","span":{"filename":"src/lib.rs","begin":[3098,4],"end":[3103,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5631:5253"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5598:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:731:4752":{"id":"5:731:4752","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3138:4660-0:513:136":{"id":"a:2:3138:4660-0:513:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:4660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13183:35181":{"id":"2:13183:35181","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12812:5266","str::split":"2:13174:2868","prim@char":"1:12296:458","`DoubleEndedIterator`":"2:8201:129","str::rsplit_terminator":"2:13186:35182"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43512:5292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,37],"end":[94,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2623:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:391:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:411:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:398:3545":{"id":"0:398:3545","crate_id":0,"name":"Vs16","span":{"filename":"src/windows/find_tools.rs","begin":[104,4],"end":[104,8]},"visibility":"default","docs":"Visual Studio 16 (2019)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:209:2150":{"id":"0:209:2150","crate_id":0,"name":"cuda","span":{"filename":"src/lib.rs","begin":[794,4],"end":[801,5]},"visibility":"public","docs":"Set CUDA C++ support.\n\nEnabling CUDA will invoke the CUDA compiler, NVCC. While NVCC accepts\nthe most common compiler flags, e.g. `-std=c++17`, some project-specific\nflags might have to be prefixed with \"-Xcompiler\" flag, for example as\n`.flag(\"-Xcompiler\").flag(\"-fpermissive\")`. See the documentation for\n`nvcc`, the CUDA compiler driver, at <https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/>\nfor more information.\n\nIf enabled, this also implicitly enables C++ support.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cuda",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:450:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:727-0:513:136":{"id":"b:5:727-0:513:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2623:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:3272","5:730:2311","5:731:4752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:155:3927":{"id":"0:155:3927","crate_id":0,"name":"cflags_env","span":{"filename":"src/tool.rs","begin":[288,4],"end":[297,5]},"visibility":"public","docs":"Returns the compiler flags in format of CFLAGS environment variable.\nImportant here - this will not be CFLAGS from env, its internal gcc's flags to use as CFLAGS\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:2048:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2983":{"id":"0:0:2983","crate_id":0,"name":"cc","span":{"filename":"src/lib.rs","begin":[1,0],"end":[3982,1]},"visibility":"public","docs":"A library for [Cargo build scripts](https://doc.rust-lang.org/cargo/reference/build-scripts.html)\nto compile a set of C/C++/assembly/CUDA files into a static archive for Cargo\nto link into the crate being built. This crate does not compile code itself;\nit calls out to the default compiler for the platform. This crate will\nautomatically detect situations such as cross compilation and\n[various environment variables](#external-configuration-via-environment-variables) and will build code appropriately.\n\n# Example\n\nFirst, you'll want to both add a build script for your crate (`build.rs`) and\nalso add this crate to your `Cargo.toml` via:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n```\n\nNext up, you'll want to write a build script like so:\n\n```rust,no_run\n// build.rs\n\nfn main() {\n    cc::Build::new()\n        .file(\"foo.c\")\n        .file(\"bar.c\")\n        .compile(\"foo\");\n}\n```\n\nAnd that's it! Running `cargo build` should take care of the rest and your Rust\napplication will now have the C files `foo.c` and `bar.c` compiled into a file\nnamed `libfoo.a`. If the C files contain\n\n```c\nvoid foo_function(void) { ... }\n```\n\nand\n\n```c\nint32_t bar_function(int32_t x) { ... }\n```\n\nyou can call them from Rust by declaring them in\nyour Rust code like so:\n\n```rust,no_run\nextern \"C\" {\n    fn foo_function();\n    fn bar_function(x: i32) -> i32;\n}\n\npub fn call() {\n    unsafe {\n        foo_function();\n        bar_function(42);\n    }\n}\n\nfn main() {\n    call();\n}\n```\n\nSee [the Rustonomicon](https://doc.rust-lang.org/nomicon/ffi.html) for more details.\n\n# External configuration via environment variables\n\nTo control the programs and flags used for building, the builder can set a\nnumber of different environment variables.\n\n* `CFLAGS` - a series of space separated flags passed to compilers. Note that\nindividual flags cannot currently contain spaces, so doing\nsomething like: `-L=foo\\ bar` is not possible.\n* `CC` - the actual C compiler used. Note that this is used as an exact\nexecutable name, so (for example) no extra flags can be passed inside\nthis variable, and the builder must ensure that there aren't any\ntrailing spaces. This compiler must understand the `-c` flag. For\ncertain `TARGET`s, it also is assumed to know about other flags (most\ncommon is `-fPIC`).\n* `AR` - the `ar` (archiver) executable to use to build the static library.\n* `CRATE_CC_NO_DEFAULTS` - the default compiler flags may cause conflicts in\nsome cross compiling scenarios. Setting this variable\nwill disable the generation of default compiler\nflags.\n* `CC_ENABLE_DEBUG_OUTPUT` - if set, compiler command invocations and exit codes will\nbe logged to stdout. This is useful for debugging build script issues, but can be\noverly verbose for normal use.\n* `CXX...` - see [C++ Support](#c-support).\n\nFurthermore, projects using this crate may specify custom environment variables\nto be inspected, for example via the `Build::try_flags_from_environment`\nfunction. Consult the project‚Äôs own documentation or its use of the `cc` crate\nfor any additional variables it may use.\n\nEach of these variables can also be supplied with certain prefixes and suffixes,\nin the following prioritized order:\n\n  1. `<var>_<target>` - for example, `CC_x86_64-unknown-linux-gnu`\n  2. `<var>_<target_with_underscores>` - for example, `CC_x86_64_unknown_linux_gnu`\n  3. `<build-kind>_<var>` - for example, `HOST_CC` or `TARGET_CFLAGS`\n  4. `<var>` - a plain `CC`, `AR` as above.\n\nIf none of these variables exist, cc-rs uses built-in defaults.\n\nIn addition to the above optional environment variables, `cc-rs` has some\nfunctions with hard requirements on some variables supplied by [cargo's\nbuild-script driver][cargo] that it has the `TARGET`, `OUT_DIR`, `OPT_LEVEL`,\nand `HOST` variables.\n\n[cargo]: https://doc.rust-lang.org/cargo/reference/build-scripts.html#inputs-to-the-build-script\n\n# Optional features\n\n## Parallel\n\nCurrently cc-rs supports parallel compilation (think `make -jN`) but this\nfeature is turned off by default. To enable cc-rs to compile C/C++ in parallel,\nyou can change your dependency to:\n\n```toml\n[build-dependencies]\ncc = { version = \"1.0\", features = [\"parallel\"] }\n```\n\nBy default cc-rs will limit parallelism to `$NUM_JOBS`, or if not present it\nwill limit it to the number of cpus on the machine. If you are using cargo,\nuse `-jN` option of `build`, `test` and `run` commands as `$NUM_JOBS`\nis supplied by cargo.\n\n# Compile-time Requirements\n\nTo work properly this crate needs access to a C compiler when the build script\nis being run. This crate does not ship a C compiler with it. The compiler\nrequired varies per platform, but there are three broad categories:\n\n* Unix platforms require `cc` to be the C compiler. This can be found by\ninstalling cc/clang on Linux distributions and Xcode on macOS, for example.\n* Windows platforms targeting MSVC (e.g. your target triple ends in `-msvc`)\nrequire Visual Studio to be installed. `cc-rs` attempts to locate it, and\nif it fails, `cl.exe` is expected to be available in `PATH`. This can be\nset up by running the appropriate developer tools shell.\n* Windows platforms targeting MinGW (e.g. your target triple ends in `-gnu`)\nrequire `cc` to be available in `PATH`. We recommend the\n[MinGW-w64](https://www.mingw-w64.org/) distribution, which is using the\n[Win-builds](http://win-builds.org/) installation system.\nYou may also acquire it via\n[MSYS2](https://www.msys2.org/), as explained [here][msys2-help].  Make sure\nto install the appropriate architecture corresponding to your installation of\nrustc. GCC from older [MinGW](http://www.mingw.org/) project is compatible\nonly with 32-bit rust compiler.\n\n[msys2-help]: https://github.com/rust-lang/rust#building-on-windows\n\n# C++ support\n\n`cc-rs` supports C++ libraries compilation by using the `cpp` method on\n`Build`:\n\n```rust,no_run\nfn main() {\n    cc::Build::new()\n        .cpp(true) // Switch to C++ library compilation.\n        .file(\"foo.cpp\")\n        .compile(\"foo\");\n}\n```\n\nFor C++ libraries, the `CXX` and `CXXFLAGS` environment variables are used instead of `CC` and `CFLAGS`.\n\nThe C++ standard library may be linked to the crate target. By default it's `libc++` for macOS, FreeBSD, and OpenBSD, `libc++_shared` for Android, nothing for MSVC, and `libstdc++` for anything else. It can be changed in one of two ways:\n\n1. by using the `cpp_link_stdlib` method on `Build`:\n```rust,no_run\nfn main() {\n    cc::Build::new()\n        .cpp(true)\n        .file(\"foo.cpp\")\n        .cpp_link_stdlib(\"stdc++\") // use libstdc++\n        .compile(\"foo\");\n}\n```\n2. by setting the `CXXSTDLIB` environment variable.\n\nIn particular, for Android you may want to [use `c++_static` if you have at most one shared library](https://developer.android.com/ndk/guides/cpp-support).\n\nRemember that C++ does name mangling so `extern \"C\"` might be required to enable Rust linker to find your functions.\n\n# CUDA C++ support\n\n`cc-rs` also supports compiling CUDA C++ libraries by using the `cuda` method\non `Build`:\n\n```rust,no_run\nfn main() {\n    cc::Build::new()\n        // Switch to CUDA C++ library compilation using NVCC.\n        .cuda(true)\n        .cudart(\"static\")\n        // Generate code for Maxwell (GTX 970, 980, 980 Ti, Titan X).\n        .flag(\"-gencode\").flag(\"arch=compute_52,code=sm_52\")\n        // Generate code for Maxwell (Jetson TX1).\n        .flag(\"-gencode\").flag(\"arch=compute_53,code=sm_53\")\n        // Generate code for Pascal (GTX 1070, 1080, 1080 Ti, Titan Xp).\n        .flag(\"-gencode\").flag(\"arch=compute_61,code=sm_61\")\n        // Generate code for Pascal (Tesla P100).\n        .flag(\"-gencode\").flag(\"arch=compute_60,code=sm_60\")\n        // Generate code for Pascal (Jetson TX2).\n        .flag(\"-gencode\").flag(\"arch=compute_62,code=sm_62\")\n        // Generate code in parallel\n        .flag(\"-t0\")\n        .file(\"bar.cu\")\n        .compile(\"bar\");\n}\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/cc/1.0\")]","#![allow(deprecated)]","#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:65-0:26:2126","0:169-0:421:2130","0:450:2136","0:513:136"],"is_stripped":false}}},"2:13230:3106":{"id":"2:13230:3106","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:5266"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:5261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13239:35190":{"id":"2:13239:35190","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:5266"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:5261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13224:3030":{"id":"2:13224:3030","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:5266"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:5260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298:3080":{"id":"0:298:3080","crate_id":0,"name":"try_get_ranlib","span":{"filename":"src/lib.rs","begin":[3109,4],"end":[3115,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nThis will return a result instead of panicking;\nsee [`Self::get_ranlib`] for the complete description.","links":{"`Self::get_ranlib`":"0:297:3079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41713:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5598:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:513:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:6417:8604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:4:1239":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:7618:7661":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:9686:6117":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:4614:9953":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:43277:9979":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:40272:9336":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:6026:7445":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:11256:6358":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:8300:2173":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:37908:5175":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:10092:23537":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:43959:9441":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:14449:6787":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:12530:9834":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:11932:5271":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:43684:5287":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:41542:9388":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:11715:6387":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"18:613:36714":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:2206:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"16:7006:9884":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:2748:4170":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:4531:7384":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:6626:4248":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:6763:8769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:12076:9818":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:10244:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:8197:8991":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:513:6033":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:21511:5068":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:42819:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:11870:30830":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:46446:9583":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:6494:7503":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:7472:4706":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:45590:9495":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:1568:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:5392:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:15390:7065":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:43745:5268":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:12695:9840":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:6622:3581":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:3138:4660":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"18:698:6216":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:6915:8823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:6402:11035":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:3164:5159":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:41486:33706":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:11316:10057":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:11271:9665":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:22768:33498":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:43268:9064":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"11:2554:36666":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:2592:7333":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:14986:6968":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:15273:7033":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:14386:6770":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:6662:4257":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:45470:9484":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11702:6386":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:42634:4119":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:4250:32177":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:3347:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:8425:4181":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:1557:5041":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5014:8313":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:8309:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:4965:8286":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:33099:4082":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:6791:4258":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:4976:7398":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:2089:4171":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:45683:9508":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:5686:7348":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:44512:9473":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:5653:8561":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:5400:6334":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:6737:4252":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:10508:4264":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:12297:1851":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:5457:5265":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:7632:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:1517:8050":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:14587:6804":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:8587:10026":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:4492:9050":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:9332:9651":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:5191:8355":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:6606:7517":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:7553:4096":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:12508:6467":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:14025:6701":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:10617:6076":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:2418:7325":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:40351:9348":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:6379:8577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:8593:9630":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:44023:9443":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:8126:16194":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:6491:8643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:16121:7272":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:4872:10896":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:9720:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:943:4202":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:13959:6692":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:1836:4876":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:12310:882":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:42532:9396":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:6849:7570":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:7348:8854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:7339:8853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:7452:9036":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"3:0:492":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:9312:28392":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:14968:6963":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:1547:8070":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:42075:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:7144:23473":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:21690:10942":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:7549:7658":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:650:9992":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:5846:7417":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"18:680:6212":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:7857:7677":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:1593:8099":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11877:6395":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:5858:4136":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:1207:9753":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:2932:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:43726:5283":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:21572:10944":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:9431:9652":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:6665:23470":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:12316:1823":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:4434:10003":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:22347:34030":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:13774:6663":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:8508:4155":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:10769:36700":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:15222:7021":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:12279:28401":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:13526:6598":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:6098:23466":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:16198:7290":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:3264:9759":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:545:8011":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:31984:7652":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:41608:4202":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:3957:4706":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:11799:9806":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:4959:8284":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"11:1582:9929":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:13146:6515":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:538:8008":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:16165:7283":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:3251:32783":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:6689:8741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:6456:23469":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"11:1025:5048":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:44265:16311":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:21481:33298":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:40263:9334":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:9938:23534":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:2902:22604":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:5981:4256":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:7813:7669":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:10712:5008":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:5533:2125":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:11467:6375":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:45896:9519":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:14356:6768":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:7412:8882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:2394:7324":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:5914:7428":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:10249:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"15:288:22558":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:7609:4101":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:949:5044":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:44037:16105":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:11542:10058":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"1:3344:4177":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:11051:9773":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:43034:9413":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:3792:4171":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:8093:7719":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:890:5036":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:6350:10008":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:10044:23536":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:12278:9830":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:21513:10945":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:15655:7152":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:11718:6124":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:2848:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:5243:961":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:15324:7046":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:12833:5261":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:5382:8437":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:7428:23474":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:8341:9012":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:12312:869":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:5742:7407":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:43779:5281":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:10299:10044":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:2864:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:3329:7372":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:919:5039":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:7597:4100":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:396:6012":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:15410:7071":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:8073:7718":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:5102:8340":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:8032:4892":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:4932:8272":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:40281:9337":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:46085:9542":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:5115:4457":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:8665:34314":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:10877:9769":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:2457:5057":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:6300:9869":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:40593:9360":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"11:2304:5047":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:12514:9421":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:46504:9585":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:6636:8720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"18:670:9747":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"7:78:22448":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"18:538:6196":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:15992:7246":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"5:4104:6019":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:13089:6505":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:3029:9022":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:1686:8163":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:6874:8797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12213:9825":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8488:4157":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:10818:9768":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:12295:1157":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:1356:5050":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:2601:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:38487:5176":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:2338:7315":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:5217:4241":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:860:9844":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:14311:6759":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:6670:8736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:9755:23513":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"11:700:4706":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:43480:5288":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:7366:8863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:12308:894":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:13477:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:218:6017":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"0:0:2983":{"crate_id":0,"path":["cc"],"kind":"module"},"5:5409:6019":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:10173:9384":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:7461:8894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:32074:4664":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:12328:16267":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:12307:740":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:11331:5290":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:465:7963":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:14235:6750":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:13235:6539":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:3103:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:4502:6040":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:43894:9438":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:3614:3691":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:4375:16075":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:43287:9065":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:41769:4706":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:10263:4127":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:41880:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:6447:8621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:3293:5187":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"11:837:5042":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:46759:9615":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:7497:7654":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:44208:9462":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10915:36697":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:4678:6066":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6634:7355":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:7656:23475":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:23007:9113":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:7675:30418":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:4856:7394":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:22559:9072":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:1680:8160":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:9299:9648":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:11636:10013":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:723:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:1327:5049":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:12302:1700":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:8671:4461":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:2234:9758":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:1584:4202":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:5415:8453":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:14436:6786":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:2103:9937":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:8612:10030":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11497:9790":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:11891:9963":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:11468:6122":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:9715:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:1612:7874":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:45633:9498":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:4328:9949":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:8186:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:43360:9067":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:1510:8047":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12454:6461":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:11156:4215":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:9368:4136":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:8206:10019":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:1171:36603":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:12238:9827":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:11885:9682":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:9413:5070":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:6542:8668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:7379:36689":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:1546:5040":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"9:53:10391":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:872:9749":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:10873:9655":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:22996:9112":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"5:1155:36584":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:5059:10930":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:15:2193":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:3296:4176":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:5407:1226":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:8616:8863":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:6756:8768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:43379:9068":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:6721:8756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:31998:4757":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:15814:7192":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:7769:7667":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:22974:9110":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:12342:6447":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:3234:5169":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:10720:36699":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:1726:6019":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:2287:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"18:515:6191":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:2636:7335":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:45604:9496":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:40156:4158":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:5954:4136":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:7655:33376":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:6145:9053":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:6895:7572":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:44500:7884":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:6335:9880":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:15313:7042":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:9382:4254":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:5528:8503":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:44196:9459":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:2827:5068":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"9:424:22456":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:5064:4136":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:5347:7404":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:43844:16104":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"11:1142:9928":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:39328:9193":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"11:742:5041":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:10670:4173":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:14131:6714":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:16235:7299":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:12993:23540":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:21479:33296":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:10257:4129":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:11661:6383":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:44489:9472":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:4719:10927":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:7604:7364":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:4835:787":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"16:6813:7558":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:13363:6565":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:13211:6538":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:9245:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:3925:7378":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:31938:4218":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:11392:9787":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:6532:7507":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:4115:10883":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4870:8243":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:7584:8968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:6231:7480":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:10667:4177":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:5788:6105":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:4985:8297":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:40372:9350":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:42155:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:4986:9763":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:43865:9429":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:46682:9600":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:6654:9054":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:1585:8094":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:2699:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:14111:6713":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:42794:4263":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:12306:724":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:4952:8281":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5390:8442":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:46135:9544":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:3397:5038":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:9399:5260":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:44373:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:12301:1666":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"11:1896:5038":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"11:2383:4202":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"14:31:9921":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:3475:7373":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:586:8033":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:11443:6373":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:12127:6433":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:11072:5034":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"18:735:27720":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11898:6397":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:11252:5288":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"18:589:6199":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"14:220:7816":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:12082:6128":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:15456:7080":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:7727:7365":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:5588:8529":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:2197:6033":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:25892:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:46173:9546":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:40342:9347":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13015:6458":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:12887:6492":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:46250:9579":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"11:1603:9930":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:7389:8881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:6342:36690":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:44192:9458":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:0:3965":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:11217:9958":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:7088:10939":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:10137:23514":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:40319:9343":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:8131:5065":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:46563:9588":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:8175:9917":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:3350:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:5795:9620":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11269:23566":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:40194:4115":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:12360:3302":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:45423:9481":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:3196:7314":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:11128:6323":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:9807:23521":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:13538:6601":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:938:5043":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:10251:4121":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:10710:9767":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12557:6353":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:14414:6775":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:2693:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:39929:9322":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:6353:7487":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:1503:8045":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:1692:8164":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12808:6488":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:11493:9789":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:11547:6277":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:5307:7403":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:45558:9493":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:46592:9591":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"14:214:7814":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"9:178:10401":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:32015:4291":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:15281:7034":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:8301:7737":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:21963:5068":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:39200:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:8259:7652":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:7877:6113":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:1580:8092":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"18:521:27722":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:44431:9984":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:12574:9425":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:2037:9754":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:44230:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:12289:6436":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:3389:4174":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:473:7968":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:9141:4706":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:45700:9509":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:5415:7405":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:5515:8502":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"16:2508:7329":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:43334:9066":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:40817:6074":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:10664:4175":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"11:328:7869":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:12296:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:10468:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:4821:9762":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:12300:23660":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:7896:6115":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:15596:7137":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:9251:10034":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:41633:4465":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"11:2469:5038":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:7509:9907":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:2548:7331":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:7837:10062":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:6519:8655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:14575:6458":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:41713:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:22680:9075":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:3257:28242":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:10261:4126":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:16223:7296":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:6802:7557":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:8188:9920":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:6480:7349":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:7422:36275":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11075:6353":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:11089:9775":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:11647:9678":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:12263:10412":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:22121:5068":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:4762:4288":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:5376:8434":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:7590:7363":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:4833:10909":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:40092:9331":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:30485:33502":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"18:113:27712":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:12353:6451":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:4163:10886":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:46697:9601":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"9:482:22453":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:706:5262":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:1098:9752":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:5717:5118":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:15778:7188":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"8:0:3958":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:9074:4214":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:14284:6757":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:8495:4158":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:2878:7346":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:44071:5293":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:9104:4216":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:4609:9952":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:6060:16504":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:5385:6333":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:6843:9059":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:14051:6705":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:3176:5178":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:12371:6494":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:11140:5269":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:33217:5163":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:3661:5034":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:8163:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:8814:4201":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:3436:4165":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:2263:2119":{"crate_id":1,"path":["std","fs"],"kind":"module"},"17:12464:23661":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5031:8321":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:9377:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13497:6589":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"0:513:136":{"crate_id":0,"path":["cc","Error"],"kind":"struct"},"6:7575:8965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"9:502:7945":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:12886:16098":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:9984:23535":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:5927:7429":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:11567:9795":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:9387:4255":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:15624:7144":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:8478:4156":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:4909:8264":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:1671:8154":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8520:10028":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:507:6188":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:4424:7381":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:21968:10947":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:9191:10935":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:15635:7149":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:6398:7347":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"11:1883:4202":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:22941:9107":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"7:0:1880":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:15078:6987":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:45523:9491":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:22861:10877":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:6143:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:4605:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:497:7979":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:46720:9602":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:5617:8548":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12089:6431":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:9674:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:43448:4158":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:6278:9854":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:43911:9439":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:1465:4202":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:0:1692":{"crate_id":1,"path":["std"],"kind":"module"},"5:4269:4136":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:3340:2634":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:11000:4217":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:1872:4885":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:7621:6045":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"11:856:5044":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:542:7305":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:96:27711":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:4688:4757":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:16093:7265":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"5:6924:5118":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:3591:5189":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:4764:8874":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"16:5960:7436":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:5756:9845":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:10255:4128":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:12551:9424":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:5436:8468":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:44376:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:1082:5050":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:3810:7375":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"11:2542:7878":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:30453:5107":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:11674:6384":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:43761:5279":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"11:102:7865":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:7591:16144":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:14503:6793":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:14079:6709":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:8012:8980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:15126:6994":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:12863:6491":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"14:187:22546":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:437:6284":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:4352:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:6678:8738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:7302:10337":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:2051:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:3546:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:12772:3580":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:14847:6916":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:4502:7383":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:5367:23463":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:10622:36705":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:4159:10885":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:43530:5291":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:5581:8527":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:6900:8812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:14855:6919":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13509:6590":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:40793:3581":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4876:8245":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:1707:8171":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:10683:6078":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:4423:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:9279:10038":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:8351:9014":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:43584:5289":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:25:682":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:2943:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:11557:9794":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:4074:5037":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5277:8401":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"11:2536:7877":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:4641:10910":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:39978:9327":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:8434:4183":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:7516:8932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:16259:6569":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:1985:770":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:5219:8368":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:6441:8620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:3029:6231":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:37743:5172":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:7633:36687":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:16069:7260":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:523:7999":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:14325:6762":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:43880:9435":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:10460:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:1978:5127":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:12812:5266":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:10912:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"16:6047:9847":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:11042:9772":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:543:6092":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:11647:6382":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:1834:4875":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:1936:9043":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"18:643:6188":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:43770:5280":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:9737:23515":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:11510:9791":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:2838:7344":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:32493:5158":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:826:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:40184:4116":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:40835:9367":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:10218:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:1591:5037":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:42542:4117":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:564:8021":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:31991:9970":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:11537:9793":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:7094:6059":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:7959:10014":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:647:9990":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:8627:16193":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:11180:28393":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"11:0:3961":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:0:550":{"crate_id":2,"path":["core"],"kind":"module"},"1:5280:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:45797:9514":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:14752:6833":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:10524:9764":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:2860:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:1588:4706":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:5671:8570":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:2289:36271":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:6066:7449":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:43462:4159":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:8824:4202":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:3305:7875":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:3284:36581":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:39940:33516":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:2996:6097":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:15720:7171":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:41402:9380":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:13568:6613":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"14:160:9921":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:5174:8346":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:5006:7399":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"9:357:22469":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13424:6575":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:13308:6557":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:5598:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"18:651:6188":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:5296:8409":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:21680:5068":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:597:6330":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:6574:7367":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:5567:4211":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:14876:6927":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:42841:9411":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:45913:9520":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:40166:4102":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:12319:1890":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:11781:10000":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:3479:4182":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:631:5128":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:3551:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:924:5040":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:11046:6119":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:671:9934":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:30421:5106":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:7546:8949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:6471:8630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:10968:3662":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:5203:10005":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6758:7545":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:41508:9387":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:14012:6700":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:46525:9586":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:1496:8042":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:5769:7411":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:14475:6789":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:8201:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:9902:34315":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:5897:7423":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:10878:5063":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:12478:6463":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:2487:659":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11730:6389":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:12294:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:3245:7873":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:41599:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:2854:7345":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:11524:9792":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:11341:9785":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:44398:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:8259:8994":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:6466:7500":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:8688:4198":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:40100:9332":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:40113:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:10887:36701":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:1496:4706":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:43421:5278":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:903:5037":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:10868:9653":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:3615:4145":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:4733:6067":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:10253:4120":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:732:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:13797:6668":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"10:44:7886":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:16249:7300":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"10:36:7885":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:14994:6969":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:6039:4241":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:11764:6394":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:10828:36698":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:1895:4889":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:43369:9982":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:5052:8329":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:5146:8344":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:3250:36583":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:15249:7025":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:39102:5188":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:11016:9771":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:7645:9040":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:21692:9070":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:2439:2285":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:1064:5048":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:4897:8255":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:10921:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"9:447:22454":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8192:4261":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:39955:9325":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:40144:4098":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:10439:6343":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:22985:9111":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:43308:9416":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11242:9781":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:4301:10907":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:2828:16146":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:12247:10065":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:11802:10001":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:13606:6621":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"18:659:9743":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:6385:7490":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:3184:5180":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"5:3648:4202":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:45575:9494":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:8573:10908":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:21990:9071":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:43208:9978":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:5201:4184":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:12388:6453":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:7355:7635":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:10960:4893":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:5720:3330":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:22850:9101":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:4942:8278":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:261:9749":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:5336:8421":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:1663:8153":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"18:563:6198":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:5037:7400":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"11:2352:5049":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:7359:8859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13814:6671":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"18:80:27710":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:11290:9959":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:867:9748":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:41696:5141":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:40051:9329":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:3026:3272":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:2369:9933":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:9372:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:23018:9114":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:6160:22576":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:12792:6298":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:1342:5048":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:7827:6330":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:1480:5034":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"14:202:16106":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:6453:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:40404:9353":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:3717:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:7321:4465":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:5046:8327":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:40779:9362":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:14977:6967":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:8118:7722":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:14516:6794":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4979:8294":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:32679:5157":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:1518:5035":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:14372:6769":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"9:238:4199":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4992:8300":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"11:2151:5049":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:1485:8037":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:11359:9960":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:10419:6342":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:15206:7017":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:6991:36688":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:22963:9109":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:10251:6337":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:10047:4118":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:46152:9545":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:7330:8847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:21464:33287":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:6620:7519":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:3098:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:3145:4662":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:2467:3702":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:7910:23477":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:9091:4215":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:6734:4251":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:6927:7576":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:40363:9349":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:1830:5038":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:4288:10906":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:41580:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:44184:9456":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:40250:4156":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:15102:6992":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:30474:4117":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:11865:9814":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:4874:10897":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:40301:9340":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:11057:6120":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:2528:7330":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:12597:6469":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:4742:4758":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:6811:8784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:45875:9518":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:45928:9521":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:7570:7362":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:16105:7267":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:7052:9885":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:2612:7334":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:1595:5038":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:2323:22603":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:40434:9355":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:13024:23541":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:3027:36634":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"11:883:5046":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:46417:9582":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:15769:7186":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10671:36702":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:10983:28391":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:2526:9026":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:5290:8406":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:40827:9365":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:41342:9371":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:46114:9543":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:733:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:6562:8684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:7132:7604":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:6516:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:1456:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:15214:7019":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:11788:9805":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:367:9988":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:5723:4213":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"18:608:9742":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:43053:9415":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:40129:16255":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12494:6464":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:10949:28407":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:14933:6962":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:10350:6340":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:1621:8124":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:2984:5131":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:5909:4244":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:12311:888":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:21447:33294":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:11605:6377":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:8172:4294":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:7695:7665":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:4149:10884":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:14271:6755":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12056:6428":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"11:673:4202":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:5112:8341":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:10573:36703":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:10940:28397":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:11293:23567":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:567:9989":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:9240:10032":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:13272:6552":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:6120:23467":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:7799:7354":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:8618:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:3096:4657":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:8621:10849":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:4789:4759":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:5314:8416":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:3540:3578":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:351:36667":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:3346:4178":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:11812:9808":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:2458:7327":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:9206:10937":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:12671:9838":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:41320:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:961:5046":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:9288:4467":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:8295:10021":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:11773:6474":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:15383:7064":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:5472:8492":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:39150:5181":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:5863:23465":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:2998:7369":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:3563:5186":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:41616:5034":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:3271:7874":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"11:364:6010":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:13325:6559":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:12314:1811":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:12268:10843":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:32073:4292":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:559:8019":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:9681:5066":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:2438:7326":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:5234:10005":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:3254:28246":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"15:394:22568":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:6427:9883":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:16187:7289":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:12900:6493":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:729:10864":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:12949:6441":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:12321:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:2673:2614":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:14066:6708":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:2684:7337":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:8136:7725":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:15646:7150":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:3606:32266":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:10997:6350":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:22447:11023":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:5036:10928":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:22803:33507":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:5160:8345":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:718:6220":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:10170:6334":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:13707:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12443:6460":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:44380:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:10259:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:39989:5281":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:4340:9950":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:9355:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:2748:7340":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:732:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:46644:9595":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"11:2548:7879":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:2296:3706":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"11:2124:5047":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:22952:9108":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:13723:6650":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:150:6006":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:9133:10031":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:13674:6625":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:15116:6993":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:5225:8371":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:3031:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"11:2326:5048":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:14038:6703":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:4771:7391":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"4:0:3957":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:45744:9511":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:46603:9592":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:7446:8888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:7273:6110":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:14723:6813":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:15368:7060":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:4438:6040":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:33472:5166":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:3344:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:9080:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:41958:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:1490:8039":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:10903:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:10503:4262":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:12344:9964":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:7539:7361":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:41753:4202":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:8222:4171":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:13762:5111":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:15333:7049":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11354:9786":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:11825:9810":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:15418:7072":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:765:27721":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:9671:23516":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:42299:4121":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:11048:4202":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:44089:5294":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:43666:5286":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"11:123:6008":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:6127:6105":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:30459:9118":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:6478:8634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:846:4202":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:15734:7173":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:1653:8147":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:10891:9659":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:4353:10002":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"9:0:3959":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"11:800:5037":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:4768:8878":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:15168:7008":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:5107:7402":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:7380:9034":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:8446:4153":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:13594:6618":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"14:165:22539":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:2503:16214":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:39968:9326":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:5445:8474":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:7429:8883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13855:6675":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:6164:4136":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:39308:5183":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:39178:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:40395:9352":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:11853:9813":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:13450:33988":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:35867:5171":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:5817:7413":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10905:9770":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:12838:5259":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:40786:9363":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:7706:16189":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:6460:8622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"11:1007:5047":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:870:6025":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:46475:9584":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:45619:9497":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:859:5034":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:4394:16117":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"5:7363:5112":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:7473:7453":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:11621:6379":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:40579:9359":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:44200:9460":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"18:481:6186":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:5636:8557":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:15931:6524":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:43408:5282":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:12851:6490":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:3324:4160":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11313:6365":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:6948:7357":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"14:7:9921":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:8568:9629":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:40214:4185":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:11583:9800":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"11:1887:4706":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:4087:10880":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:8026:10842":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:11741:9999":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:15434:7075":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:37798:5173":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:7823:23476":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:44176:9454":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:14260:6754":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:5466:8489":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:932:5042":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:2478:7328":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12621:6470":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:39913:5280":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:7590:16143":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:11188:9463":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:42306:4128":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"9:330:7923":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:4882:7395":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:42613:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:15356:7057":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:6849:9058":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:11179:9957":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:11378:5882":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:8290:10020":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:10550:4214":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:6318:6104":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:13455:6584":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:5260:8390":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:6621:8718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:11142:6368":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:39315:9192":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:8253:8993":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:5643:8560":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:39218:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"9:392:22455":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:10280:4885":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:33645:5167":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:10200:2121":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:22402:16213":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:1617:7875":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11405:9788":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11634:6381":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:43986:9442":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:12818:5260":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:4619:10909":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:419:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:33991:5170":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:6560:7350":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:43512:5292":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:2572:7332":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:12320:1398":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:10284:6338":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12572:6368":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:2768:7341":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5457:8483":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:8226:23478":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:9117:4217":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:21425:4674":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:913:5038":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:11595:6376":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:4743:7390":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:8579:10029":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:13922:6688":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:13292:6553":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:40118:4097":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:15582:7131":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:12030:9815":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10218:6336":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:15176:7011":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:7452:8890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:295:2171":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:8294:9001":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:2203:9755":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:9395:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"11:1566:22533":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:5630:8554":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:517:7996":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:3597:9761":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:4280:10905":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:23492:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:6007:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:12408:6455":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:7730:5114":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:3473:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"11:875:5045":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:8155:7728":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:5665:8568":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12362:6452":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:6698:8747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"5:7714:5038":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:5700:7351":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:8288:9000":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:2854:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"15:306:22559":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:41560:9389":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:7485:4711":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:14463:6788":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:22433:5068":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:5547:4210":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:6263:7485":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:11574:7876":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:6302:6088":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:40:5113":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:1949:5126":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:32016:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:3872:5038":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:14189:6740":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:15197:7016":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6433:7494":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:15521:7124":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:3279:7872":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13738:6654":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:3956:10001":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13999:6698":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:45406:9478":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:44058:9448":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:11189:6357":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13399:6572":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:2309:9025":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:14529:6795":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:16138:7274":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:4916:8268":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:10612:9765":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:21462:33290":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:22730:33705":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:13387:6569":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:5546:8514":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:15760:7182":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:45715:9510":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:2374:7323":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:3149:4081":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:8501:4159":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:2236:9019":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13832:6672":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:10902:5067":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:2657:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:15608:7140":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:2708:7338":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:40420:6209":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:3294:4175":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:2114:9938":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"18:726:6223":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:15957:7216":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"5:6957:5120":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:45376:9474":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:6860:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:10155:6333":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:5361:8427":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5536:8508":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11755:6393":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:8029:8990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:7938:4236":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:2604:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:45391:9477":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:926:6027":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:1536:5039":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:40802:9364":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:6664:8733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:7878:4181":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:5039:8325":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:1526:8055":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:40569:4157":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:12225:9826":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12175:9819":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:8247:8992":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:6775:8771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"13:110:36675":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:43347:9981":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:598:10835":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:2053:9046":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:7392:5037":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:6706:8751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:40808:4182":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4837:8219":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:22259:11028":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:6609:8711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"11:2443:5037":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:361:9987":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:3509:4136":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:13437:6576":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:9227:4246":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:6435:8617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:8006:8978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:7372:4706":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:10931:4153":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:4587:7386":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:46372:9581":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:8158:5064":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:6768:8770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:3379:5110":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:5163:33394":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:14402:6774":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:10715:6083":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"13:229:7864":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:46327:9580":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"11:687:5034":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:22830:9098":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:22297:11029":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:11063:6121":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:16269:6574":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:40291:9339":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:3789:10862":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:13064:6504":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:5936:4245":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:44180:9455":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:3179:5179":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:3029:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:10849:10052":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:4352:7380":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:7648:9915":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:13670:6090":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:40005:5279":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:11206:5070":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:14545:6797":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:9164:9645":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:13877:6682":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:40333:9346":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"11:2569:4092":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:11877:9682":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:40221:9066":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:4928:6098":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:41802:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13946:6689":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:33276:5162":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:553:8016":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:46583:9590":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:7467:8895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:45508:9490":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:15039:6978":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:8317:9007":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:11688:6385":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:42849:9412":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:5502:8501":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:5142:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:4051:10879":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12264:9829":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:256:9748":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:7940:5068":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:10399:4158":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:13046:6501":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13485:6588":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:21493:33300":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:5423:8458":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:7485:8906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:3807:9937":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:43432:5275":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:7537:8946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:8148:5067":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:23029:9115":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"16:4641:7388":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:42596:4117":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:12827:5262":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:3557:5184":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:44439:9469":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:6031:9051":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:22123:10943":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:10593:6118":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"5:1311:5047":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:44463:9986":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:22215:11027":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:11608:9675":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:12969:6496":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:43297:9980":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:3387:4173":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:513:9751":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:16032:6542":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:8638:9631":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:32005:9183":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:45814:9515":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:2757:9029":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:1929:658":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:41675:4468":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:3473:9760":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:15463:7082":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:8525:10860":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:2455:5056":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:7111:7602":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:32103:4663":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:5266:8393":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:2303:22577":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:22930:9106":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:12318:6441":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:12318:950":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:655:10838":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:11858:9681":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:6749:7544":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:41841:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:44188:9457":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:4864:8242":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:2662:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:11743:6390":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:22837:9100":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:21435:33294":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:5075:7401":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11115:9777":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12189:9823":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:3037:36635":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:570:8024":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:14560:6801":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"11:1923:7875":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:22475:11024":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:45973:9538":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:7755:7356":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:7014:23472":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:7527:4092":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:5995:7439":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:5370:8433":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:5652:3662":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:4718:7389":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4971:8289":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:21566:10941":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:4535:2598":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:12309:876":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"11:2498:22528":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:30832:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:7582:16255":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"11:1903:7872":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:39501:16147":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:4802:7392":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:4824:8209":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:9858:23531":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:6543:7508":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:13972:6401":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:6412:23468":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:11622:9676":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12251:9828":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:7686:9916":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6782:23471":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:479:7971":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"11:710:5040":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13899:6683":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:8458:4154":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:1813:3806":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"2:42559:33511":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:42587:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:22919:9105":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:39146:5109":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:15092:6991":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:10441:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:4800:8191":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:5250:8384":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"14:0:3963":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"11:787:5036":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:2623:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:4468:4136":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:1723:8176":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:13785:6666":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:1160:5050":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:9907:10410":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:3238:4202":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:8561:9628":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"18:598:36711":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:7085:7596":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:15058:6979":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:39066:5191":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:13046:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:6947:5119":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:8141:5063":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:7538:4093":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:1853:4136":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:7941:9621":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:3899:7377":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"7:31:22441":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12422:6456":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:22480:11022":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:1565:8080":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:10301:10043":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:21564:5068":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:6681:4706":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"11:430:36670":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:5831:7416":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:4951:10893":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:31980:9969":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:2851:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:8300:9002":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"18:635:6211":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:1600:7872":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:5902:4243":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:45438:9482":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:12043:9816":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:3558:4144":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:7345:6111":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"11:1891:5037":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:5344:8422":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:5677:8573":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:5352:8423":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:15799:7191":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:869:4706":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:11367:6353":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:41664:4466":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:15400:7068":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:15836:7198":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:14489:6790":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:7655:9948":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:3154:5161":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:44452:33723":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:12399:6454":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:4309:4202":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:43630:5285":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:15010:6970":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:12929:6494":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:15426:7074":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:6600:6019":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:5922:5037":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:3851:9999":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:45782:9513":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:45537:9492":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:8159:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:10199:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:11227:9780":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:5244:8382":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:6746:8761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:5236:8378":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:22321:5068":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:45455:9483":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:955:5045":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:39919:9321":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:11241:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:5064:8338":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:15748:7180":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:40385:9351":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:6409:8602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:15445:7079":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8136:5066":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:39238:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:39997:5280":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12150:6434":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:1639:8136":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:5565:8522":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:14788:6864":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:22002:33291":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"18:689:6215":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:14246:6752":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:13627:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"11:1676:6014":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:41761:5034":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:12303:1789":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:12317:1805":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:43389:9983":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:2044:9044":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:7561:8956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:46572:9589":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:3635:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:5320:8417":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:8271:8996":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:5852:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:44048:9444":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:11858:9962":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:45765:9512":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:11581:4222":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:10661:9766":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:8254:4293":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:9147:9644":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:43716:4155":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:4830:7393":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:6554:5037":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:1897:4890":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"12:0:3962":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"11:844:5043":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"11:832:5039":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:12824:23539":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:43438:5274":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:3669:3692":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:403:9750":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:6763:6019":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:774:5035":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:7964:9622":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:6597:8706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:1966:1338":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:30859:4674":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:33158:5165":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:7741:7366":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:2728:7339":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:13187:6524":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:3033:36633":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:5134:8343":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:3536:5182":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:1819:682":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:1628:8128":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:5583:3807":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:11575:9672":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:2048:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:12433:6458":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:21584:9070":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:4969:16134":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:5557:8520":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:5181:8348":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:12590:9426":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:5020:8316":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:11324:9782":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:9125:4202":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:22752:9086":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:6714:8755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:46002:9539":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:1050:5047":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:9291:10040":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:12300:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:22349:16213":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"16:4940:7397":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:12299:1295":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:7431:32174":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:11166:6355":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:4057:10878":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:12584:9768":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:6805:4259":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"11:2403:5034":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:3597:2121":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:43259:9063":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:22612:9073":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:43049:9414":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:42036:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:5802:23464":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11153:9768":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:1428:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:12628:5269":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:4251:4136":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:4870:10894":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"10:0:3960":{"crate_id":10,"path":["adler"],"kind":"module"},"5:1527:5036":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:3576:33682":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:44473:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:10534:36704":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12516:9832":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"13:0:3956":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:5283:8404":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"11:1051:5049":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:41358:9373":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:22788:33512":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:3778:7374":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:6588:7509":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:33335:5164":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:8830:4203":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:16176:7288":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"16:6504:7504":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:15301:7041":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"11:299:7866":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13986:6697":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:6821:8786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:877:5035":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:7048:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5122:8342":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:7306:36692":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:11653:9679":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:2687:6079":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:32865:5160":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"11:2562:7881":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:7402:6030":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:5002:8307":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:8214:4169":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:22335:11032":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:13753:6659":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"0:450:2136":{"crate_id":0,"path":["cc","Build"],"kind":"struct"},"1:4754:10883":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:39258:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:2660:7336":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:13252:6542":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:5722:7353":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:37853:5174":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:22882:5068":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:13502:9966":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:14868:6926":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:2709:4161":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:3854:10000":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:6524:8656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:7098:7599":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6962:7358":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"18:0:3966":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:4109:10882":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:7569:4099":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:5477:8494":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:15342:7050":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:44204:9461":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:12328:6443":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12768:23518":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:15822:7195":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:42802:9407":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:12313:1829":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:13650:6088":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:8282:8999":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:2355:7317":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:2289:5051":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:9886:23532":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:14091:6710":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:41778:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:10759:6368":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:41674:4469":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:22719:9083":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"11:1910:7873":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:4830:10931":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:15473:7087":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:1577:9936":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:11063:9774":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:33818:5168":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:2936:22605":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:43612:5284":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"11:1107:9927":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:8047:4893":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:11373:9961":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"19:0:1274":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:40012:16140":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:7480:4706":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:6854:6073":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:7412:9035":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:45662:9507":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:42313:4129":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:7061:7595":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:3014:22606":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:40310:9342":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:9513:4889":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"5:7436:4706":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:3108:4658":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:10700:6079":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:5083:8339":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:15023:6975":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:1535:8061":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5598:8534":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:8202:7368":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:8514:10026":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:6532:8661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:15289:7035":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:11345:5289":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:8012:10841":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:10893:5068":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:42571:7696":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:40444:9356":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12683:9839":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:15616:7143":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:10458:32233":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:2605:4168":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"11:2423:4706":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:6872:7571":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15376:7063":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:12647:9836":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:8122:16195":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:9916:23533":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:2501:16213":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"6:5200:8360":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13553:6607":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:280:6019":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:7580:7660":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:3329:5177":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"16:7397:36691":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:10068:23520":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:6976:7580":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:9258:28408":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:13844:6674":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:44212:9463":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:15944:6538":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:6880:8798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:13173:6523":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:3625:4148":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:7168:9648":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:0:2234":{"crate_id":17,"path":["object"],"kind":"module"},"1:4766:8876":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:41624:4706":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"18:581:4674":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:22744:9085":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:11097:4159":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:4924:8270":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:6405:6105":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:12724:23538":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:42292:4120":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:41520:9628":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:10185:6335":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:7119:6062":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11214:9779":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:11169:4216":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:532:8005":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:6738:8760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:39163:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:2140:5048":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:7888:7681":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:15701:7166":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:13344:6564":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:16050:6552":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:5624:8551":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:10317:6339":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:4461:9951":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:8328:9008":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:4891:8252":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:2030:16223":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:42831:4199":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:46023:9540":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:3824:5037":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:30204:10863":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12485:23662":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:5306:8413":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:2788:7342":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:7559:7659":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:22665:9074":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"11:1066:22532":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:16212:7294":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:46629:9594":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:9360:4247":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:13473:6585":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:491:7976":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:4508:10004":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:15266:7032":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:2240:9049":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8841:4204":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:45491:9489":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:6421:11036":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:2292:3830":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:5781:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:11564:30525":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"17:15190:7014":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:4239:4136":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:6729:8757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"5:2207:9017":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:1064:6019":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:1073:5049":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:5329:8420":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:6317:9872":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:6442:7495":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:3741:6019":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:16151:7280":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:0:986":{"crate_id":6,"path":["libc"],"kind":"module"},"2:39278:4086":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:4149:5034":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:46618:9593":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:2119:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:46667:9599":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:15138:6997":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:7984:5008":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"14:40:6539":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:5489:8497":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:22388:11033":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"18:623:36712":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"11:434:36671":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:13116:6511":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:6226:6100":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:41374:10861":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:44390:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:10954:23547":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:7602:8971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:15678:7165":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:6648:7521":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:41997:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13375:6568":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:11915:23636":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:44254:9466":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:5460:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:6629:8719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"15:327:10388":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:9781:23530":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:43736:5270":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:4925:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:4885:8250":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:1191:36585":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:2857:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:43754:5267":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:14912:6957":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:8170:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:2175:23594":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:6505:8654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:4171:10888":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:11841:9812":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:14341:6764":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:46546:9587":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:46040:9541":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10982:23548":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"18:754:6228":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11419:6368":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:9286:10039":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:13581:6617":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:11102:9776":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12659:9837":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:4272:10904":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:13412:6574":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"11:2231:7876":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:12543:9835":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:8197:3854":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:4468:7382":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:6079:7307":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:928:5041":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:9176:10936":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:22:802":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:2513:2120":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:22696:9079":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"18:491:6187":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:4560:7385":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:4811:8199":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"11:1087:36665":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:5453:5264":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:14212:6749":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:3209:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:7306:8830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:7984:8977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:8306:9003":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:578:8029":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:45829:9516":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:10367:4220":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:11223:9664":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:8736:4199":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"11:811:5038":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"11:1917:7874":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:15151:7003":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:5781:7352":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:4062:7379":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:3842:7376":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:1559:8078":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11026:23549":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:8774:2122":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:14177:6738":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:4913:7396":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:23040:9116":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"6:4787:8182":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:40085:9330":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:8216:7730":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:6650:8731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6788:8778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:32105:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:14599:6811":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:42194:4242":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:12107:6368":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:12201:9824":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13766:6661":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:43566:5290":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"15:0:3964":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:42116:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:10018:23517":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:2441:5053":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:5212:8367":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:6940:7578":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:41919:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:4101:10881":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:41705:9393":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:2808:7343":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:485:7974":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"18:531:6193":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:6657:8732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:486:6091":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:14147:6719":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:7528:7655":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:830:6022":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:1606:7873":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:5045:10929":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"6:7314:8835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:16079:7261":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"5:7444:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:14298:6758":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:5400:8448":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:15569:7125":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:40241:9971":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:8759:4200":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:1699:8167":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:3628:5190":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:12315:1817":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:4614:7387":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:45846:9517":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12707:9841":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:32014:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:42810:4265":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:3311:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:5483:8495":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"18:573:6188":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:8265:8995":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}