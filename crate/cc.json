{"root":"0:0:2680","crate_version":"1.0.83","includes_private":false,"index":{"2:12774:9759":{"id":"2:12774:9759","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44183:3763","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32527:3894-0:401:1894":{"id":"a:2:32527:3894-0:401:1894","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32527:3894","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:62:745":{"id":"0:62:745","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[173,4],"end":[175,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"io::Error","id":"1:2946:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12771:9765":{"id":"2:12771:9765","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43915:3766","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:312:3307":{"id":"0:312:3307","crate_id":0,"name":"Vs12","span":{"filename":"src/windows_registry.rs","begin":[86,4],"end":[86,8]},"visibility":"default","docs":"Visual Studio 12 (2013)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12756:3254":{"id":"2:12756:3254","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12051:1642"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2949:254-0:333:1834":{"id":"a:2:2949:254-0:333:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2949:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:333:1834":{"id":"0:333:1834","crate_id":0,"name":"Build","span":{"filename":"src/lib.rs","begin":[95,0],"end":[135,1]},"visibility":"public","docs":"A builder for compilation of a native library.\n\nA `Build` is the main type of the `cc` crate and is used to control all the\nvarious configuration options and such of a compile. You'll find more\ndocumentation on each method itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:77","a:2:32527:3894-0:333:1834","a:2:42157:4126-0:333:1834","a:2:42158:4125-0:333:1834","a:2:2949:254-0:333:1834","a:2:32445:244-0:333:1834","b:2:2737-0:333:1834","b:2:2424-0:333:1834","b:2:2742-0:333:1834","b:2:3496-0:333:1834","b:2:2731-0:333:1834","b:2:2427-0:333:1834","b:2:2727-0:333:1834","b:5:687-0:333:1834","0:375","0:252","0:373"]}}},"5:5552:34630":{"id":"5:5552:34630","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:3361","`String`":"5:7535:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:3361","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314:3309":{"id":"0:314:3309","crate_id":0,"name":"Vs14","span":{"filename":"src/windows_registry.rs","begin":[88,4],"end":[88,8]},"visibility":"default","docs":"Visual Studio 14 (2015)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2487:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:326:662"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12786:2258":{"id":"2:12786:2258","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42031:198","prim@char":"1:12034:452","self::pattern":"2:12441:10000"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[178,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9882:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12797:27262":{"id":"2:12797:27262","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:10000"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12257:10003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:2221":{"id":"0:140:2221","crate_id":0,"name":"try_compile","span":{"filename":"src/lib.rs","begin":[1086,4],"end":[1249,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThis will return a result instead of panicing; see compile() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12754:33940":{"id":"2:12754:33940","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2050":{"id":"0:94:2050","crate_id":0,"name":"try_flags_from_environment","span":{"filename":"src/lib.rs","begin":[594,4],"end":[598,5]},"visibility":"public","docs":"Add flags from the specified environment variable.\n\nNormally the `cc` crate will consult with the standard set of environment\nvariables (such as `CFLAGS` and `CXXFLAGS`) to construct the compiler invocation. Use of\nthis method provides additional levers for the end user to use when configuring the build\nprocess.\n\nJust like the standard variables, this method will search for an environment variable with\nappropriate target prefixes, when appropriate.\n\n# Examples\n\nThis method is particularly beneficial in introducing the ability to specify crate-specific\nflags.\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .try_flags_from_environment(concat!(env!(\"CARGO_PKG_NAME\"), \"_CFLAGS\"))\n    .expect(\"the environment variable must be specified and UTF-8\")\n    .compile(\"foo\");\n```\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["environ_key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:233","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:322":{"id":"0:322","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:323:718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:107:1806":{"id":"0:107:1806","crate_id":0,"name":"warnings","span":{"filename":"src/lib.rs","begin":[784,4],"end":[788,5]},"visibility":"public","docs":"Set warnings flags.\n\nAdds some flags:\n- \"-Wall\" for MSVC.\n- \"-Wall\", \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2429:26772":{"id":"2:2429:26772","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:2494":{"id":"5:5537:2494","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2731-0:311:3305":{"id":"b:2:2731-0:311:3305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2704:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2733:745"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:122:1852":{"id":"0:122:1852","crate_id":0,"name":"force_frame_pointer","span":{"filename":"src/lib.rs","begin":[959,4],"end":[962,5]},"visibility":"public","docs":"Configures whether the compiler will emit instructions to store\nframe pointers during codegen.\n\nThis option is automatically enabled when debug information is emitted.\nOtherwise the target platform compiler's default will be used.\nYou can use this option to force a specific setting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["force",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2424-0:333:1834":{"id":"b:2:2424-0:333:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:3893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2418:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2426:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12757:2011":{"id":"2:12757:2011","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42031:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:34628":{"id":"5:5540:34628","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2745:135":{"id":"2:2745:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32375:3826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:3496-0:394:135":{"id":"b:2:3496-0:394:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:3893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3498:1633"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12870:27168":{"id":"2:12870:27168","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:36354"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:28493":{"id":"5:5554:28493","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12867:27164"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330":{"id":"0:330","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,31],"end":[82,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2944:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102:1845":{"id":"0:102:1845","crate_id":0,"name":"cpp","span":{"filename":"src/lib.rs","begin":[676,4],"end":[679,5]},"visibility":"public","docs":"Set C++ support.\n\nThe other `cpp_*` options will only become active if this is set to\n`true`.\n\nThe name of the C++ standard library to link is decided by:\n1. If [cpp_link_stdlib](Build::cpp_link_stdlib) is set, use its value.\n2. Else if the `CXXSTDLIB` environment variable is set, use its value.\n3. Else the default is `libc++` for OS X and BSDs, `libc++_shared` for Android,\n`None` for MSVC and `libstdc++` for anything else.","links":{"Build::cpp_link_stdlib":"0:109:1846"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12750:33939":{"id":"2:12750:33939","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12748:33938"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:711":{"id":"0:98:711","crate_id":0,"name":"file","span":{"filename":"src/lib.rs","begin":[649,4],"end":[652,5]},"visibility":"public","docs":"Add a file which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2704:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"1:2946:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:745"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12747:33937":{"id":"2:12747:33937","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:3012":{"id":"0:273:3012","crate_id":0,"name":"is_like_msvc","span":{"filename":"src/lib.rs","begin":[3625,4],"end":[3630,5]},"visibility":"public","docs":"Whether the tool is MSVC-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12744":{"id":"2:12744","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12745:874","2:12746:2032","2:12747:33937","2:12748:33938","2:12750:33939","2:12753:2244","2:12754:33940","2:12755:340","2:12756:3254","2:12757:2011","2:12759:27230","2:12761:27231","2:12763:27232","2:12765:33941","2:12766:33942","2:12767:2722","2:12768:27254","2:12769:3011","2:12770:14055","2:12771:9765","2:12772:2748","2:12773:2978","2:12774:9759","2:12775:33943","2:12776:32142","2:12777:2021","2:12780:2227","2:12783:2228","2:12786:2258","2:12790:2723","2:12794:2574","2:12797:27262","2:12800:27264","2:12803:33944","2:12806:33945","2:12809:27266","2:12812:27268","2:12815:27270","2:12818:27271","2:12821:3634","2:12824:33946","2:12827:33947","2:12830:33948","2:12833:2990","2:12835:33949","2:12837:33950","2:12839:33951","2:12840:33952","2:12841:33953","2:12844:2725","2:12847:3101","2:12850:2796","2:12853:2800","2:12856:3520","2:12859:33954","2:12862:2381","2:12864:27160","2:12865:27161","2:12866:27163","2:12867:27164","2:12868:27165","2:12869:27167","2:12870:27168","2:12871:27169","2:12872:33955","2:12874:15494","2:12875:33956"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3498:1633":{"id":"2:3498:1633","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39789:13812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12824:33946":{"id":"2:12824:33946","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12441:10000","`DoubleEndedIterator`":"2:7827:128","prim@char":"1:12034:452","str::matches":"2:12821:3634"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44151:10019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32445:244-0:401:1894":{"id":"a:2:32445:244-0:401:1894","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32445:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2740:135":{"id":"2:2740:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:2:2737-0:311:3305":{"id":"b:2:2737-0:311:3305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2707:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:135","2:2741:1620"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:120:2165":{"id":"0:120:2165","crate_id":0,"name":"opt_level_str","span":{"filename":"src/lib.rs","begin":[938,4],"end":[941,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:2762":{"id":"0:208:2762","crate_id":0,"name":"try_get_archiver","span":{"filename":"src/lib.rs","begin":[2855,4],"end":[2857,5]},"visibility":"public","docs":"Get the archiver that's in use for this configuration.\n\nThis will return a result instead of panicing;\nsee [`get_archiver()`] for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5446:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12790:2723":{"id":"2:12790:2723","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42031:198","prim@char":"1:12034:452","self::pattern":"2:12441:10000"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1844":{"id":"0:100:1844","crate_id":0,"name":"files","span":{"filename":"src/lib.rs","begin":[655,4],"end":[664,5]},"visibility":"public","docs":"Add files which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7789:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:7789:163","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253:60":{"id":"0:253:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[3410,4],"end":[3412,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12800:27264":{"id":"2:12800:27264","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12441:10000","`DoubleEndedIterator`":"2:7827:128","prim@char":"1:12034:452","str::split":"2:12794:2574"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43947:10020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:1850":{"id":"0:123:1850","crate_id":0,"name":"out_dir","span":{"filename":"src/lib.rs","begin":[969,4],"end":[972,5]},"visibility":"public","docs":"Configures the output directory where all object files and static\nlibraries will be located.\n\nThis option is automatically scraped from the `OUT_DIR` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["out_dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:1848":{"id":"0:103:1848","crate_id":0,"name":"cuda","span":{"filename":"src/lib.rs","begin":[691,4],"end":[698,5]},"visibility":"public","docs":"Set CUDA C++ support.\n\nEnabling CUDA will invoke the CUDA compiler, NVCC. While NVCC accepts\nthe most common compiler flags, e.g. `-std=c++17`, some project-specific\nflags might have to be prefixed with \"-Xcompiler\" flag, for example as\n`.flag(\"-Xcompiler\").flag(\"-fpermissive\")`. See the documentation for\n`nvcc`, the CUDA compiler driver, at https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/\nfor more information.\n\nIf enabled, this also implicitly enables C++ support.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cuda",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2742-0:311:3305":{"id":"b:2:2742-0:311:3305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2701:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2745:135","2:2746:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32445:244-0:394:135":{"id":"a:2:32445:244-0:394:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32445:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:687-0:401:1894":{"id":"b:5:687-0:401:1894","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2440:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2960","5:690:2034","5:691:9614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2426:1808":{"id":"2:2426:1808","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374:456":{"id":"0:374:456","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2424-0:401:1894":{"id":"b:2:2424-0:401:1894","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:3893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2418:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2426:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2733:745":{"id":"2:2733:745","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5809-0:394:135":{"id":"b:5:5809-0:394:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9882:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:3893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5807:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5811:1595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:153:2403":{"id":"0:153:2403","crate_id":0,"name":"try_expand","span":{"filename":"src/lib.rs","begin":[1562,4],"end":[1585,5]},"visibility":"public","docs":"This will return a result instead of panicing; see expand() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6960:270","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12866:27163":{"id":"2:12866:27163","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2412":{"id":"0:155:2412","crate_id":0,"name":"expand","span":{"filename":"src/lib.rs","begin":[1599,4],"end":[1604,5]},"visibility":"public","docs":"Run the compiler, returning the macro-expanded version of the input files.\n\nThis is only relevant for C and C++ files.\n\n# Panics\nPanics if more than one file is present in the config, or if compiler\npath has an invalid file name.\n\n# Example\n```no_run\nlet out = cc::Build::new().file(\"src/foo.c\").expand();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6960:270","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:1529":{"id":"0:105:1529","crate_id":0,"name":"std","span":{"filename":"src/lib.rs","begin":[739,4],"end":[742,5]},"visibility":"public","docs":"Specify the C or C++ language standard version.\n\nThese values are common to modern versions of GCC, Clang and MSVC:\n- `c11` for ISO/IEC 9899:2011\n- `c17` for ISO/IEC 9899:2018\n- `c++14` for ISO/IEC 14882:2014\n- `c++17` for ISO/IEC 14882:2017\n- `c++20` for ISO/IEC 14882:2020\n\nOther values have less broad support, e.g. MSVC does not support `c++11`\n(`c++14` is the minimum), `c89` (omit the flag instead) or `c99`.\n\nFor compiling C++ code, you should also set `.cpp(true)`.\n\nThe default is that no standard flag is passed to the compiler, so the\nlanguage version will be the compiler's default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/modern.cpp\")\n    .cpp(true)\n    .std(\"c++17\")\n    .compile(\"modern\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["std",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:401:1894":{"id":"0:401:1894","crate_id":0,"name":"Tool","span":{"filename":"src/lib.rs","begin":[194,0],"end":[203,1]},"visibility":"public","docs":"Configuration used to represent an invocation of a C compiler.\n\nThis can be used to figure out what compiler is in use, what the arguments\nto it are, and what the environment variables look like for the compiler.\nThis can be used to further configure other build systems (e.g. forward\nalong CC and/or CFLAGS) or the `to_command` method can be used to run the\ncompiler itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:254","a:2:32527:3894-0:401:1894","a:2:42157:4126-0:401:1894","a:2:42158:4125-0:401:1894","a:2:2949:254-0:401:1894","a:2:32445:244-0:401:1894","b:2:2737-0:401:1894","b:2:2424-0:401:1894","b:2:2742-0:401:1894","b:2:3496-0:401:1894","b:2:2731-0:401:1894","b:2:2427-0:401:1894","b:2:2727-0:401:1894","b:5:687-0:401:1894","0:412","0:410"]}}},"2:12806:33945":{"id":"2:12806:33945","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12441:10000","str::split":"2:12794:2574","prim@char":"1:12034:452","str::split_terminator":"2:12803:33944"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43997:10023","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:1849":{"id":"0:104:1849","crate_id":0,"name":"cudart","span":{"filename":"src/lib.rs","begin":[706,4],"end":[711,5]},"visibility":"public","docs":"Link CUDA run-time.\n\nThis option mimics the `--cudart` NVCC command-line option. Just like\nthe original it accepts `{none|shared|static}`, with default being\n`static`. The method has to be invoked after `.cuda(true)`, or not\nat all, if the default is right for the project.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cudart",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1562":{"id":"0:117:1562","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[902,4],"end":[905,5]},"visibility":"public","docs":"Configures the target this configuration will be compiling for.\n\nThis option is automatically scraped from the `TARGET` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .target(\"aarch64-linux-android\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42158:4125-0:333:1834":{"id":"a:2:42158:4125-0:333:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42158:4125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:269:2797":{"id":"0:269:2797","crate_id":0,"name":"cc_env","span":{"filename":"src/lib.rs","begin":[3584,4],"end":[3598,5]},"visibility":"public","docs":"Returns the compiler command in format of CC environment variable.\nOr empty string if CC env was not present\n\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:1966:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:3038":{"id":"0:270:3038","crate_id":0,"name":"cflags_env","span":{"filename":"src/lib.rs","begin":[3603,4],"end":[3612,5]},"visibility":"public","docs":"Returns the compiler flags in format of CFLAGS environment variable.\nImportant here - this will not be CFLAGS from env, its internal gcc's flags to use as CFLAGS\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:1966:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212:2772":{"id":"0:212:2772","crate_id":0,"name":"try_get_ranlib","span":{"filename":"src/lib.rs","begin":[2906,4],"end":[2912,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nThis will return a result instead of panicing;\nsee [`get_ranlib()`] for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5446:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[184,0],"end":[184,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","source","provide","type_id","description"],"trait":{"name":"Error","id":"2:2789:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12767:2722":{"id":"2:12767:2722","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12768:27254"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:267:335":{"id":"0:267:335","crate_id":0,"name":"args","span":{"filename":"src/lib.rs","begin":[3568,4],"end":[3570,5]},"visibility":"public","docs":"Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"OsString","id":"1:1966:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12868:27165":{"id":"2:12868:27165","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:311:3305":{"id":"0:311:3305","crate_id":0,"name":"VsVers","span":{"filename":"src/windows_registry.rs","begin":[84,0],"end":[95,1]},"visibility":"public","docs":"A version of Visual Studio","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:312:3307","0:314:3309","0:316:3311","0:318:3313","0:320:3315"],"impls":["a:2:32527:3894-0:311:3305","a:2:42157:4126-0:311:3305","a:2:42158:4125-0:311:3305","a:2:2949:254-0:311:3305","a:2:32445:244-0:311:3305","b:2:2737-0:311:3305","b:2:2424-0:311:3305","b:2:2742-0:311:3305","b:2:3496-0:311:3305","b:2:2731-0:311:3305","b:2:2427-0:311:3305","b:2:2727-0:311:3305","b:5:687-0:311:3305","0:328","0:325","0:327","0:322","0:324","0:331","0:330"]}}},"a:2:42158:4125-0:311:3305":{"id":"a:2:42158:4125-0:311:3305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42158:4125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12874:15494":{"id":"2:12874:15494","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4672:15494"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44237:10012","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[155,9],"end":[155,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2440:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:398:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:79:818":{"id":"0:79:818","crate_id":0,"name":"include","span":{"filename":"src/lib.rs","begin":[358,4],"end":[361,5]},"visibility":"public","docs":"Add a directory to the `-I` or include path for headers\n\n# Example\n\n```no_run\nuse std::path::Path;\n\nlet library_path = Path::new(\"/path/to/library\");\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .include(library_path)\n    .include(\"src\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42158:4125-0:401:1894":{"id":"a:2:42158:4125-0:401:1894","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42158:4125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:55:2258":{"id":"0:55:2258","crate_id":0,"name":"find","span":{"filename":"src/windows_registry.rs","begin":[35,0],"end":[37,1]},"visibility":"public","docs":"Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.\n\nThe `target` argument is the target that the tool should work for (e.g.\ncompile or link for) and the `tool` argument is the tool to find (e.g.\n`cl.exe` or `link.exe`).\n\nThis function will return `None` if the tool could not be found, or it will\nreturn `Some(cmd)` which represents a command that's ready to execute the\ntool with the appropriate environment variables set.\n\nNote that this function always returns `None` for non-MSVC targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::process::Command","id":"1:5446:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2731-0:333:1834":{"id":"b:2:2731-0:333:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2704:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2733:745"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2949:254-0:401:1894":{"id":"a:2:2949:254-0:401:1894","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2949:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2737-0:401:1894":{"id":"b:2:2737-0:401:1894","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2707:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:135","2:2741:1620"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12765:33941":{"id":"2:12765:33941","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12040:1537","str::slice_mut_unchecked":"2:12766:33942","crate::ops::Index":"2:39607:9914"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12865:27161":{"id":"2:12865:27161","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39976:27118","Self::is_ascii":"2:12864:27160"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39976:27118","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12746:2032":{"id":"2:12746:2032","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323:718":{"id":"0:323:718","crate_id":0,"name":"fmt","span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32527:3894-0:394:135":{"id":"a:2:32527:3894-0:394:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32527:3894","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:89:1982":{"id":"0:89:1982","crate_id":0,"name":"ar_flag","span":{"filename":"src/lib.rs","begin":[441,4],"end":[444,5]},"visibility":"public","docs":"Add a flag to the invocation of the ar\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .file(\"src/bar.c\")\n    .ar_flag(\"/NODEFAULTLIB:libc.dll\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2737-0:394:135":{"id":"b:2:2737-0:394:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2707:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:135","2:2741:1620"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:133:1143":{"id":"0:133:1143","crate_id":0,"name":"pic","span":{"filename":"src/lib.rs","begin":[1034,4],"end":[1037,5]},"visibility":"public","docs":"Configures whether the compiler will emit position independent code.\n\nThis option defaults to `false` for `windows-gnu` and bare metal targets and\nto `true` for all other targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pic",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:318:3313":{"id":"0:318:3313","crate_id":0,"name":"Vs16","span":{"filename":"src/windows_registry.rs","begin":[92,4],"end":[92,8]},"visibility":"default","docs":"Visual Studio 16 (2019)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2424-0:311:3305":{"id":"b:2:2424-0:311:3305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:3893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2418:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2426:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:327":{"id":"0:327","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:32472:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:64:718":{"id":"0:64:718","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[179,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2680":{"id":"0:0:2680","crate_id":0,"name":"cc","span":{"filename":"src/lib.rs","begin":[1,0],"end":[4024,1]},"visibility":"public","docs":"A library for build scripts to compile custom C code\n\nThis library is intended to be used as a `build-dependencies` entry in\n`Cargo.toml`:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n```\n\nThe purpose of this crate is to provide the utility functions necessary to\ncompile C code into a static archive which is then linked into a Rust crate.\nConfiguration is available through the `Build` struct.\n\nThis crate will automatically detect situations such as cross compilation or\nother environment variables set by Cargo and will build code appropriately.\n\nThe crate is not limited to C code, it can accept any source code that can\nbe passed to a C or C++ compiler. As such, assembly files with extensions\n`.s` (gcc/clang) and `.asm` (MSVC) can also be compiled.\n\n[`Build`]: struct.Build.html\n\n# Parallelism\n\nTo parallelize computation, enable the `parallel` feature for the crate.\n\n```toml\n[build-dependencies]\ncc = { version = \"1.0\", features = [\"parallel\"] }\n```\nTo specify the max number of concurrent compilation jobs, set the `NUM_JOBS`\nenvironment variable to the desired amount.\n\nCargo will also set this environment variable when executed with the `-jN` flag.\n\n# Examples\n\nUse the `Build` struct to compile `src/foo.c`:\n\n```no_run\nfn main() {\n    cc::Build::new()\n        .file(\"src/foo.c\")\n        .define(\"FOO\", Some(\"bar\"))\n        .include(\"src\")\n        .compile(\"foo\");\n}\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/cc/1.0\")]","#![allow(deprecated)]","#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:52:1829","0:333:1834","0:394:135","0:401:1894"],"is_stripped":false}}},"0:320:3315":{"id":"0:320:3315","crate_id":0,"name":"Vs17","span":{"filename":"src/windows_registry.rs","begin":[94,4],"end":[94,8]},"visibility":"default","docs":"Visual Studio 17 (2022)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:58:3319":{"id":"0:58:3319","crate_id":0,"name":"find_vs_version","span":{"filename":"src/windows_registry.rs","begin":[102,0],"end":[104,1]},"visibility":"public","docs":"Find the most recent installed version of Visual Studio\n\nThis is used by the cmake crate to figure out the correct\ngenerator.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42176:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:786":{"id":"0:118:786","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[920,4],"end":[923,5]},"visibility":"public","docs":"Configures the host assumed by this configuration.\n\nThis option is automatically scraped from the `HOST` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .host(\"arm-linux-gnueabihf\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["host",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12761:27231":{"id":"2:12761:27231","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:1860":{"id":"0:96:1860","crate_id":0,"name":"static_flag","span":{"filename":"src/lib.rs","begin":[632,4],"end":[635,5]},"visibility":"public","docs":"Set the `-static` flag.\n\nWhen enabled on systems that support dynamic linking, this prevents\nlinking with the shared libraries.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .static_flag(true)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:328":{"id":"0:328","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2492:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12815:27270":{"id":"2:12815:27270","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12772:2748":{"id":"2:12772:2748","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12773:2978"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44203:10004","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12835:33949":{"id":"2:12835:33949","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:34627":{"id":"5:5536:34627","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:3361","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:3361","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2727-0:401:1894":{"id":"b:2:2727-0:401:1894","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2704:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2701:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2730:1883"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12775:33943":{"id":"2:12775:33943","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44193:10015","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2742-0:401:1894":{"id":"b:2:2742-0:401:1894","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2701:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2745:135","2:2746:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2440:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42158:4125-0:394:135":{"id":"a:2:42158:4125-0:394:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42158:4125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5811:1595":{"id":"5:5811:1595","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2424-0:394:135":{"id":"b:2:2424-0:394:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:3893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2418:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2426:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:109:1846":{"id":"0:109:1846","crate_id":0,"name":"cpp_link_stdlib","span":{"filename":"src/lib.rs","begin":[838,4],"end":[844,5]},"visibility":"public","docs":"Set the standard library to link against when compiling with C++\nsupport.\n\nIf the `CXXSTDLIB` environment variable is set, its value will\noverride the default value, but not the value explicitly set by calling\nthis function.\n\nA value of `None` indicates that no automatic linking should happen,\notherwise cargo will link against the specified library.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n- `c++_shared` or `c++_static` for Android\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .cpp_link_stdlib(\"stdc++\")\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_link_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2701:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2727-0:394:135":{"id":"b:2:2727-0:394:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2704:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2701:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2730:1883"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2746:1618":{"id":"2:2746:1618","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12821:3634":{"id":"2:12821:3634","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12441:10000","`DoubleEndedIterator`":"2:7827:128","prim@char":"1:12034:452","str::rmatches":"2:12824:33946"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44133:10018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1853":{"id":"0:127:1853","crate_id":0,"name":"archiver","span":{"filename":"src/lib.rs","begin":[989,4],"end":[992,5]},"visibility":"public","docs":"Configures the tool used to assemble archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["archiver",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12833:2990":{"id":"2:12833:2990","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:394:135":{"id":"0:394:135","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[156,0],"end":[161,1]},"visibility":"public","docs":"Represents an internal error that occurred, with an explanation.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32527:3894-0:394:135","a:2:42157:4126-0:394:135","a:2:42158:4125-0:394:135","a:2:2949:254-0:394:135","a:2:32445:244-0:394:135","b:2:2737-0:394:135","b:2:2424-0:394:135","b:2:2742-0:394:135","b:2:3496-0:394:135","b:2:2731-0:394:135","b:2:2427-0:394:135","b:2:2727-0:394:135","b:5:687-0:394:135","b:5:5809-0:394:135","0:63","0:397","0:399","0:61","0:65"]}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[293,0],"end":[3407,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:1038","0:79:818","0:81:1965","0:83:1970","0:86:1974","0:88:1978","0:89:1982","0:90:1989","0:92:2007","0:93:2038","0:94:2050","0:95:1859","0:96:1860","0:97:1843","0:98:711","0:100:1844","0:102:1845","0:103:1848","0:104:1849","0:105:1529","0:106:1861","0:107:1806","0:108:1862","0:109:1846","0:113:1847","0:117:1562","0:118:786","0:119:1851","0:120:2165","0:121:574","0:122:1852","0:123:1850","0:125:478","0:127:1853","0:129:1854","0:131:1855","0:132:2197","0:133:1143","0:134:1857","0:135:1865","0:136:1858","0:140:2221","0:149:2317","0:153:2403","0:155:2412","0:156:2277","0:157:2016","0:207:2761","0:208:2762","0:211:2771","0:212:2772"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:90:1989":{"id":"0:90:1989","crate_id":0,"name":"asm_flag","span":{"filename":"src/lib.rs","begin":[460,4],"end":[463,5]},"visibility":"public","docs":"Add a flag that will only be used with assembly files.\n\nThe flag will be applied to input files with either a `.s` or\n`.asm` extension (case insensitive).\n\n# Example\n\n```no_run\ncc::Build::new()\n    .asm_flag(\"-Wa,-defsym,abc=1\")\n    .file(\"src/foo.S\")  // The asm flag will be applied here\n    .file(\"src/bar.c\")  // The asm flag will not be applied here\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:1851":{"id":"0:119:1851","crate_id":0,"name":"opt_level","span":{"filename":"src/lib.rs","begin":[929,4],"end":[932,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"primitive":"u32"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2427-0:394:135":{"id":"b:2:2427-0:394:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:3893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2421:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2429:26772"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12812:27268":{"id":"2:12812:27268","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12034:452","str::splitn":"2:12809:27266","self::pattern":"2:12441:10000"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44051:10021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32445:244-0:311:3305":{"id":"a:2:32445:244-0:311:3305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32445:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:95:1859":{"id":"0:95:1859","crate_id":0,"name":"shared_flag","span":{"filename":"src/lib.rs","begin":[613,4],"end":[616,5]},"visibility":"public","docs":"Set the `-shared` flag.\n\nWhen enabled, the compiler will produce a shared object which can\nthen be linked with other objects to form an executable.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["shared_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272:3015":{"id":"0:272:3015","crate_id":0,"name":"is_like_clang","span":{"filename":"src/lib.rs","begin":[3620,4],"end":[3622,5]},"visibility":"public","docs":"Whether the tool is Clang-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12776:32142":{"id":"2:12776:32142","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44221:10001","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324":{"id":"0:324","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32447:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:129:1854":{"id":"0:129:1854","crate_id":0,"name":"ranlib","span":{"filename":"src/lib.rs","begin":[999,4],"end":[1002,5]},"visibility":"public","docs":"Configures the tool used to index archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ranlib",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12763:27232":{"id":"2:12763:27232","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3496-0:311:3305":{"id":"b:2:3496-0:311:3305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:3893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3498:1633"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12809:27266":{"id":"2:12809:27266","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:10000","str::rsplitn":"2:12812:27268"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44033:10022","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12850:2796":{"id":"2:12850:2796","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:10000"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:331":{"id":"0:331","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2440:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:332:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12859:33954":{"id":"2:12859:33954","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:10000"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:311:3305":{"id":"b:5:687-0:311:3305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2440:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2960","5:690:2034","5:691:9614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:412":{"id":"0:412","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[193,16],"end":[193,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:413:718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:57:2684":{"id":"0:57:2684","crate_id":0,"name":"find_tool","span":{"filename":"src/windows_registry.rs","begin":[43,0],"end":[45,1]},"visibility":"public","docs":"Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["_tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2427-0:333:1834":{"id":"b:2:2427-0:333:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:3893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2421:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2429:26772"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:687-0:333:1834":{"id":"b:5:687-0:333:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2440:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2960","5:690:2034","5:691:9614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5555:28494":{"id":"5:5555:28494","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12868:27165"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2742-0:394:135":{"id":"b:2:2742-0:394:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2701:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2745:135","2:2746:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:86:1974":{"id":"0:86:1974","crate_id":0,"name":"object","span":{"filename":"src/lib.rs","begin":[410,4],"end":[413,5]},"visibility":"public","docs":"Add an arbitrary object file to link in","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["obj",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:1978":{"id":"0:88:1978","crate_id":0,"name":"flag","span":{"filename":"src/lib.rs","begin":[425,4],"end":[428,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"-ffunction-sections\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:1965":{"id":"0:81:1965","crate_id":0,"name":"includes","span":{"filename":"src/lib.rs","begin":[381,4],"end":[390,5]},"visibility":"public","docs":"Add multiple directories to the `-I` include path.\n\n# Example\n\n```no_run\n# use std::path::Path;\n# let condition = true;\n#\nlet mut extra_dir = None;\nif condition {\n    extra_dir = Some(Path::new(\"/path/to\"));\n}\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .includes(extra_dir)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dirs",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7789:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:7789:163","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42157:4126-0:401:1894":{"id":"a:2:42157:4126-0:401:1894","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42157:4126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:132:2197":{"id":"0:132:2197","crate_id":0,"name":"link_lib_modifier","span":{"filename":"src/lib.rs","begin":[1025,4],"end":[1028,5]},"visibility":"public","docs":"Adds a native library modifier that will be added to the\n`rustc-link-lib=static:MODIFIERS=LIBRARY_NAME` metadata line\nemitted for cargo if `cargo_metadata` is enabled.\nSee https://doc.rust-lang.org/rustc/command-line-arguments.html#-l-link-the-generated-crate-to-a-native-library\nfor the list of modifiers accepted by rustc.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["link_lib_modifier",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12780:2227":{"id":"2:12780:2227","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:10000"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:268:659":{"id":"0:268:659","crate_id":0,"name":"env","span":{"filename":"src/lib.rs","begin":[3576,4],"end":[3578,5]},"visibility":"public","docs":"Returns the set of environment variables needed for this compiler to\noperate.\n\nThis is typically only used for MSVC compilers currently.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"tuple":[{"resolved_path":{"name":"OsString","id":"1:1966:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"OsString","id":"1:1966:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12773:2978":{"id":"2:12773:2978","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12772:2748"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44212:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:3786":{"id":"5:5553:3786","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:332:456":{"id":"0:332:456","crate_id":0,"name":"clone","span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12864:27160":{"id":"2:12864:27160","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:1858":{"id":"0:136:1858","crate_id":0,"name":"static_crt","span":{"filename":"src/lib.rs","begin":[1068,4],"end":[1071,5]},"visibility":"public","docs":"Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.\n\nThis option defaults to `false`, and affect only msvc targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_crt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12871:27169":{"id":"2:12871:27169","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:36354"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:400:718":{"id":"0:400:718","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[155,16],"end":[155,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:1829":{"id":"0:52:1829","crate_id":0,"name":"windows_registry","span":{"filename":"src/windows_registry.rs","begin":[11,0],"end":[896,1]},"visibility":"public","docs":"A helper module to probe the Windows Registry when looking for\nwindows-specific tools.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:55:2258","0:57:2684","0:311:3305","0:58:3319"],"is_stripped":false}}},"b:2:2742-0:333:1834":{"id":"b:2:2742-0:333:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2701:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2745:135","2:2746:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:157:2016":{"id":"0:157:2016","crate_id":0,"name":"try_get_compiler","span":{"filename":"src/lib.rs","begin":[1634,4],"end":[1714,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis will return a result instead of panicing; see get_compiler() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12753:2244":{"id":"2:12753:2244","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11996:2988"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:2761":{"id":"0:207:2761","crate_id":0,"name":"get_archiver","span":{"filename":"src/lib.rs","begin":[2844,4],"end":[2849,5]},"visibility":"public","docs":"Get the archiver (ar) that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5479:9987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5446:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12839:33951":{"id":"2:12839:33951","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3496-0:401:1894":{"id":"b:2:3496-0:401:1894","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:3893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3498:1633"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12766:33942":{"id":"2:12766:33942","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12040:1537","crate::ops::IndexMut":"2:3162:9915","str::slice_unchecked":"2:12765:33941"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12837:33950":{"id":"2:12837:33950","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:33956":{"id":"2:12875:33956","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4669:33956"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44246:10013","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32445:244-0:333:1834":{"id":"a:2:32445:244-0:333:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32445:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,16],"end":[94,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:376:718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12769:3011":{"id":"2:12769:3011","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12034:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43899:10007","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12755:340":{"id":"2:12755:340","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12756:3254","`u8`":"1:12051:1642"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3409,0],"end":[3413,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2778:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:253:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:108:1862":{"id":"0:108:1862","crate_id":0,"name":"extra_warnings","span":{"filename":"src/lib.rs","begin":[807,4],"end":[810,5]},"visibility":"public","docs":"Set extra warnings flags.\n\nAdds some flags:\n- nothing for MSVC.\n- \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\n// Disables -Wextra, -Wall remains enabled:\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .extra_warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:316:3311":{"id":"0:316:3311","crate_id":0,"name":"Vs15","span":{"filename":"src/windows_registry.rs","begin":[90,4],"end":[90,8]},"visibility":"default","docs":"Visual Studio 15 (2017)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:211:2771":{"id":"0:211:2771","crate_id":0,"name":"get_ranlib","span":{"filename":"src/lib.rs","begin":[2895,4],"end":[2900,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5479:9987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5446:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:394:135":{"id":"b:5:687-0:394:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2440:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2960","5:690:2034","5:691:9614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:413:718":{"id":"0:413:718","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[193,16],"end":[193,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2427-0:311:3305":{"id":"b:2:2427-0:311:3305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:3893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2421:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2429:26772"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:266:1140":{"id":"0:266:1140","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[3562,4],"end":[3564,5]},"visibility":"public","docs":"Returns the path for this compiler.\n\nNote that this may not be a path to a file on the filesystem, e.g. \"cc\",\nbut rather something which will be resolved when a process is spawned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5240:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2731-0:401:1894":{"id":"b:2:2731-0:401:1894","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2704:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2733:745"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2731-0:394:135":{"id":"b:2:2731-0:394:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2704:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2733:745"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:376:718":{"id":"0:376:718","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[94,16],"end":[94,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:689:2960":{"id":"5:689:2960","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12794:2574":{"id":"2:12794:2574","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12441:10000","`DoubleEndedIterator`":"2:7827:128","prim@char":"1:12034:452","str::split_whitespace":"2:12772:2748","str::rsplit":"2:12800:27264"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43929:3767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2737-0:333:1834":{"id":"b:2:2737-0:333:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2707:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:135","2:2741:1620"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:690:2034":{"id":"5:690:2034","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2727-0:333:1834":{"id":"b:2:2727-0:333:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2704:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2701:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2730:1883"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:113:1847":{"id":"0:113:1847","crate_id":0,"name":"cpp_set_stdlib","span":{"filename":"src/lib.rs","begin":[879,4],"end":[887,5]},"visibility":"public","docs":"Force the C++ compiler to use the specified standard library.\n\nSetting this option will automatically set `cpp_link_stdlib` to the same\nvalue.\n\nThe default value of this option is always `None`.\n\nThis option has no effect when compiling for a Visual Studio based\ntarget.\n\nThis option sets the `-stdlib` flag, which is only supported by some\ncompilers (clang, icc) but not by others (gcc). The library will not\ndetect which compiler is used, as such it is the responsibility of the\ncaller to ensure that this option is only used in conjunction with a\ncompiler which supports the `-stdlib` flag.\n\nA value of `None` indicates that no specific C++ standard library should\nbe used, otherwise `-stdlib` is added to the compile invocation.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .cpp_set_stdlib(\"c++\")\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_set_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2701:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3415,0],"end":[3631,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:2019","0:266:1140","0:267:335","0:268:659","0:269:2797","0:270:3038","0:271:3014","0:272:3015","0:273:3012"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2741:1620":{"id":"2:2741:1620","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42157:4126-0:333:1834":{"id":"a:2:42157:4126-0:333:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42157:4126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32527:3894-0:333:1834":{"id":"a:2:32527:3894-0:333:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32527:3894","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2949:254-0:394:135":{"id":"a:2:2949:254-0:394:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2949:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:34627","5:5537:2494","5:5540:34628","5:5543:3108","5:5551:34629","5:5552:34630","5:5553:3786","5:5554:28493","5:5555:28494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42157:4126-0:311:3305":{"id":"a:2:42157:4126-0:311:3305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42157:4126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:411:456":{"id":"0:411:456","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[193,9],"end":[193,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12847:3101":{"id":"2:12847:3101","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:10000"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:1861":{"id":"0:106:1861","crate_id":0,"name":"warnings_into_errors","span":{"filename":"src/lib.rs","begin":[763,4],"end":[766,5]},"visibility":"public","docs":"Set warnings into errors flag.\n\nDisabled by default.\n\nWarning: turning warnings into errors only make sense\nif you are a developer of the crate using cc-rs.\nSome warnings only appear on some architecture or\nspecific version of the compiler. Any user of this crate,\nor any other crate depending on it, could fail during\ncompile time.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings_into_errors(true)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings_into_errors",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:2007":{"id":"0:92:2007","crate_id":0,"name":"is_flag_supported","span":{"filename":"src/lib.rs","begin":[495,4],"end":[553,5]},"visibility":"public","docs":"Run the compiler to test if it accepts the given flag.\n\nFor a convenience method for setting flags conditionally,\nsee `flag_if_supported()`.\n\nIt may return error if it's unable to run the compiler with a test file\n(e.g. the compiler is missing or a write to the `out_dir` failed).\n\nNote: Once computed, the result of this call is stored in the\n`known_flag_support` field. If `is_flag_supported(flag)`\nis called again, the result will be read from the hash table.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}},{"type":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12777:2021":{"id":"2:12777:2021","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:10000"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:3108":{"id":"5:5543:3108","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:398:456":{"id":"0:398:456","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[155,9],"end":[155,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:1855":{"id":"0:131:1855","crate_id":0,"name":"cargo_metadata","span":{"filename":"src/lib.rs","begin":[1015,4],"end":[1018,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.\n\nThe emitted metadata is:\n\n - `rustc-link-lib=static=`*compiled lib*\n - `rustc-link-search=native=`*target folder*\n - When target is MSVC, the ATL-MFC libs are added via `rustc-link-search=native=`\n - When C++ is enabled, the C++ stdlib is added via `rustc-link-lib`\n - If `emit_rerun_if_env_changed` is not `false`, `rerun-if-env-changed=`*env*\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_metadata",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12748:33938":{"id":"2:12748:33938","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1843":{"id":"0:97:1843","crate_id":0,"name":"no_default_flags","span":{"filename":"src/lib.rs","begin":[643,4],"end":[646,5]},"visibility":"public","docs":"Disables the generation of default compiler flags. The default compiler\nflags may cause conflicts in some cross compiling scenarios.\n\nSetting the `CRATE_CC_NO_DEFAULTS` environment variable has the same\neffect as setting this to `true`. The presence of the environment\nvariable and the value of `no_default_flags` will be OR'd together.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["no_default_flags",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12783:2228":{"id":"2:12783:2228","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:10000"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12869:27167":{"id":"2:12869:27167","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:36354"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12853:2800":{"id":"2:12853:2800","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:10000"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[155,16],"end":[155,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:400:718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:264:2019":{"id":"0:264:2019","crate_id":0,"name":"to_command","span":{"filename":"src/lib.rs","begin":[3534,4],"end":[3556,5]},"visibility":"public","docs":"Converts this compiler into a `Command` that's ready to be run.\n\nThis is useful for when the compiler needs to be executed and the\ncommand returned will already have the initial arguments and environment\nvariables configured.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5446:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12872:33955":{"id":"2:12872:33955","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4671:33955"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44228:10011","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2427-0:401:1894":{"id":"b:2:2427-0:401:1894","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:3893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2421:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2429:26772"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12844:2725":{"id":"2:12844:2725","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:10000"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:34629":{"id":"5:5551:34629","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2727-0:311:3305":{"id":"b:2:2727-0:311:3305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2704:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2701:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2730:1883"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2949:254-0:311:3305":{"id":"a:2:2949:254-0:311:3305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2949:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:326:662":{"id":"0:326:662","crate_id":0,"name":"eq","span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:1857":{"id":"0:134:1857","crate_id":0,"name":"use_plt","span":{"filename":"src/lib.rs","begin":[1049,4],"end":[1052,5]},"visibility":"public","docs":"Configures whether the Procedure Linkage Table is used for indirect\ncalls into shared libraries.\n\nThe PLT is used to provide features like lazy binding, but introduces\na small performance loss due to extra pointer indirection. Setting\n`use_plt` to `false` can provide a small performance increase.\n\nNote that skipping the PLT requires a recent version of GCC/Clang.\n\nThis only applies to ELF targets. It has no effect on other platforms.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["use_plt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3496-0:333:1834":{"id":"b:2:3496-0:333:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:3893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3498:1633"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32527:3894-0:311:3305":{"id":"a:2:32527:3894-0:311:3305","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32527:3894","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12803:33944":{"id":"2:12803:33944","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12441:10000","str::split":"2:12794:2574","prim@char":"1:12034:452","`DoubleEndedIterator`":"2:7827:128","str::rsplit_terminator":"2:12806:33945"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43979:10024","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:3014":{"id":"0:271:3014","crate_id":0,"name":"is_like_gnu","span":{"filename":"src/lib.rs","begin":[3615,4],"end":[3617,5]},"visibility":"public","docs":"Whether the tool is GNU Compiler Collection-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12770:14055":{"id":"2:12770:14055","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12034:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43905:10006","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12818:27271":{"id":"2:12818:27271","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:33953":{"id":"2:12841:33953","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:10000"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12466:9993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:574":{"id":"0:121:574","crate_id":0,"name":"debug","span":{"filename":"src/lib.rs","begin":[948,4],"end":[951,5]},"visibility":"public","docs":"Configures whether the compiler will emit debug information when\ngenerating object files.\n\nThis option is automatically scraped from the `DEBUG` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["debug",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12830:33948":{"id":"2:12830:33948","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12441:10000","`DoubleEndedIterator`":"2:7827:128","prim@char":"1:12034:452","str::match_indices":"2:12827:33947"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44097:10017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42157:4126-0:394:135":{"id":"a:2:42157:4126-0:394:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42157:4126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12745:874":{"id":"2:12745:874","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12034:452"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12759:27230":{"id":"2:12759:27230","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42031:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:2277":{"id":"0:156:2277","crate_id":0,"name":"get_compiler","span":{"filename":"src/lib.rs","begin":[1624,4],"end":[1629,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis function will return a `Tool` which represents the culmination\nof this configuration at a snapshot in time. The returned compiler can\nbe inspected (e.g. the path, arguments, environment) to forward along to\nother tools, or the `to_command` method can be used to invoke the\ncompiler itself.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2730:1883":{"id":"2:2730:1883","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2704:142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1038":{"id":"0:78:1038","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[299,4],"end":[341,5]},"visibility":"public","docs":"Construct a new instance of a blank set of configuration.\n\nThis builder is finished with the [`compile`] function.\n\n[`compile`]: struct.Build.html#method.compile","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12768:27254":{"id":"2:12768:27254","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12767:2722"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12827:33947":{"id":"2:12827:33947","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12441:10000","`DoubleEndedIterator`":"2:7827:128","prim@char":"1:12034:452","str::rmatch_indices":"2:12830:33948"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44079:10016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:2038":{"id":"0:93:2038","crate_id":0,"name":"flag_if_supported","span":{"filename":"src/lib.rs","begin":[566,4],"end":[569,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler if it supports it\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag_if_supported(\"-Wlogical-op\") // only supported by GCC\n    .flag_if_supported(\"-Wunreachable-code\") // only supported by clang\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12856:3520":{"id":"2:12856:3520","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:10000"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:691:9614":{"id":"5:691:9614","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12862:2381":{"id":"2:12862:2381","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12402:134","`FromStr`":"2:12401:3339"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12401:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12401:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:1970":{"id":"0:83:1970","crate_id":0,"name":"define","span":{"filename":"src/lib.rs","begin":[403,4],"end":[407,5]},"visibility":"public","docs":"Specify a `-D` variable with an optional value.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .define(\"FOO\", \"BAR\")\n    .define(\"BAZ\", None)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["val",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2701:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12867:27164":{"id":"2:12867:27164","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[193,9],"end":[193,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2440:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:411:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:149:2317":{"id":"0:149:2317","crate_id":0,"name":"compile","span":{"filename":"src/lib.rs","begin":[1288,4],"end":[1292,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\n# Library name\n\nThe `output` string argument determines the file name for the compiled\nlibrary. The Rust compiler will create an assembly named \"lib\"+output+\".a\".\nMSVC will create a file named output+\".lib\".\n\nThe choice of `output` is close to arbitrary, but:\n\n- must be nonempty,\n- must not contain a path separator (`/`),\n- must be unique across all `compile` invocations made by the same build\n  script.\n\nIf your build script compiles a single source file, the base name of\nthat source file would usually be reasonable:\n\n```no_run\ncc::Build::new().file(\"blobstore.c\").compile(\"blobstore\");\n```\n\nCompiling multiple source files, some people use their crate's name, or\ntheir crate's name + \"-cc\".\n\nOtherwise, please use your imagination.\n\nFor backwards compatibility, if `output` starts with \"lib\" *and* ends\nwith \".a\", a second \"lib\" prefix and \".a\" suffix do not get added on,\nbut this usage is deprecated; please omit `lib` and `.a` in the argument\nthat you pass.\n\n# Panics\n\nPanics if `output` is not formatted correctly or if one of the underlying\ncompiler commands fails. It can also panic if it fails reading file names\nor creating directories.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:478":{"id":"0:125:478","crate_id":0,"name":"compiler","span":{"filename":"src/lib.rs","begin":[979,4],"end":[982,5]},"visibility":"public","docs":"Configures the compiler to be used to produce output.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["compiler",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12840:33952":{"id":"2:12840:33952","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135:1865":{"id":"0:135:1865","crate_id":0,"name":"emit_rerun_if_env_changed","span":{"filename":"src/lib.rs","begin":[1060,4],"end":[1063,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo to detect environment\nchanges that should trigger a rebuild.\n\nThis has no effect if the `cargo_metadata` option is `false`.\n\nThis option defaults to `true`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["emit_rerun_if_env_changed",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:11675:12126":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"20:6172:4592":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"20:5529:8563":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:43887:10010":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:12077:14400":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:15519:12745":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"20:6427:8995":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:6300:13685":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:9833:233":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:10067:11988":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:12672:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:7845:3721":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:10843:14536":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:3584:14340":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:44668:14078":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:1486:9799":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:5023:7953":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"20:4689:7957":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:7827:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:13145:12174":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"11:1051:9812":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:5905:13042":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:6913:8995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:41033:13982":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:6279:13089":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:40557:32437":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:15108:12621":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"20:5576:8565":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"14:40:12174":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:7645:3728":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:14122:12356":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:15943:12176":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:5661:13015":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:3797:12979":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:14282:12376":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:39611:9916":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:5746:3843":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:22629:13716":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:1536:14515":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:5921:8557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:637:14563":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:44901:14561":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:23095:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:12466:9993":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:15101:12619":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:44858:234":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11590:12038":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:22720:13729":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"20:544:4680":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"2:40650:3723":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:14181:12362":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:44151:10019":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:10471:35532":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:2504:12933":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:563:4684":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"11:2562:13478":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5955:8536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"20:500:4675":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"2:43027:32464":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:22675:32423":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"20:5384:8552":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:40377:10012":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:13436:12208":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:2440:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"11:700:9568":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"14:215:13412":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:11088:12009":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:12222:14044":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:495:4676":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"11:1891:9800":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:23788:243":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:43082:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:1528:5565":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:44425:14059":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:44537:10025":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:6742:13156":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:4773:14341":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"5:5388:9998":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:40:10054":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:1567:13472":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:46274:14107":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:13463:12217":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"11:1896:9801":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:4878:7946":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:22753:15522":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:2810:12946":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:12035:1658":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:7307:10923":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:43905:10006":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:23126:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:32527:3894":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:1664:5577":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:22326:15666":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:32436:13803":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"20:1509:5562":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"20:4160:7900":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:2695:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:13202:12178":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:6012:8563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:39664:219":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:2596:12937":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:11536:12034":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"20:553:4681":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"2:7748:20835":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"20:5564:8564":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:3127:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:46867:14126":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:23281:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:4344:12984":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:12953:12153":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:48147:14184":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:5816:13031":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:504:3861":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:3255:218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:15345:12680":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:12047:796":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:2339:12921":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:4020:9800":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:5500:1820":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:2352:3707":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:45966:14094":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:15374:12687":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:9032:9994":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:6944:35517":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:10775:14348":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:3581:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:6268:35522":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"20:5509:8562":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"0:320:3315":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs17"],"kind":"variant"},"0:58:3319":{"crate_id":0,"path":["cc","windows_registry","find_vs_version"],"kind":"function"},"17:11958:12080":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:4742:3249":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:10674:3808":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11412:14371":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:4366:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:10814:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"18:681:11876":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:11523:12032":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:43751:13696":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:44452:14060":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:14497:12410":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:10608:14346":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"15:288:21630":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:8387:4118":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:1785:13674":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:12401:3339":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:9071:14231":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"20:4175:7745":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:3735:14573":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:22440:13703":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:5568:3063":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:4906:15552":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:46219:14104":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"20:538:4679":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:7792:22547":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:48101:14183":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:8281:13335":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:12572:14420":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:16170:12186":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"11:1903:13469":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:2236:35393":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"20:1516:5563":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:9882:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:2487:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:15321:12676":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:32472:251":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:6499:12971":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12191:12088":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:44736:20957":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:12474:12021":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:5625:227":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:2305:21675":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"11:0:3539":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:7708:12970":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:13765:12283":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:43009:3691":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:0:879":{"crate_id":6,"path":["libc"],"kind":"module"},"2:46034:14097":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:10530:246":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:6351:15678":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:3732:14572":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"20:1666:5577":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11945:14397":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:30589:10049":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:1778:635":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:11563:12036":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:9759:22602":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:6071:8566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:15287:12668":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:43873:10014":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"20:6278:5501":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12324:12108":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:2969:21677":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"20:61:4283":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"2:9877:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:6376:22540":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:3099:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:4686:7926":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:3737:9568":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:7347:13667":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:6194:14581":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:1025:9811":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:8830:3824":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:2993:4258":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:7756:9856":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:7468:3674":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:7482:32437":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:16098:12893":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"20:4406:7926":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:6682:4550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11549:12035":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:2450:12931":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:0:1974":{"crate_id":17,"path":["object"],"kind":"module"},"6:4473:7903":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13896:12304":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:8181:12972":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:21464:13701":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:5588:12955":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:2336:20857":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:10941:14351":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:14439:12401":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"20:7131:8088":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"20:4193:7903":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"20:4148:7898":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:4947:13571":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:43272:14025":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:42168:3875":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:12486:12121":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:12356:12113":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:1521:5564":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:14455:12403":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:13042:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"20:134:4350":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:6889:8993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:10896:12002":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"20:5624:8570":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:46589:14119":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:12872:12148":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:7768:12958":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:2907:12950":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:7498:3672":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:10971:10021":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12459:12005":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:5885:8553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:8192:3764":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:8115:13323":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:12596:14422":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:12045:694":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"20:599:4688":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"2:48375:14197":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:46118:14100":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:5392:9999":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:43672:14555":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:39560:9923":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:4543:7912":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"20:1560:5568":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:9651:22600":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:11180:14081":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:13504:12228":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:1545:9801":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:14786:12532":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:13064:32528":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:7582:10997":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13695:12275":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:14087:12345":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:21390:3728":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:10726:35525":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:22212:15675":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:12510:12122":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:14296:12377":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:12828:12146":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:43899:10007":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"20:6403:8993":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"20:5653:11659":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:2574:12936":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:6047:8564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11321:12021":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:44951:13481":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:13116:14544":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:10422:14343":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:40699:13956":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:10804:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:15725:12797":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:7722:12960":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"11:2423:9568":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:41226:13985":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:4703:15543":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:3482:1816":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"20:4642:7952":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:22311:3728":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:1796:9848":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:21202:32750":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:6741:5528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:8938:15557":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6346:14463":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:6781:5504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:62:4283":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:8844:3825":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:5068:7958":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:44514:14062":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:10520:3728":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:7513:13257":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:4028:15529":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:8310:14212":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:47789:14179":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:7285:13666":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:9130:3734":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:8263:3248":{"crate_id":1,"path":["std","os","raw","c_int"],"kind":"type_alias"},"2:3318:9917":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:13584:12235":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:31219:4249":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"11:811:9801":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"20:5414:8555":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"20:4065:7892":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:7782:13268":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:10035:11986":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"14:221:13414":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:2644:12939":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"11:2231:13473":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:8975:14602":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"11:800:9800":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:13869:12299":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:2523:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:42542:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:5381:1819":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:4928:14342":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:7601:10999":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"20:1523:5564":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:12052:1639":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:11983:14633":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:7318:13234":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:2944:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:6543:3851":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:2380:12928":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:47441:14146":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:4309:9619":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:8276:14210":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:9541:15211":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"11:434:35503":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:47291:14145":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:7651:13644":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:4381:14530":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:10540:3780":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:13121:12173":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:8003:14590":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:2426:1812":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:4038:15530":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:11226:14362":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11645:12042":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:3491:29709":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:8328:14600":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:32375:3826":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:1562:13471":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:43732:13694":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:46513:14116":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:6086:8568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:4865:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:4884:7947":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:5152:7962":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:39684:222":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:595:11983":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:7269:35520":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:16032:12876":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:6120:8572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:2864:12948":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:44097:10017":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:11307:14368":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:8008:14591":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:4127:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"20:4200:7904":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"18:671:14326":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:1424:3808":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"11:1923:13472":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:46787:14125":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:6862:10060":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:40798:13971":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"18:80:26732":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:15631:12776":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:10723:3767":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:41248:3789":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:21190:32750":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:13347:12193":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:42089:3808":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:15507:12742":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:48223:14186":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:15037:12599":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"11:1087:35502":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:2368:3711":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:14399:12396":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:1576:5570":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:5897:8555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:6804:8988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:8478:3806":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"11:1566:21606":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:7028:10995":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:6960:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:40481:20783":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:15733:12800":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:7138:31997":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:3162:9915":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:40787:13970":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:7556:9528":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:1913:5724":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:10249:3828":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:8495:1817":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:22355:15667":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:3323:3773":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:9096:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:7549:13671":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:13676:12270":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:22089:15670":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:15535:12749":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:3670:15520":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:7382:29601":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:16123:12898":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:46945:14138":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:38253:9910":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:634:14513":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:5753:3844":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:3123:2385":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:7621:22546":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:11632:12041":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:4496:7906":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:8921:4124":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:21219:32747":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:10946:10775":{"crate_id":1,"path":["std","sys","pal","unix","os_str","Buf"],"kind":"struct"},"2:42158:4125":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:12718:22609":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:6927:8996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:4710:7928":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:32447:252":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:43504:14031":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:15645:12778":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:15855:12173":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:4462:12986":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:6114:8571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"20:5427:8556":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:1270:9810":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:39607:9914":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:42269:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:6171:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:13491:12227":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12418:14413":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:6596:3855":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:1883:20866":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:2518:1814":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:45942:14093":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:5780:3845":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:12701:12140":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:12140:14408":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"11:2304:9810":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:9028:14608":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:4603:7919":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4610:7920":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:43311:14029":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:7702:9557":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:1910:13470":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:9918:22606":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"15:0:3542":{"crate_id":15,"path":["addr2line"],"kind":"module"},"20:5765:8607":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"20:4574:7943":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:13787:12290":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:1902:9780":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:10078:9848":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:2949:254":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:4578:7916":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:40869:13977":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:14470:12407":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:10093:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:2062:14516":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:6961:8998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4989:13601":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:645:15496":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:6159:8574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:4103:14527":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4968:13586":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:13948:12310":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6560:10899":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"16:7041:13195":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:11818:11012":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:475:4673":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"20:4208:7905":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:13407:12199":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:15062:12608":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:2428:12930":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:14757:12522":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"20:4734:7962":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:14001:12317":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"20:4528:7937":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:3366:3789":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:10355:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"20:4154:7899":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4902:7949":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:42219:3808":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:15384:12692":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:42780:3703":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5829:8507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:7511:3673":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"20:6214:8985":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:7544:13259":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:8239:15518":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:4841:7941":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:7284:4122":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:2975:13654":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"11:396:10904":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:2526:12934":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:1537:5566":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:4377:228":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:15049:12602":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:1094:14331":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11617:12040":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"9:450:21526":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:2707:265":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:12366:22731":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:33672:9900":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:46733:14123":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:40526:13954":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:2711:264":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"19:0:1131":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:21571:15585":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:6798:8987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"20:6333:8990":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:7884:22548":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:46096:14099":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"20:7173:9556":{"crate_id":20,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"18:507:11854":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:9469:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:12264:12104":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4666:7924":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:1040:9810":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:5049:13004":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:4783:7934":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:9354:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:12029:12085":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:12055:1638":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:42097:9797":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:13091:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:7368:9568":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:6107:8570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"20:7120:8087":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:4899:420":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:4798:3891":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:40755:13965":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:5961:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:10344:10974":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:6117:3750":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:5015:7952":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"11:1582:14508":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:7880:3895":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"20:591:4687":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"1:12058:1247":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"18:0:3544":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:11449:11938":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:5634:13011":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:10698:9797":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:8097:13320":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"11:2369:14512":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:23312:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"20:6205:8984":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"7:0:1687":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:12146:14039":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:40474:10011":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:8980:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:13419:12200":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"20:4396:7925":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:3888:12981":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:4411:3750":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:5992:3841":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:3373:9924":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:40807:13972":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:2140:9811":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:12054:1641":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:42464:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:2983:34909":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:10957:10022":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"20:4386:7924":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:8239:13251":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:10569:35530":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"20:4255:7911":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11345:12026":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"20:6351:8991":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:21562:3728":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:8167:14499":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"11:328:13466":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:38198:9909":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:44079:10016":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:4031:3750":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:15329:12677":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:4808:7937":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:3966:15525":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:1674:5578":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:14170:12361":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:13254:12181":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:7646:3882":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:7752:20834":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:7218:20837":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:15527:12748":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:11621:14261":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:10878:10020":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:7692:9556":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"20:4323:7919":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"20:4298:7916":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"20:4484:7932":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:5877:9800":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:6929:13179":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:4417:12985":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11714:14389":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:15659:12785":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:39803:13813":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:4719:12993":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:8283:14211":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:3830:12980":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:46237:14105":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:13182:12177":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:7633:8088":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"11:687:9797":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:7798:3896":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:3239:3784":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12387:22732":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"20:5376:8551":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:3607:9797":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:1507:5562":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:640:14565":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:12091:14404":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:6898:8994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:44644:14072":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:11014:14357":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:7635:10055":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:40466:10012":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:46012:14096":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"11:2124:9810":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"18:599:35537":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:14021:12320":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:33554:3657":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:6386:13099":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:4428:7898":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:6819:8990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:44680:14081":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:32445:244":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:12536:14417":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:7740:9855":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:44664:14077":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:22562:13706":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"20:4722:7960":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:32446:3893":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"20:5596:8567":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:39521:9926":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:4523:7909":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"11:364:10902":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:1743:659":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:3738:3778":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:3394:3750":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:836:3808":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:9813:22604":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"11:844:9806":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:7317:35009":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:4527:12988":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"20:7114:8086":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:3278:3780":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:10925:22619":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:15224:12647":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:7534:12966":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:7597:35518":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:43523:14033":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:766:26743":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:10970:29313":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:2658:3728":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:11141:14361":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13478:12223":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:15013:12597":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13448:12211":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"20:5631:8571":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:10172:11991":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:4050:15532":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12548:14418":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:10293:3766":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:7365:9366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:11607:29335":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:7619:9801":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:3191:13470":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:5140:7960":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:11484:14540":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:14385:12395":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:1054:9811":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"20:0:879":{"crate_id":20,"path":["libc"],"kind":"module"},"17:14194:12364":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"20:6232:4463":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:44246:10013":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:45922:14092":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:13648:12264":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:11800:12049":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10315:11995":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:2972:2960":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:1710:5583":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:2403:9797":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:6901:12961":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:3280:3781":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:44193:10015":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"20:5645:8573":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:5075:7959":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:46136:14101":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:4635:11743":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:6169:8575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:44503:20748":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:4266:13681":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:2228:14337":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:15961:12177":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:11243:14365":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:44221:10001":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:3217:13471":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:6467:13107":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:10667:35527":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:11236:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:3049:21678":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:8215:3767":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:2197:14334":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:4364:7894":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:4566:7915":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:4150:20717":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"20:4315:7918":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:6718:4463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:2986:4256":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:621:9781":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:11932:14396":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:8332:4463":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:6226:14449":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:6059:8565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:3494:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:6318:13092":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:11309:14252":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:9681:3692":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"20:7102:8084":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:22602:13714":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:4977:13592":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:40830:13974":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:40677:14548":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"20:6196:4550":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:5673:12956":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:4514:9621":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"20:566:4683":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"1:3936:15523":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"20:4598:7946":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:11390:14258":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:8906:2346":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:4999:855":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:15133:12626":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:2788:12945":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:2321:12919":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:40540:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12445:14416":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:11485:14381":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:2093:13680":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:7639:8089":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:40500:13950":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"20:4634:7951":{"crate_id":20,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:7067:13201":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"11:1887:9568":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"20:6875:9367":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:3130:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:4921:13000":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12410:12119":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:6605:9568":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:14887:12572":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:21573:13701":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:5712:13017":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"10:0:3538":{"crate_id":10,"path":["adler"],"kind":"module"},"17:12153:14409":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12202:22730":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13633:12260":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:42308:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:15493:12736":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:10136:3740":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:43761:14557":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:4212:3750":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:3655:3430":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:8893:14226":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:0:314":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:33320:9897":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:12057:1697":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:30715:32419":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"11:832:9802":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:9894:3700":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:40406:32427":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:42080:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:11743:14393":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:2542:13475":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11978:14399":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:3500:3726":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:11172:29635":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:32411:14546":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:44237:10012":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11767:14395":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"11:123:10900":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:21443:3728":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"20:4520:7936":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:3201:3783":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:15184:12638":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:15079:12613":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:1819:9852":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:46611:14120":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:43519:14032":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:10769:3718":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"20:1498:5560":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:7665:2336":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:4889:12999":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"14:160:14500":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:13218:12179":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:39640:217":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:48261:14189":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:2704:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:22691:32450":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"18:521:26744":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"20:4567:7942":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:6297:227":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:46256:14106":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:42176:233":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:5764:13682":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:23188:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:2946:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:6666:5500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10657:12021":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"20:1699:5581":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"20:1634:5574":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:3837:14574":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"18:636:11875":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:4986:13002":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:21451:15587":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:16004:12869":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:6658:4592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:2944:233":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:1501:5561":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:3160:30697":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:6136:11659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:15200:12640":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8302:14596":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:5322:13007":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:3461:12977":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:40436:13946":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:9968:22607":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:2183:13651":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:3510:1813":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:12345:12112":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:44309:20747":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:48345:14195":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"20:4509:7935":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:21236:32760":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:10207:11992":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:5982:8561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:7668:8092":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:533:3866":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:41783:13993":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:363:3881":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"11:2548:13476":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:10534:3782":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:22741:13732":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:11041:12021":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"20:6255:5528":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:44866:214":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:46635:14121":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:9016:14606":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"20:5637:8572":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:42999:14016":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:12016:29637":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:5982:13051":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:15177:12637":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"7:31:21513":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:11459:14375":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:7564:3836":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:10242:11993":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:22727:13731":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:5866:13039":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"20:5617:8569":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:15566:12757":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"11:2326:9811":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:47899:14180":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:44051:10021":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:8922:15556":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:47103:14141":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:16160:12904":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:12206:14043":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:11755:14394":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:10988:3825":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:15710:12796":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:43289:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:515:11857":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:4461:7902":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:261:14328":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:14904:12574":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:1909:705":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:47021:14140":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:4958:3791":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:22493:13704":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:7524:10938":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:1639:5575":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:4561:9622":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:1691:5580":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:15337:12679":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:2832:12947":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11399:14370":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:2380:3470":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:6711:8986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:14765:12525":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13162:12176":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:7840:3720":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"18:755:11892":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:5574:12952":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:12000:15213":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:12183:14042":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:12005:15501":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:11036:11003":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:14843:12567":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"0:401:1894":{"crate_id":0,"path":["cc","Tool"],"kind":"struct"},"2:48398:14198":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:7734:15500":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:2670:12940":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:928:9806":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:5004:13610":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:10950:14352":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:12103:14405":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:1692:3750":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:6893:13177":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"18:719:11884":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11727:14391":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:5051:14578":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:2744:12943":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:44699:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:588:4688":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:1789:9801":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:4641:12992":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:7660:13264":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:5044:7956":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:7462:13253":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:9536:33156":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"0:55:2258":{"crate_id":0,"path":["cc","windows_registry","find"],"kind":"function"},"6:548:4682":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:5859:8551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:3199:3782":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:2352:9812":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:4129:32000":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"9:0:3537":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:12039:1504":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"9:426:21528":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:15680:12791":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"0:0:2680":{"crate_id":0,"path":["cc"],"kind":"module"},"6:6263:8608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:8205:22549":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:4821:3886":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:14485:12110":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"20:6441:8996":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"11:2469:9801":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:36322:9908":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:7908:2243":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:10916:14537":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:6332:12951":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:10340:30170":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"5:2703:13661":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:44648:14073":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:5612:12957":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:5009:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:7297:9800":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:48296:14192":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:10813:35528":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"3:0:479":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:0:534":{"crate_id":2,"path":["core"],"kind":"module"},"16:7554:12967":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:23064:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:14950:12583":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:501:4677":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:5891:8554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"20:5491:8560":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:4092:9797":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:2472:12932":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"20:6327:8989":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:12396:12116":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"20:7160:8092":{"crate_id":20,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:14822:12562":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"0:394:135":{"crate_id":0,"path":["cc","Error"],"kind":"struct"},"16:6041:22539":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:1556:13470":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:3251:13472":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:2766:12944":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:23033:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:22578:13710":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:7933:3778":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:5088:13005":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:6013:21145":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"20:4604:7947":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:12034:452":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:21180:4249":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:3345:9921":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:8050:13317":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:557:1821":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:7492:13254":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:7616:13643":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"20:7149:8091":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"0:57:2684":{"crate_id":0,"path":["cc","windows_registry","find_tool"],"kind":"function"},"17:11395:14369":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4776:7933":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:3600:3429":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:10842:29638":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13273:12182":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:8202:3765":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"20:7183:9557":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:2954:3874":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"7:78:21520":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:11053:11005":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:39728:223":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:7582:13260":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:22546:13705":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:4777:718":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:11604:12039":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:15279:12665":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"20:6180:5500":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"20:5438:8557":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"11:1066:21605":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:4835:12997":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:867:9798":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"20:1720:5584":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:44331:14047":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:7277:9568":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:6485:12954":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"18:590:11865":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11690:14386":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"11:856:9807":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5743:13021":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:903:3808":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:45988:14095":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"20:7060:9528":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"20:6448:8997":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"11:2536:13474":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10618:35526":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:42157:4126":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:11027:11976":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:10137:11990":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:3241:3785":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:5395:3817":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"20:4458:3885":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:32948:9895":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:15842:12172":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"20:4169:7901":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:41760:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"15:394:21640":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:12220:12093":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:1131:35435":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:43824:13698":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:3930:15524":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:1387:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"20:1712:5583":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:787:9799":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:39706:221":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:1685:10912":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:482:10981":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"11:430:35507":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:5363:13008":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:4964:4114":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:15253:12655":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"20:1736:5585":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"20:4304:7917":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:7423:3667":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:4616:7921":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:7339:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"20:4181:7902":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12797:12145":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:9891:22587":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:15125:12624":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:10101:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:7535:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:12584:14421":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:10537:3784":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:8154:14496":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:9111:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:42235:9568":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:6146:10979":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:3184:3808":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:14235:12369":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:149:10897":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:1897:13675":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:2256:13657":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:11539:14574":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:22001:3728":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:10766:10003":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:16180:12191":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:6189:13087":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:1007:9810":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:11126:14360":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:2200:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:7015:13194":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"11:673:3808":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:15903:12851":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:12049:798":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:6813:8989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:7645:8090":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:8171:3727":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"11:742:9804":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"11:774:9798":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10051:11987":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:32429:9620":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"9:357:21541":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:4698:7927":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:13097:12172":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:15192:12639":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:7936:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:357:3880":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:46167:14102":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:8405:3804":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:30645:3691":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:951:9809":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:14509:12417":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:6644:240":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:5798:13027":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"18:660:14322":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"20:1676:5578":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"18:707:9996":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:15087:12616":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:8852:3808":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"12:0:3540":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:42766:3695":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"20:5588:8566":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:1495:9802":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:1115:35459":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:10432:3822":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:7568:12968":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:3133:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:2789:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:2418:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:33731:9899":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:6430:3847":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:2696:12941":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"14:7:14500":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"20:4084:7894":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:21891:32756":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:2662:3777":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:48322:14194":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:10157:14615":{"crate_id":1,"path":["std","sys","pal","unix","os_str","Slice"],"kind":"struct"},"2:2334:20856":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"5:4444:10933":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"9:507:13542":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:41930:32430":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:13233:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:7560:14526":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:4744:3890":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"20:574:4684":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"6:483:4674":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:6162:10990":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:11982:14542":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:38363:9912":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:5877:13684":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:10097:14614":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:14989:12592":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:12041:1623":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:14878:12568":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"20:6412:8994":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:11576:12037":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:6357:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"20:6847:4630":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:6228:7807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:1315:9813":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:14426:12400":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:2586:2340":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:5760:22537":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"20:518:4678":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"17:15367:12685":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:30623:10050":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:10759:14240":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:4893:7948":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:4915:15553":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:16049:12878":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:6083:21648":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:1477:9798":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:7903:3739":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:22614:32433":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:15990:12865":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:13334:12192":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:40746:13964":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:7102:22544":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11001:14356":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:6897:10994":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:14698:12470":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"11:1603:14509":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:5974:8560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:43301:3805":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:15301:12670":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:22637:13717":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:1718:5584":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:12230:12095":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:4460:9620":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:6490:13688":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:1203:14332":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:1734:5585":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:30360:15521":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:9886:3694":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:7391:22545":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:32560:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:5571:3821":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:569:4685":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"20:4444:7929":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11113:14359":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:893:9800":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:536:12909":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:4182:3750":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"20:5739:8606":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4755:7931":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:7343:4630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:5104:13626":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:10803:14349":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:6610:3856":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"20:6466:8998":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:849:9797":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:4169:20760":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:10559:14345":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:4914:7951":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:9678:22591":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:3915:12982":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:4824:7939":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:4745:7930":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:6687:13143":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:435:11945":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:22197:3728":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:5085:13612":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:10432:35529":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"3:234:233":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:8874:14225":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"18:96:26733":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:8244:3811":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:2618:12938":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4434:7899":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:42661:3842":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:41966:14210":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:7677:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"0:318:3313":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs16"],"kind":"variant"},"1:1534:3808":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:5121:13006":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:4235:14529":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:4488:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:4535:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"20:4286:7915":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:46991:14139":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"11:1917:13471":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:1406:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:43997:10023":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:12038:339":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:4534:3873":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:40657:13697":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:41275:13989":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:13337:10052":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:6128:8573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:3980:15526":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:9106:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:281:3361":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4814:7938":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:41267:13987":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:10794:3722":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"5:2144:3861":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:12037:1151":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:266:10912":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:5130:7954":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:15589:12770":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"20:5472:8536":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"9:393:21527":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:11052:14347":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:6243:14452":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"20:1641:5575":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12972:12156":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:4506:7907":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:6017:22538":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:9023:14607":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:4764:7932":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:44848:226":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:40727:13961":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"20:4418:7927":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:2202:3704":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:2997:3656":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:1821:9853":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:40458:10013":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:0:1529":{"crate_id":1,"path":["std"],"kind":"module"},"2:3081:9922":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"20:1606:5573":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:40545:3676":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:8961:3846":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:1973:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:40708:13958":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:22173:15672":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"16:6960:14464":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:9890:3703":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"20:1548:5567":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:11996:2988":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:11256:14366":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:38308:9911":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:22360:15665":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"11:2443:9800":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:10246:10966":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:6915:12962":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:3988:15527":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"10:36:13482":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:11357:14255":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:14041:12321":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"20:4705:7958":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12659:22588":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"20:130:4349":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"1:10580:3870":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:42425:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:10312:10968":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:6425:13103":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:10141:3742":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:5017:13003":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4922:13560":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:10881:22618":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:15027:12598":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"11:2554:35500":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:8253:20833":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4647:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:44377:14057":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:5117:13632":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:886:10920":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:6764:5501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:40778:13969":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:2622:3769":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:41257:10964":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"20:644:4717":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:7282:32153":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4854:7943":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:3818:9801":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"11:1883:3808":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:43319:14030":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:654:4717":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"20:4336:7921":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:6691:8984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:8139:3788":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:5154:3841":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:4637:11745":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:12040:1537":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"15:306:21631":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:4745:12994":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:4949:13001":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:212:10910":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"20:4095:7895":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:14662:12439":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:3155:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:42773:3702":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:2979:34908":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:14221:12366":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:30821:32436":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:2548:12935":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:1650:5576":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"20:5347:8507":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:15612:12771":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:0:3543":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:43853:14560":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:34446:9907":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:2354:3708":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:47227:14143":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:5593:3750":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:44939:14090":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:12758:12143":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:44656:14075":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"10:44:13483":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:7054:13198":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"20:486:4673":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"20:4071:7893":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:4932:13566":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:40422:13945":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:26190:273":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:574:4686":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"20:4108:7896":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:2942:4254":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:1151:35460":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:7828:13276":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:939:9807":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:7917:14589":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:12257:10003":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:5825:3853":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:6687:10912":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:102:13462":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:14057:12326":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:3230:35016":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:4167:15540":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:39750:3661":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:2031:14333":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:256:14327":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"20:4712:7959":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:12999:12157":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:8986:3865":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:8291:33154":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:10510:14344":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"20:4622:7949":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:30657:32447":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:3232:12918":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:6985:14944":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:8228:14596":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"13:226:13461":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:11342:14254":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:9943:22590":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:2421:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:42622:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:7435:3668":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:33927:9903":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:4908:7950":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:4676:7925":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:47977:14181":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:21248:32753":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:2176:1811":{"crate_id":1,"path":["std","fs"],"kind":"module"},"17:16134:12900":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:11168:22636":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"11:837:9805":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:6968:22543":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:12290:12105":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:15:1885":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:40839:13975":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"18:481:11852":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:507:4678":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"0:312:3307":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs12"],"kind":"variant"},"1:9276:9852":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:44676:14080":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:1969:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"20:1885:5724":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:6248:8607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:6484:13689":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"0:333:1834":{"crate_id":0,"path":["cc","Build"],"kind":"struct"},"2:44660:14076":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:3443:3725":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:41800:13995":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"20:1705:5582":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13083:12171":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:4375:7895":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:16016:12871":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:1301:9811":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:44672:14079":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:15480:12730":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"18:652:11854":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"11:1107:14506":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:40686:3764":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"8:0:3536":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"14:31:14500":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:13922:12307":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:2205:3705":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:5308:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"20:4660:7954":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"9:177:15202":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:12512:20741":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:1286:9812":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:1758:9838":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"20:4330:7920":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:10915:14350":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:47647:14178":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:42386:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:945:9808":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:13832:12295":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:23157:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:40820:13973":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11294:14367":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:7622:8087":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:44922:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:14921:12575":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:4:1114":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"11:2383:3808":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:6100:8569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:15747:12803":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:12059:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"18:644:11854":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:4800:7936":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:12255:12103":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:11292:11006":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:6495:10962":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"11:875:9808":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:4584:7917":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:580:4687":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:12052:12086":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:8247:15507":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:12446:9994":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:13961:12312":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:9349:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:43741:14556":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:4386:14531":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13297:12186":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:11991:12083":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:5632:10991":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:15546:12754":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:6934:13640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"20:494:4674":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:2284:21649":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:30629:13738":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:3753:14516":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:43104:3693":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:44489:14061":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:40769:13968":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:8553:3809":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"0:311:3305":{"crate_id":0,"path":["cc","windows_registry","VsVers"],"kind":"enum"},"6:4595:7918":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:47257:14144":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:44183:3763":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:7657:8091":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:12048:797":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:2209:3427":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"20:512:4677":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"17:10785:35524":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:10852:22617":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:14251:12371":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12166:14410":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"20:5408:8554":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:44909:14087":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:5128:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:1570:5569":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:5033:7955":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:3339:9919":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:4180:15541":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:7531:11983":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:13882:12053":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:43979:10024":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:9973:14006":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:12180:14411":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:40587:3677":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:8537:3807":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:15432:12729":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:5446:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:11269:12005":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:8354:3889":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:3410:9925":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:7850:3718":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11701:14387":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:21445:15584":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:8860:14601":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:4830:7940":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:1546:5567":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:10962:14353":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:4231:14575":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:43280:3743":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:4381:10933":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:10942:9856":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:11595:14260":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:44524:14066":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"9:52:15192":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"20:5486:8559":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10988:14355":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:6540:3850":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:6868:8992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:11507:12030":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:46565:14118":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:12301:12106":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:7376:9568":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:8294:14599":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:5987:227":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:9166:14610":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"1:9101:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:31191:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:14633:12419":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:10782:14246":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:43772:14034":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:42008:14011":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:8288:15542":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4440:7900":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:6070:10986":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:4847:7942":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"20:4561:7941":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:5344:10912":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4388:7896":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"20:7143:8090":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:11426:14372":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:13989:12316":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:11194:22637":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"20:4276:7914":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:3002:9898":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:2722:12942":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"20:5445:8558":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:6943:8997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:32528:4260":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"20:4670:7955":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:6415:13102":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"13:0:3534":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:6531:13116":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:11455:11008":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:6079:8567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:42759:3694":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:10329:10969":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"18:699:11880":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:15356:12684":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:6545:13118":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:15235:12651":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:11558:20739":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:3764:12978":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:11614:14261":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:5403:11986":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:914:9803":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"18:113:26734":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:3163:29185":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"0:52:1829":{"crate_id":0,"path":["cc","windows_registry"],"kind":"module"},"16:5648:14425":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:3687:10912":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:40446:13947":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:9892:213":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"18:624:35539":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:46686:14122":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12380:12115":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"20:506:4676":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"20:4650:7953":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"18:574:11854":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13056:12164":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"20:4226:7907":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:22654:32451":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"20:4628:7950":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:859:9568":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:6156:13082":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:8013:1867":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:7334:20829":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:23219:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:8134:13326":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:7610:8086":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:4724:7929":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:15160:12630":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:8798:3822":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:10955:1820":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:1541:9800":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:2830:9784":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:46367:14112":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"11:1160:9813":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:12684:11959":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:22266:15676":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:1737:1810":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"6:4870:7945":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:2048:3778":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:7004:10948":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:43798:13697":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:15117:12622":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:7670:3872":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:44964:14091":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:46397:14113":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:34100:9904":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:13026:12160":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:44360:14056":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:7504:3788":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:12850:12093":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:9481:11001":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:5052:7957":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:3166:29196":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"18:531:11859":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:5415:3818":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"15:327:15189":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:44133:10018":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:3358:32690":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:15003:12596":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"20:607:4689":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"16:7436:13055":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:33613:9902":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:44557:10026":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:3251:14338":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12560:14419":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"14:202:20749":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:922:9805":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:3065:11895":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:7331:9568":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:12046:799":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:4480:7904":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6513:13108":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:11439:14373":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:13309:12189":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:42105:9568":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:3425:1815":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:48307:14193":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:40394:13942":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:41817:15519":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:4151:15538":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:542:4681":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:41233:2322":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:2881:12949":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:7090:13203":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:5807:258":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:9149:14232":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:14346:12392":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:5419:11987":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:15212:12646":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"20:585:4686":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7736:13266":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:46764:14124":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:7694:12969":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:5939:13048":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:7862:13280":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:5696:22536":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"0:314:3309":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs14"],"kind":"variant"},"16:2359:12927":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:918:9804":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"20:4367:7923":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:2406:12929":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:4740:3887":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:1682:5579":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"20:4544:7939":{"crate_id":20,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:32415:13251":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:43064:3691":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"20:1693:5580":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:2701:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"20:5458:8535":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11817:22706":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"20:1539:5566":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:6792:13169":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:4252:3808":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:13909:12305":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:5111:13629":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:1558:5568":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"20:4249:7910":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:43915:3766":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:40737:13962":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"20:1684:5579":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"20:5780:8608":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:4628:7922":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:7604:8085":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"20:4534:7938":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:4625:15528":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:10475:11002":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:14359:12393":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:7360:35521":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:41846:14002":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:5867:8552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:8159:3724":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:41242:13986":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:44346:14053":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:13235:12180":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:33134:9894":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:7474:14487":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:527:4679":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:10985:14538":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:3333:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"20:1593:5571":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"20:4503:7934":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:588:15493":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:14266:12375":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"20:6225:8986":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:32422:14547":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:12600:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"20:1572:5569":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:119:4349":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:683:257":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"18:614:35536":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:11369:12028":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:10805:14535":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:10740:14623":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:13684:12272":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:6753:13157":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"20:4269:7913":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:14413:12399":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11657:12045":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"5:5004:3750":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"20:1578:5570":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"20:6295:5504":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:7719:15499":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:2698:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:1697:5581":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:3022:9906":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:41953:14009":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:14156:12359":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:41989:14010":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:15557:12755":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:21392:15588":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"20:4430:7928":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:11217:14251":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"5:5650:10059":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:15294:12669":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:1604:5573":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"20:4681:7956":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:47181:14142":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:8209:3766":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:39782:9918":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:12032:402":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:40620:3690":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:4738:20777":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:6818:13170":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:11476:13473":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:10999:14539":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:5435:13009":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:8816:3823":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"11:351:35497":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:12455:9996":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"13:110:35508":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:11384:14257":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:4450:10955":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:21234:32758":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:43811:14558":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:14145:12357":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:10337:11996":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:6811:15582":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:4639:11747":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"20:7108:8085":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:22134:15671":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:42029:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:34273:9905":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:14324:12381":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:5928:8558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12930:22611":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:44228:10011":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:9624:22584":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:16109:12894":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"18:564:11864":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:7371:9367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:903:9801":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"20:4121:7897":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:4920:33186":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:13395:12198":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:9860:22605":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:42114:4122":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:11469:14376":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:1703:5582":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"20:1598:5572":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"11:883:9809":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:7503:12965":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13663:12268":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:12053:1640":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:4549:7913":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:4449:7901":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:1439:9797":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:1966:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"20:6312:8987":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:15980:12864":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:10716:14347":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:15689:12793":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:6879:13175":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:4311:14576":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:12033:1034":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:1527:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:40573:3675":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:46419:14114":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:1072:9813":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:42503:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:13754:12282":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:1538:9568":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:909:9802":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:6843:10059":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:8993:29343":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:42583:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:15267:12662":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:4569:15549":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"20:5603:8568":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:11966:20919":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:511:14330":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:2370:3712":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:42147:4123":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"20:4263:7912":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:4351:7893":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:9852:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:11315:3830":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:21879:13702":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:33790:9901":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:5963:14427":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:48360:14196":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:10833:29633":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:16146:12903":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:39624:220":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:1063:9812":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:5240:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:2973:35456":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:5146:7961":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"18:491:11853":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:489:4675":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:10099:14613":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:4516:7908":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"20:580:4685":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"11:299:13463":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"20:559:4682":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13809:12291":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:1591:5571":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:7542:14630":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:4497:12987":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:7523:13258":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:41009:3765":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:1024:10912":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:4053:12983":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:9834:1816":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:3343:9801":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:1550:13469":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:4557:12989":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:43947:10020":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:12614:22608":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"14:165:21611":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:4998:13607":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:12921:12110":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13724:12279":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12746:12142":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:2474:13658":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:13285:12185":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:11160:3824":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:41019:13981":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4401:7897":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"20:1530:5565":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"20:6892:9368":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:21854:15590":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:13282:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:23002:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:5082:14578":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"20:5745:7807":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:2169:22664":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:2324:636":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:6352:13094":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:7342:35519":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:13707:12276":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:16087:12892":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:41219:13984":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:10764:14242":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:10824:3724":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:307:1588":{"crate_id":1,"path":["std","thread"],"kind":"module"},"17:9559:22586":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:6456:13106":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:48241:14187":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:5992:8562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:13742:12280":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:12273:12146":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"20:4216:7906":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"20:4465:7930":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:13244:10979":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:6600:22541":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10016:22585":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"18:609:14321":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:43833:14559":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10974:12005":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:14896:12573":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"18:538:11862":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:32558:4259":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:4738:3885":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:7679:13645":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:8547:3808":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:8148:3790":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:39976:27118":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:12784:12144":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:46467:14115":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:2529:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:1873:9779":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:43264:3741":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"20:6382:8992":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"20:4348:7922":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:6426:2322":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:13856:12296":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:1516:9804":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"9:486:21525":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:7880:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:7451:3671":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:9896:3701":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:11518:14573":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:44033:10022":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:5123:13635":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:1505:9803":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:9476:3721":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:13516:12231":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:43723:13693":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:48185:14185":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:7789:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:44212:10002":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:11215:12018":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"20:6869:9366":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:7388:9368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:15311:12673":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:11065:12007":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"20:5686:8575":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:5688:3750":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"20:5499:8561":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:13365:12194":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"11:1676:10906":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:3994:15528":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13976:12315":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:3196:35017":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:4862:12998":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12115:14406":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"11:710:9803":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:12050:794":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:46066:14098":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:7128:14228":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:4505:10956":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4860:7944":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"20:4496:7933":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:6261:14460":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:5969:8559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:4491:15544":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:3460:14339":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:42244:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:21849:3728":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:10323:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:9050:29315":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"18:582:4249":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:3012:9896":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12898:22610":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:38942:9913":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:0:3535":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:7598:8084":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:4383:14577":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:14778:12531":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:8195:13328":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:48281:14191":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"14:187:21618":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:7006:14465":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:44724:14084":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:1760:9839":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:8564:3810":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"11:2569:3667":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11155:12011":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:401:14329":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:4469:15543":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:43039:13295":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"9:330:13520":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:40507:20784":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:1596:5572":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:9730:22601":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:6721:22542":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13383:12195":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"20:7137:8089":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:5995:12911":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:4774:12995":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:4050:10912":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:43843:13699":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"20:4590:7945":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13935:12308":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:39789:13812":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:1496:5560":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:40879:13978":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:2492:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:43055:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:1514:5563":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:6583:13120":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:11199:3734":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:11478:14572":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:4455:7745":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"20:4580:7944":{"crate_id":20,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:123:4350":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:12009:12021":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:4613:12991":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:596:4689":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:11666:12046":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:9198:14236":{"crate_id":1,"path":["std","sys","pal","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:6530:10912":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:44845:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:22280:20856":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:15868:12821":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:5384:22535":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:4115:14528":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:22003:15586":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:42227:9797":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:8222:3763":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"20:1503:5561":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"11:2151:9812":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:9888:3702":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:12441:10000":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:7691:3870":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:48250:14188":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:1632:5574":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:7785:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:12051:1642":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:2154:13649":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:12044:692":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:6249:10991":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:2911:10985":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"20:4550:7940":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:3225:13469":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13322:12191":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:15244:12654":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11497:12029":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:8455:3805":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:22224:32309":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:7613:14494":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:11146:3823":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:555:4683":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:12335:12110":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:14208:12365":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:48437:14199":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:8868:9568":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12127:14407":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:14312:12380":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:11372:14584":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:5941:8535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:4042:15531":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:7029:10951":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"20:4236:7908":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:9036:14228":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:4939:1101":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:1906:13677":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6569:12959":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"11:1142:14507":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:1455:9568":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:4529:7910":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:44652:14074":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:880:9799":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:1815:1188":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"18:727:11887":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"20:4475:7931":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:6361:13095":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:6700:8985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:690:11879":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"20:6318:8988":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"20:4728:7961":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"9:237:3805":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:22:732":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:7268:10053":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"20:4613:7948":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:6696:13144":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:14373:12394":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:11517:14541":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:6484:9800":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:42347:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:533:4680":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:43929:3767":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:40855:11873":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"14:0:3541":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:40383:13941":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:7112:9573":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:4556:7914":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:4159:15539":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11779:12047":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:7925:3776":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:6844:13171":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"0:316:3311":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs15"],"kind":"variant"},"17:16062:12884":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:8072:13318":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"11:2498:21601":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:15671:12787":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:40493:13949":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:5639:14204":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:10102:11989":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:2933:21676":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:16076:12887":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:9884:3695":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:12432:14415":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"20:1652:5576":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"20:4243:7909":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"20:5676:8574":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:4700:15554":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:46543:14117":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:10520:35531":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:44203:10004":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:22226:20856":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:12056:849":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:14099:12347":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:12310:12107":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:6222:8606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:6466:3854":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:48039:14182":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:23343:13736":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:11047:11004":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:2600:10969":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:46197:14103":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:830:10918":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:12244:12099":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:23250:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:40717:13959":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:9790:22603":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:7867:3719":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:8804:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"18:736:26742":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:40630:3689":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:42159:9792":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:5830:13032":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:6401:12953":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:4806:12996":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:790:10915":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:4585:12990":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:2778:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:25:659":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:2659:20788":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:48270:14190":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:9188:29883":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:14934:12580":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:5431:3819":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:4789:7935":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:3328:261":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:21217:32762":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:8234:14598":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:5910:8556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"20:5402:8553":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:3112:3768":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:6837:8991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:46321:14108":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:7897:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:7857:3722":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:6204:14434":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:5727:13020":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:5971:10991":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:14969:12584":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:3594:3808":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:7651:14495":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:3032:12973":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:3315:12976":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:3603:9800":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"5:6872:10061":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4955:13576":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:12461:9995":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}