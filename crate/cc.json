{"root":"0:0:2425","crate_version":"1.0.79","includes_private":false,"index":{"a:2:2685:225-0:363:1707":{"id":"a:2:2685:225-0:363:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2685:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11811":{"id":"2:11811","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11076:1364","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11812:797","2:11813:1849","2:11814:34291","2:11815:34292","2:11817:34293","2:11820:2024","2:11821:34294","2:11822:310","2:11823:26586","2:11824:1827","2:11826:26583","2:11828:26584","2:11830:26585","2:11832:34295","2:11833:34296","2:11834:2468","2:11835:26608","2:11836:2744","2:11837:7688","2:11838:3359","2:11839:2501","2:11840:2486","2:11841:4183","2:11842:34297","2:11843:31917","2:11844:1838","2:11847:2008","2:11850:2009","2:11853:2035","2:11857:2469","2:11861:2319","2:11864:26616","2:11867:26618","2:11870:34298","2:11873:34299","2:11876:26620","2:11879:26622","2:11882:34300","2:11885:34301","2:11888:3299","2:11891:34302","2:11894:34303","2:11897:34304","2:11900:2438","2:11902:34305","2:11904:34306","2:11906:34307","2:11907:34308","2:11908:34309","2:11911:2471","2:11914:25348","2:11917:26624","2:11920:2551","2:11923:3179","2:11926:34310","2:11929:2135","2:11931:25429","2:11932:25432","2:11933:25433","2:11934:25434","2:11935:34311","2:11937:8695","2:11938:34312"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:272:2962":{"id":"0:272:2962","crate_id":0,"name":"VsVers","span":{"filename":"src/windows_registry.rs","begin":[83,0],"end":[101,1]},"visibility":"public","docs":"A version of Visual Studio","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:273:2964","0:275:2966","0:277:2968","0:279:2970","0:281:2972"],"impls":["a:2:2685:225-0:272:2962","a:2:2671:217-0:272:2962","a:2:2735:3569-0:272:2962","a:2:8137:3798-0:272:2962","a:2:8138:3797-0:272:2962","b:2:2536-0:272:2962","b:2:2526-0:272:2962","b:2:2237-0:272:2962","b:2:2530-0:272:2962","b:2:2541-0:272:2962","b:2:2234-0:272:2962","b:2:3326-0:272:2962","b:5:683-0:272:2962","0:288","0:287","0:294","0:285","0:293","0:290","0:291"]}},"0:114:1667":{"id":"0:114:1667","crate_id":0,"name":"cargo_metadata","span":{"filename":"src/lib.rs","begin":[943,4],"end":[946,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.\n\nThe emitted metadata is:\n\n - `rustc-link-lib=static=`*compiled lib*\n - `rustc-link-search=native=`*target folder*\n - When target is MSVC, the ATL-MFC libs are added via `rustc-link-search=native=`\n - When C++ is enabled, the C++ stdlib is added via `rustc-link-lib`\n - If `emit_rerun_if_env_changed` is not `false`, `rerun-if-env-changed=`*env*\n","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cargo_metadata",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11861:2319":{"id":"2:11861:2319","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:7123:120","str::rsplit":"2:11867:26618","self::pattern":"2:11513:13939","str::split_whitespace":"2:11839:2501","prim@char":"1:11828:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50696:3410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2735:3569-0:296:1646":{"id":"a:2:2735:3569-0:296:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2735:3569","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:247:598":{"id":"0:247:598","crate_id":0,"name":"env","span":{"filename":"src/lib.rs","begin":[3366,4],"end":[3368,5]},"visibility":"public","docs":"Returns the set of environment variables needed for this compiler to\noperate.\n\nThis is typically only used for MSVC compilers currently.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1794":{"id":"0:73:1794","crate_id":0,"name":"flag","span":{"filename":"src/lib.rs","begin":[421,4],"end":[424,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"-ffunction-sections\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5303:3431":{"id":"5:5303:3431","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:46:680":{"id":"0:46:680","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[170,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:2909:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2735:3569-0:363:1707":{"id":"a:2:2735:3569-0:363:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2735:3569","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2234-0:272:2962":{"id":"b:2:2234-0:272:2962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:3285"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5285":{"id":"5:5285","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5196:1364","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5286:34961","5:5287:2241","5:5290:34962","5:5293:2832","5:5301:34963","5:5302:34964","5:5303:3431","5:5304:25430","5:5305:25431"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11833:34296":{"id":"2:11833:34296","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:2994:4424","`str`":"1:11834:1364","str::slice_unchecked":"2:11832:34295"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:363:1707":{"id":"b:2:2234-0:363:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:3285"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11822:310":{"id":"2:11822:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:11845:1460","str::as_mut_ptr":"2:11823:26586"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:686:1696":{"id":"5:686:1696","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2541-0:296:1646":{"id":"b:2:2541-0:296:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:127","2:2545:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[181,0],"end":[181,35]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","type_id","source","description","cause"],"trait":{"name":"Error","id":"2:2591:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2526-0:272:2962":{"id":"b:2:2526-0:272:2962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:1730"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:250:2747":{"id":"0:250:2747","crate_id":0,"name":"is_like_gnu","span":{"filename":"src/lib.rs","begin":[3405,4],"end":[3407,5]},"visibility":"public","docs":"Whether the tool is GNU Compiler Collection-like.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3326-0:363:1707":{"id":"b:2:3326-0:363:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3324:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3328:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:62:924":{"id":"0:62:924","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[296,4],"end":[337,5]},"visibility":"public","docs":"Construct a new instance of a blank set of configuration.\n\nThis builder is finished with the [`compile`] function.\n\n[`compile`]: struct.Build.html#method.compile","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3326-0:356:127":{"id":"b:2:3326-0:356:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3324:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3328:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11843:31917":{"id":"2:11843:31917","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50988:7677","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2526-0:296:1646":{"id":"b:2:2526-0:296:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:1730"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:139:1833":{"id":"0:139:1833","crate_id":0,"name":"try_get_compiler","span":{"filename":"src/lib.rs","begin":[1500,4],"end":[1571,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis will return a result instead of panicing; see get_compiler() for the complete description.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48870:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:115:1977":{"id":"0:115:1977","crate_id":0,"name":"link_lib_modifier","span":{"filename":"src/lib.rs","begin":[953,4],"end":[956,5]},"visibility":"public","docs":"Adds a native library modifier that will be added to the\n`rustc-link-lib=static:MODIFIERS=LIBRARY_NAME` metadata line\nemitted for cargo if `cargo_metadata` is enabled.\nSee https://doc.rust-lang.org/rustc/command-line-arguments.html#-l-link-the-generated-crate-to-a-native-library\nfor the list of modifiers accepted by rustc.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["link_lib_modifier",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:82:647":{"id":"0:82:647","crate_id":0,"name":"file","span":{"filename":"src/lib.rs","begin":[614,4],"end":[617,5]},"visibility":"public","docs":"Add a file which will be compiled","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["p",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2494:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5199:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:232:59":{"id":"0:232:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[3206,4],"end":[3208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11823:26586":{"id":"2:11823:26586","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11845:1460"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:252:2745":{"id":"0:252:2745","crate_id":0,"name":"is_like_msvc","span":{"filename":"src/lib.rs","begin":[3415,4],"end":[3420,5]},"visibility":"public","docs":"Whether the tool is MSVC-like.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:233":{"id":"0:233","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3211,0],"end":[3421,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:243:1836","0:245:1019","0:246:304","0:247:598","0:248:2548","0:249:2771","0:250:2747","0:251:2748","0:252:2745"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11938:34312":{"id":"2:11938:34312","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4496:34312"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:51013:7562","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11839:2501":{"id":"2:11839:2501","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11840:2486"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50970:7675","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:272:2962":{"id":"b:2:2237-0:272:2962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:24714"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:75:1805":{"id":"0:75:1805","crate_id":0,"name":"asm_flag","span":{"filename":"src/lib.rs","begin":[456,4],"end":[459,5]},"visibility":"public","docs":"Add a flag that will only be used with assembly files.\n\nThe flag will be applied to input files with either a `.s` or\n`.asm` extension (case insensitive).\n\n# Example\n\n```no_run\ncc::Build::new()\n    .asm_flag(\"-Wa,-defsym,abc=1\")\n    .file(\"src/foo.S\")  // The asm flag will be applied here\n    .file(\"src/bar.c\")  // The asm flag will not be applied here\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39:2035":{"id":"0:39:2035","crate_id":0,"name":"find","span":{"filename":"src/windows_registry.rs","begin":[35,0],"end":[37,1]},"visibility":"public","docs":"Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.\n\nThe `target` argument is the target that the tool should work for (e.g.\ncompile or link for) and the `tool` argument is the tool to find (e.g.\n`cl.exe` or `link.exe`).\n\nThis function will return `None` if the tool could not be found, or it will\nreturn `Some(cmd)` which represents a command that's ready to execute the\ntool with the appropriate environment variables set.\n\nNote that this function always returns `None` for non-MSVC targets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["tool",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Command","id":"1:5402:1633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:71:1790":{"id":"0:71:1790","crate_id":0,"name":"object","span":{"filename":"src/lib.rs","begin":[406,4],"end":[409,5]},"visibility":"public","docs":"Add an arbitrary object file to link in","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["obj",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2494:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5199:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11870:34298":{"id":"2:11870:34298","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"2:11873:34299","self::pattern":"2:11513:13939","str::split":"2:11861:2319","`DoubleEndedIterator`":"2:7123:120","prim@char":"1:11828:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50746:7663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:249:2771":{"id":"0:249:2771","crate_id":0,"name":"cflags_env","span":{"filename":"src/lib.rs","begin":[3393,4],"end":[3402,5]},"visibility":"public","docs":"Returns the compiler flags in format of CFLAGS environment variable.\nImportant here - this will not be CFLAGS from env, its internal gcc's flags to use as CFLAGS\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,16],"end":[152,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9000:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:362:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11937:8695":{"id":"2:11937:8695","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4499:8695"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:51004:7554","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11841:4183":{"id":"2:11841:4183","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50950:3411","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:34306":{"id":"2:11904:34306","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11907:34308":{"id":"2:11907:34308","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:199:2526":{"id":"0:199:2526","crate_id":0,"name":"try_get_ranlib","span":{"filename":"src/lib.rs","begin":[2742,4],"end":[2746,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nThis will return a result instead of panicing;\nsee [`get_ranlib()`] for the complete description.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48870:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Command","id":"1:5402:1633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:194:2515":{"id":"0:194:2515","crate_id":0,"name":"get_archiver","span":{"filename":"src/lib.rs","begin":[2682,4],"end":[2687,5]},"visibility":"public","docs":"Get the archiver (ar) that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5435:4396"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"1:5402:1633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2600:8349":{"id":"2:2600:8349","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3387:8163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3326-0:272:2962":{"id":"b:2:3326-0:272:2962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3324:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3328:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2685:225-0:356:127":{"id":"a:2:2685:225-0:356:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2685:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:685:4010":{"id":"5:685:4010","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:102:1663":{"id":"0:102:1663","crate_id":0,"name":"opt_level","span":{"filename":"src/lib.rs","begin":[857,4],"end":[860,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["opt_level",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2536-0:296:1646":{"id":"b:2:2536-0:296:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:127","2:2540:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11842:34297":{"id":"2:11842:34297","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50960:7674","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11815:34292":{"id":"2:11815:34292","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2685:225-0:272:2962":{"id":"a:2:2685:225-0:272:2962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2685:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:275:2966":{"id":"0:275:2966","crate_id":0,"name":"Vs14","span":{"filename":"src/windows_registry.rs","begin":[87,4],"end":[87,8]},"visibility":"default","docs":"Visual Studio 14 (2015)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,16],"end":[92,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9000:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:338:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11879:26622":{"id":"2:11879:26622","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:11513:13939","prim@char":"1:11828:409","str::splitn":"2:11876:26620"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50818:7667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:13937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2671:217-0:356:127":{"id":"a:2:2671:217-0:356:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8138:3797-0:272:2962":{"id":"a:2:8138:3797-0:272:2962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8138:3797","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2529:1730":{"id":"2:2529:1730","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2503:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:2551":{"id":"2:11920:2551","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11828:409","self::pattern":"2:11513:13939"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:13937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:34305":{"id":"2:11902:34305","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:683-0:296:1646":{"id":"b:5:683-0:296:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:4010","5:686:1696","5:687:4011"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11891:34302":{"id":"2:11891:34302","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:11828:409","str::matches":"2:11888:3299","`DoubleEndedIterator`":"2:7123:120","self::pattern":"2:11513:13939"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50918:7673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:13937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:356:127":{"id":"b:2:2237-0:356:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:24714"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:683-0:363:1707":{"id":"b:5:683-0:363:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:4010","5:686:1696","5:687:4011"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11931:25429":{"id":"2:11931:25429","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:198:2525":{"id":"0:198:2525","crate_id":0,"name":"get_ranlib","span":{"filename":"src/lib.rs","begin":[2731,4],"end":[2736,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5435:4396"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"1:5402:1633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11857:2469":{"id":"2:11857:2469","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11513:13939","prim@char":"1:11828:409","`None`":"2:48728:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:13937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5290:34962":{"id":"5:5290:34962","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:112:1666":{"id":"0:112:1666","crate_id":0,"name":"ranlib","span":{"filename":"src/lib.rs","begin":[927,4],"end":[930,5]},"visibility":"public","docs":"Configures the tool used to index archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["ranlib",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2494:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5199:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11821:34294":{"id":"2:11821:34294","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:0:2425":{"id":"0:0:2425","crate_id":0,"name":"cc","span":{"filename":"src/lib.rs","begin":[1,0],"end":[3712,1]},"visibility":"public","docs":"A library for build scripts to compile custom C code\n\nThis library is intended to be used as a `build-dependencies` entry in\n`Cargo.toml`:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n```\n\nThe purpose of this crate is to provide the utility functions necessary to\ncompile C code into a static archive which is then linked into a Rust crate.\nConfiguration is available through the `Build` struct.\n\nThis crate will automatically detect situations such as cross compilation or\nother environment variables set by Cargo and will build code appropriately.\n\nThe crate is not limited to C code, it can accept any source code that can\nbe passed to a C or C++ compiler. As such, assembly files with extensions\n`.s` (gcc/clang) and `.asm` (MSVC) can also be compiled.\n\n[`Build`]: struct.Build.html\n\n# Parallelism\n\nTo parallelize computation, enable the `parallel` feature for the crate.\n\n```toml\n[build-dependencies]\ncc = { version = \"1.0\", features = [\"parallel\"] }\n```\nTo specify the max number of concurrent compilation jobs, set the `NUM_JOBS`\nenvironment variable to the desired amount.\n\nCargo will also set this environment variable when executed with the `-jN` flag.\n\nIf `NUM_JOBS` is not set, the `RAYON_NUM_THREADS` environment variable can\nalso specify the build parallelism.\n\n# Examples\n\nUse the `Build` struct to compile `src/foo.c`:\n\n```no_run\nfn main() {\n    cc::Build::new()\n        .file(\"src/foo.c\")\n        .define(\"FOO\", Some(\"bar\"))\n        .include(\"src\")\n        .compile(\"foo\");\n}\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/cc/1.0\")]","#![allow(deprecated)]","#![deny(missing_docs)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:36:1641","0:296:1646","0:356:127","0:363:1707"],"is_stripped":false}},"a:2:2735:3569-0:272:2962":{"id":"a:2:2735:3569-0:272:2962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2735:3569","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2541-0:356:127":{"id":"b:2:2541-0:356:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:127","2:2545:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:356:127":{"id":"0:356:127","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[153,0],"end":[158,1]},"visibility":"public","docs":"Represents an internal error that occurred, with an explanation.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2685:225-0:356:127","a:2:2671:217-0:356:127","a:2:2735:3569-0:356:127","a:2:8137:3798-0:356:127","a:2:8138:3797-0:356:127","b:2:2536-0:356:127","b:2:2526-0:356:127","b:2:2237-0:356:127","b:2:2530-0:356:127","b:2:2541-0:356:127","b:2:2234-0:356:127","b:2:2598-0:356:127","b:2:3326-0:356:127","b:5:5551-0:356:127","b:5:683-0:356:127","0:47","0:49","0:361","0:45","0:359"]}},"b:2:2530-0:296:1646":{"id":"b:2:2530-0:296:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2532:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:279:2970":{"id":"0:279:2970","crate_id":0,"name":"Vs16","span":{"filename":"src/windows_registry.rs","begin":[91,4],"end":[91,8]},"visibility":"default","docs":"Visual Studio 16 (2019)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:2:2536-0:356:127":{"id":"b:2:2536-0:356:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:127","2:2540:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11885:34301":{"id":"2:11885:34301","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:13937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:295:413":{"id":"0:295:413","crate_id":0,"name":"clone","span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:281:2972":{"id":"0:281:2972","crate_id":0,"name":"Vs17","span":{"filename":"src/windows_registry.rs","begin":[93,4],"end":[93,8]},"visibility":"default","docs":"Visual Studio 17 (2022)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:2:2541-0:363:1707":{"id":"b:2:2541-0:363:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:127","2:2545:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:63:749":{"id":"0:63:749","crate_id":0,"name":"include","span":{"filename":"src/lib.rs","begin":[354,4],"end":[357,5]},"visibility":"public","docs":"Add a directory to the `-I` or include path for headers\n\n# Example\n\n```no_run\nuse std::path::Path;\n\nlet library_path = Path::new(\"/path/to/library\");\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .include(library_path)\n    .include(\"src\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dir",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2494:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5199:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:374":{"id":"0:374","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[190,16],"end":[190,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9000:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:375:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:117:1670":{"id":"0:117:1670","crate_id":0,"name":"use_plt","span":{"filename":"src/lib.rs","begin":[977,4],"end":[980,5]},"visibility":"public","docs":"Configures whether the Procedure Linkage Table is used for indirect\ncalls into shared libraries.\n\nThe PLT is used to provide features like lazy binding, but introduces\na small performance loss due to extra pointer indirection. Setting\n`use_plt` to `false` can provide a small performance increase.\n\nNote that skipping the PLT requires a recent version of GCC/Clang.\n\nThis only applies to ELF targets. It has no effect on other platforms.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["use_plt",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:36:1641":{"id":"0:36:1641","crate_id":0,"name":"windows_registry","span":{"filename":"src/windows_registry.rs","begin":[11,0],"end":[902,1]},"visibility":"public","docs":"A helper module to probe the Windows Registry when looking for\nwindows-specific tools.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:39:2035","0:41:2429","0:272:2962","0:42:2981"],"is_stripped":false}},"2:11847:2008":{"id":"2:11847:2008","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11828:409","self::pattern":"2:11513:13939"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:106:1662":{"id":"0:106:1662","crate_id":0,"name":"out_dir","span":{"filename":"src/lib.rs","begin":[897,4],"end":[900,5]},"visibility":"public","docs":"Configures the output directory where all object files and static\nlibraries will be located.\n\nThis option is automatically scraped from the `OUT_DIR` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["out_dir",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2494:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5199:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3326-0:296:1646":{"id":"b:2:3326-0:296:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3324:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3328:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:335":{"id":"0:335","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,9],"end":[92,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:336:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,9],"end":[152,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:360:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:289:601":{"id":"0:289:601","crate_id":0,"name":"eq","span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2540:1439":{"id":"2:2540:1439","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48870:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:246:304":{"id":"0:246:304","crate_id":0,"name":"args","span":{"filename":"src/lib.rs","begin":[3358,4],"end":[3360,5]},"visibility":"public","docs":"Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8137:3798-0:363:1707":{"id":"a:2:8137:3798-0:363:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8137:3798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2530-0:272:2962":{"id":"b:2:2530-0:272:2962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2532:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:86:1656":{"id":"0:86:1656","crate_id":0,"name":"cpp","span":{"filename":"src/lib.rs","begin":[635,4],"end":[638,5]},"visibility":"public","docs":"Set C++ support.\n\nThe other `cpp_*` options will only become active if this is set to\n`true`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cpp",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11828:26584":{"id":"2:11828:26584","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9694:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9694:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11812:797":{"id":"2:11812:797","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11828:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:683-0:356:127":{"id":"b:5:683-0:356:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:4010","5:686:1696","5:687:4011"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2671:217-0:272:2962":{"id":"a:2:2671:217-0:272:2962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11906:34307":{"id":"2:11906:34307","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:135:2155":{"id":"0:135:2155","crate_id":0,"name":"try_expand","span":{"filename":"src/lib.rs","begin":[1426,4],"end":[1451,5]},"visibility":"public","docs":"This will return a result instead of panicing; see expand() for the complete description.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48870:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6600:241","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:90:1620":{"id":"0:90:1620","crate_id":0,"name":"warnings","span":{"filename":"src/lib.rs","begin":[710,4],"end":[714,5]},"visibility":"public","docs":"Set warnings flags.\n\nAdds some flags:\n- \"-Wall\" for MSVC.\n- \"-Wall\", \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["warnings",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67:1786":{"id":"0:67:1786","crate_id":0,"name":"define","span":{"filename":"src/lib.rs","begin":[399,4],"end":[403,5]},"visibility":"public","docs":"Specify a `-D` variable with an optional value.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .define(\"FOO\", \"BAR\")\n    .define(\"BAZ\", None)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["var",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["val",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":{"restricted":{"parent":"0:36:1641","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2682:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5302:34964":{"id":"5:5302:34964","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:7157:221","`Box<str>`":"5:288:3022"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:3022","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:4428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2530-0:356:127":{"id":"b:2:2530-0:356:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2532:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:362:656":{"id":"0:362:656","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[152,16],"end":[152,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8960:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8949:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11900:2438":{"id":"2:11900:2438","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:277:2968":{"id":"0:277:2968","crate_id":0,"name":"Vs15","span":{"filename":"src/windows_registry.rs","begin":[89,4],"end":[89,8]},"visibility":"default","docs":"Visual Studio 15 (2017)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"a:2:2735:3569-0:356:127":{"id":"a:2:2735:3569-0:356:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2735:3569","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2536-0:272:2962":{"id":"b:2:2536-0:272:2962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:127","2:2540:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2671:217-0:296:1646":{"id":"a:2:2671:217-0:296:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[169,0],"end":[173,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2909:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:46:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:74:1798":{"id":"0:74:1798","crate_id":0,"name":"ar_flag","span":{"filename":"src/lib.rs","begin":[437,4],"end":[440,5]},"visibility":"public","docs":"Add a flag to the invocation of the ar\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .file(\"src/bar.c\")\n    .ar_flag(\"/NODEFAULTLIB:libc.dll\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:34310":{"id":"2:11926:34310","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11828:409","self::pattern":"2:11513:13939"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:13937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[290,0],"end":[3203,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:924","0:63:749","0:65:1780","0:67:1786","0:71:1790","0:73:1794","0:74:1798","0:75:1805","0:77:1823","0:78:1854","0:79:1672","0:80:1673","0:81:1654","0:82:647","0:84:1655","0:86:1656","0:87:1659","0:88:1660","0:89:1674","0:90:1620","0:91:1675","0:92:1657","0:96:1658","0:100:1386","0:101:1661","0:102:1663","0:103:1945","0:104:518","0:105:1664","0:106:1662","0:108:432","0:110:1665","0:112:1666","0:114:1667","0:115:1977","0:116:1669","0:117:1670","0:118:1678","0:119:1671","0:123:2001","0:131:2096","0:135:2155","0:137:2164","0:138:2056","0:139:1833","0:194:2515","0:195:2516","0:198:2525","0:199:2526"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:81:1654":{"id":"0:81:1654","crate_id":0,"name":"no_default_flags","span":{"filename":"src/lib.rs","begin":[608,4],"end":[611,5]},"visibility":"public","docs":"Disables the generation of default compiler flags. The default compiler\nflags may cause conflicts in some cross compiling scenarios.\n\nSetting the `CRATE_CC_NO_DEFAULTS` environment variable has the same\neffect as setting this to `true`. The presence of the environment\nvariable and the value of `no_default_flags` will be OR'd together.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["no_default_flags",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":{"restricted":{"parent":"0:36:1641","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5293:2832":{"id":"5:5293:2832","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11853:2035":{"id":"2:11853:2035","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48728:176","self::pattern":"2:11513:13939","prim@char":"1:11828:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:1945":{"id":"0:103:1945","crate_id":0,"name":"opt_level_str","span":{"filename":"src/lib.rs","begin":[866,4],"end":[869,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["opt_level",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:286:656":{"id":"0:286:656","crate_id":0,"name":"fmt","span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8960:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8949:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5287:2241":{"id":"5:5287:2241","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:231":{"id":"0:231","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3205,0],"end":[3209,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2577:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:232:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":{"restricted":{"parent":"0:36:1641","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2305:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11814:34291":{"id":"2:11814:34291","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11876:26620":{"id":"2:11876:26620","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11828:409","str::rsplitn":"2:11879:26622","self::pattern":"2:11513:13939"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50800:7666","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5551-0:356:127":{"id":"b:5:5551-0:356:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9005:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5549:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5553:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5304:25430":{"id":"5:5304:25430","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11933:25433"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:92:1657":{"id":"0:92:1657","crate_id":0,"name":"cpp_link_stdlib","span":{"filename":"src/lib.rs","begin":[766,4],"end":[772,5]},"visibility":"public","docs":"Set the standard library to link against when compiling with C++\nsupport.\n\nSee [`get_cpp_link_stdlib`](cc::Build::get_cpp_link_stdlib) documentation\nfor the default value.\nIf the `CXXSTDLIB` environment variable is set, its value will\noverride the default value, but not the value explicitly set by calling\nthis function.\n\nA value of `None` indicates that no automatic linking should happen,\notherwise cargo will link against the specified library.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n- `c++_shared` or `c++_static` for Android\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .cpp_link_stdlib(\"stdc++\")\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cpp_link_stdlib",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11826:26583":{"id":"2:11826:26583","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48728:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9694:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9694:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11813:1849":{"id":"2:11813:1849","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5286:34961":{"id":"5:5286:34961","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:3022","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:4428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:3022","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:4428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5301:34963":{"id":"5:5301:34963","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:34300":{"id":"2:11882:34300","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2685:225-0:296:1646":{"id":"a:2:2685:225-0:296:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2685:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:104:518":{"id":"0:104:518","crate_id":0,"name":"debug","span":{"filename":"src/lib.rs","begin":[876,4],"end":[879,5]},"visibility":"public","docs":"Configures whether the compiler will emit debug information when\ngenerating object files.\n\nThis option is automatically scraped from the `DEBUG` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["debug",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2539:127":{"id":"2:2539:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"2:11911:2471":{"id":"2:11911:2471","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11513:13939","prim@char":"1:11828:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2536-0:363:1707":{"id":"b:2:2536-0:363:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:127","2:2540:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:195:2516":{"id":"0:195:2516","crate_id":0,"name":"try_get_archiver","span":{"filename":"src/lib.rs","begin":[2693,4],"end":[2695,5]},"visibility":"public","docs":"Get the archiver that's in use for this configuration.\n\nThis will return a result instead of panicing;\nsee [`get_archiver()`] for the complete description.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48870:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Command","id":"1:5402:1633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11837:7688":{"id":"2:11837:7688","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11828:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50672:7658","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2671:217-0:363:1707":{"id":"a:2:2671:217-0:363:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:137:2164":{"id":"0:137:2164","crate_id":0,"name":"expand","span":{"filename":"src/lib.rs","begin":[1465,4],"end":[1470,5]},"visibility":"public","docs":"Run the compiler, returning the macro-expanded version of the input files.\n\nThis is only relevant for C and C++ files.\n\n# Panics\nPanics if more than one file is present in the config, or if compiler\npath has an invalid file name.\n\n# Example\n```no_run\nlet out = cc::Build::new().file(\"src/foo.c\").expand();\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6600:241","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11835:26608":{"id":"2:11835:26608","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11834:2468"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11836:2744":{"id":"2:11836:2744","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11828:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50666:7657","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:131:2096":{"id":"0:131:2096","crate_id":0,"name":"compile","span":{"filename":"src/lib.rs","begin":[1207,4],"end":[1211,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\n# Library name\n\nThe `output` string argument determines the file name for the compiled\nlibrary. The Rust compiler will create an assembly named \"lib\"+output+\".a\".\nMSVC will create a file named output+\".lib\".\n\nThe choice of `output` is close to arbitrary, but:\n\n- must be nonempty,\n- must not contain a path separator (`/`),\n- must be unique across all `compile` invocations made by the same build\n  script.\n\nIf your build script compiles a single source file, the base name of\nthat source file would usually be reasonable:\n\n```no_run\ncc::Build::new().file(\"blobstore.c\").compile(\"blobstore\");\n```\n\nCompiling multiple source files, some people use their crate's name, or\ntheir crate's name + \"-cc\".\n\nOtherwise, please use your imagination.\n\nFor backwards compatibility, if `output` starts with \"lib\" *and* ends\nwith \".a\", a second \"lib\" prefix and \".a\" suffix do not get added on,\nbut this usage is deprecated; please omit `lib` and `.a` in the argument\nthat you pass.\n\n# Panics\n\nPanics if `output` is not formatted correctly or if one of the underlying\ncompiler commands fails. It can also panic if it fails reading file names\nor creating directories.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11932:25432":{"id":"2:11932:25432","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[190,9],"end":[190,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:373:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:360:413":{"id":"0:360:413","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[152,9],"end":[152,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:26624":{"id":"2:11917:26624","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11513:13939","prim@char":"1:11828:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:13937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:116:1669":{"id":"0:116:1669","crate_id":0,"name":"pic","span":{"filename":"src/lib.rs","begin":[962,4],"end":[965,5]},"visibility":"public","docs":"Configures whether the compiler will emit position independent code.\n\nThis option defaults to `false` for `windows-gnu` and bare metal targets and\nto `true` for all other targets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["pic",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:119:1671":{"id":"0:119:1671","crate_id":0,"name":"static_crt","span":{"filename":"src/lib.rs","begin":[996,4],"end":[999,5]},"visibility":"public","docs":"Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.\n\nThis option defaults to `false`, and affect only msvc targets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["static_crt",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8138:3797-0:363:1707":{"id":"a:2:8138:3797-0:363:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8138:3797","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:101:1661":{"id":"0:101:1661","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[848,4],"end":[851,5]},"visibility":"public","docs":"Configures the host assumed by this configuration.\n\nThis option is automatically scraped from the `HOST` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .host(\"arm-linux-gnueabihf\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["host",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:245:1019":{"id":"0:245:1019","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[3352,4],"end":[3354,5]},"visibility":"public","docs":"Returns the path for this compiler.\n\nNote that this may not be a path to a file on the filesystem, e.g. \"cc\",\nbut rather something which will be resolved when a process is spawned.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5199:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:89:1674":{"id":"0:89:1674","crate_id":0,"name":"warnings_into_errors","span":{"filename":"src/lib.rs","begin":[689,4],"end":[692,5]},"visibility":"public","docs":"Set warnings into errors flag.\n\nDisabled by default.\n\nWarning: turning warnings into errors only make sense\nif you are a developer of the crate using cc-rs.\nSome warnings only appear on some architecture or\nspecific version of the compiler. Any user of this crate,\nor any other crate depending on it, could fail during\ncompile time.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings_into_errors(true)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["warnings_into_errors",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11864:26616":{"id":"2:11864:26616","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11828:409","self::pattern":"2:11513:13939"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11337:7425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:108:432":{"id":"0:108:432","crate_id":0,"name":"compiler","span":{"filename":"src/lib.rs","begin":[907,4],"end":[910,5]},"visibility":"public","docs":"Configures the compiler to be used to produce output.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["compiler",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2494:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5199:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2541-0:272:2962":{"id":"b:2:2541-0:272:2962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:127","2:2545:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2530-0:363:1707":{"id":"b:2:2530-0:363:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2532:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11935:34311":{"id":"2:11935:34311","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4498:34311"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50995:7569","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:251:2748":{"id":"0:251:2748","crate_id":0,"name":"is_like_clang","span":{"filename":"src/lib.rs","begin":[3410,4],"end":[3412,5]},"visibility":"public","docs":"Whether the tool is Clang-like.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:100:1386":{"id":"0:100:1386","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[830,4],"end":[833,5]},"visibility":"public","docs":"Configures the target this configuration will be compiling for.\n\nThis option is automatically scraped from the `TARGET` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .target(\"aarch64-linux-android\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:687:4011":{"id":"5:687:4011","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:3179":{"id":"2:11923:3179","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11513:13939","prim@char":"1:11828:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:336:413":{"id":"0:336:413","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[92,9],"end":[92,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:296:1646":{"id":"0:296:1646","crate_id":0,"name":"Build","span":{"filename":"src/lib.rs","begin":[93,0],"end":[132,1]},"visibility":"public","docs":"A builder for compilation of a native library.\n\nA `Build` is the main type of the `cc` crate and is used to control all the\nvarious configuration options and such of a compile. You'll find more\ndocumentation on each method itself.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:61","a:2:2685:225-0:296:1646","a:2:2671:217-0:296:1646","a:2:2735:3569-0:296:1646","a:2:8137:3798-0:296:1646","a:2:8138:3797-0:296:1646","b:2:2536-0:296:1646","b:2:2526-0:296:1646","b:2:2237-0:296:1646","b:2:2530-0:296:1646","b:2:2541-0:296:1646","b:2:2234-0:296:1646","b:2:3326-0:296:1646","b:5:683-0:296:1646","0:337","0:335","0:231"]}},"a:2:8137:3798-0:272:2962":{"id":"a:2:8137:3798-0:272:2962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8137:3798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2236:3285":{"id":"2:2236:3285","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:293":{"id":"0:293","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,31],"end":[82,35]},"visibility":{"restricted":{"parent":"0:36:1641","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2683:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:78:1854":{"id":"0:78:1854","crate_id":0,"name":"flag_if_supported","span":{"filename":"src/lib.rs","begin":[560,4],"end":[563,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler if it supports it\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag_if_supported(\"-Wlogical-op\") // only supported by GCC\n    .flag_if_supported(\"-Wunreachable-code\") // only supported by clang\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11820:2024":{"id":"2:11820:2024","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11081:2727"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11844:1838":{"id":"2:11844:1838","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11828:409","self::pattern":"2:11513:13939"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:84:1655":{"id":"0:84:1655","crate_id":0,"name":"files","span":{"filename":"src/lib.rs","begin":[620,4],"end":[629,5]},"visibility":"public","docs":"Add files which will be compiled","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["p",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7086:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:7086:149","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2494:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5199:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79:1672":{"id":"0:79:1672","crate_id":0,"name":"shared_flag","span":{"filename":"src/lib.rs","begin":[578,4],"end":[581,5]},"visibility":"public","docs":"Set the `-shared` flag.\n\nWhen enabled, the compiler will produce a shared object which can\nthen be linked with other objects to form an executable.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["shared_flag",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2526-0:363:1707":{"id":"b:2:2526-0:363:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:1730"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:65:1780":{"id":"0:65:1780","crate_id":0,"name":"includes","span":{"filename":"src/lib.rs","begin":[377,4],"end":[386,5]},"visibility":"public","docs":"Add multiple directories to the `-I` include path.\n\n# Example\n\n```no_run\n# use std::path::Path;\n# let condition = true;\n#\nlet mut extra_dir = None;\nif condition {\n    extra_dir = Some(Path::new(\"/path/to\"));\n}\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .includes(extra_dir)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dirs",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7086:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:7086:149","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2494:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5199:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:248:2548":{"id":"0:248:2548","crate_id":0,"name":"cc_env","span":{"filename":"src/lib.rs","begin":[3374,4],"end":[3388,5]},"visibility":"public","docs":"Returns the compiler command in format of CC environment variable.\nOr empty string if CC env was not present\n\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:123:2001":{"id":"0:123:2001","crate_id":0,"name":"try_compile","span":{"filename":"src/lib.rs","begin":[1015,4],"end":[1168,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThis will return a result instead of panicing; see compile() for the complete description.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48870:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:34299":{"id":"2:11873:34299","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11513:13939","prim@char":"1:11828:409","str::split_terminator":"2:11870:34298","str::split":"2:11861:2319"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50764:7664","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:13937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8137:3798-0:356:127":{"id":"a:2:8137:3798-0:356:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8137:3798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:48:656":{"id":"0:48:656","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[176,4],"end":[178,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8960:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8949:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11824:1827":{"id":"2:11824:1827","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48728:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9694:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9694:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5553:1418":{"id":"5:5553:1418","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8137:3798-0:296:1646":{"id":"a:2:8137:3798-0:296:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8137:3798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11817:34293":{"id":"2:11817:34293","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11815:34292"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11832:34295":{"id":"2:11832:34295","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:2990:4423","`str`":"1:11834:1364","str::slice_mut_unchecked":"2:11833:34296"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11840:2486":{"id":"2:11840:2486","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11839:2501"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50979:7676","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2526-0:356:127":{"id":"b:2:2526-0:356:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:1730"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11897:34304":{"id":"2:11897:34304","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:7123:120","prim@char":"1:11828:409","str::match_indices":"2:11894:34303","self::pattern":"2:11513:13939"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50864:7670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:13937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:683-0:272:2962":{"id":"b:5:683-0:272:2962","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:4010","5:686:1696","5:687:4011"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11933:25433":{"id":"2:11933:25433","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:34309":{"id":"2:11908:34309","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11828:409","self::pattern":"2:11513:13939"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11538:13936","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:287":{"id":"0:287","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":{"restricted":{"parent":"0:36:1641","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2681:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8138:3797-0:296:1646":{"id":"a:2:8138:3797-0:296:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8138:3797","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11834:2468":{"id":"2:11834:2468","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11835:26608"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:375:656":{"id":"0:375:656","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[190,16],"end":[190,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8960:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8949:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:2135":{"id":"2:11929:2135","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11475:126","`FromStr`":"2:11474:3000"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48870:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11474:3000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11474:3000","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:243:1836":{"id":"0:243:1836","crate_id":0,"name":"to_command","span":{"filename":"src/lib.rs","begin":[3324,4],"end":[3346,5]},"visibility":"public","docs":"Converts this compiler into a `Command` that's ready to be run.\n\nThis is useful for when the compiler needs to be executed and the\ncommand returned will already have the initial arguments and environment\nvariables configured.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"1:5402:1633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3328:1452":{"id":"2:3328:1452","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:47065:7552","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:296:1646":{"id":"b:2:2234-0:296:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:3285"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2544:127":{"id":"2:2544:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39825:3487","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:80:1673":{"id":"0:80:1673","crate_id":0,"name":"static_flag","span":{"filename":"src/lib.rs","begin":[597,4],"end":[600,5]},"visibility":"public","docs":"Set the `-static` flag.\n\nWhen enabled on systems that support dynamic linking, this prevents\nlinking with the shared libraries.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .static_flag(true)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["static_flag",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:25348":{"id":"2:11914:25348","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11828:409","self::pattern":"2:11513:13939"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11850:2009":{"id":"2:11850:2009","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11828:409","self::pattern":"2:11513:13939"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:13937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:118:1678":{"id":"0:118:1678","crate_id":0,"name":"emit_rerun_if_env_changed","span":{"filename":"src/lib.rs","begin":[988,4],"end":[991,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo to detect environment\nchanges that should trigger a rebuild.\n\nThis has no effect if the `cargo_metadata` option is `false`.\n\nThis option defaults to `true`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["emit_rerun_if_env_changed",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:363:1707":{"id":"b:2:2237-0:363:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:24714"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2532:680":{"id":"2:2532:680","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:105:1664":{"id":"0:105:1664","crate_id":0,"name":"force_frame_pointer","span":{"filename":"src/lib.rs","begin":[887,4],"end":[890,5]},"visibility":"public","docs":"Configures whether the compiler will emit instructions to store\nframe pointers during codegen.\n\nThis option is automatically enabled when debug information is emitted.\nOtherwise the target platform compiler's default will be used.\nYou can use this option to force a specific setting.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["force",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8138:3797-0:356:127":{"id":"a:2:8138:3797-0:356:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8138:3797","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2234-0:356:127":{"id":"b:2:2234-0:356:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:3285"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11934:25434":{"id":"2:11934:25434","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:41:2429":{"id":"0:41:2429","crate_id":0,"name":"find_tool","span":{"filename":"src/windows_registry.rs","begin":[43,0],"end":[45,1]},"visibility":"public","docs":"Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["_target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["_tool",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11830:26585":{"id":"2:11830:26585","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9694:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9694:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11888:3299":{"id":"2:11888:3299","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:7123:120","prim@char":"1:11828:409","self::pattern":"2:11513:13939","str::matches":"2:11888:3299"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50900:7672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:88:1660":{"id":"0:88:1660","crate_id":0,"name":"cudart","span":{"filename":"src/lib.rs","begin":[663,4],"end":[668,5]},"visibility":"public","docs":"Link CUDA run-time.\n\nThis option mimics the `--cudart` NVCC command-line option. Just like\nthe original it accepts `{none|shared|static}`, with default being\n`static`. The method has to be invoked after `.cuda(true)`, or not\nat all, if the default is right for the project.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cudart",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:285":{"id":"0:285","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":{"restricted":{"parent":"0:36:1641","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9000:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:286:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:273:2964":{"id":"0:273:2964","crate_id":0,"name":"Vs12","span":{"filename":"src/windows_registry.rs","begin":[85,4],"end":[85,8]},"visibility":"default","docs":"Visual Studio 12 (2013)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:96:1658":{"id":"0:96:1658","crate_id":0,"name":"cpp_set_stdlib","span":{"filename":"src/lib.rs","begin":[807,4],"end":[815,5]},"visibility":"public","docs":"Force the C++ compiler to use the specified standard library.\n\nSetting this option will automatically set `cpp_link_stdlib` to the same\nvalue.\n\nThe default value of this option is always `None`.\n\nThis option has no effect when compiling for a Visual Studio based\ntarget.\n\nThis option sets the `-stdlib` flag, which is only supported by some\ncompilers (clang, icc) but not by others (gcc). The library will not\ndetect which compiler is used, as such it is the responsibility of the\ncaller to ensure that this option is only used in conjunction with a\ncompiler which supports the `-stdlib` flag.\n\nA value of `None` indicates that no specific C++ standard library should\nbe used, otherwise `-stdlib` is added to the compile invocation.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .cpp_set_stdlib(\"c++\")\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cpp_set_stdlib",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[175,0],"end":[179,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9005:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:48:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11838:3359":{"id":"2:11838:3359","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50682:3408","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:296:1646":{"id":"b:2:2237-0:296:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:24714"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2545:1438":{"id":"2:2545:1438","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48870:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11867:26618":{"id":"2:11867:26618","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:11828:409","self::pattern":"2:11513:13939","str::split":"2:11861:2319","`DoubleEndedIterator`":"2:7123:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50714:7426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:13937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2598-0:356:127":{"id":"b:2:2598-0:356:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2591:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3375:13957","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2600:8349"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"2:2239:24714":{"id":"2:2239:24714","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:42:2981":{"id":"0:42:2981","crate_id":0,"name":"find_vs_version","span":{"filename":"src/windows_registry.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Find the most recent installed version of Visual Studio\n\nThis is used by the cmake crate to figure out the correct\ngenerator.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48870:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5305:25431":{"id":"5:5305:25431","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11934:25434"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11894:34303":{"id":"2:11894:34303","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:11828:409","`DoubleEndedIterator`":"2:7123:120","self::pattern":"2:11513:13939","str::rmatch_indices":"2:11897:34304"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50846:7669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:138:2056":{"id":"0:138:2056","crate_id":0,"name":"get_compiler","span":{"filename":"src/lib.rs","begin":[1490,4],"end":[1495,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis function will return a `Tool` which represents the culmination\nof this configuration at a snapshot in time. The returned compiler can\nbe inspected (e.g. the path, arguments, environment) to forward along to\nother tools, or the `to_command` method can be used to invoke the\ncompiler itself.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110:1665":{"id":"0:110:1665","crate_id":0,"name":"archiver","span":{"filename":"src/lib.rs","begin":[917,4],"end":[920,5]},"visibility":"public","docs":"Configures the tool used to assemble archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["archiver",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2494:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5199:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:87:1659":{"id":"0:87:1659","crate_id":0,"name":"cuda","span":{"filename":"src/lib.rs","begin":[648,4],"end":[655,5]},"visibility":"public","docs":"Set CUDA C++ support.\n\nEnabling CUDA will pass the detected C/C++ toolchain as an argument to\nthe CUDA compiler, NVCC. NVCC itself accepts some limited GNU-like args;\nany other arguments for the C/C++ toolchain will be redirected using\n\"-Xcompiler\" flags.\n\nIf enabled, this also implicitly enables C++ support.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cuda",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":{"restricted":{"parent":"0:36:1641","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2300:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:272:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:601"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:373:413":{"id":"0:373:413","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[190,9],"end":[190,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:363:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:363:1707":{"id":"0:363:1707","crate_id":0,"name":"Tool","span":{"filename":"src/lib.rs","begin":[191,0],"end":[200,1]},"visibility":"public","docs":"Configuration used to represent an invocation of a C compiler.\n\nThis can be used to figure out what compiler is in use, what the arguments\nto it are, and what the environment variables look like for the compiler.\nThis can be used to further configure other build systems (e.g. forward\nalong CC and/or CFLAGS) or the `to_command` method can be used to run the\ncompiler itself.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:233","a:2:2685:225-0:363:1707","a:2:2671:217-0:363:1707","a:2:2735:3569-0:363:1707","a:2:8137:3798-0:363:1707","a:2:8138:3797-0:363:1707","b:2:2536-0:363:1707","b:2:2526-0:363:1707","b:2:2237-0:363:1707","b:2:2530-0:363:1707","b:2:2541-0:363:1707","b:2:2234-0:363:1707","b:2:3326-0:363:1707","b:5:683-0:363:1707","0:374","0:372"]}},"0:91:1675":{"id":"0:91:1675","crate_id":0,"name":"extra_warnings","span":{"filename":"src/lib.rs","begin":[733,4],"end":[736,5]},"visibility":"public","docs":"Set extra warnings flags.\n\nAdds some flags:\n- nothing for MSVC.\n- \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\n// Disables -Wextra, -Wall remains enabled:\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .extra_warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["warnings",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:296:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:338:656":{"id":"0:338:656","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[92,16],"end":[92,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8960:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8949:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77:1823":{"id":"0:77:1823","crate_id":0,"name":"is_flag_supported","span":{"filename":"src/lib.rs","begin":[491,4],"end":[547,5]},"visibility":"public","docs":"Run the compiler to test if it accepts the given flag.\n\nFor a convenience method for setting flags conditionally,\nsee `flag_if_supported()`.\n\nIt may return error if it's unable to run the compiler with a test file\n(e.g. the compiler is missing or a write to the `out_dir` failed).\n\nNote: Once computed, the result of this call is stored in the\n`known_flag_support` field. If `is_flag_supported(flag)`\nis called again, the result will be read from the hash table.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48870:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:356:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"0:272:2962":{"crate_id":0,"path":["cc","windows_registry","VsVers"],"kind":"enum"},"2:2506:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"12:393:35701":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:3568:4682":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:6384:2101":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:11113:4765":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:8960:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:8247:7851":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:12198:5353":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"12:1852:6341":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"12:2178:6345":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:51674:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:1606:6575":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"12:1845:4237":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:7603:6152":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4788:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:6002:8864":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:8881:35721":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:6017:8089":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:4136:6681":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:7278:5836":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:9011:3373":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:9031:35719":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:51439:7713":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"0:277:2968":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs15"],"kind":"variant"},"2:52971:7752":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:54656:7825":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:11060:7872":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:8871:7995":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:10875:5081":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:8213:7849":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:6654:14035":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:3098:34231":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:4595:7252":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:2856:14069":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:4700:8743":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6200:5974":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:11515:5226":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:6743:20651":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"9:920:19573":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:1091:4246":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:2880:34227":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:4327:5859":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:11315:8207":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:8241:20707":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:20439:32242":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:9118:35724":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:50714:7426":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:7656:8698":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:13382:5715":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:5578:7065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:12836:5558":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:2336:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:6203:4743":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:13221:5653":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:20654:8835":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:1366:3461":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:1959:3423":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:4034:3393":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:49472:3365":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:13506:5751":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"12:2198:6348":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:58878:7839":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:11774:5267":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:5142:13924":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:2938:3571":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:2500:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:36:4429":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"12:98:6334":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:48913:3461":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:7939:8223":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:5615:4236":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:20422:31927":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:13134:5634":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:10403:5074":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:4079:8166":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:965:4239":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"13:0:3193":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:50960:7674":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:50018:3385":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:4022:13902":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:11828:5275":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:10917:4764":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:3902:4682":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11106:5131":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:8269:7237":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"12:697:4240":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:11841:5276":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:47088:4025":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:4317:6783":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:10108:8049":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:46904:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:47495:3341":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"5:5704:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:2931:2138":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:49465:3364":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"12:60:35700":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:10296:8060":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:13527:5757":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10257:8057":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:50995:7569":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:50818:7667":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:6425:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:21384:8828":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:9658:8025":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:5592:7066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:1021:7986":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:57168:8862":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:8767:3483":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:9015:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:2300:5792":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:5010:8213":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:598:1635":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:4210:6732":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:1931:7988":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6735:8103":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:6903:7868":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:49738:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:49153:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:587:6509":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:11174:5141":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:7641:8696":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:632:8149":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:9317:8008":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:1548:3393":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:50257:7649":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:51423:7709":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:8991:35720":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:5737:5919":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:12638:5494":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:5723:7141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:4004:8731":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:11247:5155":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6330:5990":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:4112:6664":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:2465:5804":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:21618:7443":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:681:8203":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:1091:35265":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:0:486":{"crate_id":2,"path":["core"],"kind":"module"},"18:515:4818":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12073:5326":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:1747:7409":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4506:6832":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:30171:31543":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:6088:4707":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:2814:6089":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:51270:13948":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:11852:1102":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:51435:7712":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10374:5032":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:8080:3433":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:8970:8237":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:10616:7874":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:9394:4721":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:7473:8705":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:6803:3433":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:53147:7757":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:4862:8779":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:7140:3338":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:47628:7582":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:51291:7698":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:47688:7591":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"12:1866:6343":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:9947:20798":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:6279:7204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:47587:3406":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:554:6491":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:47656:7586":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:51013:7562":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:25630:7475":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:48535:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:51411:7706":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:4148:4024":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:50918:7673":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:48664:7631":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:4408:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:6781:8104":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:22058:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:1413:4235":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12748:5535":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"0:275:2966":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs14"],"kind":"variant"},"2:54641:7824":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:13580:5766":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12251:5357":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:9250:8002":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:3942:8726":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:20708:8740":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:5730:7143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:50950:3411":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:9446:8014":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:5235:5880":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:6619:6042":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:2848:14067":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:6252:5979":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:7064:3327":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:0:3194":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:47791:3407":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:13557:5762":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:7008:7367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:11211:7893":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:4820:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:7567:20655":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"12:632:3461":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:1889:4295":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:48677:7849":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:8272:20708":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:2990:4423":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:52282:7723":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:3409:1628":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:12176:5342":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:12955:5587":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:20628:8834":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:2805:14061":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:51304:7702":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:21602:7442":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:531:4820":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:5456:1634":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:9805:5056":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:10626:4210":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:52903:7749":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:7465:8252":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:8176:8716":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:2771:5817":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:2809:14063":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:50682:3408":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:7045:14041":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:9493:4724":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:7247:7375":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"12:751:4236":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:52478:7731":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:4920:3786":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"12:1003:4247":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:4591:7248":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:4121:8750":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:931:4235":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"18:481:4813":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11617:5242":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:2894:19787":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:2458:14005":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11034:5119":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:13231:5658":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:47770:7598":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:3623:8152":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:4747:6948":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:12060:5325":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:1674:6628":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:9684:8740":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"18:599:35733":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:57525:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12225:5355":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:8165:8224":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:6440:7270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:5541:5892":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:8774:4950":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"12:320:4673":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:1463:8151":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:4216:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:9837:3461":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:47095:7553":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:7127:3337":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:52426:7729":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:22223:3552":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:50979:7676":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:2231:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"18:507:4815":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:11839:631":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:39874:3952":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:10996:25548":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:5373:3479":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:9283:8005":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:47708:7593":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"14:31:8139":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4389:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:47325:7560":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:10973:5105":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:5614:5902":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:2516:1627":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:51466:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:11909:5286":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:6148:8214":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:38669:3940":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:5815:20646":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:11848:1459":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:11831:1028":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:7470:3468":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:8562:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:11533:13937":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:0:1356":{"crate_id":1,"path":["std"],"kind":"module"},"5:2873:4010":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:9791:4979":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:3716:5853":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:50666:7657":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:10528:8063":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:4807:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:10434:5041":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:47274:7555":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"18:96:24454":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"0:356:127":{"crate_id":0,"path":["cc","Error"],"kind":"struct"},"17:10455:5045":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:7890:6199":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:119:14476":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:8096:3402":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:9155:8000":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:7267:6130":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:960:4238":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:2401:4219":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:2579:3420":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:52873:7748":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:11834:1364":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"12:738:4235":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:3504:4236":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:5402:1633":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:21809:8721":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:54399:7815":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:8110:20692":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11149:5136":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:2605:5810":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:2907:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:8843:8783":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:6790:6065":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:11536:5230":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:0:1790":{"crate_id":17,"path":["object"],"kind":"module"},"2:47283:7556":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:39861:8187":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:5374:5823":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:681:4839":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:11169:7890":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:7135:35716":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:21528:7439":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"18:614:35732":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:50027:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:52995:7753":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11288:5165":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:3457:3090":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:5041:8213":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:5339:1632":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:4441:5863":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:11482:7901":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:2797:8822":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:1443:4240":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:4091:29843":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:5996:8075":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:10390:3425":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:784:4685":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:11450:7897":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:1105:4247":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:8162:20705":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:6877:20652":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:22322:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:6582:7349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:2613:3413":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"15:193:19743":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:8392:2110":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:6434:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:52949:7751":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:2683:5813":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:4849:5875":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:3159:26019":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:8950:1629":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:4377:6813":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:5388:3480":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:4544:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11014:5109":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:6963:7355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:49756:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:719:8700":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:1511:6520":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:10207:8050":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:8912:8231":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:50425:8193":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"9:800:6406":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:8159:3411":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:4662:5869":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:6985:7356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:51324:7704":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:2993:5844":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:1506:6518":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"8:0:3195":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:242:7981":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:50640:7653":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:29965:4421":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:10647:8178":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:7637:6156":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:7783:4207":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:3352:3434":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:1556:6542":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:4615:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:10639:7881":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"18:590:4826":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:4700:983":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:7015:29840":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:5709:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:10022:8240":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:6463:6015":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:7587:3534":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:48929:3966":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:7840:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:9019:3372":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:11584:13945":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:10476:20824":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:3387:8163":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"18:521:24465":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:11004:7715":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:2389:5801":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:12609:5483":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:10088:5013":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:2257:3087":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:21288:31925":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:10182:5019":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:5564:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:532:6479":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:50010:7642":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:4162:6701":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:6970:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:8441:20714":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:11356:5185":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:4277:6764":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:7146:3573":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:50900:7672":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11259:5156":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:7810:4212":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:8239:8224":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:11130:7887":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:7679:4284":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:11833:1334":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:5761:8068":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:11199:5143":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"12:353:4675":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:8475:20693":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:3150:14072":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:57551:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:3263:5848":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:6644:4707":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:53541:7775":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:2375:7395":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:4716:6935":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:10148:8176":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:13091:5620":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:47481:7576":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:7059:3794":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:48786:3461":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:7082:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:5184:19759":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11161:5139":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:12797:5549":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:51144:7690":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:3087:4425":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:9061:4962":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:3566:5849":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:11974:5316":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:944:4236":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:3119:6343":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"0:0:2425":{"crate_id":0,"path":["cc"],"kind":"module"},"17:13082:5617":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:10429:3545":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:10062:8046":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:1894:15806":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:11787:5268":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:2342:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:967:7985":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:9930:4982":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:47731:7595":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:5743:7147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:6608:32272":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:5724:3511":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:10195:25746":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:6999:3966":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:5670:7116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:54601:7820":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"12:1840:4236":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:1713:6645":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:10834:3484":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:20869:7435":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:6146:5965":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:8139:3796":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:6171:5971":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:1642:6605":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:13100:5621":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:38652:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:14:1698":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:52827:7747":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11893:5281":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:568:6499":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:11842:729":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:3276:3426":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:736:24463":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:7522:4758":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:30065:31496":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:9102:7873":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:20710:8827":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:13374:5714":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:10651:4211":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:7157:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4726:6941":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13192:5646":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:57590:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:2868:5821":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:6829:6069":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:49768:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:47609:7579":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:5596:5898":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:9820:8036":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:12926:5579":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:3160:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11594:5239":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:9017:3371":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:46888:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:11840:731":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:47453:3340":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:3641:8719":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:6034:8092":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"12:853:4244":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:47780:7599":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:3805:8209":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:11835:1442":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:10900:4762":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:49705:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:3241:13904":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:7049:14040":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:10972:3482":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:4826:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:8055:20694":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11300:5168":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:6561:14043":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:10670:5070":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:53587:7776":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:12033:5322":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"12:2190:35698":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:4:994":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:3188:5847":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:54337:7814":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:48794:4233":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"18:699:4843":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:2777:6084":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:49826:4016":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:11850:775":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"12:834:4243":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12307:5364":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:22820:7474":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:8805:3966":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:2341:5799":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"3:0:433":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:7825:6193":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:54705:7828":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:52496:7732":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:21658:7451":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:53227:7758":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:12265:5360":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:52681:7739":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:22157:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:48844:3795":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:8220:7850":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:50746:7663":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:7699:8187":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:11330:5180":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:11051:14149":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:12278:5361":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"12:1044:19725":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:10752:5074":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:9712:4971":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:4225:8168":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"18:636:4838":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12695:5529":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"12:1065:35704":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:12948:5585":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:47378:14000":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"5:5549:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:7123:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:49039:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"13:220:6333":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:48058:7611":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:6070:5959":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:1756:7411":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"18:574:4815":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:2874:34229":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:1604:3461":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:6636:8215":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:4654:6904":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:4413:5862":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:47268:7554":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:47538:3355":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:10682:5071":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:11436:5192":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:20841:8826":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:4698:8742":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"12:810:4238":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:10162:8177":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:5628:5903":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:11067:8180":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:4721:5871":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:53801:7779":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:7592:3543":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:2251:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:3702:8207":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:3197:3427":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:1404:4234":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:22388:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:9043:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13148:5636":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"18:644:4815":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:5514:7031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4427:6824":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:9064:7872":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:1649:6609":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11271:5157":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:5737:7144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:13007:5596":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:13366:5711":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:5736:3515":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:4645:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:49267:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"12:1534:8147":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:8415:3459":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:3934:8725":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:9339:8010":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:219:4681":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:6339:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:2226:1624":{"crate_id":1,"path":["std","fs"],"kind":"module"},"2:2722:3951":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:4397:4027":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:6676:5832":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:6287:7209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:7329:5838":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:9849:7628":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:51431:7711":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:2793:8820":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:10997:5106":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:990:4243":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7237:6129":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:4749:5872":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:2142:35644":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:2705:5814":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:53381:7773":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:10894:5084":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10796:5076":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:2261:19761":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:3488:3461":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:8490:3463":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:11547:5233":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:11843:730":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:57603:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:7276:7382":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6489:7307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:54621:7822":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:12095:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:3975:8164":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:3611:3423":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:47394:7569":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:10816:25340":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:4888:5876":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:2685:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:47819:7603":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:7230:7371":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:9475:8018":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:9223:20724":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"12:2080:4248":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:7396:20654":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4356:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:3904:8723":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:4777:8738":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:5508:7028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:836:4688":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"6:4485:6829":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:57538:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6241:5978":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:2678:3568":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:4385:5861":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:506:6459":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:47805:7602":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:6601:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:9897:8045":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:47699:7592":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"12:2205:3326":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:21776:7466":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:2631:5811":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:8510:4942":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:6311:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:12909:5574":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:5411:5828":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:10384:3427":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:9476:4723":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:52527:7733":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:6388:3517":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:11849:1456":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:47618:7580":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:10774:5026":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"9:592:19590":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:20716:8829":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13354:5708":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:1632:577":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:3705:8208":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:9488:8019":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:4339:6796":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:9350:4936":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:7848:8221":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:6690:5833":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:51610:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"9:188:8586":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:12850:5562":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:5981:5957":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:52372:7727":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:49729:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:5925:4743":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:47528:3356":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:49343:3512":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:766:24464":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"12:1872:6344":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"16:2411:5802":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:5516:2796":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:5533:7033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:7565:8740":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:6512:4436":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:12211:5354":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:8631:4946":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:6312:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:7577:25822":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"9:111:8582":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:48050:7609":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:12514:5400":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:2150:578":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:6907:4754":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:8138:3797":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:8137:20704":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:4201:6727":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:9000:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:13024:5603":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:8171:8226":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:22355:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4561:6862":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:2871:4740":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:12756:5536":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:6500:3521":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:5751:7149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:3475:25480":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:13393:5720":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:3956:8728":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:7044:35714":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:5949:5952":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:1962:7991":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:6161:20648":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:5551:7045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:11800:5270":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:8108:3404":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:57564:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11939:5305":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:7234:4237":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:10310:8061":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"9:676:19579":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"16:2487:5805":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:12860:5563":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:153:4669":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:4193:8210":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:51427:7710":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:3427:3401":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:5780:5923":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:50846:7669":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"15:175:19742":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:51443:7714":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10360:5028":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:5871:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:50672:7658":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:8666:4947":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:4519:5864":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:13176:5643":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:50504:7430":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:1915:7414":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:10642:20717":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:6419:7263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:4144:5855":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:47335:7561":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:4639:6900":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:3091:3436":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:8339:20710":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:47014:3320":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"13:108:35705":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:6991:7358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:51192:7691":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:1639:7408":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:7469:5840":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:48802:3966":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:7672:2023":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:50654:7656":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:8822:35728":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:12118:5335":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:9694:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:11226:7660":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:979:4242":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:11846:1457":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:6284:5842":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:5703:3513":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:5839:20647":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:39825:3487":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"5:6948:34240":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"15:214:8576":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:13594:5769":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11639:5249":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:47721:7594":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:2930:19788":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"14:165:19730":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:5472:5827":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:727:4851":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:11292:4768":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:9553:4962":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:8393:20712":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:9751:4976":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:3943:4233":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:47295:31499":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:9644:8024":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:2865:14071":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:6863:3506":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:526:6476":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:3990:8729":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12291:5362":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:9671:8026":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:8243:8171":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:12964:5588":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:4581:8728":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4447:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"12:2053:4246":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:10984:3483":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13340:5702":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:4659:8756":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:6496:20650":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:3382:3393":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:4631:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"9:382:8589":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:8941:7996":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:10445:5043":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:53305:7771":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:4602:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:46787:13975":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:7309:5837":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:9886:3410":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:54667:7826":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:12768:5541":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:6842:6072":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6567:6040":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:12739:5534":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:538:4823":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:48777:1782":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:6600:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:11054:5120":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"9:505:8599":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:8152:3410":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:11368:5188":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:9844:8039":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:9681:4895":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:46826:13906":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:46970:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:50494:8194":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:80:24453":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:3466:1629":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:47355:13999":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:11670:4772":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:11847:1458":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:2557:5808":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:3177:13976":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:9577:4968":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:8225:8753":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:3999:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:11838:630":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:6251:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:5390:4434":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:13184:5645":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:12347:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:13436:5736":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:5490:7015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:47408:7571":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:6816:6066":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:54682:7827":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:7695:4290":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:47401:7570":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:7005:3966":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7343:5839":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:22421:7473":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:7259:7377":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:6321:7228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4234:6746":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:8146:3408":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:4689:5870":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:48921:4233":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:8484:3461":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:1728:6652":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:10079:8175":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:3165:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"14:221:6288":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:1668:1066":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:8923:3544":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:4287:4716":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:6567:3526":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4195:6725":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:4351:4026":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:51618:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:11474:3000":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"12:1628:4679":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:2826:14065":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:2920:3412":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10506:5050":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:48862:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10520:5053":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:4786:5873":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:12884:5565":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:9458:8015":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"11:36:6352":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:11827:921":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:8789:3461":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:11853:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:10621:7876":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:21:667":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:5138:13923":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:46992:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:2884:34230":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:57577:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13158:5639":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"12:1859:6342":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:11302:7671":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:5779:3523":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:2941:3572":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:11794:8609":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"18:671:7980":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:2801:14062":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:52348:7726":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"7:0:1503":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:1684:6634":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:21670:31512":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:2535:5807":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:3930:3393":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:4499:6830":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:9539:8021":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:5510:5888":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:20462:32239":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:579:6504":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:6402:7258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:4593:7250":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:1071:34221":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:2671:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:9953:4289":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:2250:4209":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:5615:7079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:2825:5819":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:7454:5079":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11997:5317":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:6510:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:8432:1630":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:10921:5085":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:1807:1623":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"16:5203:4941":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:5087:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:54758:7831":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"9:863:19571":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"12:815:4241":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:3245:4237":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:12550:5431":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:8731:8607":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:1887:4294":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:49191:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:9083:4226":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:11799:8701":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:2749:5816":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:1864:4289":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:7503:4756":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:1744:6657":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:13327:5696":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:7176:7368":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:6962:3966":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:3057:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6593:6041":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:48040:4719":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:4921:5877":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:2055:3539":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:2320:5798":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:5635:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:12156:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:8781:3484":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:8958:8235":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:969:4240":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:4453:8757":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:10178:1633":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:6376:20649":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:51447:7715":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:12087:5329":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12022:5321":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:13031:5604":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:9371:7999":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:4771:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:8992:25330":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:3204:13903":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"0:296:1646":{"crate_id":0,"path":["cc","Build"],"kind":"struct"},"2:47347:7562":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:5792:7160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:1329:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:10326:4761":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:11826:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:8935:25351":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:4249:6752":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:4345:6799":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:7200:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11070:5124":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:5460:5886":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4516:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:12816:5550":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:11355:8208":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:8129:3406":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:1580:6559":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:47448:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:3375:13957":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"16:2842:5820":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:21276:7437":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:51653:8199":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:29746:8720":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:4297:4700":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12046:5324":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"18:0:3203":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:9054:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:5813:3393":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:12134:5336":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:6669:4712":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4569:6866":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:2762:8819":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"12:119:4671":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:7613:3545":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:51415:7707":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:11810:25346":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:484:4767":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:12730:5530":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:49305:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6109:5962":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"0:279:2970":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs16"],"kind":"variant"},"2:50525:7651":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:51076:13943":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:3162:30658":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:9263:8003":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:2426:1625":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:3632:5851":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:900:4233":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:4693:6925":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:9627:8022":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:4297:4025":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:1811:598":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:4304:6777":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:11235:5152":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:4778:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:47434:7575":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:3872:4236":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:1055:35264":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:8981:7997":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"12:985:4246":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:4561:13993":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:2228:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:49115:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:5482:7013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:3010:19789":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:52557:7734":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:247:7982":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:47372:7554":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:474:6443":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:9738:4974":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:20836:8740":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:4621:6893":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:5388:5826":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:5520:7032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:47647:7585":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:9272:3381":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:50800:7666":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:13413:5723":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:46928:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"14:215:6286":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:2860:14070":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:9401:4959":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:12108:14009":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:573:6501":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"11:0:3198":{"crate_id":11,"path":["adler"],"kind":"module"},"17:11186:5142":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:4189:6724":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:51127:7689":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:54797:7832":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"0:281:2972":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs17"],"kind":"variant"},"12:0:3199":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:4113:8749":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:7253:7376":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:8949:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:6347:8215":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:10245:8056":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11500:5221":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:2065:7388":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:547:6488":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"18:690:4842":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:9183:8001":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:9153:8172":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:4755:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:29931:4420":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:10681:3402":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:8859:8784":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:11721:5259":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:8701:4948":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:8965:8236":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:51281:7694":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:5597:7067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:13214:5651":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:8796:4951":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"12:2184:6346":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:8875:8785":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:11813:5272":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"12:300:6338":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11748:5264":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:49790:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:4327:6790":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:7319:6135":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:2300:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:4525:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:420:4902":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:3237:3430":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:6275:3966":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:5492:7418":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4290:6769":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:9362:4962":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:11527:4844":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:8056:6211":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:1422:4238":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:21124:8853":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:4125:6673":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"7:79:19566":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:6719:35713":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:13059:5612":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:4371:3550":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:4431:8756":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:2735:3569":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:10387:3429":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:12181:8181":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:52757:7745":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:6519:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:10385:5036":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:48621:7624":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:4525:8772":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"18:564:4825":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:9021:7998":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"18:113:24455":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:2789:6088":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:2510:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:7251:4430":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:54507:7817":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:51487:7716":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:4705:3354":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:4216:6734":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:7426:8134":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:11513:13939":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:5845:7171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:5880:7419":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:21581:7440":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:11853:5277":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:386:7983":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:6553:3525":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:11873:5280":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:8324:3787":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:10911:4763":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12349:5371":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:678:8201":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:3477:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:1826:4278":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:6059:35715":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:13126:5631":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:4871:8780":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:50049:7646":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:3189:33017":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:8898:3516":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:4459:6827":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:9328:8009":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12896:5568":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:6458:7281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:1524:6526":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"0:36:1641":{"crate_id":0,"path":["cc","windows_registry"],"kind":"module"},"2:21475:7438":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:53046:7754":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:7847:6194":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:8753:3482":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:5544:7041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:47081:8189":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:1547:6536":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"12:1085:8145":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:1568:6551":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:2935:3570":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:11041:7886":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"12:1832:3461":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:5525:5891":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:7086:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"9:827:19663":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:8212:20706":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:7052:3326":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:7566:3559":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:3132:34243":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:39865:7542":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:2162:7394":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:2836:6093":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:562:6496":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:11233:4767":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:12237:5356":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:11518:8171":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:8917:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:7236:7372":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:50696:3410":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:4000:8730":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:5122:5878":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:10108:3489":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:6865:8334":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:1387:3966":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12972:5590":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:11023:4226":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:2783:14060":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:48002:7605":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:8494:4941":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:7299:7385":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:47600:7578":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:11844:726":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:52634:7738":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:5759:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:2282:5790":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:1002:4245":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:4264:3393":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:51219:7692":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"12:777:4678":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:1660:6617":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:22190:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:2457:8740":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:9013:7871":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:4217:5856":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:6940:4692":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:7249:8126":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:9929:7425":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:10671:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:51113:7686":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:10608:4916":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:9363:4760":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:660:7976":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:8418:20713":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:910:3966":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:7934:8222":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:1257:4249":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:2821:14064":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:4371:6811":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:50586:8197":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:2876:7391":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:487:7984":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:11315:5174":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"9:0:3196":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:7288:6133":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:1376:4233":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:4262:5857":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:47670:7589":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:8567:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:10625:5068":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:6202:4682":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:7265:7378":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:5682:7121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:48592:8718":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:5703:5913":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:12428:4427":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:3638:3966":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:7483:5841":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:9108:7999":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:2679:3949":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:10283:8059":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:10854:20719":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:50864:7670":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:5740:14396":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:11485:5217":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:8137:3798":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13039:5605":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:3165:30659":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:5702:7129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:9005:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:10120:7666":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:9691:8028":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:9722:4972":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:8291:7852":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:6100:4734":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:51419:7708":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:12316:4734":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:46948:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:13168:5642":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:53124:7756":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:8368:20711":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:54461:7816":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:4106:7415":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:47638:7583":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:6362:7255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"19:0:1010":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:2411:3130":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:5941:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:961:4682":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:22256:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:50564:8196":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13279:5695":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:353:3557":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:5353:3478":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:6497:3520":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:48726:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12103:5331":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:48700:7632":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:6316:5988":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:9526:8020":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10270:8058":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:9422:8012":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:1938:4195":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:4608:6888":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:52727:7744":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:3093:6342":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:7956:5843":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:2907:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:13478:5742":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:11684:5255":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:6024:4745":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:5453:6989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:6137:5964":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:10041:7426":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:7080:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:49842:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:53651:7778":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:10121:5016":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:4669:6911":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:1123:4249":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:6564:7346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:1720:6648":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:9358:4208":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:3026:4858":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:2253:4184":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:6472:3971":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:1903:20756":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:6923:7402":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:4752:781":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:48558:7615":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:49229:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:12361:5378":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:1771:7987":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:5587:4744":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:628:8693":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:7256:29990":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:652:14829":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:2579:5809":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:22124:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:5886:7197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"9:649:19592":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:53617:7777":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:545:3539":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:1620:6341":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11217:5151":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:954:4237":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"16:4817:5874":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6359:5992":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:10546:20715":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:50039:2110":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:4726:34147":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:11739:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:2831:14066":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:20407:31927":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:1973:8152":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:4267:6761":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:2767:8821":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:50057:7647":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:10420:5040":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:7856:3421":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"12:1138:4249":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:3127:6341":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:4257:6755":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:7511:6142":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:52925:7750":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:305:1412":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"11:44:6353":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:7477:14039":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:29971:7477":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:2909:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:22289:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:6186:5824":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:9857:8041":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:47679:7590":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"14:7:8139":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:4630:656":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:48938:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:21710:31517":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:2852:14068":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:9764:4977":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:13404:5721":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:4635:5868":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:1707:6644":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:21783:7468":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:11263:7665":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:10350:5026":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:8811:7864":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:10691:25550":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11951:5307":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:50764:7664":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4364:6809":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:8911:35726":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:6548:7340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:21693:7454":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"12:387:35699":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:52302:7724":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:6345:5830":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:491:4814":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:1967:4196":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:11199:8217":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:7944:1680":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:21685:7453":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:10283:3481":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:996:4244":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:2842:6094":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:1608:3966":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:21119:8830":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:5793:5783":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:4938:3511":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:6385:7256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12485:5380":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:8047:3437":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:1828:4279":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:5199:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:51499:14192":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"9:709:2110":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:3689:5852":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:582:3940":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7942:8138":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:1601:6573":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6704:6050":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:9009:3364":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:5851:7172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:3235:3429":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:11125:5132":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:24:598":{"crate_id":2,"path":["core","env"],"kind":"macro"},"17:12617:5486":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13203:5650":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:11343:5184":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"9:622:19591":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:12164:5341":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:12781:5546":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:20591:8833":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:2503:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:7224:7370":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:29993:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:7179:8162":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"18:652:4815":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:12337:5043":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:51691:7722":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:20679:8825":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:47465:31527":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:6534:7331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:7823:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4550:6855":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:50970:7675":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:10583:20716":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:7298:6134":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:53351:7772":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:20460:32241":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:50476:7427":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:7929:8135":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:48031:3434":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:11286:7668":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:3249:7994":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:2683:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:6298:5980":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:9293:8006":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:5219:4942":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:9165:35723":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:4471:6828":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:482:6448":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11761:5265":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:50596:7433":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:62:14422":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:49479:3373":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:9193:35722":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:6517:6027":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"12:659:3966":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:8231:8227":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:7211:5927":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:54545:7818":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5605:7072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:52779:7746":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:4437:6825":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:3898:8724":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:9501:4955":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:52456:7730":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:48016:2101":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:48575:7617":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:3199:3428":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12148:5337":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:2383:4214":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:8014:6128":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:3699:4682":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:54720:7829":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:4345:8212":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13459:5737":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:10949:5091":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:8087:3435":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"10:0:3197":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6123:5822":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:4606:5867":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"9:586:6354":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"6:500:6456":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:7872:6196":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:6116:4752":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:58899:7840":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:9059:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"14:0:3200":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:7435:6140":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:8752:3408":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:4663:6910":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:10708:5072":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:5433:5882":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:2494:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:47558:7431":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:9885:8044":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:5878:19760":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:4129:8751":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:9237:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:54149:7812":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:9831:8037":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"12:1836:3966":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:48963:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:8726:31948":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:50002:3386":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:49077:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:2682:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:4012:8733":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:13141:5635":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:1212:4246":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:51256:7693":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"9:19:8579":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:11087:5126":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:48009:7606":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:12934:5582":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:1626:6342":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:6210:5975":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:3501:4233":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:52326:7725":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:21797:7469":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:10006:8174":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:7357:6136":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:3854:5854":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:10221:8054":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:6502:4435":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:2727:5815":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:10233:8055":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:1432:4239":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:881:3461":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:11081:2727":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:4296:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:7980:20657":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:51004:7554":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:11845:1460":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:6270:5825":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:9972:25743":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:2653:3422":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:1632:6343":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12008:5319":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:595:6514":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:46873:7546":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:7388:8133":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:3599:5850":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:4574:5866":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:5267:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:4220:8167":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:5573:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:609:7975":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"0:41:2429":{"crate_id":0,"path":["cc","windows_registry","find_tool"],"kind":"function"},"16:6472:6016":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:4103:3461":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4106:6663":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:1733:14097":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:7909:6202":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:10822:20718":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"9:956:19574":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"0:42:2981":{"crate_id":0,"path":["cc","windows_registry","find_vs_version"],"kind":"function"},"6:5782:7158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:3491:1626":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13114:5628":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:21747:31501":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:4656:8781":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"12:1029:4248":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:1821:4426":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:2994:4424":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"12:646:4233":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:123:14477":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:7095:3574":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:3484:3403":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:8797:8230":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11137:5135":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:47047:8188":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:2681:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:8342:3449":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:9873:8043":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:54610:7821":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:12322:5368":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:4722:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:50261:7650":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:9351:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:47074:6128":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"16:3402:3089":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"7:32:19559":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:13536:5759":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:574:3546":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:2748:3953":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:12129:33123":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:9274:8004":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:0:802":{"crate_id":6,"path":["libc"],"kind":"module"},"2:20757:7435":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:1228:4248":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:2657:5812":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:3153:6344":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:54630:7823":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:9013:3374":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:4814:6980":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:6555:7343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:3086:3461":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"18:719:4848":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:8951:35725":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:20441:32244":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:4142:8752":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:9277:3382":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:49723:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"16:7372:35712":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:6772:8823":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:4297:5858":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:4545:5865":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:8741:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:3324:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:8596:4945":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:3274:3425":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:2399:4218":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:2793:5818":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:1531:6528":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:4342:4717":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:47756:4836":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:54735:7830":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:7117:35717":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:9165:4294":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:1708:4237":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:54583:7819":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:11841:728":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:1586:6561":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:288:3022":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:13518:5753":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:10680:8179":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:10490:5049":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:686:8699":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:7218:7369":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:9601:4970":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:3319:3417":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:8139:3407":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:494:6454":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:10721:5073":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:4817:3393":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6668:6048":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:6156:4236":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5694:7128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12630:5493":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:4222:6737":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13047:5606":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:12980:5592":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:20394:3940":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:47578:8190":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:4064:3393":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"12:1518:19726":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:7659:20656":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"9:977:6425":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"12:861:4245":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:9968:8173":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:6932:4236":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:51098:7680":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:5664:5910":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:11136:3491":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:21731:31530":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:54007:7811":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:5163:5879":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:11538:13936":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:13572:5763":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:2433:5803":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:9631:8023":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:9433:8013":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:9223:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:4708:6930":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"18:624:35735":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:10321:5021":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:2367:5800":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:4149:6691":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:7097:3339":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:2589:4724":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:10597:8248":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:9007:3365":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:1615:4237":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"16:7093:6111":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:21634:7447":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:11184:7891":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:4736:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:5659:32804":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:11832:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"0:39:2035":{"crate_id":0,"path":["cc","windows_registry","find"],"kind":"function"},"5:1243:4247":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:9508:4729":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"12:822:4242":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:11829:1476":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:6654:6046":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:48712:7633":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:6332:7233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:1114:4248":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:4234:4700":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:10332:20823":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:1612:4682":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:10394:5037":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:973:4241":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:3950:8727":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:12874:5564":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:6052:8100":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:11828:409":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"12:669:4239":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:10845:5043":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:5415:7416":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:6908:4428":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:4754:4741":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:3171:13977":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:8474:3460":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:7864:3423":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:49486:3374":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:10791:4290":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:4675:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:11851:1513":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:534:5781":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:51703:6351":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:4537:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:49001:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10466:5046":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:50242:7648":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:7970:6204":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:11559:5235":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:9700:8031":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"9:896:19572":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:2591:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:6528:6028":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:52394:7728":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:53093:7755":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:8735:3481":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:11475:7901":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:273:4682":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:2604:7398":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:10497:20825":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:6917:3966":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:0:3202":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:5094:4682":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"12:274:6335":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:20667:8740":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:54259:7813":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:47065:7552":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:10159:5018":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:50988:7677":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"9:33:8581":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:47415:14001":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:10661:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:11217:7894":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:359:3558":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:53463:7774":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"14:160:8139":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:1692:6635":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:20867:8831":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:5447:8066":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:8561:4944":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:50577:7432":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:9382:4957":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:661:4197":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:48853:4202":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:4357:5860":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:8978:7868":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:2509:5806":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:8265:8228":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:10075:8047":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:12305:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:2577:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:6303:7221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:918:4234":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:12373:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:1637:6344":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:5845:4745":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"1:6424:3524":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4585:6874":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:52597:7736":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:5580:4743":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:47740:7596":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:4591:6877":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:4219:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:50485:7428":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:9303:4955":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:887:3461":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:864:4690":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:562:5079":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:20860:8740":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"15:0:3201":{"crate_id":15,"path":["addr2line"],"kind":"module"},"18:755:4856":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:6350:4682":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"12:725:4234":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11576:5238":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:11734:4986":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:9861:4233":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:11337:7425":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:48641:31500":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:8501:3464":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:7168:7406":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:5710:3514":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:7662:4250":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:11606:5241":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:48870:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:11661:5250":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:51600:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:541:6485":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:3987:8165":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:9778:4978":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:2385:4215":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:1614:6580":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:3680:4237":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:52616:7737":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:22091:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:50551:7431":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:2094:7390":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:7111:31527":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"0:363:1707":{"crate_id":0,"path":["cc","Tool"],"kind":"struct"},"16:7497:5831":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:6865:6074":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:12674:5524":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:707:4844":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:7800:4211":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:52579:7735":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:5519:3486":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:4683:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:11376:8209":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:9909:4980":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:4696:8739":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:11432:7896":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:4273:8211":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:8526:4943":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:524:4736":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:2772:6087":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:4575:6868":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:1517:6523":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"12:762:4237":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:2972:13905":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:10139:4962":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:4241:6750":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:7166:20653":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:10134:7667":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:8295:20709":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:13492:5744":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:488:6451":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:5494:20644":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:1538:6531":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:13071:5613":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"0:273:2964":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs12"],"kind":"variant"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:10795:6422":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"14:187:19737":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:30007:31510":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:8830:7865":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:21382:8740":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:1611:4236":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:7557:6144":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"12:1120:8146":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:47311:7559":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:9071:35727":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:7793:4210":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:2916:7992":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:2690:3551":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:50514:8195":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:50606:8198":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"12:2069:4247":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:51661:7719":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:2497:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:7514:31949":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:4310:6780":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:3125:7993":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:7788:4208":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:7289:7383":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:6483:4434":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:11528:5228":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"14:40:5106":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"14:202:13955":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:11708:5256":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:48025:7607":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:48811:3794":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:5558:20645":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:2305:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:1701:6641":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:10804:1634":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4284:6767":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:7543:5829":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:6978:7403":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"12:1555:8148":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"}},"external_crates":{"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}