{"root":"0:0:3399","crate_version":"1.1.7","includes_private":false,"index":{"2:2795:29251":{"id":"2:2795:29251","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13783:37037":{"id":"2:13783:37037","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12648:1771","crate::ops::IndexMut":"2:3628:4819","str::slice_unchecked":"2:13782:37036"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:350:2917":{"id":"0:350:2917","crate_id":0,"name":"link_lib_modifier","span":{"filename":"src/lib.rs","begin":[1232,4],"end":[1236,5]},"visibility":"public","docs":"Adds a native library modifier that will be added to the\n`rustc-link-lib=static:MODIFIERS=LIBRARY_NAME` metadata line\nemitted for cargo if `cargo_metadata` is enabled.\nSee <https://doc.rust-lang.org/rustc/command-line-arguments.html#-l-link-the-generated-crate-to-a-native-library>\nfor the list of modifiers accepted by rustc.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["link_lib_modifier",{"impl_trait":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"impl AsRef<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32944:249-0:605:2548":{"id":"a:2:32944:249-0:605:2548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:66:3985":{"id":"0:66:3985","crate_id":0,"name":"find_tool","span":{"filename":"src/windows/find_tools.rs","begin":[109,0],"end":[111,1]},"visibility":"public","docs":"Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:348:2904":{"id":"0:348:2904","crate_id":0,"name":"cargo_debug","span":{"filename":"src/lib.rs","begin":[1208,4],"end":[1211,5]},"visibility":"public","docs":"Define whether debug information should be emitted for cargo. Defaults to whether\nor not the environment variable `CC_ENABLE_DEBUG_OUTPUT` is set.\n\nIf enabled, the compiler will emit debug information when generating object files,\nsuch as the command invoked and the exit status.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_debug",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13801:2948":{"id":"2:13801:2948","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:5165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:5976","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:322:1763":{"id":"0:322:1763","crate_id":0,"name":"std","span":{"filename":"src/lib.rs","begin":[912,4],"end":[915,5]},"visibility":"public","docs":"Specify the C or C++ language standard version.\n\nThese values are common to modern versions of GCC, Clang and MSVC:\n- `c11` for ISO/IEC 9899:2011\n- `c17` for ISO/IEC 9899:2018\n- `c++14` for ISO/IEC 14882:2014\n- `c++17` for ISO/IEC 14882:2017\n- `c++20` for ISO/IEC 14882:2020\n\nOther values have less broad support, e.g. MSVC does not support `c++11`\n(`c++14` is the minimum), `c89` (omit the flag instead) or `c99`.\n\nFor compiling C++ code, you should also set `.cpp(true)`.\n\nThe default is that no standard flag is passed to the compiler, so the\nlanguage version will be the compiler's default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/modern.cpp\")\n    .cpp(true)\n    .std(\"c++17\")\n    .compile(\"modern\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["std",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:533:830":{"id":"0:533:830","crate_id":0,"name":"fmt","span":{"filename":"src/windows/find_tools.rs","begin":[152,9],"end":[152,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:321:2563":{"id":"0:321:2563","crate_id":0,"name":"ccbin","span":{"filename":"src/lib.rs","begin":[881,4],"end":[884,5]},"visibility":"public","docs":"Set CUDA host compiler.\n\nBy default, a `-ccbin` flag will be passed to NVCC to specify the\nunderlying host compiler. The value of `-ccbin` is the same as the\nchosen C++ compiler. This is not always desired, because NVCC might\nnot support that compiler. In this case, you can remove the `-ccbin`\nflag so that NVCC will choose the host compiler by itself.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ccbin",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42830:5068-0:673:150":{"id":"a:2:42830:5068-0:673:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42830:5068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:33002:4891-0:673:150":{"id":"a:2:33002:4891-0:673:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33002:4891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2793-0:605:2548":{"id":"b:2:2793-0:605:2548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2795:29251"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:648":{"id":"0:648","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[261,9],"end":[261,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:649:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:33002:4891-0:521:3999":{"id":"a:2:33002:4891-0:521:3999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33002:4891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13833:3352":{"id":"2:13833:3352","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within the\ngiven string slice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13452:5165","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::rmatches":"2:13835:37041"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44937:5997","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:329:2561":{"id":"0:329:2561","crate_id":0,"name":"cpp_set_stdlib","span":{"filename":"src/lib.rs","begin":[1052,4],"end":[1060,5]},"visibility":"public","docs":"Force the C++ compiler to use the specified standard library.\n\nSetting this option will automatically set `cpp_link_stdlib` to the same\nvalue.\n\nThe default value of this option is always `None`.\n\nThis option has no effect when compiling for a Visual Studio based\ntarget.\n\nThis option sets the `-stdlib` flag, which is only supported by some\ncompilers (clang, icc) but not by others (gcc). The library will not\ndetect which compiler is used, as such it is the responsibility of the\ncaller to ensure that this option is only used in conjunction with a\ncompiler which supports the `-stdlib` flag.\n\nA value of `None` indicates that no specific C++ standard library should\nbe used, otherwise `-stdlib` is added to the compile invocation.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .cpp_set_stdlib(\"c++\")\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_set_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13828:3182":{"id":"2:13828:3182","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13854:3440":{"id":"2:13854:3440","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:5165"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2822-0:605:2548":{"id":"b:2:2822-0:605:2548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2820:5310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2824:29252"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:365:3027":{"id":"0:365:3027","crate_id":0,"name":"try_compile_intermediates","span":{"filename":"src/lib.rs","begin":[1494,4],"end":[1501,5]},"visibility":"public","docs":"Run the compiler, generating intermediate files, but without linking\nthem into an archive file.\n\nThis will return a result instead of panicking; see `compile_intermediates()` for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43001:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7200:280","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5390:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3099-0:605:2548":{"id":"b:2:3099-0:605:2548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13861:3513":{"id":"2:13861:3513","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:5165"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:5976","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13876:29689":{"id":"2:13876:29689","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:41399"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:4707":{"id":"5:5727:4707","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374:2703":{"id":"0:374:2703","crate_id":0,"name":"try_get_compiler","span":{"filename":"src/lib.rs","begin":[1821,4],"end":[1896,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis will return a result instead of panicking; see\n[`get_compiler()`](Self::get_compiler) for the complete description.","links":{"Self::get_compiler":"0:373:2981"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43001:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2790-0:563:2535":{"id":"b:2:2790-0:563:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:2523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:344:2568":{"id":"0:344:2568","crate_id":0,"name":"ranlib","span":{"filename":"src/lib.rs","begin":[1172,4],"end":[1175,5]},"visibility":"public","docs":"Configures the tool used to index archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ranlib",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5506:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13786:29768":{"id":"2:13786:29768","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13787:29769"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32944:249-0:521:3999":{"id":"a:2:32944:249-0:521:3999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13820:37040":{"id":"2:13820:37040","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13452:5165","str::split":"2:13811:3283","prim@char":"1:12642:492","str::split_terminator":"2:13818:37039"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44801:6002","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:5976","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:340:526":{"id":"0:340:526","crate_id":0,"name":"compiler","span":{"filename":"src/lib.rs","begin":[1152,4],"end":[1155,5]},"visibility":"public","docs":"Configures the compiler to be used to produce output.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["compiler",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5506:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13774:2697":{"id":"2:13774:2697","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42735:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3099-0:521:3999":{"id":"b:2:3099-0:521:3999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3099-0:673:150":{"id":"b:2:3099-0:673:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13869:3310":{"id":"2:13869:3310","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13411:149","`FromStr`":"2:13410:4041"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13410:4041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13410:4041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13770:4309":{"id":"2:13770:4309","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12975:3726"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3322:261-0:563:2535":{"id":"a:2:3322:261-0:563:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13864:37048":{"id":"2:13864:37048","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:5165"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:305:2689":{"id":"0:305:2689","crate_id":0,"name":"is_flag_supported","span":{"filename":"src/lib.rs","begin":[614,4],"end":[620,5]},"visibility":"public","docs":"Run the compiler to test if it accepts the given flag.\n\nFor a convenience method for setting flags conditionally,\nsee `flag_if_supported()`.\n\nIt may return error if it's unable to run the compiler with a test file\n(e.g. the compiler is missing or a write to the `out_dir` failed).\n\nNote: Once computed, the result of this call is stored in the\n`known_flag_support` field. If `is_flag_supported(flag)`\nis called again, the result will be read from the hash table.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["flag",{"impl_trait":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"Result","id":"2:43001:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}},{"type":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl AsRef<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:537":{"id":"0:537","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[152,27],"end":[152,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2877:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:290:2638":{"id":"0:290:2638","crate_id":0,"name":"includes","span":{"filename":"src/lib.rs","begin":[470,4],"end":[479,5]},"visibility":"public","docs":"Add multiple directories to the `-I` include path.\n\n# Example\n\n```no_run\n# use std::path::Path;\n# let condition = true;\n#\nlet mut extra_dir = None;\nif condition {\n    extra_dir = Some(Path::new(\"/path/to\"));\n}\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .includes(extra_dir)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dirs",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8325:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:8325:177","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5506:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42829:5069-0:563:2535":{"id":"a:2:42829:5069-0:563:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42829:5069","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32944:249-0:673:150":{"id":"a:2:32944:249-0:673:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13872:29686":{"id":"2:13872:29686","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40629:17087","Self::is_ascii":"2:13871:29524"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40629:17087","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:2728":{"id":"2:13763:2728","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13825:29776":{"id":"2:13825:29776","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning at\nmost `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12642:492","str::splitn":"2:13823:29774","self::pattern":"2:13452:5165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44855:6000","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:5976","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13815:29772":{"id":"2:13815:29772","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13452:5165","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::split":"2:13811:3283"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44751:5999","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:5976","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:4417":{"id":"0:208:4417","crate_id":0,"name":"cflags_env","span":{"filename":"src/tool.rs","begin":[366,4],"end":[375,5]},"visibility":"public","docs":"Returns the compiler flags in format of CFLAGS environment variable.\nImportant here - this will not be CFLAGS from env, its internal gcc's flags to use as CFLAGS\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:2096:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2792:2523":{"id":"2:2792:2523","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3969:1871":{"id":"2:3969:1871","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40445:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:576:830":{"id":"0:576:830","crate_id":0,"name":"fmt","span":{"filename":"src/tool.rs","begin":[26,16],"end":[26,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:342:2567":{"id":"0:342:2567","crate_id":0,"name":"archiver","span":{"filename":"src/lib.rs","begin":[1162,4],"end":[1165,5]},"visibility":"public","docs":"Configures the tool used to assemble archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["archiver",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5506:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:4412":{"id":"0:207:4412","crate_id":0,"name":"cc_env","span":{"filename":"src/tool.rs","begin":[347,4],"end":[361,5]},"visibility":"public","docs":"Returns the compiler command in format of CC environment variable.\nOr empty string if CC env was not present\n\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:2096:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323:2576":{"id":"0:323:2576","crate_id":0,"name":"warnings_into_errors","span":{"filename":"src/lib.rs","begin":[936,4],"end":[939,5]},"visibility":"public","docs":"Set warnings into errors flag.\n\nDisabled by default.\n\nWarning: turning warnings into errors only make sense\nif you are a developer of the crate using cc-rs.\nSome warnings only appear on some architecture or\nspecific version of the compiler. Any user of this crate,\nor any other crate depending on it, could fail during\ncompile time.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings_into_errors(true)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings_into_errors",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13883:30951":{"id":"2:13883:30951","crate_id":2,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"2:13811:3283","`str::find`":"2:13804:2957"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"2:40308:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13858:3515":{"id":"2:13858:3515","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:5165"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:5976","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3105-0:605:2548":{"id":"b:2:3105-0:605:2548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:150","2:3109:1858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13789:4392":{"id":"2:13789:4392","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12642:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44703:5986","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:206:722":{"id":"0:206:722","crate_id":0,"name":"env","span":{"filename":"src/tool.rs","begin":[339,4],"end":[341,5]},"visibility":"public","docs":"Returns the set of environment variables needed for this compiler to\noperate.\n\nThis is typically only used for MSVC compilers currently.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"tuple":[{"resolved_path":{"name":"OsString","id":"1:2096:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"OsString","id":"1:2096:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3105-0:563:2535":{"id":"b:2:3105-0:563:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:150","2:3109:1858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32944:249-0:563:2535":{"id":"a:2:32944:249-0:563:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13840:37043":{"id":"2:13840:37043","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13452:5165","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::match_indices":"2:13838:37042"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44901:5996","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:5976","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13843:3459":{"id":"2:13843:3459","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3113:150":{"id":"2:3113:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32868:4744","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"5:786:3503":{"id":"5:786:3503","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13856:3777":{"id":"2:13856:3777","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:5165"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:573":{"id":"0:573","crate_id":0,"name":null,"span":{"filename":"src/tool.rs","begin":[26,9],"end":[26,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_docs)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:574:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[349,0],"end":[353,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"1:3097:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:280:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13780:29742":{"id":"2:13780:29742","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3357:5304-0:673:150":{"id":"a:2:3357:5304-0:673:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3357:5304","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:364:3026":{"id":"0:364:3026","crate_id":0,"name":"compile_intermediates","span":{"filename":"src/lib.rs","begin":[1483,4],"end":[1488,5]},"visibility":"public","docs":"Run the compiler, generating intermediate files, but without linking\nthem into an archive file.\n\nThis will return a list of compiled object files, in the same order\nas they were passed in as `file`/`files` methods.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:7200:280","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5390:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:1212":{"id":"0:287:1212","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[385,4],"end":[430,5]},"visibility":"public","docs":"Construct a new instance of a blank set of configuration.\n\nThis builder is finished with the [`compile`] function.\n\n[`compile`]: struct.Build.html#method.compile","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3105-0:521:3999":{"id":"b:2:3105-0:521:3999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:150","2:3109:1858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:522:4002":{"id":"0:522:4002","crate_id":0,"name":"Vs12","span":{"filename":"src/windows/find_tools.rs","begin":[159,4],"end":[159,8]},"visibility":"default","docs":"Visual Studio 12 (2013)","links":{},"attrs":["#[deprecated(note =\n\"Visual Studio 12 is no longer supported. cc will never return this value.\")]"],"deprecation":{"since":null,"note":"Visual Studio 12 is no longer supported. cc will never return this value."},"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:332:1797":{"id":"0:332:1797","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[1075,4],"end":[1078,5]},"visibility":"public","docs":"Configures the target this configuration will be compiling for.\n\nThis option is automatically scraped from the `TARGET` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .target(\"aarch64-linux-android\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3099-0:563:2535":{"id":"b:2:3099-0:563:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:311:2575":{"id":"0:311:2575","crate_id":0,"name":"static_flag","span":{"filename":"src/lib.rs","begin":[788,4],"end":[791,5]},"visibility":"public","docs":"Set the `-static` flag.\n\nWhen enabled on systems that support dynamic linking, this prevents\nlinking with the shared libraries.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .static_flag(true)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3322:261-0:521:3999":{"id":"a:2:3322:261-0:521:3999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:408:3487":{"id":"0:408:3487","crate_id":0,"name":"get_ranlib","span":{"filename":"src/lib.rs","begin":[3256,4],"end":[3261,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5782:5968"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5749:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:405:3478":{"id":"0:405:3478","crate_id":0,"name":"try_get_archiver","span":{"filename":"src/lib.rs","begin":[3215,4],"end":[3217,5]},"visibility":"public","docs":"Get the archiver that's in use for this configuration.\n\nThis will return a result instead of panicking;\nsee [`Self::get_archiver`] for the complete description.","links":{"`Self::get_archiver`":"0:404:3477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43001:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5749:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319:2355":{"id":"0:319:2355","crate_id":0,"name":"cuda","span":{"filename":"src/lib.rs","begin":[852,4],"end":[859,5]},"visibility":"public","docs":"Set CUDA C++ support.\n\nEnabling CUDA will invoke the CUDA compiler, NVCC. While NVCC accepts\nthe most common compiler flags, e.g. `-std=c++17`, some project-specific\nflags might have to be prefixed with \"-Xcompiler\" flag, for example as\n`.flag(\"-Xcompiler\").flag(\"-fpermissive\")`. See the documentation for\n`nvcc`, the CUDA compiler driver, at <https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/>\nfor more information.\n\nIf enabled, this also implicitly enables C++ support.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cuda",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3967-0:521:3999":{"id":"b:2:3967-0:521:3999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3969:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13878:29691":{"id":"2:13878:29691","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:41399"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13761":{"id":"2:13761","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13762:1027","2:13763:2728","2:13764:37032","2:13765:37033","2:13767:37034","2:13770:4309","2:13771:37035","2:13772:352","2:13773:29743","2:13774:2697","2:13776:29740","2:13778:29741","2:13780:29742","2:13782:37036","2:13783:37037","2:13784:3437","2:13785:29765","2:13786:29768","2:13787:29769","2:13789:4392","2:13790:8706","2:13791:5680","2:13792:3464","2:13793:3694","2:13794:33912","2:13795:37038","2:13796:34937","2:13797:2714","2:13799:2947","2:13801:2948","2:13804:2957","2:13807:3438","2:13811:3283","2:13813:4305","2:13815:29772","2:13818:37039","2:13820:37040","2:13823:29774","2:13825:29776","2:13828:3182","2:13830:29778","2:13833:3352","2:13835:37041","2:13838:37042","2:13840:37043","2:13843:3459","2:13845:37044","2:13847:4173","2:13849:37045","2:13850:37046","2:13851:37047","2:13854:3440","2:13856:3777","2:13858:3515","2:13861:3513","2:13864:37048","2:13866:37049","2:13869:3310","2:13871:29524","2:13872:29686","2:13873:29525","2:13874:29521","2:13875:29520","2:13876:29689","2:13877:29690","2:13878:29691","2:13879:37050","2:13881:11822","2:13882:37051","2:13883:30951"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5712:37760":{"id":"5:5712:37760","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:2541","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:299:2541","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:372:3099":{"id":"0:372:3099","crate_id":0,"name":"expand","span":{"filename":"src/lib.rs","begin":[1785,4],"end":[1790,5]},"visibility":"public","docs":"Run the compiler, returning the macro-expanded version of the input files.\n\nThis is only relevant for C and C++ files.\n\n# Panics\nPanics if more than one file is present in the config, or if compiler\npath has an invalid file name.\n\n# Example\n```no_run\nlet out = cc::Build::new().file(\"src/foo.c\").expand();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:353:2581":{"id":"0:353:2581","crate_id":0,"name":"emit_rerun_if_env_changed","span":{"filename":"src/lib.rs","begin":[1268,4],"end":[1271,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo to detect environment\nchanges that should trigger a rebuild.\n\nThis has no effect if the `cargo_metadata` option is `false`.\n\nThis option defaults to `true`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["emit_rerun_if_env_changed",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:530:4010":{"id":"0:530:4010","crate_id":0,"name":"Vs17","span":{"filename":"src/windows/find_tools.rs","begin":[167,4],"end":[167,8]},"visibility":"default","docs":"Visual Studio 17 (2022)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:3322:261-0:673:150":{"id":"a:2:3322:261-0:673:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:649:496":{"id":"0:649:496","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[261,9],"end":[261,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3095-0:521:3999":{"id":"b:2:3095-0:521:3999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3098:2606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2793-0:673:150":{"id":"b:2:2793-0:673:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2795:29251"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:521:3999":{"id":"0:521:3999","crate_id":0,"name":"VsVers","span":{"filename":"src/windows/find_tools.rs","begin":[154,0],"end":[168,1]},"visibility":"public","docs":"A version of Visual Studio","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:522:4002","0:524:4004","0:526:4006","0:528:4008","0:530:4010"],"impls":["a:2:32944:249-0:521:3999","a:2:3322:261-0:521:3999","a:2:3357:5304-0:521:3999","a:2:33002:4891-0:521:3999","a:2:42829:5069-0:521:3999","a:2:42830:5068-0:521:3999","b:2:2790-0:521:3999","b:2:2793-0:521:3999","b:2:2822-0:521:3999","b:2:2825-0:521:3999","b:2:3095-0:521:3999","b:2:3099-0:521:3999","b:2:3105-0:521:3999","b:2:3110-0:521:3999","b:2:3967-0:521:3999","b:5:782-0:521:3999","0:532","0:534","0:535","0:537","0:539","0:540"]}}},"0:209:4393":{"id":"0:209:4393","crate_id":0,"name":"is_like_gnu","span":{"filename":"src/tool.rs","begin":[378,4],"end":[380,5]},"visibility":"public","docs":"Whether the tool is GNU Compiler Collection-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:358:2941":{"id":"0:358:2941","crate_id":0,"name":"try_compile","span":{"filename":"src/lib.rs","begin":[1295,4],"end":[1433,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThis will return a result instead of panicking; see [`Self::compile()`] for\nthe complete description.","links":{"`Self::compile()`":"0:363:3020"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43001:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2790-0:605:2548":{"id":"b:2:2790-0:605:2548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:2523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13773:29743":{"id":"2:13773:29743","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12661:1902"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:2712":{"id":"0:202:2712","crate_id":0,"name":"to_command","span":{"filename":"src/tool.rs","begin":[297,4],"end":[319,5]},"visibility":"public","docs":"Converts this compiler into a `Command` that's ready to be run.\n\nThis is useful for when the compiler needs to be executed and the\ncommand returned will already have the initial arguments and environment\nvariables configured.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5749:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:483":{"id":"0:483","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[4060,0],"end":[4064,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3147:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:484:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:351:1343":{"id":"0:351:1343","crate_id":0,"name":"pic","span":{"filename":"src/lib.rs","begin":[1242,4],"end":[1245,5]},"visibility":"public","docs":"Configures whether the compiler will emit position independent code.\n\nThis option defaults to `false` for `windows-gnu` and bare metal targets and\nto `true` for all other targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pic",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13776:29740":{"id":"2:13776:29740","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42735:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13847:4173":{"id":"2:13847:4173","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3098:2606":{"id":"2:3098:2606","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3072:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3110-0:605:2548":{"id":"b:2:3110-0:605:2548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3113:150","2:3114:1856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42829:5069-0:673:150":{"id":"a:2:42829:5069-0:673:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42829:5069","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:280:860":{"id":"0:280:860","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[350,4],"end":[352,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"io::Error","id":"1:3097:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:318:2559":{"id":"0:318:2559","crate_id":0,"name":"cpp","span":{"filename":"src/lib.rs","begin":[837,4],"end":[840,5]},"visibility":"public","docs":"Set C++ support.\n\nThe other `cpp_*` options will only become active if this is set to\n`true`.\n\nThe name of the C++ standard library to link is decided by:\n1. If [`cpp_link_stdlib`](Build::cpp_link_stdlib) is set, use its value.\n2. Else if the `CXXSTDLIB` environment variable is set, use its value.\n3. Else the default is `libc++` for OS X and BSDs, `libc++_shared` for Android,\n   `None` for MSVC and `libstdc++` for anything else.","links":{"Build::cpp_link_stdlib":"0:326:2560"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13877:29690":{"id":"2:13877:29690","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:41399"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:536:725":{"id":"0:536:725","crate_id":0,"name":"eq","span":{"filename":"src/windows/find_tools.rs","begin":[152,16],"end":[152,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:2708":{"id":"0:210:2708","crate_id":0,"name":"is_like_clang","span":{"filename":"src/tool.rs","begin":[383,4],"end":[385,5]},"visibility":"public","docs":"Whether the tool is Clang-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:315:2558":{"id":"0:315:2558","crate_id":0,"name":"files","span":{"filename":"src/lib.rs","begin":[811,4],"end":[820,5]},"visibility":"public","docs":"Add files which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8325:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:8325:177","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5506:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3108:150":{"id":"2:3108:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:5:782-0:673:150":{"id":"b:5:782-0:673:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:778:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:784:3081","5:785:2950","5:786:3503"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13811:3283":{"id":"2:13811:3283","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13452:5165","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::split_whitespace":"2:13792:3464","str::rsplit":"2:13815:29772"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44733:4684","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3105-0:673:150":{"id":"b:2:3105-0:673:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:150","2:3109:1858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42830:5068-0:605:2548":{"id":"a:2:42830:5068-0:605:2548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42830:5068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:528:4008":{"id":"0:528:4008","crate_id":0,"name":"Vs16","span":{"filename":"src/windows/find_tools.rs","begin":[165,4],"end":[165,8]},"visibility":"default","docs":"Visual Studio 16 (2019)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:3095-0:673:150":{"id":"b:2:3095-0:673:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3098:2606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5728:29523":{"id":"5:5728:29523","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13874:29521"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13767:37034":{"id":"2:13767:37034","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13765:37033"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336:630":{"id":"0:336:630","crate_id":0,"name":"debug","span":{"filename":"src/lib.rs","begin":[1121,4],"end":[1124,5]},"visibility":"public","docs":"Configures whether the compiler will emit debug information when\ngenerating object files.\n\nThis option is automatically scraped from the `DEBUG` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["debug",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13804:2957":{"id":"2:13804:2957","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42735:203","prim@char":"1:12642:492","self::pattern":"2:13452:5165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2822-0:521:3999":{"id":"b:2:2822-0:521:3999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2820:5310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2824:29252"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:204:1337":{"id":"0:204:1337","crate_id":0,"name":"path","span":{"filename":"src/tool.rs","begin":[325,4],"end":[327,5]},"visibility":"public","docs":"Returns the path for this compiler.\n\nNote that this may not be a path to a file on the filesystem, e.g. \"cc\",\nbut rather something which will be resolved when a process is spawned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5506:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:563:2535":{"id":"0:563:2535","crate_id":0,"name":"Tool","span":{"filename":"src/tool.rs","begin":[28,0],"end":[38,1]},"visibility":"public","docs":"Configuration used to represent an invocation of a C compiler.\n\nThis can be used to figure out what compiler is in use, what the arguments\nto it are, and what the environment variables look like for the compiler.\nThis can be used to further configure other build systems (e.g. forward\nalong CC and/or CFLAGS) or the `to_command` method can be used to run the\ncompiler itself.","links":{},"attrs":["#[allow(missing_docs)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:184","a:2:32944:249-0:563:2535","a:2:3322:261-0:563:2535","a:2:3357:5304-0:563:2535","a:2:33002:4891-0:563:2535","a:2:42829:5069-0:563:2535","a:2:42830:5068-0:563:2535","b:2:2790-0:563:2535","b:2:2793-0:563:2535","b:2:2822-0:563:2535","b:2:3095-0:563:2535","b:2:3099-0:563:2535","b:2:3105-0:563:2535","b:2:3110-0:563:2535","b:2:3967-0:563:2535","b:5:782-0:563:2535","0:573","0:575"]}}},"0:282:830":{"id":"0:282:830","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[356,4],"end":[358,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:335:2869":{"id":"0:335:2869","crate_id":0,"name":"opt_level_str","span":{"filename":"src/lib.rs","begin":[1111,4],"end":[1114,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:337:2566":{"id":"0:337:2566","crate_id":0,"name":"force_frame_pointer","span":{"filename":"src/lib.rs","begin":[1132,4],"end":[1135,5]},"visibility":"public","docs":"Configures whether the compiler will emit instructions to store\nframe pointers during codegen.\n\nThis option is automatically enabled when debug information is emitted.\nOtherwise the target platform compiler's default will be used.\nYou can use this option to force a specific setting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["force",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:651:830":{"id":"0:651:830","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[261,16],"end":[261,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:605:2548":{"id":"0:605:2548","crate_id":0,"name":"Build","span":{"filename":"src/lib.rs","begin":[262,0],"end":[305,1]},"visibility":"public","docs":"A builder for compilation of a native library.\n\nA `Build` is the main type of the `cc` crate and is used to control all the\nvarious configuration options and such of a compile. You'll find more\ndocumentation on each method itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:286","a:2:32944:249-0:605:2548","a:2:3322:261-0:605:2548","a:2:3357:5304-0:605:2548","a:2:33002:4891-0:605:2548","a:2:42829:5069-0:605:2548","a:2:42830:5068-0:605:2548","b:2:2790-0:605:2548","b:2:2793-0:605:2548","b:2:2822-0:605:2548","b:2:3095-0:605:2548","b:2:3099-0:605:2548","b:2:3105-0:605:2548","b:2:3110-0:605:2548","b:2:3967-0:605:2548","b:5:782-0:605:2548","0:648","0:650","0:483"]}}},"2:13784:3437":{"id":"2:13784:3437","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13786:29768","str::split_at_mut":"2:13785:29765"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3357:5304-0:605:2548":{"id":"a:2:3357:5304-0:605:2548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3357:5304","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:349:2569":{"id":"0:349:2569","crate_id":0,"name":"cargo_output","span":{"filename":"src/lib.rs","begin":[1218,4],"end":[1225,5]},"visibility":"public","docs":"Define whether compiler output (to stdout) should be emitted. Defaults to `true`\n(forward compiler stdout to this process' stdout)\n\nSome compilers emit errors to stdout, so if you *really* need stdout to be clean\nyou should also set this to `false`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_output",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3967-0:563:2535":{"id":"b:2:3967-0:563:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3969:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3110-0:521:3999":{"id":"b:2:3110-0:521:3999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3113:150","2:3114:1856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5711":{"id":"5:5711","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5712:37760","5:5713:3500","5:5715:37761","5:5717:3830","5:5725:37762","5:5726:37763","5:5727:4707","5:5728:29523","5:5729:29522"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:784:3081":{"id":"5:784:3081","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:13881:11822":{"id":"2:13881:11822","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5069:11822"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:45041:5991","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:534":{"id":"0:534","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[152,16],"end":[152,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32946:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:677:496":{"id":"0:677:496","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[332,9],"end":[332,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13823:29774":{"id":"2:13823:29774","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby a pattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:5165","str::rsplitn":"2:13825:29776"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44837:6001","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3110-0:563:2535":{"id":"b:2:3110-0:563:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3113:150","2:3114:1856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42829:5069-0:605:2548":{"id":"a:2:42829:5069-0:605:2548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42829:5069","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:526:4006":{"id":"0:526:4006","crate_id":0,"name":"Vs15","span":{"filename":"src/windows/find_tools.rs","begin":[163,4],"end":[163,8]},"visibility":"default","docs":"Visual Studio 15 (2017)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"5:5717:3830":{"id":"5:5717:3830","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:2551":{"id":"0:297:2551","crate_id":0,"name":"objects","span":{"filename":"src/lib.rs","begin":[505,4],"end":[514,5]},"visibility":"public","docs":"Add arbitrary object files to link in","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["objs",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8325:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:8325:177","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5506:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:524:4004":{"id":"0:524:4004","crate_id":0,"name":"Vs14","span":{"filename":"src/windows/find_tools.rs","begin":[161,4],"end":[161,8]},"visibility":"default","docs":"Visual Studio 14 (2015)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2790-0:673:150":{"id":"b:2:2790-0:673:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:2523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:94-0:26:2531":{"id":"0:94-0:26:2531","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[233,0],"end":[233,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"windows::find_tools","name":"windows_registry","id":"0:26:2531","glob":false}}},"0:541:496":{"id":"0:541:496","crate_id":0,"name":"clone","span":{"filename":"src/windows/find_tools.rs","begin":[152,37],"end":[152,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:333:906":{"id":"0:333:906","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[1093,4],"end":[1096,5]},"visibility":"public","docs":"Configures the host assumed by this configuration.\n\nThis option is automatically scraped from the `HOST` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .host(\"arm-linux-gnueabihf\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["host",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:782-0:605:2548":{"id":"b:5:782-0:605:2548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:778:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:784:3081","5:785:2950","5:786:3503"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5964:1831":{"id":"5:5964:1831","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13765:37033":{"id":"2:13765:37033","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3110-0:673:150":{"id":"b:2:3110-0:673:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3113:150","2:3114:1856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13813:4305":{"id":"2:13813:4305","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nDiffers from the iterator produced by `split` in that `split_inclusive`\nleaves the matched part as the terminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:5165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13239:5980","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725:37762":{"id":"5:5725:37762","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:317:2769":{"id":"0:317:2769","crate_id":0,"name":"get_files","span":{"filename":"src/lib.rs","begin":[823,4],"end":[825,5]},"visibility":"public","docs":"Get the files which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"impl_trait":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8498:190","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5506:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3357:5304-0:563:2535":{"id":"a:2:3357:5304-0:563:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3357:5304","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:373:2981":{"id":"0:373:2981","crate_id":0,"name":"get_compiler","span":{"filename":"src/lib.rs","begin":[1810,4],"end":[1815,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis function will return a `Tool` which represents the culmination\nof this configuration at a snapshot in time. The returned compiler can\nbe inspected (e.g. the path, arguments, environment) to forward along to\nother tools, or the `to_command` method can be used to invoke the\ncompiler itself.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/tool.rs","begin":[40,0],"end":[402,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:202:2712","0:204:1337","0:205:347","0:206:722","0:207:4412","0:208:4417","0:209:4393","0:210:2708","0:212:2720"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:33002:4891-0:605:2548":{"id":"a:2:33002:4891-0:605:2548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33002:4891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:540":{"id":"0:540","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[152,37],"end":[152,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:541:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:64:2957":{"id":"0:64:2957","crate_id":0,"name":"find","span":{"filename":"src/windows/find_tools.rs","begin":[102,0],"end":[104,1]},"visibility":"public","docs":"Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.\n\nThe `target` argument is the target that the tool should work for (e.g.\ncompile or link for) and the `tool` argument is the tool to find (e.g.\n`cl.exe` or `link.exe`).\n\nThis function will return `None` if the tool could not be found, or it will\nreturn `Some(cmd)` which represents a command that's ready to execute the\ntool with the appropriate environment variables set.\n\nNote that this function always returns `None` for non-MSVC targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::process::Command","id":"1:5749:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310:2574":{"id":"0:310:2574","crate_id":0,"name":"shared_flag","span":{"filename":"src/lib.rs","begin":[769,4],"end":[772,5]},"visibility":"public","docs":"Set the `-shared` flag.\n\nWhen enabled, the compiler will produce a shared object which can\nthen be linked with other objects to form an executable.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["shared_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:292:2643":{"id":"0:292:2643","crate_id":0,"name":"define","span":{"filename":"src/lib.rs","begin":[492,4],"end":[496,5]},"visibility":"public","docs":"Specify a `-D` variable with an optional value.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .define(\"FOO\", \"BAR\")\n    .define(\"BAZ\", None)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["val",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:673:150":{"id":"0:673:150","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[333,0],"end":[338,1]},"visibility":"public","docs":"Represents an internal error that occurred, with an explanation.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32944:249-0:673:150","a:2:3322:261-0:673:150","a:2:3357:5304-0:673:150","a:2:33002:4891-0:673:150","a:2:42829:5069-0:673:150","a:2:42830:5068-0:673:150","b:2:2790-0:673:150","b:2:2793-0:673:150","b:2:2822-0:673:150","b:2:3095-0:673:150","b:2:3099-0:673:150","b:2:3105-0:673:150","b:2:3110-0:673:150","b:2:3967-0:673:150","b:5:782-0:673:150","b:5:5962-0:673:150","0:676","0:678","0:279","0:281","0:283"]}}},"2:2827:29252":{"id":"2:2827:29252","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13785:29765":{"id":"2:13785:29765","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13784:3437","str::split_at_mut_checked":"2:13787:29769"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13871:29524":{"id":"2:13871:29524","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:679:830":{"id":"0:679:830","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[332,16],"end":[332,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13850:37046":{"id":"2:13850:37046","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3967-0:605:2548":{"id":"b:2:3967-0:605:2548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3969:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13879:37050":{"id":"2:13879:37050","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5068:37050"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:45032:5990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2790-0:521:3999":{"id":"b:2:2790-0:521:3999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:2523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2822-0:563:2535":{"id":"b:2:2822-0:563:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2820:5310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2824:29252"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2825-0:521:3999":{"id":"b:2:2825-0:521:3999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3317:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2820:5310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2827:29252"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3114:1856":{"id":"2:3114:1856","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13790:8706":{"id":"2:13790:8706","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12642:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44709:5985","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:574:496":{"id":"0:574:496","crate_id":0,"name":"clone","span":{"filename":"src/tool.rs","begin":[26,9],"end":[26,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2531":{"id":"0:26:2531","crate_id":0,"name":"find_tools","span":{"filename":"src/windows/find_tools.rs","begin":[11,0],"end":[1184,1]},"visibility":"public","docs":"A helper module to looking for windows-specific tools:\n1. On Windows host, probe the Windows Registry if needed;\n2. On non-Windows host, check specified environment variables.","links":{},"attrs":["#![allow(clippy::upper_case_acronyms)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:64:2957","0:66:3985","0:521:3999","0:70:4014"],"is_stripped":false}}},"0:326:2560":{"id":"0:326:2560","crate_id":0,"name":"cpp_link_stdlib","span":{"filename":"src/lib.rs","begin":[1011,4],"end":[1017,5]},"visibility":"public","docs":"Set the standard library to link against when compiling with C++\nsupport.\n\nIf the `CXXSTDLIB` environment variable is set, its value will\noverride the default value, but not the value explicitly set by calling\nthis function.\n\nA value of `None` indicates that no automatic linking should happen,\notherwise cargo will link against the specified library.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n- `c++_shared` or `c++_static` for Android\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .cpp_link_stdlib(\"stdc++\")\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_link_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:650":{"id":"0:650","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[261,16],"end":[261,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:651:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:302:2664":{"id":"0:302:2664","crate_id":0,"name":"ar_flag","span":{"filename":"src/lib.rs","begin":[560,4],"end":[563,5]},"visibility":"public","docs":"Add a flag to the invocation of the ar\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .file(\"src/bar.c\")\n    .ar_flag(\"/NODEFAULTLIB:libc.dll\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"impl_trait":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"impl AsRef<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324:2519":{"id":"0:324:2519","crate_id":0,"name":"warnings","span":{"filename":"src/lib.rs","begin":[957,4],"end":[961,5]},"visibility":"public","docs":"Set warnings flags.\n\nAdds some flags:\n- \"-Wall\" for MSVC.\n- \"-Wall\", \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:678":{"id":"0:678","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[332,16],"end":[332,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:679:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13792:3464":{"id":"2:13792:3464","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13793:3694"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:45007:5981","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13772:352":{"id":"2:13772:352","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13773:29743","`u8`":"1:12661:1902"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13793:3694":{"id":"2:13793:3694","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13792:3464"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:45016:5979","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13874:29521":{"id":"2:13874:29521","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3967-0:673:150":{"id":"b:2:3967-0:673:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3969:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:312:2557":{"id":"0:312:2557","crate_id":0,"name":"no_default_flags","span":{"filename":"src/lib.rs","begin":[799,4],"end":[802,5]},"visibility":"public","docs":"Disables the generation of default compiler flags. The default compiler\nflags may cause conflicts in some cross compiling scenarios.\n\nSetting the `CRATE_CC_NO_DEFAULTS` environment variable has the same\neffect as setting this to `true`. The presence of the environment\nvariable and the value of `no_default_flags` will be OR'd together.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["no_default_flags",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3322:261-0:605:2548":{"id":"a:2:3322:261-0:605:2548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:325:2577":{"id":"0:325:2577","crate_id":0,"name":"extra_warnings","span":{"filename":"src/lib.rs","begin":[980,4],"end":[983,5]},"visibility":"public","docs":"Set extra warnings flags.\n\nAdds some flags:\n- nothing for MSVC.\n- \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\n// Disables -Wextra, -Wall remains enabled:\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .extra_warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300:2658":{"id":"0:300:2658","crate_id":0,"name":"remove_flag","span":{"filename":"src/lib.rs","begin":[544,4],"end":[547,5]},"visibility":"public","docs":"Removes a compiler flag that was added by [`Build::flag`].\n\nWill not remove flags added by other means (default flags,\nflags from env, and so on).\n\n# Example\n```\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"unwanted_flag\")\n    .remove_flag(\"unwanted_flag\");\n```","links":{"`Build::flag`":"0:299:2542"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13778:29741":{"id":"2:13778:29741","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:295:2647":{"id":"0:295:2647","crate_id":0,"name":"object","span":{"filename":"src/lib.rs","begin":[499,4],"end":[502,5]},"visibility":"public","docs":"Add an arbitrary object file to link in","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["obj",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5506:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:4014":{"id":"0:70:4014","crate_id":0,"name":"find_vs_version","span":{"filename":"src/windows/find_tools.rs","begin":[175,0],"end":[218,1]},"visibility":"public","docs":"Find the most recent installed version of Visual Studio\n\nThis is used by the cmake crate to figure out the correct\ngenerator.","links":{},"attrs":["#[allow(clippy::disallowed_methods)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:43001:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:782-0:563:2535":{"id":"b:5:782-0:563:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:778:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:784:3081","5:785:2950","5:786:3503"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13794:33912":{"id":"2:13794:33912","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44987:4680","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:29522":{"id":"5:5729:29522","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13875:29520"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:532":{"id":"0:532","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[152,9],"end":[152,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:533:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13782:37036":{"id":"2:13782:37036","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12648:1771","str::slice_mut_unchecked":"2:13783:37037","crate::ops::Index":"2:40276:4818"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:676":{"id":"0:676","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[332,9],"end":[332,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:677:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:782-0:521:3999":{"id":"b:5:782-0:521:3999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:778:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:784:3081","5:785:2950","5:786:3503"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13882:37051":{"id":"2:13882:37051","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5066:37051"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:45050:5992","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:785:2950":{"id":"5:785:2950","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:409:3488":{"id":"0:409:3488","crate_id":0,"name":"try_get_ranlib","span":{"filename":"src/lib.rs","begin":[3267,4],"end":[3273,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nThis will return a result instead of panicking;\nsee [`Self::get_ranlib`] for the complete description.","links":{"`Self::get_ranlib`":"0:408:3487"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43001:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5749:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2824:29252":{"id":"2:2824:29252","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:539":{"id":"0:539","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[152,31],"end":[152,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3317:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:535":{"id":"0:535","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[152,16],"end":[152,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2872:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:536:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:338:2564":{"id":"0:338:2564","crate_id":0,"name":"out_dir","span":{"filename":"src/lib.rs","begin":[1142,4],"end":[1145,5]},"visibility":"public","docs":"Configures the output directory where all object files and static\nlibraries will be located.\n\nThis option is automatically scraped from the `OUT_DIR` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["out_dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5506:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:354:2573":{"id":"0:354:2573","crate_id":0,"name":"static_crt","span":{"filename":"src/lib.rs","begin":[1276,4],"end":[1279,5]},"visibility":"public","docs":"Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.\n\nThis option defaults to `false`, and affect only msvc targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_crt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:3500":{"id":"5:5713:3500","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5962-0:673:150":{"id":"b:5:5962-0:673:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10660:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5960:265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5964:1831"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13849:37045":{"id":"2:13849:37045","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13830:29778":{"id":"2:13830:29778","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:5976","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13795:37038":{"id":"2:13795:37038","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44997:5994","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:303:2671":{"id":"0:303:2671","crate_id":0,"name":"asm_flag","span":{"filename":"src/lib.rs","begin":[579,4],"end":[582,5]},"visibility":"public","docs":"Add a flag that will only be used with assembly files.\n\nThe flag will be applied to input files with either a `.s` or\n`.asm` extension (case insensitive).\n\n# Example\n\n```no_run\ncc::Build::new()\n    .asm_flag(\"-Wa,-defsym,abc=1\")\n    .file(\"src/foo.S\")  // The asm flag will be applied here\n    .file(\"src/bar.c\")  // The asm flag will not be applied here\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"impl_trait":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"impl AsRef<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:313:819":{"id":"0:313:819","crate_id":0,"name":"file","span":{"filename":"src/lib.rs","begin":[805,4],"end":[808,5]},"visibility":"public","docs":"Add a file which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5506:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:347:2899":{"id":"0:347:2899","crate_id":0,"name":"cargo_warnings","span":{"filename":"src/lib.rs","begin":[1198,4],"end":[1201,5]},"visibility":"public","docs":"Define whether compile warnings should be emitted for cargo. Defaults to\n`true`.\n\nIf disabled, compiler messages will not be printed.\nIssues unrelated to the compilation will always produce cargo warnings regardless of this setting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:308:2746":{"id":"0:308:2746","crate_id":0,"name":"try_flags_from_environment","span":{"filename":"src/lib.rs","begin":[746,4],"end":[754,5]},"visibility":"public","docs":"Add flags from the specified environment variable.\n\nNormally the `cc` crate will consult with the standard set of environment\nvariables (such as `CFLAGS` and `CXXFLAGS`) to construct the compiler invocation. Use of\nthis method provides additional levers for the end user to use when configuring the build\nprocess.\n\nJust like the standard variables, this method will search for an environment variable with\nappropriate target prefixes, when appropriate.\n\n# Examples\n\nThis method is particularly beneficial in introducing the ability to specify crate-specific\nflags.\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .try_flags_from_environment(concat!(env!(\"CARGO_PKG_NAME\"), \"_CFLAGS\"))\n    .expect(\"the environment variable must be specified and UTF-8\")\n    .compile(\"foo\");\n```\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["environ_key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43001:238","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3095-0:605:2548":{"id":"b:2:3095-0:605:2548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3098:2606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:3399":{"id":"0:0:3399","crate_id":0,"name":"cc","span":{"filename":"src/lib.rs","begin":[1,0],"end":[4274,1]},"visibility":"public","docs":"A library for [Cargo build scripts](https://doc.rust-lang.org/cargo/reference/build-scripts.html)\nto compile a set of C/C++/assembly/CUDA files into a static archive for Cargo\nto link into the crate being built. This crate does not compile code itself;\nit calls out to the default compiler for the platform. This crate will\nautomatically detect situations such as cross compilation and\n[various environment variables](#external-configuration-via-environment-variables) and will build code appropriately.\n\n# Example\n\nFirst, you'll want to both add a build script for your crate (`build.rs`) and\nalso add this crate to your `Cargo.toml` via:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n```\n\nNext up, you'll want to write a build script like so:\n\n```rust,no_run\n// build.rs\ncc::Build::new()\n    .file(\"foo.c\")\n    .file(\"bar.c\")\n    .compile(\"foo\");\n```\n\nAnd that's it! Running `cargo build` should take care of the rest and your Rust\napplication will now have the C files `foo.c` and `bar.c` compiled into a file\nnamed `libfoo.a`. If the C files contain\n\n```c\nvoid foo_function(void) { ... }\n```\n\nand\n\n```c\nint32_t bar_function(int32_t x) { ... }\n```\n\nyou can call them from Rust by declaring them in\nyour Rust code like so:\n\n```rust,no_run\nextern \"C\" {\n    fn foo_function();\n    fn bar_function(x: i32) -> i32;\n}\n\npub fn call() {\n    unsafe {\n        foo_function();\n        bar_function(42);\n    }\n}\n\nfn main() {\n    call();\n}\n```\n\nSee [the Rustonomicon](https://doc.rust-lang.org/nomicon/ffi.html) for more details.\n\n# External configuration via environment variables\n\nTo control the programs and flags used for building, the builder can set a\nnumber of different environment variables.\n\n* `CFLAGS` - a series of space separated flags passed to compilers. Note that\n  individual flags cannot currently contain spaces, so doing\n  something like: `-L=foo\\ bar` is not possible.\n* `CC` - the actual C compiler used. Note that this is used as an exact\n  executable name, so (for example) no extra flags can be passed inside\n  this variable, and the builder must ensure that there aren't any\n  trailing spaces. This compiler must understand the `-c` flag. For\n  certain `TARGET`s, it also is assumed to know about other flags (most\n  common is `-fPIC`).\n* `AR` - the `ar` (archiver) executable to use to build the static library.\n* `CRATE_CC_NO_DEFAULTS` - the default compiler flags may cause conflicts in\n  some cross compiling scenarios. Setting this variable\n  will disable the generation of default compiler\n  flags.\n* `CC_ENABLE_DEBUG_OUTPUT` - if set, compiler command invocations and exit codes will\n  be logged to stdout. This is useful for debugging build script issues, but can be\n  overly verbose for normal use.\n* `CXX...` - see [C++ Support](#c-support).\n\nFurthermore, projects using this crate may specify custom environment variables\nto be inspected, for example via the `Build::try_flags_from_environment`\nfunction. Consult the project’s own documentation or its use of the `cc` crate\nfor any additional variables it may use.\n\nEach of these variables can also be supplied with certain prefixes and suffixes,\nin the following prioritized order:\n\n  1. `<var>_<target>` - for example, `CC_x86_64-unknown-linux-gnu`\n  2. `<var>_<target_with_underscores>` - for example, `CC_x86_64_unknown_linux_gnu`\n  3. `<build-kind>_<var>` - for example, `HOST_CC` or `TARGET_CFLAGS`\n  4. `<var>` - a plain `CC`, `AR` as above.\n\nIf none of these variables exist, cc-rs uses built-in defaults.\n\nIn addition to the above optional environment variables, `cc-rs` has some\nfunctions with hard requirements on some variables supplied by [cargo's\nbuild-script driver][cargo] that it has the `TARGET`, `OUT_DIR`, `OPT_LEVEL`,\nand `HOST` variables.\n\n[cargo]: https://doc.rust-lang.org/cargo/reference/build-scripts.html#inputs-to-the-build-script\n\n# Optional features\n\n## Parallel\n\nCurrently cc-rs supports parallel compilation (think `make -jN`) but this\nfeature is turned off by default. To enable cc-rs to compile C/C++ in parallel,\nyou can change your dependency to:\n\n```toml\n[build-dependencies]\ncc = { version = \"1.0\", features = [\"parallel\"] }\n```\n\nBy default cc-rs will limit parallelism to `$NUM_JOBS`, or if not present it\nwill limit it to the number of cpus on the machine. If you are using cargo,\nuse `-jN` option of `build`, `test` and `run` commands as `$NUM_JOBS`\nis supplied by cargo.\n\n# Compile-time Requirements\n\nTo work properly this crate needs access to a C compiler when the build script\nis being run. This crate does not ship a C compiler with it. The compiler\nrequired varies per platform, but there are three broad categories:\n\n* Unix platforms require `cc` to be the C compiler. This can be found by\n  installing cc/clang on Linux distributions and Xcode on macOS, for example.\n* Windows platforms targeting MSVC (e.g. your target triple ends in `-msvc`)\n  require Visual Studio to be installed. `cc-rs` attempts to locate it, and\n  if it fails, `cl.exe` is expected to be available in `PATH`. This can be\n  set up by running the appropriate developer tools shell.\n* Windows platforms targeting MinGW (e.g. your target triple ends in `-gnu`)\n  require `cc` to be available in `PATH`. We recommend the\n  [MinGW-w64](https://www.mingw-w64.org/) distribution, which is using the\n  [Win-builds](http://win-builds.org/) installation system.\n  You may also acquire it via\n  [MSYS2](https://www.msys2.org/), as explained [here][msys2-help].  Make sure\n  to install the appropriate architecture corresponding to your installation of\n  rustc. GCC from older [MinGW](http://www.mingw.org/) project is compatible\n  only with 32-bit rust compiler.\n\n[msys2-help]: https://github.com/rust-lang/rust#building-on-windows\n\n# C++ support\n\n`cc-rs` supports C++ libraries compilation by using the `cpp` method on\n`Build`:\n\n```rust,no_run\ncc::Build::new()\n    .cpp(true) // Switch to C++ library compilation.\n    .file(\"foo.cpp\")\n    .compile(\"foo\");\n```\n\nFor C++ libraries, the `CXX` and `CXXFLAGS` environment variables are used instead of `CC` and `CFLAGS`.\n\nThe C++ standard library may be linked to the crate target. By default it's `libc++` for macOS, FreeBSD, and OpenBSD, `libc++_shared` for Android, nothing for MSVC, and `libstdc++` for anything else. It can be changed in one of two ways:\n\n1. by using the `cpp_link_stdlib` method on `Build`:\n```rust,no_run\ncc::Build::new()\n    .cpp(true)\n    .file(\"foo.cpp\")\n    .cpp_link_stdlib(\"stdc++\") // use libstdc++\n    .compile(\"foo\");\n```\n2. by setting the `CXXSTDLIB` environment variable.\n\nIn particular, for Android you may want to [use `c++_static` if you have at most one shared library](https://developer.android.com/ndk/guides/cpp-support).\n\nRemember that C++ does name mangling so `extern \"C\"` might be required to enable Rust linker to find your functions.\n\n# CUDA C++ support\n\n`cc-rs` also supports compiling CUDA C++ libraries by using the `cuda` method\non `Build`:\n\n```rust,no_run\ncc::Build::new()\n    // Switch to CUDA C++ library compilation using NVCC.\n    .cuda(true)\n    .cudart(\"static\")\n    // Generate code for Maxwell (GTX 970, 980, 980 Ti, Titan X).\n    .flag(\"-gencode\").flag(\"arch=compute_52,code=sm_52\")\n    // Generate code for Maxwell (Jetson TX1).\n    .flag(\"-gencode\").flag(\"arch=compute_53,code=sm_53\")\n    // Generate code for Pascal (GTX 1070, 1080, 1080 Ti, Titan Xp).\n    .flag(\"-gencode\").flag(\"arch=compute_61,code=sm_61\")\n    // Generate code for Pascal (Tesla P100).\n    .flag(\"-gencode\").flag(\"arch=compute_60,code=sm_60\")\n    // Generate code for Pascal (Jetson TX2).\n    .flag(\"-gencode\").flag(\"arch=compute_62,code=sm_62\")\n    // Generate code in parallel\n    .flag(\"-t0\")\n    .file(\"bar.cu\")\n    .compile(\"bar\");\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/cc/1.0\")]","#![deny(warnings)]","#![deny(missing_docs)]","#![deny(clippy::disallowed_methods)]","#![warn(clippy::doc_markdown)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:94-0:26:2531","0:222-0:563:2535","0:605:2548","0:673:150"],"is_stripped":false}}},"2:13807:3438":{"id":"2:13807:3438","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42735:203","prim@char":"1:12642:492","self::pattern":"2:13452:5165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:5976","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13851:37047":{"id":"2:13851:37047","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:5165"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13481:5974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:363:3020":{"id":"0:363:3020","crate_id":0,"name":"compile","span":{"filename":"src/lib.rs","begin":[1472,4],"end":[1476,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\n# Library name\n\nThe `output` string argument determines the file name for the compiled\nlibrary. The Rust compiler will create an assembly named \"lib\"+output+\".a\".\nMSVC will create a file named output+\".lib\".\n\nThe choice of `output` is close to arbitrary, but:\n\n- must be nonempty,\n- must not contain a path separator (`/`),\n- must be unique across all `compile` invocations made by the same build\n  script.\n\nIf your build script compiles a single source file, the base name of\nthat source file would usually be reasonable:\n\n```no_run\ncc::Build::new().file(\"blobstore.c\").compile(\"blobstore\");\n```\n\nCompiling multiple source files, some people use their crate's name, or\ntheir crate's name + \"-cc\".\n\nOtherwise, please use your imagination.\n\nFor backwards compatibility, if `output` starts with \"lib\" *and* ends\nwith \".a\", a second \"lib\" prefix and \".a\" suffix do not get added on,\nbut this usage is deprecated; please omit `lib` and `.a` in the argument\nthat you pass.\n\n# Panics\n\nPanics if `output` is not formatted correctly or if one of the underlying\ncompiler commands fails. It can also panic if it fails reading file names\nor creating directories.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3095-0:563:2535":{"id":"b:2:3095-0:563:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3098:2606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:299:2542":{"id":"0:299:2542","crate_id":0,"name":"flag","span":{"filename":"src/lib.rs","begin":[526,4],"end":[529,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"-ffunction-sections\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"impl_trait":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"impl AsRef<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:352:2572":{"id":"0:352:2572","crate_id":0,"name":"use_plt","span":{"filename":"src/lib.rs","begin":[1257,4],"end":[1260,5]},"visibility":"public","docs":"Configures whether the Procedure Linkage Table is used for indirect\ncalls into shared libraries.\n\nThe PLT is used to provide features like lazy binding, but introduces\na small performance loss due to extra pointer indirection. Setting\n`use_plt` to `false` can provide a small performance increase.\n\nNote that skipping the PLT requires a recent version of GCC/Clang.\n\nThis only applies to ELF targets. It has no effect on other platforms.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["use_plt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13835:37041":{"id":"2:13835:37041","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this\nstring slice, yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13452:5165","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::matches":"2:13833:3352"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44955:5998","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:5976","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2793-0:563:2535":{"id":"b:2:2793-0:563:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2795:29251"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:222-0:563:2535":{"id":"0:222-0:563:2535","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,0],"end":[239,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tool::Tool","name":"Tool","id":"0:563:2535","glob":false}}},"2:13796:34937":{"id":"2:13796:34937","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:45025:5978","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13818:37039":{"id":"2:13818:37039","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13452:5165","str::split":"2:13811:3283","prim@char":"1:12642:492","`DoubleEndedIterator`":"2:8393:134","str::rsplit_terminator":"2:13820:37040"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44783:6003","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13787:29769":{"id":"2:13787:29769","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13786:29768"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:307:2733":{"id":"0:307:2733","crate_id":0,"name":"flag_if_supported","span":{"filename":"src/lib.rs","begin":[718,4],"end":[721,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler if it supports it\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag_if_supported(\"-Wlogical-op\") // only supported by GCC\n    .flag_if_supported(\"-Wunreachable-code\") // only supported by clang\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"impl_trait":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"impl AsRef<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2099:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:37763":{"id":"5:5726:37763","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:299:2541","`String`":"5:7774:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:2541","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42829:5069-0:521:3999":{"id":"a:2:42829:5069-0:521:3999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42829:5069","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42830:5068-0:521:3999":{"id":"a:2:42830:5068-0:521:3999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42830:5068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:575":{"id":"0:575","crate_id":0,"name":null,"span":{"filename":"src/tool.rs","begin":[26,16],"end":[26,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_docs)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:576:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:283":{"id":"0:283","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[361,0],"end":[361,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","type_id","source","cause","provide"],"trait":{"name":"Error","id":"2:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:404:3477":{"id":"0:404:3477","crate_id":0,"name":"get_archiver","span":{"filename":"src/lib.rs","begin":[3204,4],"end":[3209,5]},"visibility":"public","docs":"Get the archiver (ar) that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5782:5968"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5749:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13875:29520":{"id":"2:13875:29520","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3101:860":{"id":"2:3101:860","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3357:5304-0:521:3999":{"id":"a:2:3357:5304-0:521:3999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3357:5304","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[379,0],"end":[4058,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:287:1212","0:288:963","0:290:2638","0:292:2643","0:295:2647","0:297:2551","0:299:2542","0:300:2658","0:302:2664","0:303:2671","0:305:2689","0:307:2733","0:308:2746","0:310:2574","0:311:2575","0:312:2557","0:313:819","0:315:2558","0:317:2769","0:318:2559","0:319:2355","0:320:2562","0:321:2563","0:322:1763","0:323:2576","0:324:2519","0:325:2577","0:326:2560","0:329:2561","0:332:1797","0:333:906","0:334:2565","0:335:2869","0:336:630","0:337:2566","0:338:2564","0:340:526","0:342:2567","0:344:2568","0:346:2700","0:347:2899","0:348:2904","0:349:2569","0:350:2917","0:351:1343","0:352:2572","0:353:2581","0:354:2573","0:358:2941","0:363:3020","0:364:3026","0:365:3027","0:370:3089","0:372:3099","0:373:2981","0:374:2703","0:404:3477","0:405:3478","0:408:3487","0:409:3488"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:370:3089":{"id":"0:370:3089","crate_id":0,"name":"try_expand","span":{"filename":"src/lib.rs","begin":[1735,4],"end":[1771,5]},"visibility":"public","docs":"This will return a result instead of panicking; see [`Self::expand()`] for\nthe complete description.","links":{"`Self::expand()`":"0:372:3099"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43001:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13797:2714":{"id":"2:13797:2714","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:5165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:484:60":{"id":"0:484:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[4061,4],"end":[4063,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3109:1858":{"id":"2:3109:1858","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2793-0:521:3999":{"id":"b:2:2793-0:521:3999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2795:29251"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13799:2947":{"id":"2:13799:2947","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:5165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[355,0],"end":[359,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10660:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:282:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5715:37761":{"id":"5:5715:37761","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:963":{"id":"0:288:963","crate_id":0,"name":"include","span":{"filename":"src/lib.rs","begin":[447,4],"end":[450,5]},"visibility":"public","docs":"Add a directory to the `-I` or include path for headers\n\n# Example\n\n```no_run\nuse std::path::Path;\n\nlet library_path = Path::new(\"/path/to/library\");\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .include(library_path)\n    .include(\"src\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3063:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5506:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42830:5068-0:563:2535":{"id":"a:2:42830:5068-0:563:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42830:5068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13762:1027":{"id":"2:13762:1027","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12642:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13866:37049":{"id":"2:13866:37049","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:5165"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:5976","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13873:29525":{"id":"2:13873:29525","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:347":{"id":"0:205:347","crate_id":0,"name":"args","span":{"filename":"src/tool.rs","begin":[331,4],"end":[333,5]},"visibility":"public","docs":"Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"OsString","id":"1:2096:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:346:2700":{"id":"0:346:2700","crate_id":0,"name":"cargo_metadata","span":{"filename":"src/lib.rs","begin":[1188,4],"end":[1191,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.\n\nThe emitted metadata is:\n\n - `rustc-link-lib=static=`*compiled lib*\n - `rustc-link-search=native=`*target folder*\n - When target is MSVC, the ATL-MFC libs are added via `rustc-link-search=native=`\n - When C++ is enabled, the C++ stdlib is added via `rustc-link-lib`\n - If `emit_rerun_if_env_changed` is not `false`, `rerun-if-env-changed=`*env*\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_metadata",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:334:2565":{"id":"0:334:2565","crate_id":0,"name":"opt_level","span":{"filename":"src/lib.rs","begin":[1102,4],"end":[1105,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"primitive":"u32"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13771:37035":{"id":"2:13771:37035","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33002:4891-0:563:2535":{"id":"a:2:33002:4891-0:563:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33002:4891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:563:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13764:37032":{"id":"2:13764:37032","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2822-0:673:150":{"id":"b:2:2822-0:673:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2820:5310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:673:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2824:29252"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:212:2720":{"id":"0:212:2720","crate_id":0,"name":"is_like_msvc","span":{"filename":"src/tool.rs","begin":[399,4],"end":[401,5]},"visibility":"public","docs":"Whether the tool is MSVC-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320:2562":{"id":"0:320:2562","crate_id":0,"name":"cudart","span":{"filename":"src/lib.rs","begin":[867,4],"end":[872,5]},"visibility":"public","docs":"Link CUDA run-time.\n\nThis option mimics the `--cudart` NVCC command-line option. Just like\nthe original it accepts `{none|shared|static}`, with default being\n`static`. The method has to be invoked after `.cuda(true)`, or not\nat all, if the default is right for the project.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cudart",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:605:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13845:37044":{"id":"2:13845:37044","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13791:5680":{"id":"2:13791:5680","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"Returns an iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44719:4683","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13838:37042":{"id":"2:13838:37042","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13452:5165","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::rmatch_indices":"2:13840:37043"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44883:5995","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"11:820:4865":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:8087:4888":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:10405:24598":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:3080:36825":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:12979:6800":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:5323:35573":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"2:45337:17196":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:3965:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:1690:9947":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:48118:8854":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:40445:8360":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:6566:12008":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:13243:6821":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:23361:8575":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:3874:132":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:6852:10570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:4513:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:12298:24709":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"6:6505:10433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:10883:169":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:7027:7903":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:43844:8110":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:6820:24532":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:16250:7490":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:6142:24528":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:46998:8754":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:3707:4673":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:11494:6631":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"16:4692:7726":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"9:318:9744":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:3540:4816":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:11977:4748":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:7787:8348":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:3090:36824":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:9552:174":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:6610:10495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:45358:8716":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:11576:252":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:47307:8778":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:1601:4862":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:46902:8748":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:10800:6328":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:13476:5976":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"15:306:23622":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:3560:4710":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:11690:6647":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:8393:134":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:8595:8145":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:41251:8633":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:34602:4804":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"18:0:4488":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:12661:1902":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:6523:10445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:41988:8523":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:42473:182":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:2618:7674":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:41961:4710":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:44579:8687":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:47056:8765":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:3469:4702":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:3596:154":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:10666:4652":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:2348:4171":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:6995:7894":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:8950:4727":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:3426:4802":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:43899:150":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"18:598:38396":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:1382:4871":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:5515:6233":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:7055:7905":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"11:776:4859":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:15963:7398":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:7762:6261":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:4473:281":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:12562:6761":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:7575:8981":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:16191:7475":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"9:380:23519":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:3699:4728":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:5196:10138":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:16848:6920":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"11:983:4869":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:6157:7763":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:41416:8637":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:5494:10276":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:8040:38382":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:2877:147":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:702:8886":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:7983:8922":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:5357:10202":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"16:6406:7799":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4964:10068":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:6617:10496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:14165:6963":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:7935:8069":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:45781:192":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12800:6780":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:5334:10199":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"6:5044:10109":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:6873:7886":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:11127:29378":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:5428:10237":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:9210:8965":{"crate_id":1,"path":["std","pipe","PipeReader"],"kind":"struct"},"16:6850:7883":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"15:394:23631":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:12608:6765":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:1657:9931":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:45681:163":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:4565:6254":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:11395:24615":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:12593:9009":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:8446:4894":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:13079:6813":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:1944:5412":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:6756:10544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:46969:8752":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:5344:8903":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6171:7766":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:40308:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"14:213:8235":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:1042:23596":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:10923:4828":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"11:1898:8249":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:14897:7104":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13219:6819":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"16:6026:7693":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:6669:198":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:6981:7712":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:4927:7732":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:6296:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:9386:8970":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:4896:10036":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:984:6241":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:7987:8074":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:12787:6779":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:13120:6617":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:12034:6001":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:42527:11848":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"0:605:2548":{"crate_id":0,"path":["cc","Build"],"kind":"struct"},"17:11356:38393":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:5611:10330":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:4239:7723":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:14924:7108":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:1648:8246":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:15763:7347":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:2261:8327":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:4355:11876":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:6968:4783":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:4536:17056":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:12048:6000":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:3046:23669":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:14650:7051":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:15048:7132":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:8630:4684":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:6040:7696":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:423:38358":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:8543:8138":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:43467:4767":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:7367:10654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:8633:24542":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:11485:6629":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:7880:7803":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:12666:996":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:7220:7942":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:15456:7261":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:23495:10797":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4947:10062":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:13892:6903":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:44333:10811":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:45698:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:3925:4860":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:8666:8041":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:12654:782":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6428:10400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:14498:7029":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:9847:6327":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:14910:7105":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:44550:8683":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:1530:9839":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"11:389:6226":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:5377:7746":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:14859:7100":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11259:6617":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:7009:6293":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:12725:6774":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:2820:5310":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:10670:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:22177:36368":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:16766:7627":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:15144:7142":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:2787:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:5441:10247":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:9215:8966":{"crate_id":1,"path":["std","pipe","PipeWriter"],"kind":"struct"},"2:3797:159":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:12173:6699":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:532:9789":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:16029:7413":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:15534:7303":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:5142:7738":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:22647:4888":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:11423:24616":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:9279:8968":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11915:6616":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:1539:9845":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:10634:6451":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:22205:11918":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:14388:6302":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:16211:7481":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:41525:8510":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:5658:10349":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:12260:6339":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"0:0:3399":{"crate_id":0,"path":["cc"],"kind":"module"},"1:8153:11826":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:8294:10777":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:2784:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:7273:6281":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:14746:7065":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:3411:4794":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"18:573:2910":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:3327:5302":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:8243:10765":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:6203:24529":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:42960:226":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"17:15477:7269":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:42495:8527":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:5117:10125":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:42713:8532":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"11:1063:38363":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:953:4859":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:43832:10809":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:8093:8078":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:47641:8806":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"6:8272:10771":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:15469:7268":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:7946:7706":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:5217:10150":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:3858:8325":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:23547:4888":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:1011:4868":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:11751:4728":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:43206:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:7962:10748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:1247:38210":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:4840:6286":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:2448:7660":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:10925:5725":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:4959:5437":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:8624:4683":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:1551:9854":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12344:6720":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"17:16791:7632":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:14178:6964":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:15896:7379":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:46885:8747":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:8284:10773":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:4501:8490":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:3448:4860":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"18:538:6410":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:6950:7893":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:11775:4855":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"11:2374:4855":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:8125:5725":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:13125:8552":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:10507:8988":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"15:288:23621":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:5450:10253":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:8325:177":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:11155:4746":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:13856:6898":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:10664:31601":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:23617:8602":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:31704:208":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:41041:5991":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:45530:135":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:10875:165":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:7209:7941":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:3934:8893":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:47077:8766":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:8434:8935":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12836:24734":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:4118:7720":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:43920:4643":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:10553:24603":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:4701:3031":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:45323:8711":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:5280:7743":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:11164:4123":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:10898:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:7723:17233":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:3423:4801":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:4185:5857":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10586:6597":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:41732:8515":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:47739:8839":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:14690:7056":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:6858:10571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"14:186:23609":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:680:6465":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:6967:7695":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:6335:7786":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:7013:7901":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:11151:5415":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:974:4862":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"9:49:11117":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:43041:4728":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:8025:8075":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:544:7645":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:3303:36819":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13959:6914":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:9835:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:44611:8634":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:8249:10766":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:680:6434":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"15:327:11114":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:47109:8768":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"18:96:28795":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:12945:17246":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:47906:8842":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:4150:7721":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:3576:4607":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:12100:8893":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:9237:4740":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:7302:7955":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:3439:7717":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:0:325":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:41163:17080":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:23650:8605":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"5:928:6239":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:3322:261":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:6254:7776":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:44719:4683":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:46770:8732":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:44096:4829":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:33493:4793":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:12072:6684":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:12669:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:4984:10078":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:48209:8862":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:15677:7328":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:4901:830":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:15691:7331":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:7369:7703":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:1639:4859":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"11:763:4858":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:11437:9469":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:6452:10409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:4653:8492":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:9588:8983":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:46785:8735":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:12898:6793":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:16744:7621":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:982:4864":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:14190:6967":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:2878:7686":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:22175:36366":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"11:1652:6228":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:3139:6491":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:6939:7892":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:23384:8580":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:10700:6453":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:14482:5789":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:3069:175":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:14057:6931":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:1521:9834":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:2511:4879":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:1883:5400":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:1500:9826":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:16051:7418":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:5749:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:8560:4709":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:707:11824":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:1632:8323":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:3371:4703":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:1136:4872":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:42851:5903":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:2671:697":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:47508:8801":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"7:31:23505":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"14:40:6885":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:3697:4670":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:5288:10184":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:14368:6300":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:8175:10761":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:6267:7777":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:2433:23667":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:15324:7155":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:2167:8326":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:3803:4822":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:15198:7153":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:8739:8952":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:7334:7959":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"3:1785:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:12668:1460":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:8188:5415":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"11:2115:4870":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:2243:6469":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:10879:4705":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:7468:7980":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"11:1866:4859":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:41516:8509":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:12022:6676":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:14776:7084":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:12065:6681":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:2948:7689":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:23331:8574":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:41202:8630":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:16241:7488":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:16802:7634":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:3524:6477":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12430:6730":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:2528:7670":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:22384:8571":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:48035:8847":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4957:10065":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:9226:211":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:45688:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:3063:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:11200:6616":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:1591:4861":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"0:673:150":{"crate_id":0,"path":["cc","Error"],"kind":"struct"},"1:3688:33245":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"9:226:4725":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"11:2513:9738":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:6543:10461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:6441:10401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:12397:6727":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:5683:2530":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:41557:8512":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:3043:17086":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:10860:6459":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:16403:7533":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12588:6764":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:8317:24541":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:6779:7874":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:14870:7101":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:16301:7509":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:5271:10173":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:46800:8736":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"9:0:4481":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:11080:8984":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"5:6148:4768":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:7872:5792":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:6486:10431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:1584:9876":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:1563:9862":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:5447:7748":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:11955:5999":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:8231:10763":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:7956:8072":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:508:6303":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"11:813:4864":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:41472:8641":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:553:9800":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4816:9983":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:14598:7044":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:7539:4859":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:3086:36823":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:2099:209":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:7916:11063":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"16:8102:8079":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:14585:7043":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:6727:10534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:11843:5980":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:14396:7014":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13592:6845":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"11:2507:9737":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:7966:8073":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:519:6463":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:23661:8606":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"16:0:4487":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:11715:6648":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:377:8880":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:4848:10647":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"16:2413:23640":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:13509:6481":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:41103:8626":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:13014:6803":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:4363:11877":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:6687:10526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:8582:8142":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:2364:10790":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:8311:152":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:3590:4660":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:7251:11912":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:41463:8500":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:5241:10158":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:38873:4810":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:2687:17157":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"6:7326:10627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:47964:8844":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:41573:6424":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:321:6458":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:7539:7989":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:16359:7526":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:1667:9937":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:1885:5401":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:45180:8708":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:43572:4645":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:9250:4742":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:45684:176":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10150:24590":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11616:6644":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"11:2340:8252":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:3686:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:11059:10824":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:13730:6861":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:3358:8249":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"14:164:23602":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:8148:7711":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:3328:33553":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:8714:8942":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:7551:24537":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:8336:4327":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:6841:7882":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"18:635:6426":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:2838:7684":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:32928:5435":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:15809:7357":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:15624:7316":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:2251:6247":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"11:851:4867":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:706:5977":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:11328:38392":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:44135:8680":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:5186:10131":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:4171:5856":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:16315:7511":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:11540:6635":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"2:45760:34984":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:6998:8511":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:11855:6664":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:8316:10782":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:6237:7771":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:3809:4825":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:13162:8555":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:4902:10039":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:4488:6254":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:6472:10420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:3012:23668":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12331:6718":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"18:113:28796":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:5127:10126":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:1632:4728":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:3585:7718":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"2:45565:17284":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:45508:10820":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5205:10143":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:12236:8921":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13947:6911":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:2394:24665":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:31325:5312":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:12062:8546":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:383:8881":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:2914:214":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:32935:8615":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:23526:11850":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:4850:5435":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:4869:10026":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:6513:6266":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:11089:4887":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:15074:7134":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:9864:131":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:15088:7135":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:4384:11879":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:284:6233":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:14322:6998":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:4842:10003":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:5414:6262":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"17:316:6457":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:1597:9883":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"14:7:8231":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:2568:7672":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:13630:6848":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"11:663:4855":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:5604:10327":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"11:2519:9739":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:11262:6331":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:47027:8756":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:14008:6921":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:16684:7605":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:6547:12007":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:12990:6801":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"11:344:38355":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:14137:6953":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:22:845":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"11:2540:4611":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:3124:23670":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:3571:4712":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:5139:10127":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:6310:8503":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:1027:4871":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:41352:4620":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:45016:5979":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:15978:7402":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:47322:8779":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:8500:8133":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:1227:36822":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:3937:8894":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:15128:7140":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:43354:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:11455:174":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:11564:6639":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:3364:5306":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:4838:5858":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:3097:150":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:10622:156":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:3822:35806":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:5947:8904":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:12667:1966":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"11:1885:8247":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13195:6817":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"11:2354:4728":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:909:11851":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"5:1582:4858":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:3061:6310":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:8743:10636":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:42981:224":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"5:724:8321":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:7916:8061":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"11:1083:8242":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:23595:8600":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:12077:6335":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:12428:6341":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:10132:24589":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"16:5346:7745":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"11:1871:4860":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:44590:8688":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:16650:7598":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:13030:6805":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"11:1862:4856":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:12161:8895":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:5521:10282":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"18:581:5321":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11502:6632":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"6:5539:10293":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:12649:1861":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11210:38391":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:8277:4886":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:2043:4660":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:1996:5888":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:8237:10764":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:6719:10533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:12022:10836":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:43565:4644":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:11099:152":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:2495:4875":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:14152:6959":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:11552:6636":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"11:102:9731":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:25:722":{"crate_id":2,"path":["core","env"],"kind":"macro"},"16:2682:7677":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:43430:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:34390:4797":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:7494:10703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:6558:6317":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:43243:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:47993:8845":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:10647:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:33002:4891":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:7973:6465":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:16814:7637":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:3357:5304":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:14678:7055":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:10655:123":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:7679:4612":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:5295:10186":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:2453:6476":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:23502:8594":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:42661:8663":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:11458:6628":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:16700:7610":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:13328:6556":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12864:6784":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:15115:7139":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6623:7835":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"10:0:4482":{"crate_id":10,"path":["adler"],"kind":"module"},"17:13021:24736":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:22151:36360":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:5755:7751":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:1643:4860":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:12652:763":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:3837:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:5341:10200":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:16203:7478":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13465:6835":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:4922:11903":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:3431:4803":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:6121:4660":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:44733:4684":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:47290:8777":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:14431:7018":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:5255:10164":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:40408:4618":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:22674:8570":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:7694:4640":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:43579:4652":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:650:11821":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:8206:7699":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"11:427:38359":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:978:4863":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:10202:24592":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:45820:8731":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:42769:4855":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:4243:5860":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:44997:5994":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:7559:8343":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"14:31:8231":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:3719:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:11221:6298":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"2:23683:8608":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:41722:4682":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:7549:6244":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12969:6799":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:5652:10347":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:42820:5057":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:12663:6767":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"11:292:9732":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:6419:7647":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:9534:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:8276:17139":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:23065:17156":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:47094:8767":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:10975:38386":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:12653:766":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:7635:5358":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:6810:8505":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:23136:11997":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:13387:6831":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:46817:8739":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:5319:10195":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5488:10274":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:45706:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:42860:8536":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:47861:8841":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12878:6788":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:7786:38378":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:16828:7638":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"9:490:8308":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:1233:6466":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:2638:7675":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:47546:8803":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5325:10196":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:16631:6898":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:12035:6677":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:1612:4863":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:45007:5981":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:1643:9920":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:45050:5992":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:15353:7175":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"11:1579:8245":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:42695:8530":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:11654:6617":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:4929:10054":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:4725:11882":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:10311:24595":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:42555:10799":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:1514:9831":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:15868:7371":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:479:9757":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:1654:8247":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:10882:4701":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:42830:5068":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:13108:6616":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:2228:17167":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:10486:5408":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:7248:6278":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:8851:36129":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:5154:11902":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:8280:17138":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:14094:8644":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"6:5381:10213":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:969:4861":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:12656:939":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:2484:7668":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:4402:7725":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:5130:11900":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:12609:11138":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:31293:5787":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13575:6799":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:32910:8613":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:12229:6704":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:7156:7928":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:47612:8805":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:3072:157":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:6459:10411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:4850:10649":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:12120:6694":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:16164:7463":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:3593:153":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:33705:4792":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:5051:10111":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:14258:6969":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:45032:5990":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:13819:6885":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:43057:4856":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:8623:8147":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:436:197":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:6379:6312":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:47269:8776":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:11882:8543":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:8708:8154":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:16525:6884":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:5349:10201":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"16:6694:7860":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:6878:10585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:13481:5974":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:6954:4782":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:6061:4770":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:5154:6486":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:2465:7662":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:6571:7829":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:3782:4821":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:12625:29377":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:7977:7707":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:12975:3726":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:7292:10608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:7344:10636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:7074:5796":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:7189:24535":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:10880:6602":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:10604:2527":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:41156:5990":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:44622:8690":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11995:6674":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:4990:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:48171:8860":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:7990:10751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12263:6708":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:12643:6616":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:10571:6596":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:41264:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:44703:5986":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:4897:6287":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:43874:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:13459:5975":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:15995:7406":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:15951:7395":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"13:229:9730":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:14337:7003":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"1:1861:4271":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"2:34189:4606":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:2258:133":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"9:470:23517":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:5222:5060":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:2702:7678":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:3079:3081":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:7835:24538":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:6503:8910":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:14834:7096":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:41332:4633":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"1:1114:4870":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:32921:8614":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:9529:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:7337:10632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:40293:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:3199:5892":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:5139:11901":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:12761:6777":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:7591:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:2509:4878":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:11394:29381":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:8807:5064":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:2988:7691":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:6747:7652":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:14307:6994":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:10840:4683":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:23051:12006":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:9352:11910":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13909:6905":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11868:6640":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:11939:6671":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:16350:7524":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:8090:4762":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:14081:6935":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:586:9817":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:16021:7412":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:10255:24593":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"18:689:6436":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:1551:4856":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:6679:10523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:559:9803":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:41970:6294":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:16269:7503":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:41126:8628":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:22685:36371":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:12081:6687":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:7856:4860":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:13231:6820":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:6366:7641":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:7878:11060":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"17:11757:6652":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:7857:17133":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:11358:6299":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"6:6670:10517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:1589:9878":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:7308:10620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:8055:8077":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:22164:36365":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"18:651:2910":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:10965:6612":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:5249:10162":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:15699:7332":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13344:6829":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:7023:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11576:6640":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:13185:8556":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:10821:6599":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"2:45041:5991":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:41274:4636":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:12055:6679":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:12242:6705":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:12686:6768":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:2504:7669":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:7355:7702":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:5230:10154":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:3679:2527":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:41088:34859":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:48081:8851":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:46832:8740":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:12160:6698":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13795:6884":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:32944:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:12618:5982":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:4990:10081":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:6631:10507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:5107:10124":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:8173:5414":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:43095:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:23141:11995":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:12642:492":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:1132:4872":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"18:481:6402":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:44105:169":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"11:787:4860":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:11800:4684":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:5151:10128":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:14955:7114":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:8960:4728":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:41148:5991":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:8525:8136":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:2344:2696":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:5025:10100":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5503:10280":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:45739:8724":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:6775:4042":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:7413:7966":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:43132:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:47529:8802":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:8587:4679":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:6602:10494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:4322:4660":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"17:15640:7319":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:13360:24606":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:33003:5308":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:11069:4459":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:5356:454":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:5462:10262":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:41394:8636":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:8803:162":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:44652:8693":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:4928:4852":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:43393:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:4519:4660":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:43586:4653":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:10918:4460":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:4233:5859":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:7108:5798":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:5057:10113":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:5550:10299":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"11:750:4857":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:7997:7708":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:1122:6233":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:10830:6601":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"2:44955:5998":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:42673:8896":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:5022:6311":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:42789:5066":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:12664:1896":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:10440:4642":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:11469:24617":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:1494:9823":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:5170:7739":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:22962:12002":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:43815:4641":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:1573:4857":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:11749:6332":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:23453:34837":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11161:38390":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:41955:8520":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:41597:8648":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:4182:7722":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:23584:8599":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:44320:10810":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1:4967:11869":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:2229:2701":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"17:13207:6818":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:3792:268":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:14093:6936":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:14350:7005":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"17:3877:6480":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:13157:6815":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:4906:5436":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:6116:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:34256:4800":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:9570:4890":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:14054:8562":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:31061:11852":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:4803:11899":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:40629:17087":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:7806:35735":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:12028:10837":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:41322:4634":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"16:5222:7741":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:23108:11996":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:6133:4773":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:11135:29380":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:34323:4798":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:41587:8514":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:6744:10542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"6:5375:10212":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:491:9760":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:6054:4769":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:15001:7119":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:7200:280":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:6729:7871":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:8220:8083":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:44490:8681":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:8643:8942":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:497:9763":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"15:0:4486":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:45492:10816":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:8011:7709":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:1623:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:15928:7387":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:6500:23639":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:4333:33014":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"11:2394:4856":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:45496:10817":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:12243:8921":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:44337:8540":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:5405:10227":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:15785:7353":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:1919:5408":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:6387:7792":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:3324:8248":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:8360:4699":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:578:9813":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:16380:7529":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:683:5893":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:4127:4859":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:11370:4740":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:44801:6002":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:8429:8934":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:5058:7735":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11438:6625":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:4552:4660":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"17:10766:6455":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:888:6236":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:40330:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:3082:10787":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:299:2541":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:1489:9821":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:4997:10084":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:14021:6922":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:48156:8859":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:8176:8081":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:5311:10192":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:10662:4645":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:41377:8634":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"11:718:4863":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:47935:8843":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:41946:4042":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:901:6457":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:22789:11916":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:2663:4696":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:619:8883":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"9:435:23518":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:45238:8710":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:44901:5996":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:43049:4855":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:44679:5993":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:3401:4796":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"9:412:23520":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:214:6231":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:12045:6537":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:23395:34834":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:8289:4887":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:5179:10130":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11590:6641":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:4591:8899":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:12409:6728":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:7740:17082":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:4900:7731":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:11667:6646":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:14476:7028":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:6186:7767":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:2964:7690":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"10:44:8255":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:2908:207":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:2235:8354":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:5328:6488":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:22372:4888":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:41312:4683":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:13757:6869":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:7797:8349":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:44751:5999":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:5301:10189":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"11:2414:4859":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:42829:5069":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:47816:8840":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:44783:6003":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:8609:7713":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"14:219:8237":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:32914:8041":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:1703:9951":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12907:6837":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:6864:24533":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:45500:10818":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:12011:8920":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:3599:155":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:12093:6691":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"3:0:527":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:12579:8549":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:15389:7206":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:14373:7009":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:8700:11880":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:31731:5321":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:8977:4730":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:0:585":{"crate_id":2,"path":["core"],"kind":"module"},"5:4157:6233":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:22203:4888":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"5:3291:4728":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:16512:6870":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:5874:4739":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:2422:6473":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:12318:6716":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:44117:4725":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:15611:7311":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11603:6642":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:6121:7697":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:7524:10720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:15884:7373":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"14:201:17197":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"11:859:4868":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:8765:8900":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:13452:5165":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:16013:7410":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:1506:168":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:4140:11865":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:9337:11908":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:3075:272":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:7383:7963":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:13247:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:3712:4855":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:5415:7747":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:13093:6640":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:11040:8997":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"6:5224:10151":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:12646:351":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:5313:8903":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:38928:4811":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:44569:8686":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:16755:7626":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:8910:2528":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:8299:4884":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:41434:8639":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:22787:4888":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:12935:6795":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:12614:11828":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:42868:8668":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"18:589:6413":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:47567:8804":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:12217:9006":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:12187:6700":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:1665:8249":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:11971:8914":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:41047:8622":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:1636:4856":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"11:1542:23597":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:7445:10667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:1001:4728":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:1942:5411":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:9596:5975":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:7004:10793":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:4767:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:155:6220":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:5036:10105":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:6893:10596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12749:6776":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:12214:6702":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:1696:9948":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:8230:24540":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:16838:6915":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:45117:17195":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:44709:5985":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:10733:6454":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:8649:8944":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:3306:7659":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:4134:11866":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:45389:6005":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:5506:215":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:9506:4774":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:22276:8571":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:41932:8518":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:7256:7953":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:15578:7308":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:9391:119":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:14558:7038":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:16040:7417":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:595:6304":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:13183:6816":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:44837:6001":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:8720:8950":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"5:7774:257":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:14521:7034":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:4965:11868":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:7492:7981":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:40196:4815":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"8:0:4480":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13700:6857":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:9397:8973":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:12889:6792":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:16658:7599":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:12008:6675":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10431:24599":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:6659:10514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:7713:38377":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:11318:6618":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:12959:8550":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:40368:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:11346:6619":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:31357:34846":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"18:718:6441":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:6422:10399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:545:9795":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:4937:10056":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"18:670:6433":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:2810:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:5316:7744":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:45025:5978":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:7668:4611":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:12385:6726":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:7627:4856":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6109:7762":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:5366:10206":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:5417:1007":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:6082:7753":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:22652:11920":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:13983:6918":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:9287:4856":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:8264:8091":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:14637:7049":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:15013:7120":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:5687:7750":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:7583:4856":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:12662:1884":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:4925:11881":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:41300:4635":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:7098:5797":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:22187:36369":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:8162:7701":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:6806:7692":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:3315:277":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:6416:10396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:35121:4808":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:13876:6899":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:15448:7258":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:14571:6734":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:3693:7719":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:13410:4041":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:7569:36713":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:7539:10727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:13470:5977":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:570:9808":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:5960:265":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:4776:8494":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:896:4728":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:8617:4682":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:7728:5066":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:8278:10772":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:6455:6300":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:15817:7359":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:6169:17566":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:15746:7342":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"12:0:4484":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:2898:7687":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12814:6781":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:33917:4795":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:22141:36360":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:8282:4459":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:7820:31648":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:5395:10221":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:23417:8582":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:14039:6930":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:15861:7370":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"11:321:9735":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:41370:4686":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"5:40:5791":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:5630:10339":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:11483:10828":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:45488:10815":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:3832:4152":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:15721:7334":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:41077:8623":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:11118:4678":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:912:202":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:10378:8660":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"16:6901:7889":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13044:6808":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:6911:7890":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:45554:8721":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:15102:7138":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:16005:7409":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:1123:4871":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:41746:8516":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:5568:10306":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12825:6782":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:41486:8644":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:45797:8730":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:32945:251":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:46931:8750":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:5088:10123":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:23276:8573":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:10113:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:7619:4856":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:11383:4742":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:4970:10070":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11629:6580":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:42733:206":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:11063:38388":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"18:659:6427":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:41548:8647":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:14788:7086":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:2736:3047":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"11:676:4856":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:2493:2701":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:8806:11836":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:22162:36363":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:0:4479":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:47479:8800":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:12645:1352":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:48248:8875":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:46984:8753":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:42761:4728":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:47396:8797":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:43169:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:47138:8769":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:7424:10661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:22133:5321":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:7738:4637":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:9293:8905":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:14071:8565":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:45476:10812":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:14985:7116":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:7284:10603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:8063:24539":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:16230:7487":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:9373:4772":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:4555:17057":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:16177:7469":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:11214:6297":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:11728:6649":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:6586:7832":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"2:23221:8572":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5387:10216":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:7710:4639":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:6513:10438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:15174:6799":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:44692:5989":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:12076:8547":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:2424:8357":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:1675:9938":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:4371:11878":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:7439:10666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:608:6420":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:3985:6503":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"2:41425:8638":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:6578:10482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13928:6910":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:14365:7007":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:45512:9467":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:14624:7047":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:11594:9005":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:9263:4743":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:11660:8305":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:39617:4814":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:45272:8558":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:3424:4705":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12133:6696":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:11083:6296":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:9544:4785":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:23672:8607":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:1919:5542":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:3079:271":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"11:2275:4869":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:7463:10677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:12663:1890":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:6638:10508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"11:2099:4869":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:14186:217":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:7741:17083":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:13836:6888":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:11563:4888":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:43317:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:8107:8926":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13771:6870":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:3558:128":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:2810:9596":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:8654:11847":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:14971:7115":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:7580:10742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:13529:6839":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:6645:10509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:3843:4699":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:10664:4644":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:14940:7110":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:1885:4860":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:3467:4701":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:41403:4681":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:42511:8529":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:6656:7851":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:906:6458":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:10524:24602":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"17:14710:7059":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:2344:36716":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:45167:8707":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:23606:8601":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:47662:8807":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:12648:1771":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:5585:10313":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:8352:4697":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:2129:8353":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:2579:9598":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:5136:17074":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"13:0:4478":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:6096:7757":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:45747:8726":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:5265:10170":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:48052:8848":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:47434:8799":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:4171:4856":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"10:36:9743":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"11:2440:4860":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:10300:11136":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:6590:10487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:40232:4817":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:11196:4743":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:11993:8545":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12373:6725":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:33032:5307":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:14122:6947":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:12643:1924":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:8480:8132":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:3373:4704":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:4:1292":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:10674:4651":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"11:1118:8243":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:562:10928":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"18:507:2910":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:13489:6837":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:6088:4771":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:14883:7103":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:5940:6317":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:6802:10559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:8812:17137":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:13585:6844":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:5871:3787":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:34948:4806":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:12447:24710":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:8607:4681":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:14730:7060":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:6460:24531":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:4255:5863":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:7519:4856":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:23628:8603":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:2303:201":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:6749:10543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:22880:12000":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:11743:6650":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:12854:6481":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:48072:8850":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:41495:8504":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:12657:921":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"11:0:4483":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:11269:24618":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:7902:11062":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"11:686:4862":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:8167:11827":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:12711:6770":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:8225:10762":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:6769:10551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:11907:4725":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"1:2568:2526":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:12103:6692":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:9501:199":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:11575:10832":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"17:15876:7372":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:41140:5992":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:40348:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:40280:4820":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:1711:9955":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:3337:36820":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:3262:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:44080:4827":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:6746:6233":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:5196:7740":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:8706:8948":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:2918:7688":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:11997:8918":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:8260:10769":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:23346:10794":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"11:808:4861":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:11256:6330":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:42908:8669":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"2:3396:4605":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:8344:8933":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:14069:6934":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:2588:7673":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"11:2297:4870":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:6887:7694":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:4489:8489":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:9271:4728":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:2025:5889":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:42639:34864":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:1625:9908":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:12640:436":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:4808:7728":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"11:1558:8244":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:12647:1737":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:7890:11061":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"17:10333:24596":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"18:613:38397":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:6702:10530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:40276:4818":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:15971:7401":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:14426:164":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:7570:33015":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"5:7599:8344":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:16329:7518":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8966:4729":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:8334:4895":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:6197:8501":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:5707:24527":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:33035:278":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"11:649:4728":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:3426:4706":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:2156:8325":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:9458:29337":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:12774:6778":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:10603:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:7502:6323":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:4764:7727":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:22256:4888":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:4792:9966":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:11151:6615":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:15919:7384":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:2811:4698":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:6835:7881":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:43280:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:5733:4272":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:789:166":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6736:38375":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"9:345:23533":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:5717:4737":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:9220:4741":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:6899:4780":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:15186:7149":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:10369:24597":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:12665:1878":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:3872:11849":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:6700:4859":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:16219:7482":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:10668:4653":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:7421:24536":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:40388:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:15985:7403":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:4881:10029":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:44937:5997":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:4292:4660":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:2159:1397":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:8439:2584":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:46917:8749":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:15595:7310":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:12659:933":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:12658:927":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:12944:6796":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:3095:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:42936:222":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"5:1411:4872":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:47159:8770":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:10108:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:44987:4680":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:15035:7131":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:33034:118":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"1:12140:8894":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:10756:4741":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:2315:2525":{"crate_id":1,"path":["std","fs"],"kind":"module"},"2:41454:8498":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:12229:29349":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:13687:123":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:23433:34836":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:48133:8855":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11842:6663":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"11:1001:4870":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:47013:8755":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:8569:4711":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:11102:6614":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:6792:7875":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"16:894:7654":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:2685:17156":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:8272:4885":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:3042:4888":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:14845:7098":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:6792:10557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:22264:11917":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:8266:10770":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"11:2525:38354":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:9675:5411":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:8028:6325":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6062:7698":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:8331:4458":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:42752:185":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:7804:38379":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:22258:11914":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:1100:4869":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:919:4856":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:23468:34838":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:3066:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"14:0:4485":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:11112:38389":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:4875:10027":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:11989:6673":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:1632:9912":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:16341:7520":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:5482:10273":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10176:24591":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:34775:4805":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:6638:7837":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"18:491:6403":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:44642:8692":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:5134:4660":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:47240:8775":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:15062:7133":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:48092:8852":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12201:6701":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"11:2469:23592":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:3481:4807":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:15:2608":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:22924:12001":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"5:778:264":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4921:10052":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:45771:8729":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:3887:4153":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"11:2206:6684":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:485:9759":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:15713:7333":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:13201:8557":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:12621:6766":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:7984:10749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:15792:7354":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:12958:6797":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:4890:10034":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:41980:8521":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:32946:258":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:23515:8595":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:11014:38387":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:15771:7350":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:4981:7734":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:43001:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"18:80:28794":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:2658:7676":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:6500:10432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:10660:133":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:787:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:16288:7504":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:8872:4725":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"3:2062:8350":{"crate_id":3,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"16:2818:7683":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:45153:8704":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:8498:190":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:11920:8544":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:40456:8621":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:42777:4856":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:473:9754":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:7510:5790":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:43071:208":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:3334:33694":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:3640:4669":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:41243:8632":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:11064:10826":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:44883:5995":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:11770:24637":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:11420:4890":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"18:515:6401":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:7041:7700":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:6711:7861":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:14211:8567":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:8562:8141":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11794:24638":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:7553:10736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:14345:119":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:6678:7857":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"16:2770:7681":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:13133:6814":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:4039:8895":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:46849:8741":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:5560:6007":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:22382:11915":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:11983:8917":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:12254:6707":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:2794:7682":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:4193:4468":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:4413:4660":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:16395:7530":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:537:6247":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:5575:10308":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:10672:4650":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:43860:34929":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:7515:10717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:596:6464":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:41939:8519":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:3517:4691":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:2291:10786":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:6438:24530":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:5471:10268":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:14611:7046":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:6274:4660":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10455:24600":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:39038:4813":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:7165:7929":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:8326:10784":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:5697:4736":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:13066:6812":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:13399:6832":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:4202:4855":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:5111:7737":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:44541:8682":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:3622:4039":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:15513:7298":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:8134:7710":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:1727:9960":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4914:10048":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:14665:7054":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:42926:8670":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"2:23012:36593":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:1569:9864":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:5045:5868":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:2722:7679":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:38983:4812":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:5933:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:6300:7784":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:5007:10091":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:16573:7584":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:2858:7685":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:13971:6915":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:41444:146":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11053:6613":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:5740:6597":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:4265:7724":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:13260:24604":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:43805:10800":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:5420:10232":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:5375:4685":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:4436:8897":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:4842:7729":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:2032:813":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:11888:6666":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"11:1878:8246":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:10601:6450":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:9404:29336":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:23014:17156":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:0:2647":{"crate_id":17,"path":["object"],"kind":"module"},"1:11106:8987":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"5:1366:4869":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:9446:8535":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"17:10283:24594":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4829:9993":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:8295:8095":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:517:9780":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:4116:3345":{"crate_id":1,"path":["std","os"],"kind":"module"},"6:1684:9944":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:15587:7309":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"11:2126:4871":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:11241:6329":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:7279:7954":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:4976:10073":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:31331:8612":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:5390:216":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:7409:11059":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"17:13436:6834":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12575:6762":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:11963:6672":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:9425:8977":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:6737:10541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"5:4362:4728":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:16068:7425":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:45676:10821":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"6:7562:10739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13648:6851":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:6779:4775":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:16717:7612":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:963:4860":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:23639:8604":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:8688:8896":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8895:4726":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4805:9975":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"7:0:1956":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:3331:33693":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:2750:6307":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:14443:7020":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:5640:10340":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:3147:127":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:44662:8694":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:41504:8645":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:5289:4768":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:7459:7977":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:5725:6596":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:5529:10287":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:16538:7554":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:9539:4784":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:36997:4809":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:41116:8627":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:44088:8674":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:15569:7304":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:5664:10352":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:7317:10626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:41236:8631":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"13:110:38364":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:10667:6452":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:41538:8646":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:6471:6316":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"14:159:8231":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:940:4858":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13673:6852":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:6398:10383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:7430:10663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:2772:4688":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:47191:8772":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:12660:914":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:11643:6616":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"9:168:11127":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:16672:7603":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:6695:10529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:2096:210":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"11:832:4866":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:23094:4888":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:2341:4873":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:523:9783":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:47208:8773":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:45504:10819":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:465:9749":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:5253:7742":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:8578:4678":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:23409:8581":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:7750:4638":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:0:1763":{"crate_id":1,"path":["std"],"kind":"module"},"17:15908:7380":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:4963:5869":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:5557:10301":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:5647:7749":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:2834:5311":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"2:2122:696":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:45138:8699":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5512:10281":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:10295:36130":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:8325:131":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:6360:10356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:4199:5858":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8102:8924":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:43882:4641":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:8798:5065":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"2:24259:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:5282:10181":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:10876:4703":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:8637:4680":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:15733:7337":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:4247:5861":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"18:765:28804":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:2226:17166":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:45808:8254":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:7407:10656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"7:78:23512":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:13052:6810":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:15937:7388":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:6915:6233":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:4071:4859":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:485:6460":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:22986:4888":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:44633:8691":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:9842:4886":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"6:5019:10097":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:44855:6000":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:45348:8712":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:4621:8491":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:46864:8742":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:538:9792":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:15844:7363":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:23705:8610":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"16:7518:7987":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:46952:8751":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:8824:4724":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:48061:8849":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:31346:4641":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:44127:8679":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"3:2077:8351":{"crate_id":3,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"16:5083:7736":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:3108:7714":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:41285:17233":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:909:4855":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"11:2533:9741":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:16116:7462":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:6606:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:1520:4728":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:5576:133":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:3298:8247":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:6896:4779":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:13304:24605":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:11814:6658":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:1507:9829":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:3317:121":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:564:9805":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:13529:17189":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"11:2323:4871":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:10062:24588":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:1781:6233":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:1397:4870":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"18:735:28803":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:7347:7961":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:8304:10778":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:32868:4744":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:23694:8609":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:14811:7095":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13608:24576":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:1867:722":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:14545:7035":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:4703:11881":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:4954:7733":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:9310:8969":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:11143:8952":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"17:12357:6723":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:14159:36179":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:16058:7420":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:698:6437":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:2521:4167":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:14413:7017":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:12641:1208":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:9437:8979":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:10505:2543":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:45484:10814":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:47223:8774":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:16417:7536":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"18:521:28805":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:9322:11909":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:1535:4855":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:4771:8493":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"18:563:6412":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:3332:8246":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:8030:4709":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:1211:38209":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:3587:3066":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:2491:3319":{"crate_id":1,"path":["std","fs","remove_file"],"kind":"function"},"16:7762:8020":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:11402:9467":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"18:531:6407":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:5803:4123":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:16730:7618":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:8092:8882":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:16777:7628":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"18:643:2910":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:5069:10122":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:4871:7730":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:12655:761":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:13000:24735":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"11:357:6224":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:7904:8060":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:8314:158":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:6710:10531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:48014:8846":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:623:38398":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:6030:4859":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"18:726:6444":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:12146:6697":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12287:6713":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:927:4857":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:8695:10822":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:2534:2678":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"1:7472:6322":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:3743:6479":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5165:10129":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:14454:7021":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:6826:4856":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:9483:5067":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:7527:8342":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:1005:4867":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:13239:5980":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:13996:6920":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:6651:10512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:5623:10336":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:9445:8981":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:4852:10651":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:47367:8796":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:5564:6008":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:1483:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:8007:10760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:45480:10813":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:26659:283":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:1660:8248":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:9432:8978":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:6390:10381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:2142:4699":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:10479:24601":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:3628:4819":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:12546:8548":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:14384:7012":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:47176:8771":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"11:123:6222":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:9478:9468":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:4517:8898":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"11:1858:4728":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:754:6449":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:7072:24534":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:45371:6004":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:5477:10271":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:15801:7355":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:1352:6468":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:2872:213":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:7398:38376":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:2746:7680":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:9514:4660":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:12737:6775":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:14110:6944":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:40438:4823":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:10815:6598":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"17:16613:6888":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:699:8884":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11901:6667":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:7505:7984":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:44559:8685":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:13553:24607":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:6280:6317":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"11:1892:8248":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:988:4865":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:999:4866":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5617:10333":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:7390:10655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:2339:151":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:3158:150":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:11179:29345":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:6817:4777":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13423:6833":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:11825:6660":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:15659:7320":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:5821:5796":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12272:6709":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11512:24618":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"2:34457:4799":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:48186:8861":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:12924:6794":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:2548:7671":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:23000:12005":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:48107:8853":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:15159:7146":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:47417:8798":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:3792:6233":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":33}