{"root":"0:0:3367","crate_version":"1.0.104","includes_private":false,"index":{"0:403:3445":{"id":"0:403:3445","crate_id":0,"name":"get_archiver","span":{"filename":"src/lib.rs","begin":[3174,4],"end":[3179,5]},"visibility":"public","docs":"Get the archiver (ar) that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5720:5841"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5687:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:719":{"id":"0:208:719","crate_id":0,"name":"env","span":{"filename":"src/tool.rs","begin":[339,4],"end":[341,5]},"visibility":"public","docs":"Returns the set of environment variables needed for this compiler to\noperate.\n\nThis is typically only used for MSVC compilers currently.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"tuple":[{"resolved_path":{"name":"OsString","id":"1:2083:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"OsString","id":"1:2083:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:638":{"id":"0:638","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[260,16],"end":[260,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10749:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:639:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13901:2673":{"id":"2:13901:2673","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42789:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:528:3971":{"id":"0:528:3971","crate_id":0,"name":"Vs16","span":{"filename":"src/windows/find_tools.rs","begin":[163,4],"end":[163,8]},"visibility":"default","docs":"Visual Studio 16 (2019)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:564:827":{"id":"0:564:827","crate_id":0,"name":"fmt","span":{"filename":"src/tool.rs","begin":[26,16],"end":[26,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10713:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10694:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:338:2542":{"id":"0:338:2542","crate_id":0,"name":"out_dir","span":{"filename":"src/lib.rs","begin":[1128,4],"end":[1131,5]},"visibility":"public","docs":"Configures the output directory where all object files and static\nlibraries will be located.\n\nThis option is automatically scraped from the `OUT_DIR` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["out_dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5478:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:224-0:551:2513":{"id":"0:224-0:551:2513","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,0],"end":[238,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tool::Tool","name":"Tool","id":"0:551:2513","glob":false}}},"a:2:3300:260-0:661:149":{"id":"a:2:3300:260-0:661:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42881:5024-0:593:2526":{"id":"a:2:42881:5024-0:593:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42881:5024","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3943-0:521:3963":{"id":"b:2:3943-0:521:3963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:344:2546":{"id":"0:344:2546","crate_id":0,"name":"ranlib","span":{"filename":"src/lib.rs","begin":[1158,4],"end":[1161,5]},"visibility":"public","docs":"Configures the tool used to index archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ranlib",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5478:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:593:2526":{"id":"b:2:3081-0:593:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3092-0:551:2513":{"id":"b:2:3092-0:551:2513","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13944:4264":{"id":"2:13944:4264","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:5108"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13368:5856","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13914:30868":{"id":"2:13914:30868","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13913:30867"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:4370":{"id":"0:209:4370","crate_id":0,"name":"cc_env","span":{"filename":"src/tool.rs","begin":[347,4],"end":[361,5]},"visibility":"public","docs":"Returns the compiler command in format of CC environment variable.\nOr empty string if CC env was not present\n\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:2083:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:302:2640":{"id":"0:302:2640","crate_id":0,"name":"ar_flag","span":{"filename":"src/lib.rs","begin":[547,4],"end":[550,5]},"visibility":"public","docs":"Add a flag to the invocation of the ar\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .file(\"src/bar.c\")\n    .ar_flag(\"/NODEFAULTLIB:libc.dll\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"impl_trait":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"impl AsRef<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33079:4847-0:661:149":{"id":"a:2:33079:4847-0:661:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33079:4847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13971:37125":{"id":"2:13971:37125","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13578:5108","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12456:490","str::matches":"2:13968:3320"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:45012:5874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:5849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2775-0:661:149":{"id":"b:2:2775-0:661:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:29008"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13923:34637":{"id":"2:13923:34637","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:45082:5854","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:312:2535":{"id":"0:312:2535","crate_id":0,"name":"no_default_flags","span":{"filename":"src/lib.rs","begin":[785,4],"end":[788,5]},"visibility":"public","docs":"Disables the generation of default compiler flags. The default compiler\nflags may cause conflicts in some cross compiling scenarios.\n\nSetting the `CRATE_CC_NO_DEFAULTS` environment variable has the same\neffect as setting this to `true`. The presence of the environment\nvariable and the value of `no_default_flags` will be OR'd together.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["no_default_flags",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13950:37123":{"id":"2:13950:37123","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13578:5108","str::split":"2:13941:3251","prim@char":"1:12456:490","`DoubleEndedIterator`":"2:8476:133","str::rsplit_terminator":"2:13953:37124"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44840:5879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2774:2501":{"id":"2:2774:2501","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13988:37131":{"id":"2:13988:37131","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:5108"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13604:5847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13984:4137":{"id":"2:13984:4137","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:521:3963":{"id":"b:5:784-0:521:3963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3049","5:787:2917","5:788:3471"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:533:827":{"id":"0:533:827","crate_id":0,"name":"fmt","span":{"filename":"src/windows/find_tools.rs","begin":[153,9],"end":[153,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10713:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10694:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13991:3408":{"id":"2:13991:3408","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:5108"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13903:30839":{"id":"2:13903:30839","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42789:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13919:3432":{"id":"2:13919:3432","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13920:3662"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:45064:5857","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13899:350":{"id":"2:13899:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13900:30842","`u8`":"1:12475:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319:2335":{"id":"0:319:2335","crate_id":0,"name":"cuda","span":{"filename":"src/lib.rs","begin":[838,4],"end":[845,5]},"visibility":"public","docs":"Set CUDA C++ support.\n\nEnabling CUDA will invoke the CUDA compiler, NVCC. While NVCC accepts\nthe most common compiler flags, e.g. `-std=c++17`, some project-specific\nflags might have to be prefixed with \"-Xcompiler\" flag, for example as\n`.flag(\"-Xcompiler\").flag(\"-fpermissive\")`. See the documentation for\n`nvcc`, the CUDA compiler driver, at <https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/>\nfor more information.\n\nIf enabled, this also implicitly enables C++ support.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cuda",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3090:149":{"id":"2:3090:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:14017:32054":{"id":"2:14017:32054","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:41045"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13941:3251":{"id":"2:13941:3251","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13578:5108","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12456:490","str::split_whitespace":"2:13919:3432","str::rsplit":"2:13947:30871"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44790:4640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13986:37129":{"id":"2:13986:37129","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13916:4350":{"id":"2:13916:4350","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12456:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44760:5862","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2777:29008":{"id":"2:2777:29008","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3300:260-0:521:3963":{"id":"a:2:3300:260-0:521:3963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3945:1865":{"id":"2:3945:1865","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40504:8792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:537":{"id":"0:537","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[153,27],"end":[153,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:371:3067":{"id":"0:371:3067","crate_id":0,"name":"expand","span":{"filename":"src/lib.rs","begin":[1755,4],"end":[1760,5]},"visibility":"public","docs":"Run the compiler, returning the macro-expanded version of the input files.\n\nThis is only relevant for C and C++ files.\n\n# Panics\nPanics if more than one file is present in the config, or if compiler\npath has an invalid file name.\n\n# Example\n```no_run\nlet out = cc::Build::new().file(\"src/foo.c\").expand();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:7215:278","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282:857":{"id":"0:282:857","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[349,4],"end":[351,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"io::Error","id":"1:3077:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13974:37126":{"id":"2:13974:37126","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13578:5108","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12456:490","str::rmatch_indices":"2:13977:37127"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44940:5871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:322:1757":{"id":"0:322:1757","crate_id":0,"name":"std","span":{"filename":"src/lib.rs","begin":[898,4],"end":[901,5]},"visibility":"public","docs":"Specify the C or C++ language standard version.\n\nThese values are common to modern versions of GCC, Clang and MSVC:\n- `c11` for ISO/IEC 9899:2011\n- `c17` for ISO/IEC 9899:2018\n- `c++14` for ISO/IEC 14882:2014\n- `c++17` for ISO/IEC 14882:2017\n- `c++20` for ISO/IEC 14882:2020\n\nOther values have less broad support, e.g. MSVC does not support `c++11`\n(`c++14` is the minimum), `c89` (omit the flag instead) or `c99`.\n\nFor compiling C++ code, you should also set `.cpp(true)`.\n\nThe default is that no standard flag is passed to the compiler, so the\nlanguage version will be the compiler's default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/modern.cpp\")\n    .cpp(true)\n    .std(\"c++17\")\n    .compile(\"modern\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["std",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14000:3481":{"id":"2:14000:3481","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:5108"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:5849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:30112":{"id":"5:5741:30112","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:14014:30115"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:530:3973":{"id":"0:530:3973","crate_id":0,"name":"Vs17","span":{"filename":"src/windows/find_tools.rs","begin":[165,4],"end":[165,8]},"visibility":"default","docs":"Visual Studio 17 (2022)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:5:784-0:661:149":{"id":"b:5:784-0:661:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3049","5:787:2917","5:788:3471"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:333:903":{"id":"0:333:903","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[1079,4],"end":[1082,5]},"visibility":"public","docs":"Configures the host assumed by this configuration.\n\nThis option is automatically scraped from the `HOST` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .host(\"arm-linux-gnueabihf\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["host",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:346:2676":{"id":"0:346:2676","crate_id":0,"name":"cargo_metadata","span":{"filename":"src/lib.rs","begin":[1174,4],"end":[1177,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.\n\nThe emitted metadata is:\n\n - `rustc-link-lib=static=`*compiled lib*\n - `rustc-link-search=native=`*target folder*\n - When target is MSVC, the ATL-MFC libs are added via `rustc-link-search=native=`\n - When C++ is enabled, the C++ stdlib is added via `rustc-link-lib`\n - If `emit_rerun_if_env_changed` is not `false`, `rerun-if-env-changed=`*env*\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_metadata",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:335:2844":{"id":"0:335:2844","crate_id":0,"name":"opt_level_str","span":{"filename":"src/lib.rs","begin":[1097,4],"end":[1100,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3083:857":{"id":"2:3083:857","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:4375":{"id":"0:210:4375","crate_id":0,"name":"cflags_env","span":{"filename":"src/tool.rs","begin":[366,4],"end":[375,5]},"visibility":"public","docs":"Returns the compiler flags in format of CFLAGS environment variable.\nImportant here - this will not be CFLAGS from env, its internal gcc's flags to use as CFLAGS\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:2083:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:318:2537":{"id":"0:318:2537","crate_id":0,"name":"cpp","span":{"filename":"src/lib.rs","begin":[823,4],"end":[826,5]},"visibility":"public","docs":"Set C++ support.\n\nThe other `cpp_*` options will only become active if this is set to\n`true`.\n\nThe name of the C++ standard library to link is decided by:\n1. If [`cpp_link_stdlib`](Build::cpp_link_stdlib) is set, use its value.\n2. Else if the `CXXSTDLIB` environment variable is set, use its value.\n3. Else the default is `libc++` for OS X and BSDs, `libc++_shared` for Android,\n`None` for MSVC and `libstdc++` for anything else.","links":{"Build::cpp_link_stdlib":"0:326:2538"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:299:2520":{"id":"0:299:2520","crate_id":0,"name":"flag","span":{"filename":"src/lib.rs","begin":[513,4],"end":[516,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"-ffunction-sections\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"impl_trait":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"impl AsRef<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96-0:26:2509":{"id":"0:96-0:26:2509","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[232,0],"end":[232,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"windows::find_tools","name":"windows_registry","id":"0:26:2509","glob":false}}},"0:407:3455":{"id":"0:407:3455","crate_id":0,"name":"get_ranlib","span":{"filename":"src/lib.rs","begin":[3226,4],"end":[3231,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5720:5841"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5687:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14021:11673":{"id":"2:14021:11673","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5150:11673"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:45098:5867","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:561":{"id":"0:561","crate_id":0,"name":null,"span":{"filename":"src/tool.rs","begin":[26,9],"end":[26,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_docs)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:562:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:211:4351":{"id":"0:211:4351","crate_id":0,"name":"is_like_gnu","span":{"filename":"src/tool.rs","begin":[378,4],"end":[380,5]},"visibility":"public","docs":"Whether the tool is GNU Compiler Collection-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2775-0:593:2526":{"id":"b:2:2775-0:593:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:29008"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:315:2536":{"id":"0:315:2536","crate_id":0,"name":"files","span":{"filename":"src/lib.rs","begin":[797,4],"end":[806,5]},"visibility":"public","docs":"Add files which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:8438:176","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5478:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:786:3049":{"id":"5:786:3049","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:14014:30115":{"id":"2:14014:30115","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:521:3963":{"id":"b:2:3087-0:521:3963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3080:2584":{"id":"2:3080:2584","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3054:156"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14016:32053":{"id":"2:14016:32053","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:41045"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:342:2545":{"id":"0:342:2545","crate_id":0,"name":"archiver","span":{"filename":"src/lib.rs","begin":[1148,4],"end":[1151,5]},"visibility":"public","docs":"Configures the tool used to assemble archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["archiver",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5478:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:551:2513":{"id":"b:2:3087-0:551:2513","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13924:2690":{"id":"2:13924:2690","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:5108"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:551:2513":{"id":"0:551:2513","crate_id":0,"name":"Tool","span":{"filename":"src/tool.rs","begin":[28,0],"end":[38,1]},"visibility":"public","docs":"Configuration used to represent an invocation of a C compiler.\n\nThis can be used to figure out what compiler is in use, what the arguments\nto it are, and what the environment variables look like for the compiler.\nThis can be used to further configure other build systems (e.g. forward\nalong CC and/or CFLAGS) or the `to_command` method can be used to run the\ncompiler itself.","links":{},"attrs":["#[allow(missing_docs)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:186","a:2:33020:248-0:551:2513","a:2:42880:5025-0:551:2513","a:2:3335:5258-0:551:2513","a:2:3300:260-0:551:2513","a:2:42881:5024-0:551:2513","a:2:33079:4847-0:551:2513","b:2:2804-0:551:2513","b:2:3081-0:551:2513","b:2:2772-0:551:2513","b:2:3087-0:551:2513","b:2:3077-0:551:2513","b:2:3943-0:551:2513","b:2:3092-0:551:2513","b:2:2775-0:551:2513","b:5:784-0:551:2513","0:563","0:561"]}}},"b:2:3092-0:521:3963":{"id":"b:2:3092-0:521:3963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13897:4268":{"id":"2:13897:4268","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:13100:3694"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13922:37122":{"id":"2:13922:37122","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:45054:5870","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:563":{"id":"0:563","crate_id":0,"name":null,"span":{"filename":"src/tool.rs","begin":[26,16],"end":[26,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_docs)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10749:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:564:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:33020:248-0:521:3963":{"id":"a:2:33020:248-0:521:3963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3943-0:551:2513":{"id":"b:2:3943-0:551:2513","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:351:2550":{"id":"0:351:2550","crate_id":0,"name":"use_plt","span":{"filename":"src/lib.rs","begin":[1229,4],"end":[1232,5]},"visibility":"public","docs":"Configures whether the Procedure Linkage Table is used for indirect\ncalls into shared libraries.\n\nThe PLT is used to provide features like lazy binding, but introduces\na small performance loss due to extra pointer indirection. Setting\n`use_plt` to `false` can provide a small performance increase.\n\nNote that skipping the PLT requires a recent version of GCC/Clang.\n\nThis only applies to ELF targets. It has no effect on other platforms.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["use_plt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5722":{"id":"5:5722","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5723:37827","5:5724:3468","5:5727:37828","5:5730:3798","5:5738:37829","5:5739:37830","5:5740:4661","5:5741:30112","5:5742:30113"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2772-0:551:2513":{"id":"b:2:2772-0:551:2513","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:2501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:536:722":{"id":"0:536:722","crate_id":0,"name":"eq","span":{"filename":"src/windows/find_tools.rs","begin":[153,16],"end":[153,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5724:3468":{"id":"5:5724:3468","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13911:3405":{"id":"2:13911:3405","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13913:30867","str::split_at_mut":"2:13912:30864"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320:2540":{"id":"0:320:2540","crate_id":0,"name":"cudart","span":{"filename":"src/lib.rs","begin":[853,4],"end":[858,5]},"visibility":"public","docs":"Link CUDA run-time.\n\nThis option mimics the `--cudart` NVCC command-line option. Just like\nthe original it accepts `{none|shared|static}`, with default being\n`static`. The method has to be invoked after `.cuda(true)`, or not\nat all, if the default is right for the project.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cudart",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:404:3446":{"id":"0:404:3446","crate_id":0,"name":"try_get_archiver","span":{"filename":"src/lib.rs","begin":[3185,4],"end":[3187,5]},"visibility":"public","docs":"Get the archiver that's in use for this configuration.\n\nThis will return a result instead of panicking;\nsee [`Self::get_archiver`] for the complete description.","links":{"`Self::get_archiver`":"0:403:3445"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43052:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5687:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33020:248-0:593:2526":{"id":"a:2:33020:248-0:593:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2804-0:593:2526":{"id":"b:2:2804-0:593:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:5264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2806:29003"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13905:30840":{"id":"2:13905:30840","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3092-0:661:149":{"id":"b:2:3092-0:661:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:483":{"id":"0:483","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[4030,0],"end":[4034,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:484:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13892:37117":{"id":"2:13892:37117","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13888":{"id":"2:13888","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13889:1024","2:13890:2704","2:13891:37116","2:13892:37117","2:13894:37118","2:13897:4268","2:13898:37119","2:13899:350","2:13900:30842","2:13901:2673","2:13903:30839","2:13905:30840","2:13907:30841","2:13909:37120","2:13910:37121","2:13911:3405","2:13912:30864","2:13913:30867","2:13914:30868","2:13916:4350","2:13917:9138","2:13918:5557","2:13919:3432","2:13920:3662","2:13921:34113","2:13922:37122","2:13923:34637","2:13924:2690","2:13927:2914","2:13930:2915","2:13933:2924","2:13937:3406","2:13941:3251","2:13944:4264","2:13947:30871","2:13950:37123","2:13953:37124","2:13956:30873","2:13959:30875","2:13962:3150","2:13965:30877","2:13968:3320","2:13971:37125","2:13974:37126","2:13977:37127","2:13980:3427","2:13982:37128","2:13984:4137","2:13986:37129","2:13987:37130","2:13988:37131","2:13991:3408","2:13994:3745","2:13997:3483","2:14000:3481","2:14003:37132","2:14006:37133","2:14009:3278","2:14011:30110","2:14012:32050","2:14013:30114","2:14014:30115","2:14015:30116","2:14016:32053","2:14017:32054","2:14018:32055","2:14019:37134","2:14021:11673","2:14022:37135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:186":{"id":"0:186","crate_id":0,"name":null,"span":{"filename":"src/tool.rs","begin":[40,0],"end":[402,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:204:2688","0:206:1333","0:207:345","0:208:719","0:209:4370","0:210:4375","0:211:4351","0:212:2684","0:214:2696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:362:2987":{"id":"0:362:2987","crate_id":0,"name":"compile","span":{"filename":"src/lib.rs","begin":[1443,4],"end":[1447,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\n# Library name\n\nThe `output` string argument determines the file name for the compiled\nlibrary. The Rust compiler will create an assembly named \"lib\"+output+\".a\".\nMSVC will create a file named output+\".lib\".\n\nThe choice of `output` is close to arbitrary, but:\n\n- must be nonempty,\n- must not contain a path separator (`/`),\n- must be unique across all `compile` invocations made by the same build\n  script.\n\nIf your build script compiles a single source file, the base name of\nthat source file would usually be reasonable:\n\n```no_run\ncc::Build::new().file(\"blobstore.c\").compile(\"blobstore\");\n```\n\nCompiling multiple source files, some people use their crate's name, or\ntheir crate's name + \"-cc\".\n\nOtherwise, please use your imagination.\n\nFor backwards compatibility, if `output` starts with \"lib\" *and* ends\nwith \".a\", a second \"lib\" prefix and \".a\" suffix do not get added on,\nbut this usage is deprecated; please omit `lib` and `.a` in the argument\nthat you pass.\n\n# Panics\n\nPanics if `output` is not formatted correctly or if one of the underlying\ncompiler commands fails. It can also panic if it fails reading file names\nor creating directories.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:551:2513":{"id":"b:2:3077-0:551:2513","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:2584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13918:5557":{"id":"2:13918:5557","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44776:4639","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5739:37830":{"id":"5:5739:37830","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2519","`String`":"5:7802:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2519","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2804-0:521:3963":{"id":"b:2:2804-0:521:3963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:5264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2806:29003"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:14015:30116":{"id":"2:14015:30116","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:337:2544":{"id":"0:337:2544","crate_id":0,"name":"force_frame_pointer","span":{"filename":"src/lib.rs","begin":[1118,4],"end":[1121,5]},"visibility":"public","docs":"Configures whether the compiler will emit instructions to store\nframe pointers during codegen.\n\nThis option is automatically enabled when debug information is emitted.\nOtherwise the target platform compiler's default will be used.\nYou can use this option to force a specific setting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["force",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:345":{"id":"0:207:345","crate_id":0,"name":"args","span":{"filename":"src/tool.rs","begin":[331,4],"end":[333,5]},"visibility":"public","docs":"Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"OsString","id":"1:2083:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13959:30875":{"id":"2:13959:30875","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12456:490","str::splitn":"2:13956:30873","self::pattern":"2:13578:5108"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44912:5876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:5849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:551:2513":{"id":"b:2:3081-0:551:2513","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:33079:4847-0:521:3963":{"id":"a:2:33079:4847-0:521:3963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33079:4847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3335:5258-0:551:2513":{"id":"a:2:3335:5258-0:551:2513","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3335:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42880:5025-0:521:3963":{"id":"a:2:42880:5025-0:521:3963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42880:5025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:784-0:593:2526":{"id":"b:5:784-0:593:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3049","5:787:2917","5:788:3471"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13900:30842":{"id":"2:13900:30842","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12475:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13956:30873":{"id":"2:13956:30873","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:5108","str::rsplitn":"2:13959:30875"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44894:5877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13980:3427":{"id":"2:13980:3427","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13994:3745":{"id":"2:13994:3745","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:5108"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:317:2744":{"id":"0:317:2744","crate_id":0,"name":"get_files","span":{"filename":"src/lib.rs","begin":[809,4],"end":[811,5]},"visibility":"public","docs":"Get the files which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"impl_trait":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5478:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13889:1024":{"id":"2:13889:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12456:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:637:494":{"id":"0:637:494","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[260,9],"end":[260,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:206:1333":{"id":"0:206:1333","crate_id":0,"name":"path","span":{"filename":"src/tool.rs","begin":[325,4],"end":[327,5]},"visibility":"public","docs":"Returns the path for this compiler.\n\nNote that this may not be a path to a file on the filesystem, e.g. \"cc\",\nbut rather something which will be resolved when a process is spawned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5478:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14011:30110":{"id":"2:14011:30110","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3335:5258-0:521:3963":{"id":"a:2:3335:5258-0:521:3963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3335:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:14003:37132":{"id":"2:14003:37132","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:5108"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:305:2665":{"id":"0:305:2665","crate_id":0,"name":"is_flag_supported","span":{"filename":"src/lib.rs","begin":[601,4],"end":[607,5]},"visibility":"public","docs":"Run the compiler to test if it accepts the given flag.\n\nFor a convenience method for setting flags conditionally,\nsee `flag_if_supported()`.\n\nIt may return error if it's unable to run the compiler with a test file\n(e.g. the compiler is missing or a write to the `out_dir` failed).\n\nNote: Once computed, the result of this call is stored in the\n`known_flag_support` field. If `is_flag_supported(flag)`\nis called again, the result will be read from the hash table.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["flag",{"impl_trait":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"Result","id":"2:43052:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}},{"type":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl AsRef<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:3948":{"id":"0:66:3948","crate_id":0,"name":"find_tool","span":{"filename":"src/windows/find_tools.rs","begin":[109,0],"end":[111,1]},"visibility":"public","docs":"Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13927:2914":{"id":"2:13927:2914","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:5108"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:541:494":{"id":"0:541:494","crate_id":0,"name":"clone","span":{"filename":"src/windows/find_tools.rs","begin":[153,37],"end":[153,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:636":{"id":"0:636","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[260,9],"end":[260,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:637:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:311:2553":{"id":"0:311:2553","crate_id":0,"name":"static_flag","span":{"filename":"src/lib.rs","begin":[774,4],"end":[777,5]},"visibility":"public","docs":"Set the `-static` flag.\n\nWhen enabled on systems that support dynamic linking, this prevents\nlinking with the shared libraries.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .static_flag(true)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14009:3278":{"id":"2:14009:3278","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13539:148","`FromStr`":"2:13538:4005"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43052:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13538:4005","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13538:4005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:524:3967":{"id":"0:524:3967","crate_id":0,"name":"Vs14","span":{"filename":"src/windows/find_tools.rs","begin":[159,4],"end":[159,8]},"visibility":"default","docs":"Visual Studio 14 (2015)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:14019:37134":{"id":"2:14019:37134","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5149:37134"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:45089:5866","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5977:1825":{"id":"5:5977:1825","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14006:37133":{"id":"2:14006:37133","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:5108"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:5849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14012:32050":{"id":"2:14012:32050","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40688:16968","Self::is_ascii":"2:14011:30110"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40688:16968","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:521:3963":{"id":"b:2:3081-0:521:3963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:534":{"id":"0:534","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[153,16],"end":[153,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:33022:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:310:2552":{"id":"0:310:2552","crate_id":0,"name":"shared_flag","span":{"filename":"src/lib.rs","begin":[755,4],"end":[758,5]},"visibility":"public","docs":"Set the `-shared` flag.\n\nWhen enabled, the compiler will produce a shared object which can\nthen be linked with other objects to form an executable.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["shared_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14013:30114":{"id":"2:14013:30114","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:308:2721":{"id":"0:308:2721","crate_id":0,"name":"try_flags_from_environment","span":{"filename":"src/lib.rs","begin":[732,4],"end":[740,5]},"visibility":"public","docs":"Add flags from the specified environment variable.\n\nNormally the `cc` crate will consult with the standard set of environment\nvariables (such as `CFLAGS` and `CXXFLAGS`) to construct the compiler invocation. Use of\nthis method provides additional levers for the end user to use when configuring the build\nprocess.\n\nJust like the standard variables, this method will search for an environment variable with\nappropriate target prefixes, when appropriate.\n\n# Examples\n\nThis method is particularly beneficial in introducing the ability to specify crate-specific\nflags.\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .try_flags_from_environment(concat!(env!(\"CARGO_PKG_NAME\"), \"_CFLAGS\"))\n    .expect(\"the environment variable must be specified and UTF-8\")\n    .compile(\"foo\");\n```\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["environ_key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43052:237","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:788:3471":{"id":"5:788:3471","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3335:5258-0:593:2526":{"id":"a:2:3335:5258-0:593:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3335:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13894:37118":{"id":"2:13894:37118","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13892:37117"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336:627":{"id":"0:336:627","crate_id":0,"name":"debug","span":{"filename":"src/lib.rs","begin":[1107,4],"end":[1110,5]},"visibility":"public","docs":"Configures whether the compiler will emit debug information when\ngenerating object files.\n\nThis option is automatically scraped from the `DEBUG` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["debug",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2772-0:661:149":{"id":"b:2:2772-0:661:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:2501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:639:827":{"id":"0:639:827","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[260,16],"end":[260,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10713:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10694:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13962:3150":{"id":"2:13962:3150","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:408:3456":{"id":"0:408:3456","crate_id":0,"name":"try_get_ranlib","span":{"filename":"src/lib.rs","begin":[3237,4],"end":[3243,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nThis will return a result instead of panicking;\nsee [`Self::get_ranlib`] for the complete description.","links":{"`Self::get_ranlib`":"0:407:3455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43052:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5687:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:540":{"id":"0:540","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[153,37],"end":[153,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:541:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:33020:248-0:661:149":{"id":"a:2:33020:248-0:661:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:289:1208":{"id":"0:289:1208","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[384,4],"end":[429,5]},"visibility":"public","docs":"Construct a new instance of a blank set of configuration.\n\nThis builder is finished with the [`compile`] function.\n\n[`compile`]: struct.Build.html#method.compile","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13921:34113":{"id":"2:13921:34113","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:45044:4636","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13937:3406":{"id":"2:13937:3406","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42789:202","prim@char":"1:12456:490","self::pattern":"2:13578:5108"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:5849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:551:2513":{"id":"b:5:784-0:551:2513","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3049","5:787:2917","5:788:3471"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:204:2688":{"id":"0:204:2688","crate_id":0,"name":"to_command","span":{"filename":"src/tool.rs","begin":[297,4],"end":[319,5]},"visibility":"public","docs":"Converts this compiler into a `Command` that's ready to be run.\n\nThis is useful for when the compiler needs to be executed and the\ncommand returned will already have the initial arguments and environment\nvariables configured.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5687:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:334:2543":{"id":"0:334:2543","crate_id":0,"name":"opt_level","span":{"filename":"src/lib.rs","begin":[1088,4],"end":[1091,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"primitive":"u32"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13920:3662":{"id":"2:13920:3662","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13919:3432"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:45073:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42881:5024-0:551:2513":{"id":"a:2:42881:5024-0:551:2513","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42881:5024","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:364:2994":{"id":"0:364:2994","crate_id":0,"name":"try_compile_intermediates","span":{"filename":"src/lib.rs","begin":[1465,4],"end":[1472,5]},"visibility":"public","docs":"Run the compiler, generating intermediate files, but without linking\nthem into an archive file.\n\nThis will return a result instead of panicking; see `compile_intermediates()` for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43052:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7215:278","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5362:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5742:30113":{"id":"5:5742:30113","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:14015:30116"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13977:37127":{"id":"2:13977:37127","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13578:5108","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12456:490","str::match_indices":"2:13974:37126"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44958:5872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:5849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13913:30867":{"id":"2:13913:30867","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13914:30868"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13968:3320":{"id":"2:13968:3320","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13578:5108","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12456:490","str::rmatches":"2:13971:37125"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44994:5873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:363:2993":{"id":"0:363:2993","crate_id":0,"name":"compile_intermediates","span":{"filename":"src/lib.rs","begin":[1454,4],"end":[1459,5]},"visibility":"public","docs":"Run the compiler, generating intermediate files, but without linking\nthem into an archive file.\n\nThis will return a list of compiled object files, in the same order\nas they were passed in as `file`/`files` methods.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:7215:278","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5362:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14022:37135":{"id":"2:14022:37135","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5147:37135"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:45107:5868","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:357:2908":{"id":"0:357:2908","crate_id":0,"name":"try_compile","span":{"filename":"src/lib.rs","begin":[1266,4],"end":[1404,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThis will return a result instead of panicking; see compile() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43052:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325:2555":{"id":"0:325:2555","crate_id":0,"name":"extra_warnings","span":{"filename":"src/lib.rs","begin":[966,4],"end":[969,5]},"visibility":"public","docs":"Set extra warnings flags.\n\nAdds some flags:\n- nothing for MSVC.\n- \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\n// Disables -Wextra, -Wall remains enabled:\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .extra_warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42880:5025-0:551:2513":{"id":"a:2:42880:5025-0:551:2513","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42880:5025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:372:2948":{"id":"0:372:2948","crate_id":0,"name":"get_compiler","span":{"filename":"src/lib.rs","begin":[1780,4],"end":[1785,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis function will return a `Tool` which represents the culmination\nof this configuration at a snapshot in time. The returned compiler can\nbe inspected (e.g. the path, arguments, environment) to forward along to\nother tools, or the `to_command` method can be used to invoke the\ncompiler itself.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3335:5258-0:661:149":{"id":"a:2:3335:5258-0:661:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3335:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13917:9138":{"id":"2:13917:9138","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12456:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44766:5861","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14018:32055":{"id":"2:14018:32055","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:41045"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:352:2559":{"id":"0:352:2559","crate_id":0,"name":"emit_rerun_if_env_changed","span":{"filename":"src/lib.rs","begin":[1240,4],"end":[1243,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo to detect environment\nchanges that should trigger a rebuild.\n\nThis has no effect if the `cargo_metadata` option is `false`.\n\nThis option defaults to `true`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["emit_rerun_if_env_changed",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:661:149":{"id":"b:2:3081-0:661:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:665:494":{"id":"0:665:494","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[331,9],"end":[331,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324:2498":{"id":"0:324:2498","crate_id":0,"name":"warnings","span":{"filename":"src/lib.rs","begin":[943,4],"end":[947,5]},"visibility":"public","docs":"Set warnings flags.\n\nAdds some flags:\n- \"-Wall\" for MSVC.\n- \"-Wall\", \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5975-0:661:149":{"id":"b:5:5975-0:661:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10754:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5973:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5977:1825"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13933:2924":{"id":"2:13933:2924","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42789:202","prim@char":"1:12456:490","self::pattern":"2:13578:5108"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294:2621":{"id":"0:294:2621","crate_id":0,"name":"define","span":{"filename":"src/lib.rs","begin":[491,4],"end":[495,5]},"visibility":"public","docs":"Specify a `-D` variable with an optional value.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .define(\"FOO\", \"BAR\")\n    .define(\"BAZ\", None)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["val",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2806:29003":{"id":"2:2806:29003","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42880:5025-0:593:2526":{"id":"a:2:42880:5025-0:593:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42880:5025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3077-0:661:149":{"id":"b:2:3077-0:661:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:2584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:661:149":{"id":"0:661:149","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[332,0],"end":[337,1]},"visibility":"public","docs":"Represents an internal error that occurred, with an explanation.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:33020:248-0:661:149","a:2:42880:5025-0:661:149","a:2:3335:5258-0:661:149","a:2:3300:260-0:661:149","a:2:42881:5024-0:661:149","a:2:33079:4847-0:661:149","b:2:2804-0:661:149","b:2:3081-0:661:149","b:2:2772-0:661:149","b:2:3087-0:661:149","b:2:3077-0:661:149","b:2:3943-0:661:149","b:2:3092-0:661:149","b:2:2775-0:661:149","b:5:784-0:661:149","b:5:5975-0:661:149","0:285","0:666","0:664","0:283","0:281"]}}},"5:5727:37828":{"id":"5:5727:37828","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:340:523":{"id":"0:340:523","crate_id":0,"name":"compiler","span":{"filename":"src/lib.rs","begin":[1138,4],"end":[1141,5]},"visibility":"public","docs":"Configures the compiler to be used to produce output.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["compiler",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5478:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:2625":{"id":"0:297:2625","crate_id":0,"name":"object","span":{"filename":"src/lib.rs","begin":[498,4],"end":[501,5]},"visibility":"public","docs":"Add an arbitrary object file to link in","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["obj",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5478:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13909:37120":{"id":"2:13909:37120","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12462:1765","str::slice_mut_unchecked":"2:13910:37121","crate::ops::Index":"2:40335:4771"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42880:5025-0:661:149":{"id":"a:2:42880:5025-0:661:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42880:5025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2772-0:521:3963":{"id":"b:2:2772-0:521:3963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:2501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13997:3483":{"id":"2:13997:3483","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:5108"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:5849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2509":{"id":"0:26:2509","crate_id":0,"name":"find_tools","span":{"filename":"src/windows/find_tools.rs","begin":[11,0],"end":[1221,1]},"visibility":"public","docs":"A helper module to looking for windows-specific tools:\n1. On Windows host, probe the Windows Registry if needed;\n2. On non-Windows host, check specified environment variables.","links":{},"attrs":["#![allow(clippy::upper_case_acronyms)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:64:2924","0:66:3948","0:521:3963","0:71:3977"],"is_stripped":false}}},"a:2:33079:4847-0:551:2513":{"id":"a:2:33079:4847-0:551:2513","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33079:4847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:0:3367":{"id":"0:0:3367","crate_id":0,"name":"cc","span":{"filename":"src/lib.rs","begin":[1,0],"end":[4244,1]},"visibility":"public","docs":"A library for [Cargo build scripts](https://doc.rust-lang.org/cargo/reference/build-scripts.html)\nto compile a set of C/C++/assembly/CUDA files into a static archive for Cargo\nto link into the crate being built. This crate does not compile code itself;\nit calls out to the default compiler for the platform. This crate will\nautomatically detect situations such as cross compilation and\n[various environment variables](#external-configuration-via-environment-variables) and will build code appropriately.\n\n# Example\n\nFirst, you'll want to both add a build script for your crate (`build.rs`) and\nalso add this crate to your `Cargo.toml` via:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n```\n\nNext up, you'll want to write a build script like so:\n\n```rust,no_run\n// build.rs\ncc::Build::new()\n    .file(\"foo.c\")\n    .file(\"bar.c\")\n    .compile(\"foo\");\n```\n\nAnd that's it! Running `cargo build` should take care of the rest and your Rust\napplication will now have the C files `foo.c` and `bar.c` compiled into a file\nnamed `libfoo.a`. If the C files contain\n\n```c\nvoid foo_function(void) { ... }\n```\n\nand\n\n```c\nint32_t bar_function(int32_t x) { ... }\n```\n\nyou can call them from Rust by declaring them in\nyour Rust code like so:\n\n```rust,no_run\nextern \"C\" {\n    fn foo_function();\n    fn bar_function(x: i32) -> i32;\n}\n\npub fn call() {\n    unsafe {\n        foo_function();\n        bar_function(42);\n    }\n}\n\nfn main() {\n    call();\n}\n```\n\nSee [the Rustonomicon](https://doc.rust-lang.org/nomicon/ffi.html) for more details.\n\n# External configuration via environment variables\n\nTo control the programs and flags used for building, the builder can set a\nnumber of different environment variables.\n\n* `CFLAGS` - a series of space separated flags passed to compilers. Note that\nindividual flags cannot currently contain spaces, so doing\nsomething like: `-L=foo\\ bar` is not possible.\n* `CC` - the actual C compiler used. Note that this is used as an exact\nexecutable name, so (for example) no extra flags can be passed inside\nthis variable, and the builder must ensure that there aren't any\ntrailing spaces. This compiler must understand the `-c` flag. For\ncertain `TARGET`s, it also is assumed to know about other flags (most\ncommon is `-fPIC`).\n* `AR` - the `ar` (archiver) executable to use to build the static library.\n* `CRATE_CC_NO_DEFAULTS` - the default compiler flags may cause conflicts in\nsome cross compiling scenarios. Setting this variable\nwill disable the generation of default compiler\nflags.\n* `CC_ENABLE_DEBUG_OUTPUT` - if set, compiler command invocations and exit codes will\nbe logged to stdout. This is useful for debugging build script issues, but can be\noverly verbose for normal use.\n* `CXX...` - see [C++ Support](#c-support).\n\nFurthermore, projects using this crate may specify custom environment variables\nto be inspected, for example via the `Build::try_flags_from_environment`\nfunction. Consult the project‚Äôs own documentation or its use of the `cc` crate\nfor any additional variables it may use.\n\nEach of these variables can also be supplied with certain prefixes and suffixes,\nin the following prioritized order:\n\n  1. `<var>_<target>` - for example, `CC_x86_64-unknown-linux-gnu`\n  2. `<var>_<target_with_underscores>` - for example, `CC_x86_64_unknown_linux_gnu`\n  3. `<build-kind>_<var>` - for example, `HOST_CC` or `TARGET_CFLAGS`\n  4. `<var>` - a plain `CC`, `AR` as above.\n\nIf none of these variables exist, cc-rs uses built-in defaults.\n\nIn addition to the above optional environment variables, `cc-rs` has some\nfunctions with hard requirements on some variables supplied by [cargo's\nbuild-script driver][cargo] that it has the `TARGET`, `OUT_DIR`, `OPT_LEVEL`,\nand `HOST` variables.\n\n[cargo]: https://doc.rust-lang.org/cargo/reference/build-scripts.html#inputs-to-the-build-script\n\n# Optional features\n\n## Parallel\n\nCurrently cc-rs supports parallel compilation (think `make -jN`) but this\nfeature is turned off by default. To enable cc-rs to compile C/C++ in parallel,\nyou can change your dependency to:\n\n```toml\n[build-dependencies]\ncc = { version = \"1.0\", features = [\"parallel\"] }\n```\n\nBy default cc-rs will limit parallelism to `$NUM_JOBS`, or if not present it\nwill limit it to the number of cpus on the machine. If you are using cargo,\nuse `-jN` option of `build`, `test` and `run` commands as `$NUM_JOBS`\nis supplied by cargo.\n\n# Compile-time Requirements\n\nTo work properly this crate needs access to a C compiler when the build script\nis being run. This crate does not ship a C compiler with it. The compiler\nrequired varies per platform, but there are three broad categories:\n\n* Unix platforms require `cc` to be the C compiler. This can be found by\ninstalling cc/clang on Linux distributions and Xcode on macOS, for example.\n* Windows platforms targeting MSVC (e.g. your target triple ends in `-msvc`)\nrequire Visual Studio to be installed. `cc-rs` attempts to locate it, and\nif it fails, `cl.exe` is expected to be available in `PATH`. This can be\nset up by running the appropriate developer tools shell.\n* Windows platforms targeting MinGW (e.g. your target triple ends in `-gnu`)\nrequire `cc` to be available in `PATH`. We recommend the\n[MinGW-w64](https://www.mingw-w64.org/) distribution, which is using the\n[Win-builds](http://win-builds.org/) installation system.\nYou may also acquire it via\n[MSYS2](https://www.msys2.org/), as explained [here][msys2-help].  Make sure\nto install the appropriate architecture corresponding to your installation of\nrustc. GCC from older [MinGW](http://www.mingw.org/) project is compatible\nonly with 32-bit rust compiler.\n\n[msys2-help]: https://github.com/rust-lang/rust#building-on-windows\n\n# C++ support\n\n`cc-rs` supports C++ libraries compilation by using the `cpp` method on\n`Build`:\n\n```rust,no_run\ncc::Build::new()\n    .cpp(true) // Switch to C++ library compilation.\n    .file(\"foo.cpp\")\n    .compile(\"foo\");\n```\n\nFor C++ libraries, the `CXX` and `CXXFLAGS` environment variables are used instead of `CC` and `CFLAGS`.\n\nThe C++ standard library may be linked to the crate target. By default it's `libc++` for macOS, FreeBSD, and OpenBSD, `libc++_shared` for Android, nothing for MSVC, and `libstdc++` for anything else. It can be changed in one of two ways:\n\n1. by using the `cpp_link_stdlib` method on `Build`:\n```rust,no_run\ncc::Build::new()\n    .cpp(true)\n    .file(\"foo.cpp\")\n    .cpp_link_stdlib(\"stdc++\") // use libstdc++\n    .compile(\"foo\");\n```\n2. by setting the `CXXSTDLIB` environment variable.\n\nIn particular, for Android you may want to [use `c++_static` if you have at most one shared library](https://developer.android.com/ndk/guides/cpp-support).\n\nRemember that C++ does name mangling so `extern \"C\"` might be required to enable Rust linker to find your functions.\n\n# CUDA C++ support\n\n`cc-rs` also supports compiling CUDA C++ libraries by using the `cuda` method\non `Build`:\n\n```rust,no_run\ncc::Build::new()\n    // Switch to CUDA C++ library compilation using NVCC.\n    .cuda(true)\n    .cudart(\"static\")\n    // Generate code for Maxwell (GTX 970, 980, 980 Ti, Titan X).\n    .flag(\"-gencode\").flag(\"arch=compute_52,code=sm_52\")\n    // Generate code for Maxwell (Jetson TX1).\n    .flag(\"-gencode\").flag(\"arch=compute_53,code=sm_53\")\n    // Generate code for Pascal (GTX 1070, 1080, 1080 Ti, Titan Xp).\n    .flag(\"-gencode\").flag(\"arch=compute_61,code=sm_61\")\n    // Generate code for Pascal (Tesla P100).\n    .flag(\"-gencode\").flag(\"arch=compute_60,code=sm_60\")\n    // Generate code for Pascal (Jetson TX2).\n    .flag(\"-gencode\").flag(\"arch=compute_62,code=sm_62\")\n    // Generate code in parallel\n    .flag(\"-t0\")\n    .file(\"bar.cu\")\n    .compile(\"bar\");\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/cc/1.0\")]","#![deny(missing_docs)]","#![deny(clippy::disallowed_methods)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:96-0:26:2509","0:224-0:551:2513","0:593:2526","0:661:149"],"is_stripped":false}}},"5:5723:37827":{"id":"5:5723:37827","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2519","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2519","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:532":{"id":"0:532","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[153,9],"end":[153,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10749:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:533:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:71:3977":{"id":"0:71:3977","crate_id":0,"name":"find_vs_version","span":{"filename":"src/windows/find_tools.rs","begin":[173,0],"end":[219,1]},"visibility":"public","docs":"Find the most recent installed version of Visual Studio\n\nThis is used by the cmake crate to figure out the correct\ngenerator.","links":{},"attrs":["#[allow(clippy::disallowed_methods)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:43052:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:521:3963":{"id":"b:2:3077-0:521:3963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:2584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3087-0:593:2526":{"id":"b:2:3087-0:593:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:307:2709":{"id":"0:307:2709","crate_id":0,"name":"flag_if_supported","span":{"filename":"src/lib.rs","begin":[704,4],"end":[707,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler if it supports it\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag_if_supported(\"-Wlogical-op\") // only supported by GCC\n    .flag_if_supported(\"-Wunreachable-code\") // only supported by clang\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"impl_trait":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"impl AsRef<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:664":{"id":"0:664","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[331,9],"end":[331,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:665:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:593:2526":{"id":"0:593:2526","crate_id":0,"name":"Build","span":{"filename":"src/lib.rs","begin":[261,0],"end":[304,1]},"visibility":"public","docs":"A builder for compilation of a native library.\n\nA `Build` is the main type of the `cc` crate and is used to control all the\nvarious configuration options and such of a compile. You'll find more\ndocumentation on each method itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:288","a:2:33020:248-0:593:2526","a:2:42880:5025-0:593:2526","a:2:3335:5258-0:593:2526","a:2:3300:260-0:593:2526","a:2:42881:5024-0:593:2526","a:2:33079:4847-0:593:2526","b:2:2804-0:593:2526","b:2:3081-0:593:2526","b:2:2772-0:593:2526","b:2:3087-0:593:2526","b:2:3077-0:593:2526","b:2:3943-0:593:2526","b:2:3092-0:593:2526","b:2:2775-0:593:2526","b:5:784-0:593:2526","0:636","0:638","0:483"]}}},"0:539":{"id":"0:539","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[153,31],"end":[153,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13891:37116":{"id":"2:13891:37116","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:535":{"id":"0:535","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[153,16],"end":[153,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2854:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:536:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:292:2616":{"id":"0:292:2616","crate_id":0,"name":"includes","span":{"filename":"src/lib.rs","begin":[469,4],"end":[478,5]},"visibility":"public","docs":"Add multiple directories to the `-I` include path.\n\n# Example\n\n```no_run\n# use std::path::Path;\n# let condition = true;\n#\nlet mut extra_dir = None;\nif condition {\n    extra_dir = Some(Path::new(\"/path/to\"));\n}\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .includes(extra_dir)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dirs",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:8438:176","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5478:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:369:3057":{"id":"0:369:3057","crate_id":0,"name":"try_expand","span":{"filename":"src/lib.rs","begin":[1705,4],"end":[1741,5]},"visibility":"public","docs":"This will return a result instead of panicking; see expand() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43052:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7215:278","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13907:30841":{"id":"2:13907:30841","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42881:5024-0:521:3963":{"id":"a:2:42881:5024-0:521:3963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42881:5024","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2804-0:661:149":{"id":"b:2:2804-0:661:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:5264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2806:29003"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5738:37829":{"id":"5:5738:37829","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2772-0:593:2526":{"id":"b:2:2772-0:593:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:2501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:329:2539":{"id":"0:329:2539","crate_id":0,"name":"cpp_set_stdlib","span":{"filename":"src/lib.rs","begin":[1038,4],"end":[1046,5]},"visibility":"public","docs":"Force the C++ compiler to use the specified standard library.\n\nSetting this option will automatically set `cpp_link_stdlib` to the same\nvalue.\n\nThe default value of this option is always `None`.\n\nThis option has no effect when compiling for a Visual Studio based\ntarget.\n\nThis option sets the `-stdlib` flag, which is only supported by some\ncompilers (clang, icc) but not by others (gcc). The library will not\ndetect which compiler is used, as such it is the responsibility of the\ncaller to ensure that this option is only used in conjunction with a\ncompiler which supports the `-stdlib` flag.\n\nA value of `None` indicates that no specific C++ standard library should\nbe used, otherwise `-stdlib` is added to the compile invocation.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .cpp_set_stdlib(\"c++\")\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_set_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:349:2885":{"id":"0:349:2885","crate_id":0,"name":"link_lib_modifier","span":{"filename":"src/lib.rs","begin":[1204,4],"end":[1208,5]},"visibility":"public","docs":"Adds a native library modifier that will be added to the\n`rustc-link-lib=static:MODIFIERS=LIBRARY_NAME` metadata line\nemitted for cargo if `cargo_metadata` is enabled.\nSee <https://doc.rust-lang.org/rustc/command-line-arguments.html#-l-link-the-generated-crate-to-a-native-library>\nfor the list of modifiers accepted by rustc.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["link_lib_modifier",{"impl_trait":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"impl AsRef<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42881:5024-0:661:149":{"id":"a:2:42881:5024-0:661:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42881:5024","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:285":{"id":"0:285","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[360,0],"end":[360,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","description","source","type_id","provide"],"trait":{"name":"Error","id":"2:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3300:260-0:593:2526":{"id":"a:2:3300:260-0:593:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3096:1850":{"id":"2:3096:1850","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:43052:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212:2684":{"id":"0:212:2684","crate_id":0,"name":"is_like_clang","span":{"filename":"src/tool.rs","begin":[383,4],"end":[385,5]},"visibility":"public","docs":"Whether the tool is Clang-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:526:3969":{"id":"0:526:3969","crate_id":0,"name":"Vs15","span":{"filename":"src/windows/find_tools.rs","begin":[161,4],"end":[161,8]},"visibility":"default","docs":"Visual Studio 15 (2017)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:348:2879":{"id":"0:348:2879","crate_id":0,"name":"cargo_debug","span":{"filename":"src/lib.rs","begin":[1194,4],"end":[1197,5]},"visibility":"public","docs":"Define whether debug information should be emitted for cargo. Defaults to whether\nor not the environment variable `CC_ENABLE_DEBUG_OUTPUT` is set.\n\nIf enabled, the compiler will emit debug information when generating object files,\nsuch as the command invoked and the exit status.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_debug",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:666":{"id":"0:666","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[331,16],"end":[331,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10749:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:667:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13912:30864":{"id":"2:13912:30864","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13911:3405","str::split_at_mut_checked":"2:13914:30868"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:562:494":{"id":"0:562:494","crate_id":0,"name":"clone","span":{"filename":"src/tool.rs","begin":[26,9],"end":[26,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13987:37130":{"id":"2:13987:37130","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13953:37124":{"id":"2:13953:37124","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13578:5108","str::split":"2:13941:3251","prim@char":"1:12456:490","str::split_terminator":"2:13950:37123"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44858:5878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:5849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[378,0],"end":[4028,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:1208","0:290:960","0:292:2616","0:294:2621","0:297:2625","0:299:2520","0:300:2634","0:302:2640","0:303:2647","0:305:2665","0:307:2709","0:308:2721","0:310:2552","0:311:2553","0:312:2535","0:313:816","0:315:2536","0:317:2744","0:318:2537","0:319:2335","0:320:2540","0:321:2541","0:322:1757","0:323:2554","0:324:2498","0:325:2555","0:326:2538","0:329:2539","0:332:1791","0:333:903","0:334:2543","0:335:2844","0:336:627","0:337:2544","0:338:2542","0:340:523","0:342:2545","0:344:2546","0:346:2676","0:347:2874","0:348:2879","0:349:2885","0:350:1339","0:351:2550","0:352:2559","0:353:2551","0:357:2908","0:362:2987","0:363:2993","0:364:2994","0:369:3057","0:371:3067","0:372:2948","0:373:2679","0:403:3445","0:404:3446","0:407:3455","0:408:3456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:326:2538":{"id":"0:326:2538","crate_id":0,"name":"cpp_link_stdlib","span":{"filename":"src/lib.rs","begin":[997,4],"end":[1003,5]},"visibility":"public","docs":"Set the standard library to link against when compiling with C++\nsupport.\n\nIf the `CXXSTDLIB` environment variable is set, its value will\noverride the default value, but not the value explicitly set by calling\nthis function.\n\nA value of `None` indicates that no automatic linking should happen,\notherwise cargo will link against the specified library.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n- `c++_shared` or `c++_static` for Android\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .cpp_link_stdlib(\"stdc++\")\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_link_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3092-0:593:2526":{"id":"b:2:3092-0:593:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:303:2647":{"id":"0:303:2647","crate_id":0,"name":"asm_flag","span":{"filename":"src/lib.rs","begin":[566,4],"end":[569,5]},"visibility":"public","docs":"Add a flag that will only be used with assembly files.\n\nThe flag will be applied to input files with either a `.s` or\n`.asm` extension (case insensitive).\n\n# Example\n\n```no_run\ncc::Build::new()\n    .asm_flag(\"-Wa,-defsym,abc=1\")\n    .file(\"src/foo.S\")  // The asm flag will be applied here\n    .file(\"src/bar.c\")  // The asm flag will not be applied here\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"impl_trait":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"impl AsRef<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"1:2086:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13930:2915":{"id":"2:13930:2915","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12456:490","self::pattern":"2:13578:5108"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:5849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323:2554":{"id":"0:323:2554","crate_id":0,"name":"warnings_into_errors","span":{"filename":"src/lib.rs","begin":[922,4],"end":[925,5]},"visibility":"public","docs":"Set warnings into errors flag.\n\nDisabled by default.\n\nWarning: turning warnings into errors only make sense\nif you are a developer of the crate using cc-rs.\nSome warnings only appear on some architecture or\nspecific version of the compiler. Any user of this crate,\nor any other crate depending on it, could fail during\ncompile time.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings_into_errors(true)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings_into_errors",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5740:4661":{"id":"5:5740:4661","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:332:1791":{"id":"0:332:1791","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[1061,4],"end":[1064,5]},"visibility":"public","docs":"Configures the target this configuration will be compiling for.\n\nThis option is automatically scraped from the `TARGET` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .target(\"aarch64-linux-android\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3095:149":{"id":"2:3095:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32944:4700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:3091:1852":{"id":"2:3091:1852","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:43052:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:661:149":{"id":"b:2:3087-0:661:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:373:2679":{"id":"0:373:2679","crate_id":0,"name":"try_get_compiler","span":{"filename":"src/lib.rs","begin":[1791,4],"end":[1866,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis will return a result instead of panicking; see\n[`get_compiler()`](Self::get_compiler) for the complete description.","links":{"Self::get_compiler":"0:372:2948"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43052:237","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:283":{"id":"0:283","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[354,0],"end":[358,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10754:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:284:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2809:29003":{"id":"2:2809:29003","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2775-0:551:2513":{"id":"b:2:2775-0:551:2513","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:29008"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:353:2551":{"id":"0:353:2551","crate_id":0,"name":"static_crt","span":{"filename":"src/lib.rs","begin":[1248,4],"end":[1251,5]},"visibility":"public","docs":"Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.\n\nThis option defaults to `false`, and affect only msvc targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_crt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3943-0:661:149":{"id":"b:2:3943-0:661:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:33020:248-0:551:2513":{"id":"a:2:33020:248-0:551:2513","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:484:60":{"id":"0:484:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[4031,4],"end":[4033,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33079:4847-0:593:2526":{"id":"a:2:33079:4847-0:593:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33079:4847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:787:2917":{"id":"5:787:2917","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13898:37119":{"id":"2:13898:37119","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:284:827":{"id":"0:284:827","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[355,4],"end":[357,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10713:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10694:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:350:1339":{"id":"0:350:1339","crate_id":0,"name":"pic","span":{"filename":"src/lib.rs","begin":[1214,4],"end":[1217,5]},"visibility":"public","docs":"Configures whether the compiler will emit position independent code.\n\nThis option defaults to `false` for `windows-gnu` and bare metal targets and\nto `true` for all other targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pic",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:521:3963":{"id":"0:521:3963","crate_id":0,"name":"VsVers","span":{"filename":"src/windows/find_tools.rs","begin":[155,0],"end":[166,1]},"visibility":"public","docs":"A version of Visual Studio","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:522:3965","0:524:3967","0:526:3969","0:528:3971","0:530:3973"],"impls":["a:2:33020:248-0:521:3963","a:2:42880:5025-0:521:3963","a:2:3335:5258-0:521:3963","a:2:3300:260-0:521:3963","a:2:42881:5024-0:521:3963","a:2:33079:4847-0:521:3963","b:2:2804-0:521:3963","b:2:2807-0:521:3963","b:2:3081-0:521:3963","b:2:2772-0:521:3963","b:2:3087-0:521:3963","b:2:3077-0:521:3963","b:2:3943-0:521:3963","b:2:3092-0:521:3963","b:2:2775-0:521:3963","b:5:784-0:521:3963","0:535","0:537","0:534","0:539","0:532","0:540"]}}},"2:13910:37121":{"id":"2:13910:37121","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12462:1765","crate::ops::IndexMut":"2:3605:4772","str::slice_unchecked":"2:13909:37120"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[348,0],"end":[352,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"1:3077:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:661:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:282:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13965:30877":{"id":"2:13965:30877","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:5849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300:2634":{"id":"0:300:2634","crate_id":0,"name":"remove_flag","span":{"filename":"src/lib.rs","begin":[531,4],"end":[534,5]},"visibility":"public","docs":"Removes a compiler flag that was added by [`Build::flag`].\n\nWill not remove flags added by other means (default flags,\nflags from env, and so on).\n\n# Example\n```\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"unwanted_flag\")\n    .remove_flag(\"unwanted_flag\");\n```","links":{"`Build::flag`":"0:299:2520"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:2924":{"id":"0:64:2924","crate_id":0,"name":"find","span":{"filename":"src/windows/find_tools.rs","begin":[102,0],"end":[104,1]},"visibility":"public","docs":"Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.\n\nThe `target` argument is the target that the tool should work for (e.g.\ncompile or link for) and the `tool` argument is the tool to find (e.g.\n`cl.exe` or `link.exe`).\n\nThis function will return `None` if the tool could not be found, or it will\nreturn `Some(cmd)` which represents a command that's ready to execute the\ntool with the appropriate environment variables set.\n\nNote that this function always returns `None` for non-MSVC targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42787:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::process::Command","id":"1:5687:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:593:2526":{"id":"b:2:3077-0:593:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:2584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5730:3798":{"id":"5:5730:3798","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2775-0:521:3963":{"id":"b:2:2775-0:521:3963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:29008"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3300:260-0:551:2513":{"id":"a:2:3300:260-0:551:2513","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:321:2541":{"id":"0:321:2541","crate_id":0,"name":"ccbin","span":{"filename":"src/lib.rs","begin":[867,4],"end":[870,5]},"visibility":"public","docs":"Set CUDA host compiler.\n\nBy default, a `-ccbin` flag will be passed to NVCC to specify the\nunderlying host compiler. The value of `-ccbin` is the same as the\nchosen C++ compiler. This is not always desired, because NVCC might\nnot support that compiler. In this case, you can remove the `-ccbin`\nflag so that NVCC will choose the host compiler by itself.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ccbin",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13890:2704":{"id":"2:13890:2704","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:347:2874":{"id":"0:347:2874","crate_id":0,"name":"cargo_warnings","span":{"filename":"src/lib.rs","begin":[1184,4],"end":[1187,5]},"visibility":"public","docs":"Define whether compile warnings should be emitted for cargo. Defaults to\n`true`.\n\nIf disabled, compiler messages will not be printed.\nIssues unrelated to the compilation will always produce cargo warnings regardless of this setting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2804-0:551:2513":{"id":"b:2:2804-0:551:2513","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:5264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:551:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2806:29003"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:522:3965":{"id":"0:522:3965","crate_id":0,"name":"Vs12","span":{"filename":"src/windows/find_tools.rs","begin":[157,4],"end":[157,8]},"visibility":"default","docs":"Visual Studio 12 (2013)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13982:37128":{"id":"2:13982:37128","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:214:2696":{"id":"0:214:2696","crate_id":0,"name":"is_like_msvc","span":{"filename":"src/tool.rs","begin":[399,4],"end":[401,5]},"visibility":"public","docs":"Whether the tool is MSVC-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3943-0:593:2526":{"id":"b:2:3943-0:593:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2807-0:521:3963":{"id":"b:2:2807-0:521:3963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3295:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:5264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:521:3963","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2809:29003"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:290:960":{"id":"0:290:960","crate_id":0,"name":"include","span":{"filename":"src/lib.rs","begin":[446,4],"end":[449,5]},"visibility":"public","docs":"Add a directory to the `-I` or include path for headers\n\n# Example\n\n```no_run\nuse std::path::Path;\n\nlet library_path = Path::new(\"/path/to/library\");\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .include(library_path)\n    .include(\"src\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5478:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13947:30871":{"id":"2:13947:30871","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13578:5108","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12456:490","str::split":"2:13941:3251"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44808:5875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13584:5848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13599:5849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:667:827":{"id":"0:667:827","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[331,16],"end":[331,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10713:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10694:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:313:816":{"id":"0:313:816","crate_id":0,"name":"file","span":{"filename":"src/lib.rs","begin":[791,4],"end":[794,5]},"visibility":"public","docs":"Add a file which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:593:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3045:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5478:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"5:3720:4811":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:667:6901":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:45506:11029":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:12371:7161":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:11034:29189":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:12319:7156":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:12676:8981":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:14360:8999":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:13921:7347":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:43851:11017":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:16656:8037":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"16:3695:8153":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:6480:10628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:10766:4606":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:41196:5868":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:14738:7517":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:2328:4829":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:47101:9202":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:40291:4780":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:4053:4815":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:10729:6891":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:4349:11729":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:3458:4760":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:13254:8984":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:5395:10438":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:44958:5872":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:45560:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:1569:10081":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:7454:10880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:8438:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"15:306:23382":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:34449:4753":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:4489:4616":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:12469:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"6:6672:10729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:10967:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:13169:7251":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:11058:4088":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:46742:9168":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:11401:7058":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:15931:7832":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:42024:6789":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:45584:9153":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:2684:8111":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:5040:5392":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:12851:7225":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:12605:7049":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:6232:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:7316:10825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:11617:7050":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:9356:9408":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:5127:10343":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:1605:4818":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:13570:24367":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"18:680:6870":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:48023:9283":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:5426:6757":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"16:6876:8320":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:23181:4844":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:11818:7097":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:6738:38086":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:11798:9349":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:5836:5677":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:8390:17019":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:22295:35784":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:2816:5265":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"2:22424:4844":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:16701:8046":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:15090:7573":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:6666:10726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:8343:10999":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:7372:8137":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:16036:7859":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:5812:4695":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:45012:5874":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:5302:4723":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:33011:9047":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:1848:4236":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"17:12952:7234":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:3400:4768":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:2718:3015":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:14672:7492":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:6970:8129":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:8058:8511":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:38987:4764":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:8894:11687":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:1514:10048":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:5151:10345":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"15:394:23391":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:8302:10989":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:4579:8922":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:13584:5848":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:41175:9059":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:23875:9040":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:9438:4616":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"14:202:16927":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:7883:8237":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:3834:4117":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:10564:6886":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:2112:8785":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:12249:7146":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:12711:7209":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:14708:7498":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10218:24352":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:5114:11752":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:44766:5861":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"11:2323:4826":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:10768:4607":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:11146:6825":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:789:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:16668:8039":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:42767:8964":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:46859:9181":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:42806:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:15064:7571":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"11:1884:4812":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:1641:8681":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:15148:7582":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:42015:4664":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:7402:6817":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:13306:7262":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"11:1880:4684":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"14:7:8665":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:1907:5363":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:282:6728":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:2086:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:11386:24375":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:13537:7232":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:40688:16968":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:5973:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:8096:8512":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:45510:11030":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"8:0:4437":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:4956:8167":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:6256:8210":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:4873:8164":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:3517:4779":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:11114:7048":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:4921:10269":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:8598:8579":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:46873:9182":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:2880:8120":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:10823:6895":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:9234:9399":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:10803:4639":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:22444:9003":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:8528:8570":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:14152:7400":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:2480:2677":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:6494:6812":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:12056:7124":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:15887:7818":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:6749:8086":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:10274:24354":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:4298:4616":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:4997:10301":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:630:11672":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:23246:11856":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:8209:8133":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:5655:4693":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:4330:4616":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:14933:7548":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:45073:5855":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:40447:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:12962:24494":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:1099:4826":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:12714:5858":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:9425:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:8677:10853":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:5105:11751":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14127:7396":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12992:7238":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:41373:4582":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:6790:10768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:485:9976":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:13100:3694":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:15714:7776":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"18:507:6839":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:1625:10125":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:3045:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:12242:6835":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:9161:4696":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:4225:5742":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:3181:5772":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:15573:7744":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:8015:4844":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:32986:9045":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:13205:7254":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:2648:4650":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:5877:6812":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:12359:7160":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:42034:8953":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:5282:8177":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:43439:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:3373:4561":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13290:6989":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:47758:9272":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:46827:9179":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:12191:7137":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:44808:5875":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:7641:4812":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:23853:9038":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:40335:4771":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:3293:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:5417:8181":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:43632:4609":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:23553:9007":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:42565:8961":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:8699:9332":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:14997:7564":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:6098:8191":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:5451:4666":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:12439:29191":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:6900:4741":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:47803:9273":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:2486:8102":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:2920:8122":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:9211:4812":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:8363:9366":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:6534:10655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:2724:8113":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:2508:4131":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"9:236:4681":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:9536:8967":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2:45064:5857":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:12471:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:47019:9198":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:47080:9201":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:42727:9328":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:7350:8395":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:5044:10326":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:41602:9079":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:884:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:0:4444":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:11478:8739":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:479:9974":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:14547:7476":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"11:740:4819":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"9:53:11176":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:3573:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:41558:9077":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:8223:8517":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:16613:7331":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:15701:7770":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"10:36:9960":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"18:726:6880":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:11792:4704":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:15106:7575":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:16632:8032":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:7907:8494":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:16555:8018":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:990:4823":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:11299:6792":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"15:288:23381":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"18:581:5275":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:2772:8115":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:5143:4616":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:726:8755":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:8512:4634":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:8494:4663":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:3075:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:13314:8988":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:908:6894":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:10534:7029":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:4730:8924":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"9:480:23277":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:5676:10566":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:3503:6913":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:11659:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:10394:24358":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:4852:8925":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:3086:36465":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:14358:7447":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:7738:4579":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:13330:8989":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:5144:8172":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:317:6893":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:8254:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:12860:7226":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:41570:8941":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:14375:7450":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:10246:24353":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:41986:8950":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:44776:4639":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:13871:7338":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:1984:5767":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:14573:7479":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:608:6856":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:3931:4816":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:11826:9352":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:6389:8226":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:4937:10273":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:1690:10164":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:6173:8200":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:1652:8683":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:8565:8575":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:43476:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:3720:6915":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:44858:5878":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:8521:4635":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:14312:7438":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"2:3814:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:16159:7909":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:13733:7303":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:14514:6795":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:6381:10573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:14460:7462":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:5036:10322":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:1489:10038":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:7751:17084":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:44151:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:12075:8977":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:44717:9126":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:10487:24361":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:12457:1917":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:43052:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:2506:8103":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:8284:10986":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:22862:35778":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:4177:5739":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:23075:11850":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:6886:4740":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:45210:9136":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:15852:7807":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:5809:3755":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:8503:4665":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:46759:9171":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12280:7149":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:23469:9005":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:6840:4812":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:3051:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:1626:4815":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:8016:9314":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:5241:10375":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:45098:5867":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"11:708:4818":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:938:4815":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:14299:7436":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"1:4341:11728":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:12479:1871":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"18:521:28557":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:2148:4827":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:1108:4827":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:6910:8937":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"11:1158:4828":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:881:11702":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:5593:10525":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:1871:5354":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:4221:5741":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:6731:10748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:9686:5848":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:10861:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:16761:8062":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:40427:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"11:488:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:14416:7454":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:8201:4841":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:11338:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:3308:8093":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:33111:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:7212:8375":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:3774:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:4816:10200":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:11412:9435":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:16822:7348":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:15557:7743":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:11954:9326":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:985:6736":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:6658:8285":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"18:531:6843":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:41786:8947":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:7159:8362":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:12407:9439":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:7844:11156":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"1:11042:9384":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:10988:4843":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:34516:4755":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:2530:8104":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:2335:4135":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:1619:4684":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:7016:8335":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:5060:8169":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:3587:8152":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"1:10998:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"11:830:4817":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:9447:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:7604:10959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4890:10251":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:16750:8061":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:13515:24366":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"11:2566:4573":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:47994:9280":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:3305:5256":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:40352:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:6287:8933":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:9402:9890":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:14917:7547":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:12840:7221":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:14626:5670":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:13652:16919":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:1539:4811":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:4633:16938":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:5165:10346":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:13970:7354":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:45825:9162":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:14560:7477":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:14031:7367":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:47338:9229":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:7789:38088":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:41651:9080":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:42000:4006":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:23842:9037":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"6:6437:10613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:22552:9003":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:1675:10155":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:14571:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:45767:9156":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:11646:4844":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:45514:11031":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11465:7065":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"17:12976:7236":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:13599:5849":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:10754:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:15351:7639":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:15602:7752":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:2896:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"17:16385:7967":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:14220:7402":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:4591:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:6631:10712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:6917:10813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:9369:9411":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:3350:4657":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:7542:8423":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:16595:7321":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:8673:9384":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:3129:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:5019:10314":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:13291:8987":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:3352:4658":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:7854:16964":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:11833:4684":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"13:0:4435":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:22426:11764":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:439:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:5007:10308":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:6084:8187":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:5493:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:41212:5866":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12135:7132":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:1630:4816":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:12524:7194":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:22981:4844":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:12116:5877":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:3854:6916":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:7571:6739":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:1932:5367":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:10387:36181":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:41627:6860":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:3769:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:12409:24469":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"11:2551:38070":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:10760:4608":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:6723:10747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:4311:33564":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:13157:7250":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:10782:4655":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"16:7990:8508":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:4902:10256":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:3539:4664":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:43400:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:7521:8421":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:4575:6749":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:43618:4601":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:2754:4642":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:41299:9064":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:46712:9164":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:43890:8544":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:7802:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:47935:9277":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:23707:9027":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10549:7030":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11706:7083":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:14859:7537":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:8179:8515":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:10479:4702":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:15496:7736":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:10979:9414":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:5570:10518":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:6984:8146":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:47264:9211":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:6822:24292":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:11169:6791":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"16:6942:8326":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:13427:7268":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2:22432:11767":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:3268:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:44688:9123":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:9349:9407":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:1597:10100":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:41800:8948":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4829:10210":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13006:7241":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"11:1674:6723":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:5362:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:6180:17325":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:12057:9353":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:33080:5262":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:996:4824":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:16019:7852":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:1386:4827":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:12941:7233":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:3110:8148":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:5998:4726":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:7716:38090":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:963:4819":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:3088:11004":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:12483:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:380:9312":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:4921:6781":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:9501:9413":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:6111:8196":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:3916:9326":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:8233:24300":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11952:7106":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8541:4637":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"15:327:11173":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:6542:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:13838:7332":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:23831:9036":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:41641:8946":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:8829:4682":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:15731:7781":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:10332:24356":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:2013:5768":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:11050:5370":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:13798:7321":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:2302:2503":{"crate_id":1,"path":["std","fs"],"kind":"module"},"2:43215:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:7748:29255":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:16332:7958":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:6561:11858":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:16311:7952":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:2652:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:8043:38085":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:2450:8094":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:8636:24302":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:22322:35780":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:41457:4637":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:386:9313":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:973:4821":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:7386:8397":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:44940:5871":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:22339:35792":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:6680:8291":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"10:44:8689":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:3570:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:13814:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:42919:9100":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"2:47133:9204":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:8585:8576":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:22307:35784":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"11:1564:23357":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:5357:10419":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:14327:7440":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:11837:11052":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:735:28555":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:6808:8126":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:40389:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:43289:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:1657:10148":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:13361:7265":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"11:364:6719":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"11:396:6721":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:8648:9374":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:15997:7847":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:7263:6773":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:39097:4766":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:7223:8376":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:7605:4812":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:23416:9004":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:34248:4562":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12216:7140":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:45712:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:16399:7970":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:15844:7806":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:3140:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:5348:8179":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13095:7247":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:11232:24377":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:7340:11152":{"crate_id":1,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:42831:4812":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:14640:7488":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:8218:4843":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:26749:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:2950:8123":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11432:24376":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:1487:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:2890:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:5488:10491":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"11:1005:4825":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:11891:6829":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:7778:4581":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:15939:7835":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:6588:8266":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"5:7825:8783":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13014:7243":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:8640:9380":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:7765:8454":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:14284:7431":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:7577:10953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:5325:10413":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:894:4811":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:15963:7840":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:5224:8175":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:3694:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:8028:8509":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"11:842:4821":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:43906:34647":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:5741:4088":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:12035:7117":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:41185:9060":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:8260:4415":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:23157:11852":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:6407:6811":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:8165:8135":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:2331:2672":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:6493:10637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:15689:7767":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:2854:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:48060:9286":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:7448:10878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:5195:5013":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:9465:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:5622:10544":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:45367:16926":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:553:10017":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:47150:9205":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:14872:7538":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:14438:7461":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:11864:7100":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:43178:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:12459:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:3446:4655":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:5249:10379":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:44994:5873":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:4939:5750":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11539:7073":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:2793:4652":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:15655:7764":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:15665:7765":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:7124:5679":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:6691:10734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:7956:6820":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:45044:4636":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:889:6731":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:545:10012":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:15431:7701":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:10532:4598":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:45734:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:4163:5738":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:3300:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:11515:7069":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:679:9316":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:1889:4816":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:40504:8792":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:5576:5853":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:4964:10285":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"18:113:28547":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:967:4820":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:6070:4738":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:12468:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:9361:9409":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:5671:4237":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"18:754:6885":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:14203:8994":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:47906:9276":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:15760:7788":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:44790:4640":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:5629:10547":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:45530:11035":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:7581:8777":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:6042:8130":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:47450:9233":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:43108:4812":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:8008:10966":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:5520:10498":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:6315:6807":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:10975:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:40497:4775":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:7350:10844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:11090:4699":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:46955:9187":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:3851:4653":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:7469:10884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:9297:4728":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:45595:17134":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"0:593:2526":{"crate_id":0,"path":["cc","Build"],"kind":"struct"},"16:8298:8529":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:15829:7804":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"11:785:4814":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:45799:9161":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"6:4947:10279":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:5428:10454":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:8105:8513":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:16264:7938":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:4810:8162":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:31433:34625":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:8577:9374":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:8206:4842":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:44181:9112":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:14220:8997":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:43326:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:8203:4718":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:4902:8165":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:7075:24294":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"18:659:6863":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5117:10342":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12625:7200":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:23645:34612":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:5220:16955":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:10206:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:5341:10417":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:15160:7586":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:4614:16897":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:45224:9139":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:4018:9327":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:3564:3034":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:42581:11699":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5462:10479":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:11448:7062":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:12475:1895":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:5477:10488":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:768:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:1123:6728":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:7818:11154":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"2:31407:9044":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:5265:10387":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:3025:16967":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:45082:5854":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:6758:10758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:44707:9125":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:44736:5869":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:6829:4733":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:47977:9279":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"11:299:9949":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"14:160:8665":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:45788:35104":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"11:1064:23356":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:7044:8134":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:7830:11155":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"16:7030:8337":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:663:5769":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:6611:10704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:5230:10371":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:3696:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12886:7227":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:4333:11727":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:948:4816":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:11851:7099":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:7341:10843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:15753:7787":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6843:8316":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:4978:6782":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:46727:9167":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:7969:8507":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:7554:24297":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:6210:4616":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:1727:10177":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:31369:5668":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:6852:8317":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:11015:4784":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:15286:7588":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:4569:9331":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:4997:6806":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:47165:9206":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:44840:5879":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:41325:4577":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5375:10429":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"11:854:4822":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2209:2677":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"1:8806:4681":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:6368:8075":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:6832:4734":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:10779:4659":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:4987:5391":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:2660:8110":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:7911:9354":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:33022:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:16798:8071":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:16132:7897":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:11568:6827":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:7105:11010":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:5441:10464":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:33021:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:15024:7566":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"18:670:6869":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:14821:7533":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:1577:4813":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:41320:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:8669:8475":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6064:8132":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:12460:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:12480:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"7:32:23265":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:14055:7369":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"14:220:8671":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:45241:9140":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:7561:4815":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:1521:10051":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:35007:4759":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:15785:7793":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:682:9318":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:12537:7195":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"18:689:6872":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:5635:10550":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:6813:10774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:6216:6812":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:1627:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:41428:9066":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:4899:11754":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:8634:11731":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:22324:35786":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:46940:9186":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:472:6896":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:42527:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"10:0:4439":{"crate_id":10,"path":["adler"],"kind":"module"},"1:11303:4846":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:42881:5024":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:48128:9293":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:16812:8072":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:7722:4576":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:9457:4737":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:1250:37907":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:11958:7107":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:15989:7846":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:1524:4684":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:1370:4825":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:8373:2562":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"11:809:4816":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:6605:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"18:613:38105":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:10167:24351":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"14:187:23369":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:10031:24347":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:2570:8106":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:925:4814":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:43861:4597":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:10115:24349":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"18:698:6873":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:7471:8414":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:12074:6833":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"5:7766:4580":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:12550:7197":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"11:671:4684":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:12050:9353":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:7500:33561":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:2666:17036":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"11:2559:9958":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:4778:2999":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:9187:4699":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:11358:24374":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:12473:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:4211:5740":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:583:6900":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:41470:9069":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:47232:9209":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:5541:10504":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:1500:10043":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12122:7131":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:42911:8968":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:47488:9235":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:11579:7077":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:2083:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:14652:7489":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:532:10006":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:5450:10470":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:12749:7212":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:3800:6728":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:8654:9382":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:47421:9232":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:40339:4773":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:8255:10980":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:4233:5744":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:42823:4811":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:7308:10820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:12472:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:45848:9163":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:11878:7049":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:10762:4609":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:9751:4842":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:6731:8305":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:10630:6888":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:11843:11053":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:15876:7814":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:15077:7572":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:1214:37909":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:12234:7142":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:4984:10295":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:4792:10183":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:22850:9002":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:12454:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:8267:10982":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:11075:38098":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:8014:8143":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:3659:2505":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:7337:8393":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:23687:11014":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:10201:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:23303:11846":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:9328:29164":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:473:9971":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:2732:6802":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:15919:7829":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:8571:4636":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:23331:11847":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:5757:8185":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:8151:8145":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:40515:9053":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:7790:6756":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:6507:10648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:3014:23428":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"0:661:149":{"crate_id":0,"path":["cc","Error"],"kind":"struct"},"11:2349:4827":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:4914:10265":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:5392:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:5025:10317":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:6876:10787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:45836:8688":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:5533:10499":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:23864:9039":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"6:5196:10355":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:42815:4684":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:5635:4692":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:2020:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:1869:5353":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:4113:11717":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:6443:10616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12149:7133":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:8551:4638":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:12455:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:7424:24296":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:5288:10401":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:15439:7702":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:8066:24299":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:8503:8567":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"11:2400:4811":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:33020:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:5316:9335":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2215:8786":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:46998:9197":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:23886:9041":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:16283:7943":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:2900:8121":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:11443:6794":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"16:2550:8105":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:6123:8131":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:10413:9418":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:12723:7210":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12897:7228":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:9452:4736":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"16:7259:8387":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:45775:9158":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:23660:34622":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:43625:4608":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:45316:8990":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:16507:7317":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:4857:8926":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:5305:6924":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:7305:8389":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:47681:9271":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:33109:5261":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:41351:4578":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:12478:1889":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:3851:11700":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:5742:7030":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:9261:11758":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:586:10034":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:5621:2508":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:11553:7074":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:2467:8096":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:4208:4811":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:43611:4600":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:16179:7915":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:14796:7529":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"7:79:23272":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:42787:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:14393:7451":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:4184:8156":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:10705:6823":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:3605:4772":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:16297:7945":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:31807:5275":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:12466:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"11:1725:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:23522:9006":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:4902:11732":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:12736:7211":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:2796:8116":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:23798:9033":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:10778:7031":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"2:10695:2505":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:9150:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:23195:11855":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:4171:4425":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:9315:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:8368:9367":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:10822:5603":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:12906:7229":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:15315:7608":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:5271:10390":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:12816:6917":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:1555:4812":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:15679:7766":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:44596:9115":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11630:7079":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:15549:7742":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"11:2366:8686":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:43878:11026":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:4805:10192":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:47036:9199":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:8273:10983":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12920:7230":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:8000:8142":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:14507:7468":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11998:7110":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12673:7203":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:11222:7050":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:5085:8170":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:6302:8218":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:4766:8161":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:5379:8180":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:14072:7377":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:41579:8942":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:5413:35380":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:22823:4844":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:1551:10071":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6902:10802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:14692:7493":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"11:1023:4826":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:12762:7213":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:4095:3313":{"crate_id":1,"path":["std","os"],"kind":"module"},"17:12983:24495":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:8894:4684":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:2620:8108":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:44173:9111":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:34382:4754":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:8564:4640":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:6527:6761":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:12043:29729":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:3677:4626":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:4186:4812":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:6640:8271":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"17:11985:7109":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:7549:8776":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:41219:16961":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"13:110:38071":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:6711:4006":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:12423:11197":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:11691:7082":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:42693:34618":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:10418:24359":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:16187:7916":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:39042:4765":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:7431:10873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12306:7153":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"17:13719:7302":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:6957:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:2860:8119":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:6144:24288":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:6526:10650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:41336:17084":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10843:7035":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:24349:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:546:8079":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:8031:9356":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:45526:11034":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:9382:29178":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:3295:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:1930:5366":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:22341:35788":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:47051:9200":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:16026:7854":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"11:873:4823":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:7090:5677":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:45704:11038":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"5:4999:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:7815:8782":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:41147:34633":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:3330:8682":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:4241:8157":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:6544:10662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:6866:24293":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7731:5022":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:3866:8759":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:6765:10759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:33764:4748":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:5179:10347":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:41307:9065":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:6882:10788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:3987:6939":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"6:6770:10760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:11964:8975":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:7749:5311":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:8911:4686":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11503:7068":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:4149:5737":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:5205:10360":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:6599:10699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:8353:11001":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:1785:6728":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"11:2533:9954":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:3456:4816":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:7215:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:14586:7480":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:1491:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:589:6849":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:8584:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:6652:10724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:15475:7731":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:2326:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:41421:4667":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:45522:11033":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:2766:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:3851:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:43117:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:23260:17036":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"16:6239:8205":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:11291:38099":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:6931:6728":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:5366:10423":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:12163:7134":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:23897:9042":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:46774:9172":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:43141:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:2521:2654":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"17:10793:7034":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"2:3388:4750":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:41162:9058":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:12335:7158":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:7541:4812":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:15010:7565":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:718:6877":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:2495:23352":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:44126:4783":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:16008:7851":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:41592:9078":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:11320:9891":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:984:4822":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:42977:9102":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"2:23336:11845":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:9430:4729":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"11:685:4811":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:8289:4653":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"18:0:4445":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:3403:4659":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:2245:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:9483:4846":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:14019:7364":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:16241:7937":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:1494:10040":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13554:7278":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"6:6777:10761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:5139:10344":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:5255:8176":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:4133:4815":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:7110:6788":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:10296:24355":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:0:2625":{"crate_id":17,"path":["object"],"kind":"module"},"2:46969:9188":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:41611:8944":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:1085:4825":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"18:491:6838":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:2227:6905":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:8711:8588":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:43092:4684":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:9773:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:41517:8932":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:6659:10725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:8240:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:6748:10751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:1647:8682":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:3309:36869":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:155:6715":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:2415:23400":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:6998:8328":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:11017:4634":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:15905:7822":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:13451:7270":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:47182:9207":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:9174:4698":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:5172:8173":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"9:500:8742":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:39:5672":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:41448:9068":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:46926:9185":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:5527:6728":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:31422:4597":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:3535:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:12031:9436":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"11:1140:8677":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:11152:6826":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:23776:9031":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:8427:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:15946:7836":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:37056:4762":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:45716:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:42749:8962":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:5311:10409":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13349:7264":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:7578:9411":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:23576:9012":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:6439:9342":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:6205:24289":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:9144:4697":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:5884:9336":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:6411:10598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:13635:7285":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:11026:29183":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:44605:9117":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:11253:4696":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:6823:10776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10784:7032":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:534:6742":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:5020:5749":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:10663:6889":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13933:7348":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:297:2519":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:13547:7277":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"5:7707:4574":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:16714:8052":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:12462:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:45534:11036":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:44662:9066":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"9:328:9961":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:11306:6793":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"17:11777:7091":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:8261:10981":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:2368:11007":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:15973:7843":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:4680:11732":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:3297:4684":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:4848:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:16642:8033":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:1507:10046":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:5295:10403":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:12467:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:7114:5678":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"11:328:9952":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:8014:10968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:4119:11716":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:6708:10743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:13145:7249":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:8476:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8211:4416":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:4484:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:47471:9234":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:15531:7737":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:16198:7921":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:6638:10713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:1539:10062":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:23537:11011":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:4362:11730":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:44697:9124":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:40367:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:5387:10433":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:12002:8976":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:7613:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13592:7281":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:7919:8495":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:6740:10750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"11:434:38066":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:687:11675":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:12082:7127":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"11:2545:9956":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:48003:9281":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:45542:9889":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:2206:17046":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:7058:8339":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:8096:11678":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:3707:4684":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13028:7245":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"5:6043:4815":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:4931:5390":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:13398:7267":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:3799:34842":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"11:1085:38060":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:15641:7761":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:7900:5673":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:6421:8081":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11281:7051":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:3048:23429":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:6625:8269":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:41526:9073":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:45809:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:16728:8055":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:13222:24363":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"11:1105:8676":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:13818:7331":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:2820:8117":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:11733:24396":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:15036:7567":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:23739:4844":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:7807:38089":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:45378:9144":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:32997:9046":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:46911:9184":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:6715:4730":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12347:7159":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:14832:7534":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:4910:827":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:42840:5022":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:22540:4844":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:6188:8201":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:8054:5603":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:5334:10416":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:8228:4840":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:11831:7073":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:6953:8327":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:9276:11760":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:8447:4851":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:6408:8233":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:23601:9013":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:48151:9294":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:559:10020":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:12470:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:34834:4758":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:25:719":{"crate_id":2,"path":["core","env"],"kind":"macro"},"6:1643:10137":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:903:6893":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"16:2640:8109":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:6623:10711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:41363:4639":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"16:8626:8581":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:5641:10553":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:44383:8972":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:42959:9101":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"2:45353:9143":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12648:7201":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:7192:24295":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:2256:6742":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:9442:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:2585:9920":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:8529:4850":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:13854:7336":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:43966:4599":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:2266:8761":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:7696:4573":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:2478:3287":{"crate_id":1,"path":["std","fs","remove_file"],"kind":"function"},"2:39676:4767":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:8884:4683":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:1230:36461":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:5128:11753":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:10696:6890":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:47509:9236":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:32944:4700":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:41776:4638":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:538:10009":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:44894:5877":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:8102:5369":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:6159:8197":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:2105:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"9:445:23278":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:5381:10430":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:23207:35042":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:3553:4563":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:7920:34906":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:14335:7442":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:43252:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:8320:24301":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:1415:4828":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12687:7207":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:14612:7484":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:5069:10339":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:10411:2521":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:10662:4697":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:7959:8506":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:14491:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:3048:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:8330:10995":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:599:9315":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:5562:10516":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:4929:8166":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:4825:10864":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:11805:7096":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:45054:5870":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:13538:4005":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"18:573:6839":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12869:7270":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:14773:7528":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:8031:10977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:42715:9095":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:33976:4751":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:3313:29985":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:23718:11715":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:2802:5264":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:48075:9287":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:43920:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:47554:9237":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"16:4267:8158":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:1667:10154":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:570:10025":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"18:651:6839":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"9:422:23280":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:2769:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:14346:7445":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:578:10030":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"11:881:4824":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:2142:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:11857:4811":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:8583:9376":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:6401:8935":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:1339:6904":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:11902:7104":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:15:2586":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:2437:6912":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:41136:9055":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:3448:4656":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:5658:10557":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:11475:24377":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"2:2282:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:2668:17037":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:43032:223":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"2:47604:9239":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:3054:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:40467:4567":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:7508:8418":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:8741:5017":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13119:7248":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:41106:9054":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:16739:8060":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:3496:4645":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:13945:7351":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:13692:7294":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:12461:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"9:355:23293":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:11285:9889":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:6564:10678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:6462:10618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:13068:17096":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:5682:10569":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"18:80:28545":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13041:7246":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:7855:16965":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:10963:11043":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:6028:8127":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:4970:10287":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:7548:10937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:16171:7912":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11026:38096":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:43011:225":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"2:10764:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:10749:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:6781:8308":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:13593:5850":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:7462:8411":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:13604:5847":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:44163:4681":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:16684:8044":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"14:31:8665":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"0:0:3367":{"crate_id":0,"path":["cc"],"kind":"module"},"5:5572:5852":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:16775:8066":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"16:5727:7029":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:7806:11153":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"1:8281:4651":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"11:1580:8678":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:8546:8572":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:45538:11037":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:3057:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:10928:7045":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"11:798:4815":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:4983:8168":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:780:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:12428:11679":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:11926:7105":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:10938:38095":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:16362:7963":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:3338:8680":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:16832:7353":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:14084:7380":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:12776:7214":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"18:635:6862":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:7563:10944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:7282:8388":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:1220:6902":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:14483:7467":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:4694:8160":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"11:2539:9955":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:4829:10868":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"13:229:9947":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:47848:9274":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:10097:24348":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:23809:9034":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:1898:5497":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:22353:35790":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:4495:9330":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:5198:8174":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:11786:9346":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:9203:9398":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:14308:34771":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:14269:7427":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11757:24397":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:7971:17013":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:904:4812":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:2498:4835":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:13322:24365":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:4827:10866":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"6:4881:10246":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:7433:6818":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:5051:10328":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:6159:4723":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:3042:6805":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:42609:11016":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:14114:7392":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:6391:6795":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"18:706:5850":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:12476:1877":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:23609:9014":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:3668:34075":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:8394:17018":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:2990:8125":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:22373:11768":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:44760:5862":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:42880:5025":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:31139:11701":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:14963:7552":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:45518:11032":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:1616:4819":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5057:10330":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:5603:10530":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:7463:10883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"9:390:23279":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:10958:11041":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:46806:9174":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:43928:4597":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:322:6894":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:7532:5671":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:7591:36862":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:491:9977":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:31401:5266":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:13578:5108":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:8143:4663":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:11653:7080":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:45419:5881":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:5318:8178":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:3569:4616":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:8267:8525":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:954:4817":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:3620:4625":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:6440:24290":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:14807:7531":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:6794:8309":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"1:3602:4003":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:44615:9118":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:4529:4616":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:15836:7805":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:15136:7232":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:7986:10965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:10977:38093":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:12095:7129":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:6502:23399":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:5649:8183":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:16218:7924":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:12643:8980":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:11606:7049":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:15769:7789":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:41993:8951":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:23625:34628":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:11319:38097":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:5689:8184":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"11:1914:8682":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:8296:10988":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:42871:5010":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:22828:11770":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:44625:9119":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:13193:7253":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:507:6798":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:11005:9417":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"18:515:6836":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:41401:4595":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:23289:4844":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:41391:4596":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:6473:10626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5471:10485":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:10756:4601":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:8249:10979":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5319:10412":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4896:10253":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:14947:7549":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:14243:9076":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"6:5186:10348":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:13491:7272":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:12130:5876":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:14520:7471":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:10713:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:7361:10849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:1632:10129":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:4815:5739":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:1589:10095":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:11266:4698":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:14902:7543":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:3408:4770":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:45107:5868":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:2704:8112":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:48014:9282":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"16:7495:8415":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:6449:10617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12798:24493":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:41549:8936":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:3307:34496":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:48190:9307":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:23209:17036":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"6:5217:10367":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:41204:5867":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:9321:9403":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:2162:8759":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:6890:8128":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:33079:4847":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:4699:8923":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:45709:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:3548:4641":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:5548:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:564:10022":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:12293:7151":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:212:6726":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:2748:8114":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:11975:9327":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:40407:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:11788:7093":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:8273:9365":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:7518:10920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"11:2466:4816":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:7487:10894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:5405:10444":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:0:4440":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:8891:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:47359:9230":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:4869:10243":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:5507:10497":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"9:176:11186":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:38932:4763":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:7168:8363":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:14533:7167":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:10597:6887":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:12204:7138":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:4152:8155":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:14975:7553":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:959:4818":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:42042:8955":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:912:4813":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:15864:7813":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:10141:24350":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6904:8323":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:4875:10244":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:14750:7519":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:9744:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:14043:7368":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:47877:9275":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:44912:5876":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:48113:9292":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:45195:9131":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:3092:36458":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"14:0:4442":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:3343:36868":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:465:9966":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"11:351:38062":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:4567:8921":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:6580:11859":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:48098:9291":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:1117:4828":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:34661:4757":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:12482:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:6127:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:10442:24360":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:4404:8159":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:12066:7125":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:14335:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:517:9997":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:13209:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:41488:9071":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:575:6799":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:3310:29986":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:22550:11765":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:2482:4831":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:44379:11028":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:15777:7791":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:506:6899":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"11:2440:4815":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"4:0:4436":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"11:2121:4825":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:1002:4684":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:12158:8979":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:12028:7114":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"14:214:8669":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13983:7355":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:885:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:3141:6927":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:9217:9337":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:7099:8943":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:12108:7130":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"11:1907:8681":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13610:7284":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"14:40:7318":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:12931:7232":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:8265:4286":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:11720:7085":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:8938:36180":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:3780:4776":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"11:2420:4812":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:12392:7163":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:2554:2504":{"crate_id":1,"path":["std","io"],"kind":"module"},"5:6759:6728":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:4120:8154":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:47376:9231":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:2496:4834":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:8121:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:3085:3049":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:11134:6824":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:23587:34599":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"11:2228:7117":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:33004:5390":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:42987:221":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"1:12463:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11421:7061":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:15050:7568":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:15418:7694":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:7185:11762":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:4562:4616":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"16:6914:8324":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:3786:4778":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"14:165:23362":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:16341:7960":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:3889:4118":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:5870:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7980:8141":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:16494:7303":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:12474:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:42902:5782":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:15739:7784":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:13958:7353":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:6696:8294":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:41540:9076":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"11:1900:8680":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:8723:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:11592:7013":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:3024:4844":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:23787:9032":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:43945:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"9:0:4438":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:16084:7896":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12225:7141":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:16323:7954":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:5131:6922":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:16520:7988":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:10968:4416":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:14627:7487":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:10392:11195":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:5551:10510":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:44749:5865":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:2966:8124":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:31780:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:43100:4811":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:6419:10600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:5648:10556":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:6337:8220":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:2816:9918":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:12481:1957":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:7586:10956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3913:9325":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:7621:8778":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:16209:7922":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:896:8088":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"18:538:6846":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:8290:10987":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:7368:10853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5107:10341":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:48034:9284":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:6285:4616":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:32990:8475":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:8036:9358":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:7391:10871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:96:28546":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:8758:4680":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:523:10000":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:5670:10564":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:11173:38100":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:7401:38083":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:22371:4844":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:2859:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:7884:4816":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:1696:10165":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:22285:5275":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"11:835:4820":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:45401:5880":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:44366:11027":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"17:12260:24468":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"16:8483:8566":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:9756:6822":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:14534:6797":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:4976:10290":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:23694:9026":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:12144:8978":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"18:598:38104":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:47118:9203":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:15410:7691":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:43363:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:42549:8959":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:12583:7199":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"15:0:4443":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:5991:4725":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:8117:5370":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:6713:4815":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:2208:17047":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"6:6716:10746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:4414:9329":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:47956:9278":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12176:7135":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:2590:8107":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:11010:4417":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:13662:7290":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:12037:5875":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:8612:8147":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:5113:8171":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"11:1893:4816":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"11:772:4813":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:4499:6749":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:34315:4756":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:3441:8151":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:4929:10271":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:643:6839":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:47211:9208":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:4990:10298":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:44142:4785":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:45174:16925":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"11:2380:4684":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:6700:10740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:15896:7821":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:45289:9142":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:7332:10837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:12008:6970":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:2406:6909":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:3941:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:1563:10079":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:11882:4640":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:8308:10990":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:42009:8952":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:4941:11719":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13070:7049":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"5:2148:4653":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:3077:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:3687:4629":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"11:1049:4827":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:13471:6917":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:4780:11750":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:44675:9122":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12787:7215":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:41258:9062":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"11:102:9948":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:14845:7536":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:10939:9427":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:2029:4616":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"16:6713:8295":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:3759:4774":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:6837:8315":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:4844:8163":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:14886:7541":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:3341:5260":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5420:10449":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:13082:7050":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:14099:7386":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"11:2301:4825":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:1703:10168":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:6462:24291":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:12570:7198":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:8082:11677":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:5224:10368":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"18:563:6848":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:7358:8136":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:47309:9228":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5255:10381":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:1711:10172":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:44587:9114":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13055:7073":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:6680:10731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:13368:5856":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:5482:10490":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:497:9980":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:5349:10418":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:13757:7317":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:7649:4812":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11527:7072":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11163:7049":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6573:8263":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:10694:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"11:430:38065":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:5282:10398":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:8629:11039":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:8199:10978":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:929:6734":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:15953:7837":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:4702:11733":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:1636:8757":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:7414:10872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:2435:23427":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:5088:10340":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:15812:7797":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:9586:5366":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"16:7949:8140":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"11:1888:4815":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:5709:24287":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:3096:36460":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13890:7343":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:23119:11851":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:4957:10282":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"2:9573:5023":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:2403:8789":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"11:2137:4826":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:8900:4685":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:10758:4600":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:3364:8683":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:12699:7208":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:1586:4814":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:6751:4739":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:11914:9325":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:44636:9120":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:11925:5856":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:7838:24298":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:3061:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:5449:8182":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:9310:9400":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:46791:9173":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:43513:4724":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"11:1601:8679":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:1854:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:11277:29181":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:11065:7047":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:3304:8681":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:15621:7753":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:3576:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:41100:5867":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:45089:5866":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:16786:8068":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:5478:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:2840:8118":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:13084:8982":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:44536:9113":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:14001:7363":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:481:6837":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8558:4639":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:7539:10934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:41292:9063":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:14405:7453":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13266:24364":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:6269:8211":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:10285:9092":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:8588:11698":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:11457:7064":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"6:4842:10220":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:47583:9238":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:11971:7108":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:10553:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"5:1401:4826":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:3335:5258":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:35180:4761":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:6025:4727":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:16145:7903":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"7:0:1947":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:46844:9180":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:45726:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:1623:4812":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:13181:7252":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"5:2295:11003":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:1595:4817":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:5285:9335":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11812:9350":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:41479:9070":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:11073:29173":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:48049:9285":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:8622:9328":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:11309:7052":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:765:28556":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:16377:7964":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:3405:4660":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:5301:10406":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:3126:23430":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:12044:7120":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:11678:7081":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:6521:10649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:4163:6728":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:10392:5363":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:14599:7482":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:10516:24362":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"11:123:6717":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13781:7318":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:41498:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:5009:4808":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:12456:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:2792:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:7416:8400":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12018:7112":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:46894:9183":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"11:698:4812":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:11124:38094":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:1635:8680":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13385:7266":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:1684:10161":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:8900:17017":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:6608:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:47249:9210":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:7938:8503":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:2173:8760":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:15981:7844":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:11368:11045":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:11566:7075":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:40255:4781":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:8732:5018":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"1:10570:29239":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:15540:7741":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:10776:4657":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:12477:1883":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:33552:4749":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:4943:11720":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11016:7046":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:14140:7397":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:9195:4684":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:1584:10093":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:11722:4681":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"17:2378:24424":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:1920:8683":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:8844:2506":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:5494:10493":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:8319:10994":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:4370:4684":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:3403:4769":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:15121:7579":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:15586:7749":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:41508:8930":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:22983:11766":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:881:4684":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:7288:6776":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:9246:11759":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"12:0:4441":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:5687:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:45388:9148":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:8137:8144":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:1530:10056":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:5586:10523":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13909:7344":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:44134:9106":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:23820:9035":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:3378:4752":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:10368:24357":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:7901:6901":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12826:7217":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"18:623:38103":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:2348:38039":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":31}