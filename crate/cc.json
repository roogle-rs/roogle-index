{"root":"0:0:2295","crate_version":"1.0.73","includes_private":false,"index":{"0:105:723":{"id":"0:105:723","crate_id":0,"name":"include","span":{"filename":"src/lib.rs","begin":[341,4],"end":[344,5]},"visibility":"public","docs":"Add a directory to the `-I` or include path for headers\n\n# Example\n\n```no_run\nuse std::path::Path;\n\nlet library_path = Path::new(\"/path/to/library\");\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .include(library_path)\n    .include(\"src\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dir",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3074:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7337:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3116-0:364:122":{"id":"b:2:3116-0:364:122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6050:60111":{"id":"5:6050:60111","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2846","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8061:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2846","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8061:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:259:980":{"id":"0:259:980","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[2966,4],"end":[2968,5]},"visibility":"public","docs":"Returns the path for this compiler.\n\nNote that this may not be a path to a file on the filesystem, e.g. \"cc\",\nbut rather something which will be resolved when a process is spawned.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7337:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3276:4426":{"id":"2:3276:4426","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3278:250"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3644:4649":{"id":"2:3644:4649","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3646:56950"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3297:4737":{"id":"2:3297:4737","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3298:166","2:3299:930"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3325:4745":{"id":"2:3325:4745","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3327:166","2:3328:1206"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:174:1954":{"id":"0:174:1954","crate_id":0,"name":"get_compiler","span":{"filename":"src/lib.rs","begin":[1388,4],"end":[1393,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis function will return a `Tool` which represents the culmination\nof this configuration at a snapshot in time. The returned compiler can\nbe inspected (e.g. the path, arguments, environment) to forward along to\nother tools, or the `to_command` method can be used to invoke the\ncompiler itself.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13189:53927":{"id":"2:13189:53927","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:293:2797":{"id":"0:293:2797","crate_id":0,"name":"Vs17","span":{"filename":"src/windows_registry.rs","begin":[93,4],"end":[93,8]},"visibility":"default","docs":"Visual Studio 17 (2022)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:12819:4687":{"id":"2:12819:4687","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12821:4690","2:12822:58115","2:12823:58116","2:12824:58117","2:12825:58119","2:12826:58118","2:12827:58120"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12828:4690":{"id":"2:12828:4690","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12830:4710","2:12831:899","2:12832:58296","2:12833:58297"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5627:4376":{"id":"1:5627:4376","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5628:55437","1:5629:55439","1:5630:55438","1:5631:55440"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:175:1759":{"id":"0:175:1759","crate_id":0,"name":"try_get_compiler","span":{"filename":"src/lib.rs","begin":[1398,4],"end":[1469,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis will return a result instead of panicing; see get_compiler() for the complete description.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13295:53850":{"id":"2:13295:53850","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13268:59473":{"id":"2:13268:59473","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13200:2371":{"id":"2:13200:2371","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15726:3049"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49396:5040","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3304:4511":{"id":"2:3304:4511","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3306:166","2:3307:334"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6767:4363":{"id":"1:6767:4363","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6768:55484"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:369":{"id":"0:369","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,16],"end":[147,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:370:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6465:4388":{"id":"1:6465:4388","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6466:57475","1:6467:57476"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12834:4691":{"id":"2:12834:4691","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12836:3769","2:12837:59251","2:12838:59252"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12828:4690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10101:3179":{"id":"2:10101:3179","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10102:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3218:3371-0:364:122":{"id":"a:2:3218:3371-0:364:122","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:370:639":{"id":"0:370:639","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[147,16],"end":[147,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10052:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10041:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:107:1713":{"id":"0:107:1713","crate_id":0,"name":"includes","span":{"filename":"src/lib.rs","begin":[364,4],"end":[373,5]},"visibility":"public","docs":"Add multiple directories to the `-I` include path.\n\n# Example\n\n```no_run\n# use std::path::Path;\n# let condition = true;\n#\nlet mut extra_dir = None;\nif condition {\n    extra_dir = Some(Path::new(\"/path/to\"));\n}\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .includes(extra_dir)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dirs",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8183:146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8183:146","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3074:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7337:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3177:195-0:284:2787":{"id":"a:2:3177:195-0:284:2787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3110-0:284:2787":{"id":"b:2:3110-0:284:2787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13195:2337":{"id":"2:13195:2337","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"1:15726:3049"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3292:4638":{"id":"2:3292:4638","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3294:1081"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8378:152":{"id":"2:8378:152","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8379:1715","2:8380:899","2:8381:3778","2:8382:477","2:8384:2957","2:8387:3779","2:8388:2261","2:8389:3780","2:8390:2235","2:8392:3781","2:8394:3782","2:8395:3783","2:8397:818","2:8400:3784","2:8407:2585","2:8409:2617","2:8412:2602","2:8413:3785","2:8414:3786","2:8416:3787","2:8418:3788","2:8421:1278","2:8422:2015","2:8423:3789","2:8427:3790","2:8430:3791","2:8431:3792","2:8432:3793","2:8434:3794","2:8435:2236","2:8437:3795","2:8440:3796","2:8442:3797","2:8452:3798","2:8467:3799","2:8469:3800","2:8473:3801","2:8482:3802","2:8485:3803","2:8487:3804","2:8490:260","2:8497:277","2:8504:1936","2:8511:2530","2:8520:3805","2:8530:992","2:8537:3806","2:8544:2959","2:8545:3752","2:8546:3755","2:8558:2890","2:8565:3754","2:8577:3753","2:8584:2967","2:8585:3807","2:8590:3808","2:8593:1755","2:8596:3809","2:8597:3810","2:8599:3811","2:8601:397","2:8604:3812","2:8607:975","2:8610:3813","2:8613:584","2:8616:3814","2:8619:884","2:8621:803","2:8623:769","2:8625:692","2:8627:675","2:8629:3815","2:8630:3816","2:8638:3817"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6072:54940":{"id":"5:6072:54940","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15726:3049"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:116:1732":{"id":"0:116:1732","crate_id":0,"name":"ar_flag","span":{"filename":"src/lib.rs","begin":[424,4],"end":[427,5]},"visibility":"public","docs":"Add a flag to the invocation of the ar\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .file(\"src/bar.c\")\n    .ar_flag(\"/NODEFAULTLIB:libc.dll\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:289:2793":{"id":"0:289:2793","crate_id":0,"name":"Vs15","span":{"filename":"src/windows_registry.rs","begin":[89,4],"end":[89,8]},"visibility":"default","docs":"Visual Studio 15 (2017)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3288:4636":{"id":"2:3288:4636","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3290:539"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3343:4754":{"id":"2:3343:4754","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3345:1204"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3189:204-0:364:122":{"id":"a:2:3189:204-0:364:122","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[91,9],"end":[91,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:344:391"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13203:59462":{"id":"2:13203:59462","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49386:5039","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9112:3611-0:364:122":{"id":"a:2:9112:3611-0:364:122","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:3611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:10351:4452":{"id":"2:10351:4452","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10352:141","2:10353:33693","2:10354:55583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5643:4377":{"id":"1:5643:4377","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5644:6364","1:5645:8607"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:364:122":{"id":"0:364:122","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[148,0],"end":[153,1]},"visibility":"public","docs":"Represents an internal error that occurred, with an explanation.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:2:9113:3610-0:364:122","a:2:3177:195-0:364:122","a:2:3218:3371-0:364:122","a:2:9112:3611-0:364:122","a:2:3189:204-0:364:122","b:2:2780-0:364:122","b:2:3106-0:364:122","b:2:3121-0:364:122","b:2:2783-0:364:122","b:2:3906-0:364:122","b:2:3110-0:364:122","b:2:3116-0:364:122","b:5:6379-0:364:122","b:5:776-0:364:122","0:367","0:369","0:89","0:91","0:93"]}},"2:13537:145":{"id":"2:13537:145","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13538:166","2:13539:145","2:13540:744"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3266:4627":{"id":"2:3266:4627","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3268:166","2:3269:1080"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13293:53848":{"id":"2:13293:53848","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9113:3610-0:308:1587":{"id":"a:2:9113:3610-0:308:1587","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:3610","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13193:4487":{"id":"2:13193:4487","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:15726:3049","`str`":"1:15726:3049","crate::ops::Index":"2:3481:4182"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:128:1599":{"id":"0:128:1599","crate_id":0,"name":"cuda","span":{"filename":"src/lib.rs","begin":[613,4],"end":[620,5]},"visibility":"public","docs":"Set CUDA C++ support.\n\nEnabling CUDA will pass the detected C/C++ toolchain as an argument to\nthe CUDA compiler, NVCC. NVCC itself accepts some limited GNU-like args;\nany other arguments for the C/C++ toolchain will be redirected using\n\"-Xcompiler\" flags.\n\nIf enabled, this also implicitly enables C++ support.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cuda",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:155:1608":{"id":"0:155:1608","crate_id":0,"name":"use_plt","span":{"filename":"src/lib.rs","begin":[920,4],"end":[923,5]},"visibility":"public","docs":"Configures whether the Procedure Linkage Table is used for indirect\ncalls into shared libraries.\n\nThe PLT is used to provide features like lazy binding, but introduces\na small performance loss due to extra pointer indirection. Setting\n`use_plt` to `false` can provide a small performance increase.\n\nNote that skipping the PLT requires a recent version of GCC/Clang.\n\nThis only applies to ELF targets. It has no effect on other platforms.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["use_plt",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3908:1397":{"id":"2:3908:1397","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:45700:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:154:1607":{"id":"0:154:1607","crate_id":0,"name":"pic","span":{"filename":"src/lib.rs","begin":[905,4],"end":[908,5]},"visibility":"public","docs":"Configures whether the compiler will emit position independent code.\n\nThis option defaults to `false` for `windows-gnu` and bare metal targets and\nto `true` for all other targets.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["pic",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:291:2795":{"id":"0:291:2795","crate_id":0,"name":"Vs16","span":{"filename":"src/windows_registry.rs","begin":[91,4],"end":[91,8]},"visibility":"default","docs":"Visual Studio 16 (2019)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:5561:4391":{"id":"1:5561:4391","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5562:5956","1:5563:55634"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:4374","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8179:131":{"id":"2:8179:131","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8181:663"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6345:4369":{"id":"1:6345:4369","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6346:4569","1:6347:4570","1:6348:8793","1:6349:57896","1:6351:57900","1:6353:57897","1:6354:57898","1:6356:57899"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:4374","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13194:59461":{"id":"2:13194:59461","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15726:3049","str::slice_unchecked":"1:15726:3049","crate::ops::IndexMut":"2:3485:4183"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3638:132":{"id":"2:3638:132","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3640:666"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:151:1605":{"id":"0:151:1605","crate_id":0,"name":"archiver","span":{"filename":"src/lib.rs","begin":[882,4],"end":[885,5]},"visibility":"public","docs":"Configures the tool used to assemble archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["archiver",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3074:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7337:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:143:1603":{"id":"0:143:1603","crate_id":0,"name":"opt_level","span":{"filename":"src/lib.rs","begin":[822,4],"end":[825,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["opt_level",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13172":{"id":"2:13172","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12269:1310","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13173:770","2:13174:1773","2:13175:59457","2:13176:59458","2:13178:59459","2:13181:55634","2:13182:59460","2:13183:287","2:13184:53929","2:13185:1754","2:13187:53926","2:13189:53927","2:13191:53928","2:13193:4487","2:13194:59461","2:13195:2337","2:13196:53948","2:13197:2573","2:13198:4717","2:13199:3972","2:13200:2371","2:13201:2355","2:13202:3965","2:13203:59462","2:13204:32421","2:13205:1764","2:13208:1920","2:13211:1921","2:13214:1936","2:13218:2338","2:13222:2209","2:13225:32293","2:13228:53957","2:13231:59463","2:13234:59464","2:13237:53959","2:13240:53961","2:13243:59465","2:13246:59466","2:13249:3125","2:13252:59467","2:13255:59468","2:13258:59469","2:13261:2308","2:13263:59470","2:13265:59471","2:13267:59472","2:13268:59473","2:13269:59474","2:13272:2340","2:13275:15127","2:13278:53963","2:13281:2962","2:13284:3005","2:13287:2393","2:13290:2034","2:13292:5203","2:13293:53848","2:13294:53849","2:13295:53850","2:13296:59475","2:13298:4396","2:13299:59476"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3280:4428":{"id":"2:3280:4428","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3282:1326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3112:660":{"id":"2:3112:660","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10107:3186":{"id":"2:10107:3186","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10108:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4539:1569":{"id":"1:4539:1569","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4540:3966","1:4541:3967","1:4543:3968","1:4544:2614","1:4545:2911","1:4546:3969","1:4547:3970","1:4549:3971","1:4550:3794","1:4551:3972","1:4552:2235","1:4554:2015"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3125:1383":{"id":"2:3125:1383","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:346:639":{"id":"0:346:639","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[91,16],"end":[91,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10052:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10041:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6367:4372":{"id":"1:6367:4372","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6368:56263","1:6369:8278","1:6370:56264","1:6371:56265","1:6372:56266","1:6373:56267"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:4374","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9113:3610-0:364:122":{"id":"a:2:9113:3610-0:364:122","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:3610","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5705:4383":{"id":"1:5705:4383","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5706:6364"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:120:1610":{"id":"0:120:1610","crate_id":0,"name":"shared_flag","span":{"filename":"src/lib.rs","begin":[543,4],"end":[546,5]},"visibility":"public","docs":"Set the `-shared` flag.\n\nWhen enabled, the compiler will produce a shared object which can\nthen be linked with other objects to form an executable.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["shared_flag",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2782:3111":{"id":"2:2782:3111","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:147:1602":{"id":"0:147:1602","crate_id":0,"name":"out_dir","span":{"filename":"src/lib.rs","begin":[862,4],"end":[865,5]},"visibility":"public","docs":"Configures the output directory where all object files and static\nlibraries will be located.\n\nThis option is automatically scraped from the `OUT_DIR` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["out_dir",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3074:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7337:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:301:584":{"id":"0:301:584","crate_id":0,"name":"eq","span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:141:1332":{"id":"0:141:1332","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[795,4],"end":[798,5]},"visibility":"public","docs":"Configures the target this configuration will be compiling for.\n\nThis option is automatically scraped from the `TARGET` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .target(\"aarch64-linux-android\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:307:391":{"id":"0:307:391","crate_id":0,"name":"clone","span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:86:2806":{"id":"0:86:2806","crate_id":0,"name":"find_vs_version","span":{"filename":"src/windows_registry.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Find the most recent installed version of Visual Studio\n\nThis is used by the cmake crate to figure out the correct\ngenerator.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:2829:168":{"id":"2:2829:168","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2831:584","2:2832:884"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:5:776-0:371:1644":{"id":"b:5:776-0:371:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:772:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:778:3819","5:779:1633","5:780:3820"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13294:53849":{"id":"2:13294:53849","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6377:207":{"id":"5:6377:207","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6378:1722"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22622:4420":{"id":"2:22622:4420","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22612:4374","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13993:4186":{"id":"2:13993:4186","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13994:56166","2:13995:56167","2:13996:56168","2:13997:56169","2:13998:56170","2:13999:56171","2:14000:3794"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3177:195-0:308:1587":{"id":"a:2:3177:195-0:308:1587","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3177:195-0:371:1644":{"id":"a:2:3177:195-0:371:1644","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13290:2034":{"id":"2:13290:2034","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12748:2824","FromStr::Err":"2:12748:2824"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12748:2824","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12748:2824","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:6379-0:364:122":{"id":"b:5:6379-0:364:122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10099:114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6377:207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:6381:1722"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:284:2787":{"id":"0:284:2787","crate_id":0,"name":"VsVers","span":{"filename":"src/windows_registry.rs","begin":[83,0],"end":[101,1]},"visibility":"public","docs":"A version of Visual Studio","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:285:2789","0:287:2791","0:289:2793","0:291:2795","0:293:2797"],"impls":["a:2:9113:3610-0:284:2787","a:2:3177:195-0:284:2787","a:2:3218:3371-0:284:2787","a:2:9112:3611-0:284:2787","a:2:3189:204-0:284:2787","b:2:2780-0:284:2787","b:2:3106-0:284:2787","b:2:3121-0:284:2787","b:2:2783-0:284:2787","b:2:3906-0:284:2787","b:2:3110-0:284:2787","b:2:3116-0:284:2787","b:5:776-0:284:2787","0:297","0:299","0:300","0:302","0:303","0:305","0:306"]}},"2:13228:53957":{"id":"2:13228:53957","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12809:4688","prim@char":"1:15720:3044","`DoubleEndedIterator`":"2:8227:115","str::split":"1:15726:3049"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49140:5001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13249:3125":{"id":"2:13249:3125","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"1:15726:3049","self::pattern":"2:12809:4688","prim@char":"1:15720:3044","`DoubleEndedIterator`":"2:8227:115"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49326:5037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2865:162":{"id":"2:2865:162","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2866:397","2:2867:2959","2:2868:3752","2:2869:3767"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5555:4392":{"id":"1:5555:4392","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5556:55676","1:5557:3700"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:4374","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6073:54941":{"id":"5:6073:54941","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15726:3049"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3426:126":{"id":"2:3426:126","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3428:360"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4614:3210":{"id":"1:4614:3210","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4615:57979","1:4616:40137","1:4617:57981","1:4618:57980"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3245:4425":{"id":"2:3245:4425","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247:166","2:3248:249"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:156:1609":{"id":"0:156:1609","crate_id":0,"name":"static_crt","span":{"filename":"src/lib.rs","begin":[928,4],"end":[931,5]},"visibility":"public","docs":"Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.\n\nThis option defaults to `false`, and affect only msvc targets.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["static_crt",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:345":{"id":"0:345","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[91,16],"end":[91,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:346:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13218:2338":{"id":"2:13218:2338","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47164:161","self::pattern":"2:12809:4688","prim@char":"1:15720:3044"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:382":{"id":"0:382","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[185,16],"end":[185,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:383:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:305":{"id":"0:305","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,31],"end":[82,35]},"visibility":{"restricted":{"parent":"0:76:1582","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3187:102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3906-0:284:2787":{"id":"b:2:3906-0:284:2787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10710:198":{"id":"2:10710:198","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10712:166","2:10713:1754","2:10714:53926","2:10715:53927","2:10716:53928","2:10717:730","2:10718:731"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10701:4374","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2777:4736":{"id":"2:2777:4736","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2779:53798"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6051:2131":{"id":"5:6051:2131","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:306":{"id":"0:306","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":{"restricted":{"parent":"0:76:1582","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:307:391"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3396:111":{"id":"2:3396:111","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:205","2:3398:523"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:125:1595":{"id":"0:125:1595","crate_id":0,"name":"files","span":{"filename":"src/lib.rs","begin":[585,4],"end":[594,5]},"visibility":"public","docs":"Add files which will be compiled","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["p",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8183:146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8183:146","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3074:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7337:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13522:133":{"id":"2:13522:133","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13523:166","2:13524:991"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:371:1644":{"id":"0:371:1644","crate_id":0,"name":"Tool","span":{"filename":"src/lib.rs","begin":[186,0],"end":[195,1]},"visibility":"public","docs":"Configuration used to represent an invocation of a C compiler.\n\nThis can be used to figure out what compiler is in use, what the arguments\nto it are, and what the environment variables look like for the compiler.\nThis can be used to further configure other build systems (e.g. forward\nalong CC and/or CFLAGS) or the `to_command` method can be used to run the\ncompiler itself.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:247","a:2:9113:3610-0:371:1644","a:2:3177:195-0:371:1644","a:2:3218:3371-0:371:1644","a:2:9112:3611-0:371:1644","a:2:3189:204-0:371:1644","b:2:2780-0:371:1644","b:2:3106-0:371:1644","b:2:3121-0:371:1644","b:2:2783-0:371:1644","b:2:3906-0:371:1644","b:2:3110-0:371:1644","b:2:3116-0:371:1644","b:5:776-0:371:1644","0:380","0:382"]}},"2:3423:125":{"id":"2:3423:125","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:359"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3426:126","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3177:195-0:364:122":{"id":"a:2:3177:195-0:364:122","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":{"restricted":{"parent":"0:76:1582","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:301:584"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12839:4692":{"id":"2:12839:4692","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3189:204-0:308:1587":{"id":"a:2:3189:204-0:308:1587","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:383:639":{"id":"0:383:639","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[185,16],"end":[185,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10052:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10041:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13176:59458":{"id":"2:13176:59458","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6381:1722":{"id":"5:6381:1722","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3218:3371-0:308:1587":{"id":"a:2:3218:3371-0:308:1587","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3218:3371-0:284:2787":{"id":"a:2:3218:3371-0:284:2787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2780-0:371:1644":{"id":"b:2:2780-0:371:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2782:3111"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13292:5203":{"id":"2:13292:5203","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:90:660":{"id":"0:90:660","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[165,4],"end":[167,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3955:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:153:1606":{"id":"0:153:1606","crate_id":0,"name":"cargo_metadata","span":{"filename":"src/lib.rs","begin":[896,4],"end":[899,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.\n\nThe emitted metadata is:\n\n - `rustc-link-lib=static=`*compiled lib*\n - `rustc-link-search=native=`*target folder*\n - When target is MSVC, the ATL-MFC libs are added via `rustc-link-search=native=`\n - When C++ is enabled, the C++ stdlib is added via `rustc-link-lib`\n","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cargo_metadata",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2825,0],"end":[3035,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:257:1762","0:259:980","0:260:281","0:261:580","0:262:2390","0:263:2601","0:264:2576","0:265:2577","0:266:2574"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:368:391":{"id":"0:368:391","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[147,9],"end":[147,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3110-0:371:1644":{"id":"b:2:3110-0:371:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10109:174":{"id":"2:10109:174","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10110:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13267:59472":{"id":"2:13267:59472","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[164,0],"end":[168,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3955:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:90:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:131:1562":{"id":"0:131:1562","crate_id":0,"name":"warnings","span":{"filename":"src/lib.rs","begin":[675,4],"end":[679,5]},"visibility":"public","docs":"Set warnings flags.\n\nAdds some flags:\n- \"-Wall\" for MSVC.\n- \"-Wall\", \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["warnings",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13181:55634":{"id":"2:13181:55634","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12280:2558"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10099:114":{"id":"2:10099:114","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10100:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9207:4417":{"id":"1:9207:4417","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9208:56222","1:9209:56223","1:9210:56224","1:9211:56225","1:9212:5071","1:9213:39665","1:9214:56221"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:4374","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3716:4779":{"id":"2:3716:4779","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13287:2393":{"id":"2:13287:2393","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12809:4688","prim@char":"1:15720:3044"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8252:3372":{"id":"2:8252:3372","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8253:770","2:8254:1773"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8378:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:123:628":{"id":"0:123:628","crate_id":0,"name":"file","span":{"filename":"src/lib.rs","begin":[579,4],"end":[582,5]},"visibility":"public","docs":"Add a file which will be compiled","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["p",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3074:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7337:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:144:1869":{"id":"0:144:1869","crate_id":0,"name":"opt_level_str","span":{"filename":"src/lib.rs","begin":[831,4],"end":[834,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["opt_level",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:262:2390":{"id":"0:262:2390","crate_id":0,"name":"cc_env","span":{"filename":"src/lib.rs","begin":[2988,4],"end":[3002,5]},"visibility":"public","docs":"Returns the compiler command in format of CC environment variable.\nOr empty string if CC env was not present\n\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2852:165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10111:3183":{"id":"2:10111:3183","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10112:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:257:1762":{"id":"0:257:1762","crate_id":0,"name":"to_command","span":{"filename":"src/lib.rs","begin":[2938,4],"end":[2960,5]},"visibility":"public","docs":"Converts this compiler into a `Command` that's ready to be run.\n\nThis is useful for when the compiler needs to be executed and the\ncommand returned will already have the initial arguments and environment\nvariables configured.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"1:7573:1574","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:297":{"id":"0:297","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":{"restricted":{"parent":"0:76:1582","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:298:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:7707:4766":{"id":"2:7707:4766","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7708:59072","2:7709:59073","2:7710:59077","2:7711:59075","2:7712:59074","2:7713:59078","2:7714:59076"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13263:59470":{"id":"2:13263:59470","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6070:60114":{"id":"5:6070:60114","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:421:2846","`String`":"5:8302:200"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2846","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8061:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:137:1598":{"id":"0:137:1598","crate_id":0,"name":"cpp_set_stdlib","span":{"filename":"src/lib.rs","begin":[772,4],"end":[780,5]},"visibility":"public","docs":"Force the C++ compiler to use the specified standard library.\n\nSetting this option will automatically set `cpp_link_stdlib` to the same\nvalue.\n\nThe default value of this option is always `None`.\n\nThis option has no effect when compiling for a Visual Studio based\ntarget.\n\nThis option sets the `-stdlib` flag, which is only supported by some\ncompilers (clang, icc) but not by others (gcc). The library will not\ndetect which compiler is used, as such it is the responsibility of the\ncaller to ensure that this option is only used in conjunction with a\ncompiler which supports the `-stdlib` flag.\n\nA value of `None` indicates that no specific C++ standard library should\nbe used, otherwise `-stdlib` is added to the compile invocation.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .cpp_set_stdlib(\"c++\")\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cpp_set_stdlib",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3331:4748":{"id":"2:3331:4748","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3333:335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13234:59464":{"id":"2:13234:59464","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:15726:3049","str::split_terminator":"1:15726:3049","prim@char":"1:15720:3044","self::pattern":"2:12809:4688"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49190:5031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[281,0],"end":[2817,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:104:897","0:105:723","0:107:1713","0:109:1719","0:113:1724","0:115:1728","0:116:1732","0:118:1750","0:119:1778","0:120:1610","0:121:1611","0:122:1594","0:123:628","0:125:1595","0:127:1596","0:128:1599","0:129:1600","0:130:1612","0:131:1562","0:132:1613","0:133:1597","0:137:1598","0:141:1332","0:142:1601","0:143:1603","0:144:1869","0:145:501","0:146:1604","0:147:1602","0:149:411","0:151:1605","0:153:1606","0:154:1607","0:155:1608","0:156:1609","0:160:1913","0:166:1994","0:171:2049","0:173:2058","0:174:1954","0:175:1759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:160:1913":{"id":"0:160:1913","crate_id":0,"name":"try_compile","span":{"filename":"src/lib.rs","begin":[947,4],"end":[1078,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThis will return a result instead of panicing; see compile() for the complete description.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2875:169":{"id":"2:2875:169","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2877:975","2:2878:803","2:2879:769","2:2880:692","2:2881:675"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3272:4630":{"id":"2:3272:4630","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3273:166","2:3274:890"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:381:391":{"id":"0:381:391","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[185,9],"end":[185,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3186:201":{"id":"2:3186:201","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3187:102":{"id":"2:3187:102","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5683:4379":{"id":"1:5683:4379","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5684:55679","1:5685:55680","1:5686:55681","1:5687:55682"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13183:287":{"id":"2:13183:287","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15726:3049","`u8`":"1:15737:3058"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3319:4742":{"id":"2:3319:4742","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3321:166","2:3322:1203"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3314:4513":{"id":"2:3314:4513","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3316:166","2:3317:339"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13296:59475":{"id":"2:13296:59475","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15720:3044"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49421:5043","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7685:3291":{"id":"1:7685:3291","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7686:57794"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13197:2573":{"id":"2:13197:2573","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15720:3044"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49092:5025","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:122:1594":{"id":"0:122:1594","crate_id":0,"name":"no_default_flags","span":{"filename":"src/lib.rs","begin":[573,4],"end":[576,5]},"visibility":"public","docs":"Disables the generation of default compiler flags. The default compiler\nflags may cause conflicts in some cross compiling scenarios.\n\nSetting the `CRATE_CC_NO_DEFAULTS` environment variable has the same\neffect as setting this to `true`. The presence of the environment\nvariable and the value of `no_default_flags` will be OR'd together.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["no_default_flags",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23465:4734":{"id":"2:23465:4734","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23466:4842"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23461:4374","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3187:102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8183:146":{"id":"2:8183:146","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8184:1715","2:8185:3777","2:8186:745"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8146:4787":{"id":"2:8146:4787","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8148:3811"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1075:4394":{"id":"1:1075:4394","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:3819","1:1077:5203","1:1078:54940","1:1079:54941","1:1080:53848","1:1081:53849","1:1082:53850"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4621:1567":{"id":"1:4621:1567","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4622:3961","1:4623:3962","1:4624:3963","1:4626:3212","1:4627:3964","1:4629:2209","1:4630:3965"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4539:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:119:1778":{"id":"0:119:1778","crate_id":0,"name":"flag_if_supported","span":{"filename":"src/lib.rs","begin":[525,4],"end":[528,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler if it supports it\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag_if_supported(\"-Wlogical-op\") // only supported by GCC\n    .flag_if_supported(\"-Wunreachable-code\") // only supported by clang\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3110-0:308:1587":{"id":"b:2:3110-0:308:1587","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13211:1921":{"id":"2:13211:1921","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:12809:4688","prim@char":"1:15720:3044"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3348:4757":{"id":"2:3348:4757","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3350:1207"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:299":{"id":"0:299","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":{"restricted":{"parent":"0:76:1582","path":"::windows_registry"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3185:202","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3182:3370":{"id":"2:3182:3370","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9113:3610":{"id":"2:9113:3610","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:92:639":{"id":"0:92:639","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[171,4],"end":[173,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10052:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10041:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13237:53959":{"id":"2:13237:53959","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:12809:4688","prim@char":"1:15720:3044","str::rsplitn":"1:15726:3049"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49226:5004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:121:1611":{"id":"0:121:1611","crate_id":0,"name":"static_flag","span":{"filename":"src/lib.rs","begin":[562,4],"end":[565,5]},"visibility":"public","docs":"Set the `-static` flag.\n\nWhen enabled on systems that support dynamic linking, this prevents\nlinking with the shared libraries.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .static_flag(true)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["static_flag",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3463:4801":{"id":"2:3463:4801","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3465:221","2:3466:191","2:3467:59031"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2785:53798":{"id":"2:2785:53798","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:129:1600":{"id":"0:129:1600","crate_id":0,"name":"cudart","span":{"filename":"src/lib.rs","begin":[628,4],"end":[633,5]},"visibility":"public","docs":"Link CUDA run-time.\n\nThis option mimics the `--cudart` NVCC command-line option. Just like\nthe original it accepts `{none|shared|static}`, with default being\n`static`. The method has to be invoked after `.cuda(true)`, or not\nat all, if the default is right for the project.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cudart",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2780-0:308:1587":{"id":"b:2:2780-0:308:1587","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2782:3111"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13240:53961":{"id":"2:13240:53961","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:12809:4688","str::splitn":"1:15726:3049","prim@char":"1:15720:3044"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49244:5005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6071:3235":{"id":"5:6071:3235","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3116-0:308:1587":{"id":"b:2:3116-0:308:1587","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9113:3610-0:371:1644":{"id":"a:2:9113:3610-0:371:1644","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:3610","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3121-0:364:122":{"id":"b:2:3121-0:364:122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:113:1724":{"id":"0:113:1724","crate_id":0,"name":"object","span":{"filename":"src/lib.rs","begin":[393,4],"end":[396,5]},"visibility":"public","docs":"Add an arbitrary object file to link in","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["obj",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3074:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7337:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6054:60112":{"id":"5:6054:60112","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10105:3185":{"id":"2:10105:3185","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10106:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6771:4365":{"id":"1:6771:4365","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6772:57835"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13198:4717":{"id":"2:13198:4717","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15720:3044"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49098:5026","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:264:2576":{"id":"0:264:2576","crate_id":0,"name":"is_like_gnu","span":{"filename":"src/lib.rs","begin":[3019,4],"end":[3021,5]},"visibility":"public","docs":"Whether the tool is GNU Compiler Collection-like.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12748:2824":{"id":"2:12748:2824","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12749:121","2:12750:2887"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:285:2789":{"id":"0:285:2789","crate_id":0,"name":"Vs12","span":{"filename":"src/windows_registry.rs","begin":[85,4],"end":[85,8]},"visibility":"default","docs":"Visual Studio 12 (2013)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:2565:122":{"id":"1:2565:122","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2566:8889","1:2568:3032","1:2569:8890","1:2570:8891"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10099:114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9112:3611-0:284:2787":{"id":"a:2:9112:3611-0:284:2787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:3611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:9112:3611":{"id":"2:9112:3611","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13173:770":{"id":"2:13173:770","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15720:3044"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3906-0:364:122":{"id":"b:2:3906-0:364:122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3124:122":{"id":"2:3124:122","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38477:3292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"2:13255:59468":{"id":"2:13255:59468","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12809:4688","`DoubleEndedIterator`":"2:8227:115","str::rmatch_indices":"1:15726:3049","prim@char":"1:15720:3044"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49272:5034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:109:1719":{"id":"0:109:1719","crate_id":0,"name":"define","span":{"filename":"src/lib.rs","begin":[386,4],"end":[390,5]},"visibility":"public","docs":"Specify a `-D` variable with an optional value.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .define(\"FOO\", \"BAR\")\n    .define(\"BAZ\", None)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["var",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["val",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:133:1597":{"id":"0:133:1597","crate_id":0,"name":"cpp_link_stdlib","span":{"filename":"src/lib.rs","begin":[731,4],"end":[737,5]},"visibility":"public","docs":"Set the standard library to link against when compiling with C++\nsupport.\n\nSee [`get_cpp_link_stdlib`](cc::Build::get_cpp_link_stdlib) documentation\nfor the default value.\nIf the `CXXSTDLIB` environment variable is set, its value will\noverride the default value, but not the value explicitly set by calling\nthis function.\n\nA value of `None` indicates that no automatic linking should happen,\notherwise cargo will link against the specified library.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n- `c++_shared` or `c++_static` for Android\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .cpp_link_stdlib(\"stdc++\")\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cpp_link_stdlib",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9112:3611-0:308:1587":{"id":"a:2:9112:3611-0:308:1587","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:3611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3409:3219":{"id":"2:3409:3219","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3410:525"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3396:111","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3906-0:308:1587":{"id":"b:2:3906-0:308:1587","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3420:2037":{"id":"2:3420:2037","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3421:558"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":{"restricted":{"parent":"0:76:1582","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5805:5223":{"id":"5:5805:5223","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5807:166","5:5808:1735"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8192:3373":{"id":"2:8192:3373","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8194:3774","2:8196:3775","2:8197:3776"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13284:3005":{"id":"2:13284:3005","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12809:4688","prim@char":"1:15720:3044"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:127:1596":{"id":"0:127:1596","crate_id":0,"name":"cpp","span":{"filename":"src/lib.rs","begin":[600,4],"end":[603,5]},"visibility":"public","docs":"Set C++ support.\n\nThe other `cpp_*` options will only become active if this is set to\n`true`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cpp",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3189:204-0:371:1644":{"id":"a:2:3189:204-0:371:1644","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:146:1604":{"id":"0:146:1604","crate_id":0,"name":"force_frame_pointer","span":{"filename":"src/lib.rs","begin":[852,4],"end":[855,5]},"visibility":"public","docs":"Configures whether the compiler will emit instructions to store\nframe pointers during codegen.\n\nThis option is automatically enabled when debug information is emitted.\nOtherwise the target platform compiler's default will be used.\nYou can use this option to force a specific setting.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["force",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13278:53963":{"id":"2:13278:53963","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12809:4688","prim@char":"1:15720:3044"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3120:1384":{"id":"2:3120:1384","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13231:59463":{"id":"2:13231:59463","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"1:15726:3049","self::pattern":"2:12809:4688","`DoubleEndedIterator`":"2:8227:115","prim@char":"1:15720:3044","str::split":"1:15726:3049"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49172:5030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6769:4364":{"id":"1:6769:4364","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6770:56240"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5801:5221":{"id":"5:5801:5221","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5803:166","5:5804:414"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13178:59459":{"id":"2:13178:59459","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:15726:3049"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:115:1728":{"id":"0:115:1728","crate_id":0,"name":"flag","span":{"filename":"src/lib.rs","begin":[408,4],"end":[411,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"-ffunction-sections\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2783-0:371:1644":{"id":"b:2:2783-0:371:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:4736","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2785:53798"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:380":{"id":"0:380","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[185,9],"end":[185,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:381:391"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3250:4427":{"id":"2:3250:4427","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3252:166","2:3253:1325"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3185:202":{"id":"2:3185:202","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:261:580":{"id":"0:261:580","crate_id":0,"name":"env","span":{"filename":"src/lib.rs","begin":[2980,4],"end":[2982,5]},"visibility":"public","docs":"Returns the set of environment variables needed for this compiler to\noperate.\n\nThis is typically only used for MSVC compilers currently.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2852:165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2852:165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13202:3965":{"id":"2:13202:3965","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49376:3218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3260:4620":{"id":"2:3260:4620","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3262:166","2:3263:538"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:173:2058":{"id":"0:173:2058","crate_id":0,"name":"expand","span":{"filename":"src/lib.rs","begin":[1363,4],"end":[1368,5]},"visibility":"public","docs":"Run the compiler, returning the macro-expanded version of the input files.\n\nThis is only relevant for C and C++ files.\n\n# Panics\nPanics if more than one file is present in the config, or if compiler\npath has an invalid file name.\n\n# Example\n```no_run\nlet out = cc::Build::new().file(\"src/foo.c\").expand();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7735:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3106-0:284:2787":{"id":"b:2:3106-0:284:2787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3109:1666"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3121-0:284:2787":{"id":"b:2:3121-0:284:2787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:145:501":{"id":"0:145:501","crate_id":0,"name":"debug","span":{"filename":"src/lib.rs","begin":[841,4],"end":[844,5]},"visibility":"public","docs":"Configures whether the compiler will emit debug information when\ngenerating object files.\n\nThis option is automatically scraped from the `DEBUG` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["debug",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3633:208":{"id":"2:3633:208","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3634:166","2:3635:4649","2:3636:665","2:3637:352"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3638:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3621:5112":{"id":"2:3621:5112","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3552:4184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2799:100":{"id":"2:2799:100","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2800:391","2:2801:393"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2783-0:308:1587":{"id":"b:2:2783-0:308:1587","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:4736","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2785:53798"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13187:53926":{"id":"2:13187:53926","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47164:161"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:780:3820":{"id":"5:780:3820","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3074:74":{"id":"2:3074:74","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3076:288"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3109:1666":{"id":"2:3109:1666","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3083:130"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13261:2308":{"id":"2:13261:2308","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13175:59457":{"id":"2:13175:59457","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10103:3178":{"id":"2:10103:3178","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10104:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10316:141":{"id":"2:10316:141","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10317:631","2:10318:1635","2:10319:57573","2:10320:57574","2:10321:57575","2:10322:57576","2:10323:57577","2:10324:57578","2:10325:57579","2:10326:57580","2:10327:57581","2:10328:57582","2:10329:57583","2:10330:57584","2:10331:57585","2:10332:1497"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6049":{"id":"5:6049","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5869:1310","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6050:60111","5:6051:2131","5:6054:60112","5:6057:2919","5:6069:60113","5:6070:60114","5:6071:3235","5:6072:54940","5:6073:54941"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3904:68":{"id":"2:3904:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3905:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:13201:2355":{"id":"2:13201:2355","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15726:3049"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49405:5041","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2780-0:284:2787":{"id":"b:2:2780-0:284:2787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2782:3111"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13208:1920":{"id":"2:13208:1920","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:12809:4688","prim@char":"1:15720:3044"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:132:1613":{"id":"0:132:1613","crate_id":0,"name":"extra_warnings","span":{"filename":"src/lib.rs","begin":[698,4],"end":[701,5]},"visibility":"public","docs":"Set extra warnings flags.\n\nAdds some flags:\n- nothing for MSVC.\n- \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\n// Disables -Wextra, -Wall remains enabled:\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .extra_warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["warnings",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:266:2574":{"id":"0:266:2574","crate_id":0,"name":"is_like_msvc","span":{"filename":"src/lib.rs","begin":[3029,4],"end":[3034,5]},"visibility":"public","docs":"Whether the tool is MSVC-like.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8660:4765":{"id":"2:8660:4765","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7707:4766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5693:4380":{"id":"1:5693:4380","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5694:53813"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12256:5209":{"id":"2:12256:5209","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12257:1715","2:12258:58400"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13921:136":{"id":"2:13921:136","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13922:261","2:13923:500","2:13924:264","2:13925:1057"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13258:59469":{"id":"2:13258:59469","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"1:15726:3049","self::pattern":"2:12809:4688","prim@char":"1:15720:3044","`DoubleEndedIterator`":"2:8227:115"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49290:5035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3106-0:371:1644":{"id":"b:2:3106-0:371:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3109:1666"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3906-0:371:1644":{"id":"b:2:3906-0:371:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3218:3371-0:371:1644":{"id":"a:2:3218:3371-0:371:1644","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3121-0:308:1587":{"id":"b:2:3121-0:308:1587","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13225:32293":{"id":"2:13225:32293","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15720:3044","self::pattern":"2:12809:4688"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12601:4998","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:93":{"id":"0:93","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[176,0],"end":[176,35]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["backtrace","type_id","description","source","cause"],"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2565:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:22816:4843":{"id":"2:22816:4843","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23465:4734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22807:4374","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:149:411":{"id":"0:149:411","crate_id":0,"name":"compiler","span":{"filename":"src/lib.rs","begin":[872,4],"end":[875,5]},"visibility":"public","docs":"Configures the compiler to be used to produce output.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["compiler",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3074:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7337:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4682:4760":{"id":"2:4682:4760","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4683:1715","2:4684:58183","2:4685:3778"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:142:1601":{"id":"0:142:1601","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[813,4],"end":[816,5]},"visibility":"public","docs":"Configures the host assumed by this configuration.\n\nThis option is automatically scraped from the `HOST` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .host(\"arm-linux-gnueabihf\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["host",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3083:130":{"id":"2:3083:130","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3085:660"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3485:4183":{"id":"2:3485:4183","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3487:731"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3481:4182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13205:1764":{"id":"2:13205:1764","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:12809:4688","prim@char":"1:15720:3044"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3177:195":{"id":"2:3177:195","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:776-0:364:122":{"id":"b:5:776-0:364:122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:772:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:778:3819","5:779:1633","5:780:3820"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:265:2577":{"id":"0:265:2577","crate_id":0,"name":"is_like_clang","span":{"filename":"src/lib.rs","begin":[3024,4],"end":[3026,5]},"visibility":"public","docs":"Whether the tool is Clang-like.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3429:127":{"id":"2:3429:127","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3431:166","2:3432:361"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10092:105":{"id":"2:10092:105","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10093:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8653:3273":{"id":"2:8653:3273","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8378:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:104:897":{"id":"0:104:897","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[287,4],"end":[324,5]},"visibility":"public","docs":"Construct a new instance of a blank set of configuration.\n\nThis builder is finished with the [`compile`] function.\n\n[`compile`]: struct.Build.html#method.compile","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10042:1570":{"id":"2:10042:1570","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10043:1497","2:10044:59195","2:10046:3529"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:308:1587":{"id":"0:308:1587","crate_id":0,"name":"Build","span":{"filename":"src/lib.rs","begin":[92,0],"end":[127,1]},"visibility":"public","docs":"A builder for compilation of a native library.\n\nA `Build` is the main type of the `cc` crate and is used to control all the\nvarious configuration options and such of a compile. You'll find more\ndocumentation on each method itself.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:103","a:2:9113:3610-0:308:1587","a:2:3177:195-0:308:1587","a:2:3218:3371-0:308:1587","a:2:9112:3611-0:308:1587","a:2:3189:204-0:308:1587","b:2:2780-0:308:1587","b:2:3106-0:308:1587","b:2:3121-0:308:1587","b:2:2783-0:308:1587","b:2:3906-0:308:1587","b:2:3110-0:308:1587","b:2:3116-0:308:1587","b:5:776-0:308:1587","0:343","0:345","0:245"]}},"0:263:2601":{"id":"0:263:2601","crate_id":0,"name":"cflags_env","span":{"filename":"src/lib.rs","begin":[3007,4],"end":[3016,5]},"visibility":"public","docs":"Returns the compiler flags in format of CFLAGS environment variable.\nImportant here - this will not be CFLAGS from env, its internal gcc's flags to use as CFLAGS\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2852:165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2780-0:364:122":{"id":"b:2:2780-0:364:122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2782:3111"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:344:391":{"id":"0:344:391","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[91,9],"end":[91,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3284:4634":{"id":"2:3284:4634","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3286:870"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2783-0:284:2787":{"id":"b:2:2783-0:284:2787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:4736","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2785:53798"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3481:4182":{"id":"2:3481:4182","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3483:166","2:3484:730"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:83:1936":{"id":"0:83:1936","crate_id":0,"name":"find","span":{"filename":"src/windows_registry.rs","begin":[35,0],"end":[37,1]},"visibility":"public","docs":"Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.\n\nThe `target` argument is the target that the tool should work for (e.g.\ncompile or link for) and the `tool` argument is the tool to find (e.g.\n`cl.exe` or `link.exe`).\n\nThis function will return `None` if the tool could not be found, or it will\nreturn `Some(cmd)` which represents a command that's ready to execute the\ntool with the appropriate environment variables set.\n\nNote that this function always returns `None` for non-MSVC targets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["tool",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Command","id":"1:7573:1574","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13299:59476":{"id":"2:13299:59476","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15720:3044"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49439:5044","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3119:122":{"id":"2:3119:122","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:13185:1754":{"id":"2:13185:1754","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47164:161"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:118:1750":{"id":"0:118:1750","crate_id":0,"name":"is_flag_supported","span":{"filename":"src/lib.rs","begin":[459,4],"end":[512,5]},"visibility":"public","docs":"Run the compiler to test if it accepts the given flag.\n\nFor a convenience method for setting flags conditionally,\nsee `flag_if_supported()`.\n\nIt may return error if it's unable to run the compiler with a test file\n(e.g. the compiler is missing or a write to the `out_dir` failed).\n\nNote: Once computed, the result of this call is stored in the\n`known_flag_support` field. If `is_flag_supported(flag)`\nis called again, the result will be read from the hash table.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13199:3972":{"id":"2:13199:3972","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49108:3215","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3189:204-0:284:2787":{"id":"a:2:3189:204-0:284:2787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3155:110":{"id":"2:3155:110","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3156:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13243:59465":{"id":"2:13243:59465","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9113:3610-0:284:2787":{"id":"a:2:9113:3610-0:284:2787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:3610","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6069:60113":{"id":"5:6069:60113","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13269:59474":{"id":"2:13269:59474","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:12809:4688","prim@char":"1:15720:3044"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12839:4692","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4899:4401":{"id":"1:4899:4401","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4900:3266","1:4901:57551"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:2295":{"id":"0:0:2295","crate_id":0,"name":"cc","span":{"filename":"src/lib.rs","begin":[1,0],"end":[3301,1]},"visibility":"public","docs":"A library for build scripts to compile custom C code\n\nThis library is intended to be used as a `build-dependencies` entry in\n`Cargo.toml`:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n```\n\nThe purpose of this crate is to provide the utility functions necessary to\ncompile C code into a static archive which is then linked into a Rust crate.\nConfiguration is available through the `Build` struct.\n\nThis crate will automatically detect situations such as cross compilation or\nother environment variables set by Cargo and will build code appropriately.\n\nThe crate is not limited to C code, it can accept any source code that can\nbe passed to a C or C++ compiler. As such, assembly files with extensions\n`.s` (gcc/clang) and `.asm` (MSVC) can also be compiled.\n\n[`Build`]: struct.Build.html\n\n# Parallelism\n\nTo parallelize computation, enable the `parallel` feature for the crate.\n\n```toml\n[build-dependencies]\ncc = { version = \"1.0\", features = [\"parallel\"] }\n```\nTo specify the max number of concurrent compilation jobs, set the `NUM_JOBS`\nenvironment variable to the desired amount.\n\nCargo will also set this environment variable when executed with the `-jN` flag.\n\nIf `NUM_JOBS` is not set, the `RAYON_NUM_THREADS` environment variable can\nalso specify the build parallelism.\n\n# Examples\n\nUse the `Build` struct to compile `src/foo.c`:\n\n```no_run\nfn main() {\n    cc::Build::new()\n        .file(\"src/foo.c\")\n        .define(\"FOO\", Some(\"bar\"))\n        .include(\"src\")\n        .compile(\"foo\");\n}\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/cc/1.0\")]","#![allow(deprecated)]","#![deny(missing_docs)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:76:1582","0:308:1587","0:364:122","0:371:1644"]}},"5:778:3819":{"id":"5:778:3819","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"T"},"generics":{"params":[],"where_predicates":[]}}},"1:5697:4381":{"id":"1:5697:4381","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5698:57539"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:4374","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3218:3371":{"id":"2:3218:3371","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:85:2299":{"id":"0:85:2299","crate_id":0,"name":"find_tool","span":{"filename":"src/windows_registry.rs","begin":[43,0],"end":[45,1]},"visibility":"public","docs":"Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["_target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["_tool",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3090:211":{"id":"2:3090:211","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3092:122","2:3093:1383"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2783-0:364:122":{"id":"b:2:2783-0:364:122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:4736","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2785:53798"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:166:1994":{"id":"0:166:1994","crate_id":0,"name":"compile","span":{"filename":"src/lib.rs","begin":[1117,4],"end":[1121,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\n# Library name\n\nThe `output` string argument determines the file name for the compiled\nlibrary. The Rust compiler will create an assembly named \"lib\"+output+\".a\".\nMSVC will create a file named output+\".lib\".\n\nThe choice of `output` is close to arbitrary, but:\n\n- must be nonempty,\n- must not contain a path separator (`/`),\n- must be unique across all `compile` invocations made by the same build\n  script.\n\nIf your build script compiles a single source file, the base name of\nthat source file would usually be reasonable:\n\n```no_run\ncc::Build::new().file(\"blobstore.c\").compile(\"blobstore\");\n```\n\nCompiling multiple source files, some people use their crate's name, or\ntheir crate's name + \"-cc\".\n\nOtherwise, please use your imagination.\n\nFor backwards compatibility, if `output` starts with \"lib\" *and* ends\nwith \".a\", a second \"lib\" prefix and \".a\" suffix do not get added on,\nbut this usage is deprecated; please omit `lib` and `.a` in the argument\nthat you pass.\n\n# Panics\n\nPanics if `output` is not formatted correctly or if one of the underlying\ncompiler commands fails. It can also panic if it fails reading file names\nor creating directories.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13222:2209":{"id":"2:13222:2209","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:15726:3049","`DoubleEndedIterator`":"2:8227:115","prim@char":"1:15720:3044","self::pattern":"2:12809:4688","str::rsplit":"1:15726:3049"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49122:3217","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3121-0:371:1644":{"id":"b:2:3121-0:371:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13298:4396":{"id":"2:13298:4396","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15720:3044"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49430:4397","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3339:4752":{"id":"2:3339:4752","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13182:59460":{"id":"2:13182:59460","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2774:93":{"id":"2:2774:93","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2776:3111"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:22771:16567":{"id":"2:22771:16567","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22772:7355","2:22773:58756","2:22774:58757"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22764:4374","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2834:119":{"id":"2:2834:119","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13281:2962":{"id":"2:13281:2962","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15720:3044","self::pattern":"2:12809:4688"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5635:4375":{"id":"1:5635:4375","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5636:6364","1:5637:56148","1:5638:56149"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3086:212":{"id":"2:3086:212","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3088:122","2:3089:1384"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:298:639":{"id":"0:298:639","crate_id":0,"name":"fmt","span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10052:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10041:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13275:15127":{"id":"2:13275:15127","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12809:4688","prim@char":"1:15720:3044"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3012:4784":{"id":"2:3012:4784","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3011:4374","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3077:73":{"id":"2:3077:73","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3079:3768"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:2:3106-0:308:1587":{"id":"b:2:3106-0:308:1587","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3109:1666"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13184:53929":{"id":"2:13184:53929","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15737:3058"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3189:204":{"id":"2:3189:204","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:260:281":{"id":"0:260:281","crate_id":0,"name":"args","span":{"filename":"src/lib.rs","begin":[2972,4],"end":[2974,5]},"visibility":"public","docs":"Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2852:165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6861:4358":{"id":"1:6861:4358","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6862:56324"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13204:32421":{"id":"2:13204:32421","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49414:5042","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13196:53948":{"id":"2:13196:53948","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:15726:3049"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13246:59466":{"id":"2:13246:59466","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3110-0:364:122":{"id":"b:2:3110-0:364:122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:245":{"id":"0:245","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2819,0],"end":[2823,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3155:110","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:246:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13252:59467":{"id":"2:13252:59467","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8227:115","str::matches":"1:15726:3049","prim@char":"1:15720:3044","self::pattern":"2:12809:4688"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49344:5038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130:1612":{"id":"0:130:1612","crate_id":0,"name":"warnings_into_errors","span":{"filename":"src/lib.rs","begin":[654,4],"end":[657,5]},"visibility":"public","docs":"Set warnings into errors flag.\n\nDisabled by default.\n\nWarning: turning warnings into errors only make sense\nif you are a developer of the crate using cc-rs.\nSome warnings only appear on some architecture or\nspecific version of the compiler. Any user of this crate,\nor any other crate depending on it, could fail during\ncompile time.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings_into_errors(true)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["warnings_into_errors",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3335:4750":{"id":"2:3335:4750","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3337:337"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10306:137":{"id":"2:10306:137","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10307:694","2:10309:55401"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3080:144":{"id":"2:3080:144","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3082:1666"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8227:115":{"id":"2:8227:115","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8228:3769","2:8229:3770","2:8230:3771","2:8231:3772","2:8235:3773","2:8238:2338"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8378:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6057:2919":{"id":"5:6057:2919","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10113:3184":{"id":"2:10113:3184","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10114:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:779:1633":{"id":"5:779:1633","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:287:2791":{"id":"0:287:2791","crate_id":0,"name":"Vs14","span":{"filename":"src/windows_registry.rs","begin":[87,4],"end":[87,8]},"visibility":"default","docs":"Visual Studio 14 (2015)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:76:1582":{"id":"0:76:1582","crate_id":0,"name":"windows_registry","span":{"filename":"src/windows_registry.rs","begin":[11,0],"end":[900,1]},"visibility":"public","docs":"A helper module to probe the Windows Registry when looking for\nwindows-specific tools.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:83:1936","0:85:2299","0:284:2787","0:86:2806"]}},"b:2:3116-0:371:1644":{"id":"b:2:3116-0:371:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3309:4512":{"id":"2:3309:4512","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3311:166","2:3312:336"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4596:1570":{"id":"1:4596:1570","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4597:1635","1:4598:3973","1:4600:3974","1:4601:3975","1:4602:2620","1:4603:3976","1:4604:3529","1:4613:3794"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:302":{"id":"0:302","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":{"restricted":{"parent":"0:76:1582","path":"::windows_registry"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3186:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8142:4785":{"id":"2:8142:4785","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8144:3810"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3255:4623":{"id":"2:3255:4623","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3257:166","2:3258:869"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:171:2049":{"id":"0:171:2049","crate_id":0,"name":"try_expand","span":{"filename":"src/lib.rs","begin":[1324,4],"end":[1349,5]},"visibility":"public","docs":"This will return a result instead of panicing; see expand() for the complete description.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7735:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:772:206":{"id":"5:772:206","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:3819","5:774:1633","5:775:3820"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13174:1773":{"id":"2:13174:1773","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5649:4378":{"id":"1:5649:4378","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5650:7855","1:5651:53813","1:5652:6364","1:5653:57672","1:5654:4569","1:5655:4570","1:5656:57673","1:5657:1274","1:5658:57674","1:5659:57675","1:5660:57676","1:5661:57677","1:5662:57678","1:5663:57679","1:5664:57680","1:5665:57681"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:776-0:284:2787":{"id":"b:5:776-0:284:2787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:772:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:778:3819","5:779:1633","5:780:3820"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6698:4369":{"id":"1:6698:4369","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6699:8794"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:4374","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6695:4399":{"id":"1:6695:4399","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6696:55436","1:6697:55697"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:4374","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13272:2340":{"id":"2:13272:2340","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12809:4688","prim@char":"1:15720:3044"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3106-0:364:122":{"id":"b:2:3106-0:364:122","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3109:1666"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9112:3611-0:371:1644":{"id":"a:2:9112:3611-0:371:1644","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:3611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13265:59471":{"id":"2:13265:59471","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13191:53928":{"id":"2:13191:53928","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:6593:4378":{"id":"1:6593:4378","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6594:57490","1:6595:8200","1:6596:8201","1:6597:8203","1:6598:8202","1:6599:8204","1:6600:8205","1:6601:8207","1:6602:6406","1:6603:8210","1:6604:8211","1:6605:8212","1:6606:8213","1:6607:8214","1:6608:8215","1:6609:8208","1:6610:8209"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13214:1936":{"id":"2:13214:1936","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:12809:4688","`None`":"2:47164:161","prim@char":"1:15720:3044"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:4687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3552:4184":{"id":"2:3552:4184","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3554:58382","2:3555:58383","2:3556:1764"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:5:776-0:308:1587":{"id":"b:5:776-0:308:1587","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:772:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:778:3819","5:779:1633","5:780:3820"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:367":{"id":"0:367","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,9],"end":[147,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:368:391"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:246:59":{"id":"0:246:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[2820,4],"end":[2822,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3679:4780":{"id":"2:3679:4780","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3370","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:2:3116-0:284:2787":{"id":"b:2:3116-0:284:2787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8656:4764":{"id":"2:8656:4764","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8378:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:91":{"id":"0:91","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[170,0],"end":[174,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10099:114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:92:639"],"negative":false,"synthetic":false,"blanket_impl":null}}},"paths":{"17:11304:46963":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:11001:8721":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:4598:219":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:3339:4752":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:3772:7046":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:3314:4508":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:3064:5873":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:6085:8225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:10160:6300":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:1824:6100":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:10304:5936":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:5295:45378":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11458:6380":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:53114:8547":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:11358:5887":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:11477:3269":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:9528:3215":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:3113:3966":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:12208:6525":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:4485:5271":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"7:38:44924":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:5274:8030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:11815:3287":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:6252:5630":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:7295:5576":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:11206:4600":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:10317:5935":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:49697:4704":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:3319:4742":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:10921:3239":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:6949:5856":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:24561:5091":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"12:469:60759":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:15719:3043":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:5504:3313":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:4173:3240":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"16:3800:7047":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:5860:4598":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:3261:2955":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:6032:5549":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:3021:8337":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"12:112:60763":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:50711:8487":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"18:667:6014":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:48474:4835":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12982:6694":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:0:3020":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:5717:5614":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:13318:6830":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:772:206":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:5231:7072":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:9489:56287":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"6:4459:7922":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11604:6409":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:4477:7055":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:5953:8171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"8:0:3021":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:7303:5656":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:13648:8767":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:46676:8465":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:51381:4845":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:7182:8784":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11378:5886":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:7943:58280":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:6051:8218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:4790:7064":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:23461:4374":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:9332:5969":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:7151:8784":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:24357:3352":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:4304:7050":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:46440:4667":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:6100:8231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:3189:204":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:7119:5550":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:510:8678":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:2565:122":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"17:11809:6458":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:1666:179":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:6887:8326":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:11981:6488":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:7250:5655":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:50894:4879":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:4410:7900":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:1676:7618":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:5312:8058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:48458:4453":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:12118:6513":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:6636:5575":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:1415:3266":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:12431:6578":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:1717:7642":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:3335:4750":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:14906:4481":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:6110:5596":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:3276:1566":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:46250:4665":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"12:1235:5460":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:13993:4186":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:3966:7732":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:5432:756":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:10117:5984":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:11027:4405":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:46389:4658":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:6605:5573":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:49901:5129":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"5:4613:6105":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:11683:5020":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:15737:3058":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:1459:4433":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:5421:5602":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:14019:3233":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"9:686:5325":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:12828:4690":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5359:8084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:5855:6111":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:6107:4565":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:3110:3994":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:8954:5893":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:49718:4706":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:9142:4497":{"crate_id":1,"path":["std","lazy","SyncLazy"],"kind":"struct"},"1:7808:3344":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"16:7205:5651":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:15723:3046":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:2159:3777":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:55844:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3086:212":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:7176:4191":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:45693:4792":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:2968:5814":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11847:6466":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:13772:6970":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:519:7449":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11045:46961":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:47265:3608":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:4413:3266":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:2155:3266":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:10558:8701":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:10042:1570":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:4501:7938":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:46066:5190":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:9331:8875":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:49858:5050":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:13564:6898":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:9404:6293":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:10844:5947":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:4922:7068":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:11835:6463":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:46089:5191":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:4470:7928":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:7597:4196":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:12535:6148":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:51666:4889":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:10140:5947":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:12885:4695":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:51585:8498":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:47928:3179":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:11640:6416":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:3365:5803":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:12756:6630":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:13885:186":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"6:5563:8159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:6554:5637":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:13715:53806":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:13180:6797":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:2484:47045":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:45637:184":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:23857:39337":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:5197:7995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:48282:3825":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:53001:4885":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:22622:4420":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:3235:3999":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:47385:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:605:7500":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:5255:8028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"12:1200:5459":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:11916:4466":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:9774:4984":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:12182:6522":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"18:782:6199":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:3314:4513":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:607:8679":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:11950:4470":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:9886:8686":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:3742:4431":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:10106:5983":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"18:650:6009":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:49683:4703":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:5627:4376":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6768:5852":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:10543:6343":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13933:7015":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:13363:53805":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:15136:4555":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:9689:60776":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:3251:4003":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:15725:3048":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:4013:7755":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:12748:2824":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:4060:7777":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:7535:4674":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:9971:60773":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:5683:4379":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:12839:4692":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:3506:5823":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:6176:8283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4073:7783":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:5428:8112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:49846:5057":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:5241:8017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:6223:4195":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12262:6533":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:5987:8190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:4385:3230":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:1760:7657":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:51302:4856":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:10981:4998":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:7545:3284":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:10001:47007":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:610:1361":{"crate_id":1,"path":["std","thread"],"kind":"module"},"2:49619:4701":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13386:6849":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:5998:8195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:47335:3266":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:10623:8707":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:10673:47145":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:9186:5891":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:53068:8543":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:1446:4432":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"0:76:1582":{"crate_id":0,"path":["cc","windows_registry"],"kind":"module"},"17:13119:6790":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:3348:4507":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:46290:4650":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:51561:8497":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"14:216:45307":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:1497:4436":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"18:829:6003":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:10529:6304":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:22360:59272":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:11159:6354":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:8902:46953":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"12:968:4440":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:45780:4926":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:6605:8212":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:6491:5635":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:51018:8489":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:10942:3211":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:50022:175":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:3011:4374":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:46371:4657":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:11993:6490":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13637:6917":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:11089:8578":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"6:6239:8308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:46259:3213":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:11714:6430":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:5705:4383":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:49092:5025":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:299:8677":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"0:289:2793":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs15"],"kind":"variant"},"16:4734:7062":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:22764:4374":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:13488:6876":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:7337:170":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:5407:5601":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:2362:580":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:10521:4446":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:6357:5632":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:1302:138":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:6200:8293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:11853:8597":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"1:6771:4365":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:10555:4051":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:6366:5477":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:13435:4495":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:2171:4507":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5469:8122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:584:7489":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13898:7002":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:1427:4442":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:3272:4630":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:4183:7824":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:7843:5659":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:23701:8350":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"16:2773:5837":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:6269:5631":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:24289:3351":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:8302:200":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"12:2018:4189":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:3392:5828":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:3177:195":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:46687:8467":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:1920:4189":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"14:189:8750":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:6730:3200":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:13062:6755":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:22807:4374":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:4273:4534":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:23559:5079":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:2889:5831":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:7075:6113":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:5555:4392":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"12:2039:4509":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"14:47:8750":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11822:6462":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:47595:85":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:6614:8314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:49344:5038":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:157:40097":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:11245:4398":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:13799:6978":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:6718:5848":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"7:85:44931":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:4621:1567":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:6377:207":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:9088:46958":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:46451:3214":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:6424:58156":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:9723:6143":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:3255:4623":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:1507:4438":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:11367:2008":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:53079:8544":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:3320:5875":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:12645:6616":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:7342:5591":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:11924:3777":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:6918:5213":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:13370:6846":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:14681:6151":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:23835:39345":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:8179:131":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:46408:4660":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:5528:8134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:7264:5574":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10128:5985":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:6367:4372":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:10477:5972":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:0:775":{"crate_id":6,"path":["libc"],"kind":"module"},"6:5978:8189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:50871:4875":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:7467:5560":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:8076:5234":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:3276:4426":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:3881:7673":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"14:231:5218":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"12:930:4437":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:6839:4362":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:3552:4184":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:14097:3345":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:24255:5085":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:1563:7537":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:2397:4040":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:4383:3229":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:8269:2008":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"1:11796:3286":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:5284:4548":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"13:120:45273":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:49290:5035":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:4557:3208":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:49834:5052":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:46360:4670":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:4517:7945":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:13532:6890":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:894:3357":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:8355:187":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:3429:127":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:4614:3210":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:57114:8562":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:632:7515":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:14:1635":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:13834:5064":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10353:5939":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:10635:6305":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:1616:4432":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:5221:8004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:3743:5879":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"12:2323:7357":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:13562:3295":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:7378:5563":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:10179:6302":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13446:6864":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:45959:8447":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"12:2005:3266":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:48932:5010":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:1428:4431":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:49108:3215":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:50690:8486":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:4839:4955":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:22771:16567":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:47935:3185":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:15744:3065":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:9659:60767":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:46:7360":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12917:6643":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"0:287:2791":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs14"],"kind":"variant"},"6:1602:7562":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:13296:6826":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:6230:4654":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:5379:8092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:4395:7896":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:10377:5937":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"12:853:4433":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:49244:5005":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:10211:8695":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"12:1651:5470":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:13685:6954":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12051:6497":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13788:6974":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"9:749:5329":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"6:3868:7664":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:5459:8120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:24425:5088":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:13554:6895":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:8397:4190":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:543:7460":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"12:2309:7355":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:1493:4435":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:3549:2913":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:11767:6443":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:21:651":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:13348:6841":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:3650:4648":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:3420:2037":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:3118:5827":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:46461:4663":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:5580:5793":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:3997:7750":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:10962:8718":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:9933:8687":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:48466:8475":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:2777:4736":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:9264:6289":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:46012:5194":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:4419:7906":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:50067:5063":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:4023:7761":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:3716:4779":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:2534:5290":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:49022:5017":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:50976:4855":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:11226:4568":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:23794:4943":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:10801:4503":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:6413:5476":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:10041:8690":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:22675:4842":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:14922:4482":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:45953:4397":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:4052:7772":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:5472:5605":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:6068:8220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:6345:4369":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:12507:6588":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:14793:8610":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:1533:7524":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:5649:4378":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:49405:5041":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:47921:3178":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:10107:3186":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:3195:5818":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:5269:8029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"18:774:6199":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:10663:3995":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:13760:6967":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:8378:152":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:13039:39628":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:8527:3315":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:169:53249":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:8085:4191":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:5927:5621":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:4682:4760":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:48923:5009":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:46642:8462":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:15727:3050":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:7228:171":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:4605:57547":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:4916:3834":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:5013:3837":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"0:85:2299":{"crate_id":0,"path":["cc","windows_registry","find_tool"],"kind":"function"},"5:3319:5240":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:6864:8321":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:1622:7576":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:6654:5258":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:15726:3049":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:1000:3266":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:13477:6872":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:4569:6103":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:53193:8552":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:3466:4189":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:10052:129":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4101:7799":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"9:900:7411":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:8362:4467":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:14537:4393":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:6424:5634":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:49326:5037":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11653:6418":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:6391:5633":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:10938:8716":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:9551:5922":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:9133:46959":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:13453:6865":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:10710:198":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:5281:4547":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:1149:8777":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:3155:110":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:48298:72":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:4671:7060":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:3633:208":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:3957:7727":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:48224:122":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:5385:3169":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:10796:4502":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:15077:4547":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:48505:8479":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:6620:5843":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:10584:5895":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:38540:3763":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:49013:5016":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:6893:8327":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:6005:8199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:49430:4397":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:49554:4699":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:9162:5924":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7514:5578":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:5945:8166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:46300:4651":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:3250:4427":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:49888:4429":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:49098:5026":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:11060:4493":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"2:2829:168":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:8227:115":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:4331:7865":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:48961:5013":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:11146:4549":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:9114:3609":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"12:1855:140":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:50736:4886":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:3020:60753":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:46380:4672":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"18:704:6199":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:52063:4864":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:12527:5032":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:1584:7552":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:3343:4754":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:10684:124":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4523:7948":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:13306:6827":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:50099:3982":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:7042:5860":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:9296:6291":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"18:739:8674":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11616:6412":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:11024:4404":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"16:5753:5616":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:7761:5658":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:531:7455":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:15735:3056":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:11152:4550":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:9779:4985":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:48495:2008":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:1655:4436":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:46342:4655":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:1157:11648":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:13810:3286":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"12:2315:60764":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:6603:8210":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:14774:4010":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:51057:8490":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:10726:3227":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:7453:5559":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:5456:5604":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11337:5970":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:3287:5822":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"12:2303:7354":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:3990:7746":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:46272:4666":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:599:7497":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:11201:4597":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:3205:3762":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:4112:7804":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:5841:6109":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:5693:4380":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:12795:6641":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:10113:3184":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:46122:4910":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12783:6634":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:7403:114":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:1041:1576":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:4033:7764":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:9210:46960":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:5213:5186":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:48987:5014":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:6569:5845":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:46420:4661":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:3029:60642":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:49000:5015":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"9:1020:5394":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:11908:3266":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:51105:4888":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"12:1118:4443":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:12809:4688":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:912:5232":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:13034:8766":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"16:6591:5639":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:50081:153":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:2188:4768":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:4639:4799":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:47197:1715":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:5975:5622":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:12598:6603":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:14343:8608":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"12:937:4438":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:47469:77":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:15718:3042":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:900:3358":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:11020:4999":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:5643:4377":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:10052:8691":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:11716:5021":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:9501:56290":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"16:6964:3607":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:3288:4636":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:10448:5916":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:6593:4378":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:10331:5947":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:12632:6615":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:5273:5805":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:6014:5624":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:3353:5241":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:10994:3218":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:1546:90":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:49646:4702":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:7856:5660":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:9839:5947":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:2765:3980":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:10988:8720":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:6091:8227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:4823:7065":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:24:580":{"crate_id":2,"path":["core","env"],"kind":"macro"},"1:1482:4189":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:7573:1574":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:10653:3992":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:10236:5914":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:11450:3265":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:15702:55479":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:8101:60628":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:27742:4790":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:22816:4843":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4095:7796":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:7971:122":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"18:644:6012":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:3905:7691":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:2582:8783":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"1:8912:8785":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"9:157:5344":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:13699:1574":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:2754:5804":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:6881:8325":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:14950:4489":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:11147:6353":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:2456:4055":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:5889:4602":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:53099:8546":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"12:1667:5471":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:15742:3063":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:1443:4444":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:4203:7826":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:1540:7527":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:12550:5033":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13240:6811":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:6644:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:52098:4846":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"12:0:3025":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:14851:3297":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:45570:180":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:10890:3266":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:2318:4185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"18:766:6210":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:5838:4596":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:10103:3178":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:15214:5488":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13163:6795":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:10515:11647":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:9719:8683":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:4164:7823":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10827:5883":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:11082:5892":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:8877:3325":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:49065:5120":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:52915:4847":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:7886:3237":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:6691:5641":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:10099:114":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:1736:7648":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"9:1056:5387":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:15055:4412":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:3292:4638":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11277:6357":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:11970:6485":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:1204:5284":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:2865:162":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:13865:6995":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:2733:5530":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11254:5923":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:3970:4825":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:6672:4671":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:6021:5810":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:4844:4956":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:8278:3165":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:10938:3217":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:1651:4445":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:578:7486":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:6682:5572":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4272:7837":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:12494:6587":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:1527:7521":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:2211:4772":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:10981:3215":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:3187:102":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:10109:174":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:7279:5861":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:4262:7830":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:13924:7011":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:15721:3045":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:49571:4700":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:13547:6894":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:5433:5603":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"14:250:7305":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:5996:5623":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:10239:8796":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"9:963:5392":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:1625:4433":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:46310:4652":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:3918:7701":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:801:6000":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:10472:3345":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"0:284:2787":{"crate_id":0,"path":["cc","windows_registry","VsVers"],"kind":"enum"},"1:12196:4055":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:10435:8697":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:48709:5201":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:13613:172":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:1080:6100":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:51985:4857":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:50058:5062":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12568:6598":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:3862:7663":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"18:152:53248":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"12:2025:4507":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"9:927:45028":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:5960:5800":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:11434:6366":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:3264:5821":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:53216:8553":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"0:291:2795":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs16"],"kind":"variant"},"17:13978:7021":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"18:677:137":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13394:6851":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:8146:4787":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:11172:5004":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:53255:8554":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:49041:5019":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:5990:4557":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:12566:5036":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:8214:97":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:9799:8685":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:49376:3218":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:15731:3052":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13272:6824":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"12:812:4436":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"12:2032:4508":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:5159:7976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4431:7910":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:5384:5600":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:10974:3214":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:10266:5912":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:23925:5105":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:48863:5003":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:14813:4422":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"18:694:6015":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:1642:4444":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"12:2331:3155":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:49842:5053":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:6465:4388":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:3090:211":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:3241:5820":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:10914:3237":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:8252:3372":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:6238:5561":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:49122:3217":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:4305:3231":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12343:6547":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:24527:5090":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:46471:4664":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:22413:59324":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:5766:4593":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"5:3852:3227":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:10314:6146":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:8013:3346":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"1:7525:3283":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:9440:6294":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:5632:5611":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:10223:8765":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:15745:3066":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:1458:4443":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:11390:3264":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:1658:7606":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:14390:55714":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:23809:8360":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:1190:11649":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:4835:3835":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"12:377:5464":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:8520:3314":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12195:6523":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:13402:6853":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:9628:6141":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"17:13331:6836":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:670:40425":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:46220:3171":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"18:620:6198":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:49540:4696":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:13429:6857":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:3864:5301":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:11875:8598":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:46043:5189":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"7:0:1448":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:10571:8703":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5420:8110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:616:7505":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:10279:5945":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"3:0:412":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"18:885:6007":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:2311:5286":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:6152:5558":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:4651:98":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:3074:74":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:5801:5221":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:2243:5287":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7406:5562":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:15720:3044":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:3396:111":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:14016:3231":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:4341:7871":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:13921:136":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:4449:7921":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:12537:6593":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:11962:6483":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:46096:5192":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:46328:8458":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4040:7767":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:10428:3359":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12221:6526":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4300:7850":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:4899:4401":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"17:12659:6617":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:47283:173":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:9065:46957":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11696:6429":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:0:3028":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:11109:55481":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"5:1184:60681":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:10253:5909":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:1619:4442":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:6767:4363":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:7856:6125":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"2:10041:190":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:55831:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:12044:3326":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:781:104":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:7226:5653":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:5488:5606":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:6744:5850":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:9943:60769":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13377:6848":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:48941:5011":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:49396:5040":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:4480:3238":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:11030:4409":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:3662:4791":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:9729:60771":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:47553:78":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:49830:5049":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:9234:4687":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"18:712:3751":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"15:248:5480":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:2291:5306":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:8653:3273":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:4185:4191":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:4512:3200":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:4306:7853":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:4970:3836":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:3921:4189":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"0:83:1936":{"crate_id":0,"path":["cc","windows_registry","find"],"kind":"function"},"2:2202:4771":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"12:1159:5457":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:7392:5564":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:4704:7061":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:2138:1028":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:4145:7822":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:52789:4862":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:48161:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:47679:86":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:9633:6142":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"6:4005:7752":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:2512:5934":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:1132:3984":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:12385:6568":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:11157:4551":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:3679:4780":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:45660:3149":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:6166:5626":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:12725:6624":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:11555:6401":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:4293:7849":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:55792:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2458:4056":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:511:7444":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:12073:4010":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:49031:5018":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:13746:6961":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:51333:4860":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:8184:3155":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:8093:5235":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:3249:4002":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:22394:59321":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:12034:3318":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:4417:7053":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:52249:4870":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:9368:6292":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:3539:6123":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:4906:4961":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"10:0:3023":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:46142:3167":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:12095:6507":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:3077:73":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:13780:6973":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:6072:5528":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:10670:3996":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:11212:4560":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:57093:8561":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:47164:161":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:51356:4863":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:13883:6149":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:7908:3346":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:50913:8488":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:11231:5925":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:45968:4905":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:15733:3054":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:12040:6496":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:2199:5243":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:11316:3254":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:10806:1617":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:6731:5849":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:10439:55622":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"17:4008:8681":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13842:6994":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:14748:3287":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"18:849:6004":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:5346:5557":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:10710:4525":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13609:6909":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:47206:3266":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:3183:3759":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:3172:5817":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:7216:5652":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:49414:5042":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:8296:8341":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"12:925:4434":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:8074:6125":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"6:1744:7652":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:23938:5104":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:8261:3346":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:9496:6140":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"17:13192:6802":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:4371:7887":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:15199:55624":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:12010:6493":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:6518:5636":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:1596:7560":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12480:6585":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:3245:4425":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:45614:182":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:3617:3226":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:15190:8614":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:37296:163":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:13942:7017":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"0:285:2789":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs12"],"kind":"variant"},"16:5855:5620":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:46155:5117":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:14956:4490":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:10458:6251":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:1634:4434":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:3019:3819":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:47511:84":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:24391:5087":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:8629:157":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:8115:3777":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:624:7510":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:6780:5642":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:13737:1575":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"12:774:3777":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:6208:5628":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"9:27:5376":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:23781:4942":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:3729:3266":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:4:957":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:10887:6340":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:5406:4555":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:12712:6623":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10061:8692":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:4955:7069":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:4193:7825":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:2855:164":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:47721:81":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:49850:5055":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:53059:8542":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:8183:146":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:10516:5975":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12442:6580":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12699:6622":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:12373:6566":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:51792:4881":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:11271:4361":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:12053:4422":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:46658:8463":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:1547:7529":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:6935:8335":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:3485:4183":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:47274:3987":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:46060:4397":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:1588:4431":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:4347:7874":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:1018:3346":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:3050:1565":{"crate_id":1,"path":["std","fs"],"kind":"module"},"1:7559:3285":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:12671:6618":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:23756:8355":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:11830:3288":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:8849:5921":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:5130:7952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:8192:3373":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:50111:3981":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:10149:8686":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:13912:7009":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8665:8785":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:10564:3213":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"1:10228:6360":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"12:949:4439":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:4990:3350":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:6577:5638":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:47942:3186":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:11093:5001":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:3638:132":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:9961:8688":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:5292:8042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:48705:5200":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:13506:6880":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:49525:4693":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:1723:7645":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:14550:3289":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:12819:4687":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:7511:1573":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:5941:174":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:1472:4445":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:9595:4542":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:9113:3610":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:10306:137":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:23723:4947":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:13733:6955":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"12:2045:4510":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:3186:201":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:9592:123":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:3563:3220":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:8756:4499":{"crate_id":2,"path":["core","lazy","Lazy"],"kind":"struct"},"1:15736:3057":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:421:2846":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:12073:6506":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:7628:1575":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:13590:6904":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:5815:5619":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:10611:8706":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:7073:5645":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:3904:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:51906:4869":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"11:54:5447":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:2543:5971":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:11186:5005":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:8656:4764":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:2690:559":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"12:463:60762":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:49172:5030":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:46399:4659":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:10092:105":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:1644:4435":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:9005:46955":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:13154:6791":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:10407:5933":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:10531:4447":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:7571:5555":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:5736:5615":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:3718:155":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:11131:5002":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:37320:3751":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:10702:113":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:9083:4496":{"crate_id":1,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"9:1075:5395":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:4276:4431":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:3278:91":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6219:5629":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:3714:7045":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:51404:4848":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:51745:4877":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:15740:3061":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:49190:5031":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:14761:3288":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:3939:7048":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:11588:6408":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:12552:6597":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:11015:8722":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:2177:4508":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:4539:1569":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:23630:5081":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:2945:5836":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"9:809:2008":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:24187:5083":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:15738:3059":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:2113:8343":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:49731:8774":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"2:24459:3293":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:7682:2628":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:3972:7734":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:22375:59272":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:32028:5132":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:10316:141":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:3145:5826":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11030:122":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:46172:5118":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:4448:7054":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:9458:6139":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:6999:5644":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:13718:58220":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"6:6185:8286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:49502:4689":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:3481:4182":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:2395:4039":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:6464:5571":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:7174:5648":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:3440:1568":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:4066:7780":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:3280:4428":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"12:354:7351":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:2108:558":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:7024:5859":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:23910:5147":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:11249:8199":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:7449:3781":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:9600:60775":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:14000:7027":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:11930:4469":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:4574:3200":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:9112:3611":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:5330:6290":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:22612:4374":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:10814:5882":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:3080:144":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:1522:7519":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:5407:8106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:4350:7051":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:46319:4653":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:52852:4882":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:4157:5896":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:9245:5884":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:8291:5300":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:45453:4647":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:4270:4533":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:5697:4381":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"11:0:3024":{"crate_id":11,"path":["adler"],"kind":"module"},"16:3018:5815":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:46022:5195":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:7637:4643":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:2774:93":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:5522:8133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"0:308:1587":{"crate_id":0,"path":["cc","Build"],"kind":"struct"},"17:11118:46962":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:13572:58265":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:1488:4434":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:47763:88":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:10950:8717":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:8313:5215":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:10987:3217":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:3604:2914":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:2181:6102":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:48914:5008":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:6618:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"12:1144:4444":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:6441:4191":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:3309:4512":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:10926:8715":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:14937:4483":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:5386:8093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:11947:6478":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:729:60782":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:4307:3232":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:2166:4189":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:47231:3607":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:52456:4890":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:6870:8322":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:52599:4858":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"0:0:2295":{"crate_id":0,"path":["cc"],"kind":"module"},"2:47291:190":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"18:720:6201":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:7823:5570":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:3892:7681":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:13282:6825":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:12234:6528":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:12467:6583":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:48185:128":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"12:1180:5458":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:866:6006":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:7707:4766":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:1675:5282":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:10289:6144":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:49708:4705":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:6155:8269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:6028:8217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:15743:3064":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"18:790:5999":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:7333:5577":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:10502:6303":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:52962:4865":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4241:7829":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:3284:4634":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:1708:7636":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:12582:6599":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:14373:113":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:48513:8480":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:5876:4601":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:53040:4850":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:2852:165":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:542:5534":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"12:1688:5472":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12521:6591":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:6106:8232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:7685:3291":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:53140:8549":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:38477:3292":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:7959:3310":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:13522:133":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:13598:6905":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:45591:183":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:12280:2558":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:6221:8305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:8123:179":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:10028:8689":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:591:7492":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:11000:4403":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"12:2013:4191":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:5400:8104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:15724:3047":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"12:877:4189":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:4890:7067":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:2799:100":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:3522:6216":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:610:7502":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13574:6901":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:7779:6113":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:8170:3346":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"5:5383:3200":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:4961:4962":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"18:837:4690":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:6136:5597":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:10964:3213":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:10912:8711":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13356:6844":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:3195:3760":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:3218:3371":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:51206:4883":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:48212:103":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:4494:7935":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:3374:4510":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"0:86:2806":{"crate_id":0,"path":["cc","windows_registry","find_vs_version"],"kind":"function"},"6:5185:7991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:46649:1999":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:2429:4761":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:12142:6515":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:10930:3209":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:23903:8373":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:2004:3200":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:12287:6535":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11406:6362":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:45529:181":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:5756:6100":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:3116:2911":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:10701:4374":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12247:6530":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:24931:4912":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:10599:8705":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:10200:8694":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:55699:4730":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:7221:6100":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:48179:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:11802:166":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:6214:8302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:12168:6311":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:6910:8332":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:6698:4369":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"12:181:5465":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:47222:3777":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4511:7943":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13041:6746":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:5561:5609":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:22415:59326":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:11058:5000":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:45735:3834":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:5406:4781":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:11779:6446":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:2314:5938":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:3108:123":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:3041:5816":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"19:117:6194":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"17:11628:6413":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:10658:3993":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:3945:7724":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:13824:4762":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:53163:8550":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:5210:7996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"12:892:5449":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:32034:58178":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"0:293:2797":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs17"],"kind":"variant"},"2:24221:5084":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:8197:3156":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:12771:6631":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:4596:1570":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:49854:5056":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:51529:8496":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:13627:6912":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:49838:5054":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:23366:4419":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12610:6604":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:53125:8548":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:3340:4509":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:7013:3599":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:2723:3979":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:3297:4737":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:24493:5089":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"12:761:4431":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12155:6518":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:53178:8551":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:2834:119":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"14:0:3026":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:14356:124":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:10449:3335":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"12:866:4191":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:1630:7581":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13172:6796":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:49386:5039":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:10975:8719":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:7813:53802":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"1:8751:4581":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"16:7549:5567":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:51823:4884":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:14843:8611":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:5548:8148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:14320:8601":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:783:6143":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"16:5595:5610":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:50759:4874":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:13986:7024":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:10788:8708":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:5707:5613":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"6:5282:8035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:5285:185":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:6923:8333":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:7735:218":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7894:5594":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:11186:6355":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:3260:4620":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:4267:4532":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:50014:8485":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:909:92":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:11499:6386":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13098:6785":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:4439:7915":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:14533:4051":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:0:261":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:49862:5051":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"18:610:6010":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:47360:163":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:3908:4505":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:45721:4796":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"0:371:1644":{"crate_id":0,"path":["cc","Tool"],"kind":"struct"},"13:0:3019":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:11845:3289":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:32186:58176":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:12039:3319":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:8232:3166":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:51255:4868":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"12:429:5462":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:52710:4878":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:11466:3268":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:48951:5012":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:3338:5802":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:8137:3777":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:3644:4649":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:8718:4498":{"crate_id":2,"path":["core","lazy","OnceCell"],"kind":"struct"},"2:49272:5034":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:11220:4549":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"18:857:6005":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:6607:8214":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:8142:4785":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"12:1762:6098":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:7884:5566":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:51038:4844":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:3940:6100":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:23740:8352":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:8801:3322":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:13810:6979":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"14:56:6381":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:4627:4798":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5436:8114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:4358:7882":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11794:6452":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:12526:123":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:4127:7811":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:32086:58177":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:51481:8495":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12408:6577":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:45481:4802":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"5:375:5231":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:3409:3219":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:3304:4511":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:696:3360":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:1908:41397":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:9649:8682":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:820:6143":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"5:69:4188":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:5063:639":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:5969:8183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:4212:6100":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:12533:3993":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:7146:5646":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:4215:7827":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:1729:4561":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:10489:5974":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:6227:4566":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:51429:4849":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:14305:4400":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:11214:5007":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:6858:8320":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:12028:6494":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:3953:190":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:10403:5943":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:46137:96":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:14687:6152":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:22392:59323":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:50999:4859":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:6899:8328":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4377:7890":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:1530:4441":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:32022:4181":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:12048:3327":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:49421:5043":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:6176:5627":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:1572:7543":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"14:194:45301":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:13540:6893":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:4046:7769":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:11298:3600":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:45728:4797":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:11665:6419":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:47351:3777":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:55779:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:8131:3777":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:1665:7610":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:5766:5617":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11199:6356":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:15470:6153":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:13054:6753":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:1554:7532":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:3529:3224":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:10454:3343":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:45997:4908":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:2758:5289":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:10095:105":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:46082:5043":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:7738:5657":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:4770:3833":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:3091:5874":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:11328:6631":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:1700:7635":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:11132:8584":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:6126:5625":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"9:469:9116":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:7360:179":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:46230:3170":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:4386:7052":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:50807:4854":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:4282:3777":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:10718:3225":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:11995:4473":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:10427:4374":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:6101:5554":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:3809:6100":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:5522:5608":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:9476:6295":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:6638:3313":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:896:6008":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:13963:7020":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11482:6381":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:9280:6290":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:15691:11650":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:5868:4599":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:8070:3777":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:11100:5927":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:13258:6819":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11726:6433":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:13344:4050":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:49866:116":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:10356:4834":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:22347:3751":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:13884:7000":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"15:0:3027":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:4641:7059":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:11519:6396":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:13582:6902":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:11932:6474":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:294:8676":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:3951:7725":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:6812:8318":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:7236:5654":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:12256:5209":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:3348:4757":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:11868:56147":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"18:820:6002":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:10101:3179":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"5:4669:6105":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:3185:202":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:11963:4471":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:7185:5649":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:2183:4509":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:10081:5945":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:11678:6420":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:10559:5293":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:4401:7897":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:547:5795":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:2794:5546":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"14:244:7303":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:3955:122":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:4325:7863":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:7408:6100":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:47343:4431":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:55818:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7477:5580":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:3331:4748":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:4083:7790":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:8660:4765":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4255:4567":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:525:7452":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:0:1301":{"crate_id":1,"path":["std"],"kind":"module"},"1:1501:4437":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:10468:5973":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:46430:4662":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:2991:5825":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:2866:5812":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:5314:6289":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:2162:4191":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:12327:6542":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:3025:60643":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:7337:3777":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:11979:4472":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:7928:4796":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:7575:4195":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:11460:3266":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:5371:8091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:15739:3060":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:45545:179":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"9:0:3022":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:88:40031":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:11738:6434":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:8369:4468":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:14022:3229":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:537:7457":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:5167:7978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:46667:3238":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:3218:5819":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:1438:3777":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:2027:140":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"12:784:4435":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:3266:4627":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:14330:3995":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:5561:4391":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:4506:7056":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:47637:79":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:11816:6121":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:11200:5006":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:4614:7058":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11026:8723":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:6861:4358":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"18:754:60781":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:46351:4656":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:8804:3323":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"18:744:60780":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:0:470":{"crate_id":2,"path":["core"],"kind":"module"},"2:3083:130":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:7158:5647":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:8061:4187":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:10105:3185":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10224:8696":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13819:6981":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:3423:125":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:5360:5599":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:13620:6910":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:48483:141":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:12601:4998":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:161:40098":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:9896:60768":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:13520:6887":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:4346:3234":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:13465:6871":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:8264:3164":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:22818:4842":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:5505:5607":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"18:136:53247":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:8325:5216":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:3012:4784":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:4852:7066":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:3463:4801":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"18:811:6001":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:13198:4562":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:8247:5117":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:49080:4819":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:3429:5547":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:10420:5932":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:4344:3233":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"9:603:9126":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:14325:8603":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:1152:8779":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:46281:4669":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:4478:7930":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"19:0:972":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:5635:4375":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:46103:5193":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:1236:8680":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:11054:4410":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"16:5029:7071":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"12:1100:4442":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:4364:7885":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"12:1253:4445":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:31847:5142":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12685:6619":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:10351:4452":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:12834:4691":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:11194:4403":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:50945:4867":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:10801:8710":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:4230:7049":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:12456:6582":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:6644:5640":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:8380:4189":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"9:722:5328":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:4995:7070":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:5672:5612":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:50784:4866":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"15:269:5484":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:15225:5488":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:50840:4887":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"12:2009:3777":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:9809:60770":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:53088:8545":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:10914:4431":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:7804:6118":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:10500:11645":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:55857:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:4762:7063":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:8734:1999":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"12:747:3266":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:4425:7907":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:47214:4431":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:9574:5926":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:2875:169":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:3621:5112":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11572:6403":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:3182:3370":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:10111:3183":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:2188:4510":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:7420:5579":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:52032:4861":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"12:396:5463":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"9:234:5352":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:11057:4411":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"17:8929:46954":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:7804:5568":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:3978:7737":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:6695:4399":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:6636:8315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:6807:5643":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:23465:4734":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:5347:8079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:15686:9134":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:6087:5556":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:3488:5824":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:12946:6663":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:13497:6879":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:4281:7842":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:11857:55480":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:1075:4394":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:51152:4876":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"14:11:8750":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"12:976:4441":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:12490:5029":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:49226:5004":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:7195:5650":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:9580:4541":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:10538:4045":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:8571:3316":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:2433:4050":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"12:556:138":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:4387:7893":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:4120:7809":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:15730:3051":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:6303:4668":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:563:7477":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:569:7480":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:2816:5830":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:9849:60772":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11750:6435":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:51183:4880":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"12:160:5461":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:983:5233":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:7870:5565":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:22616:4418":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:1578:3266":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:12019:3317":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:5805:5223":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:3233:3998":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:13221:6810":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"9:41:5377":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"5:1599:3777":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:49439:5044":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:45981:4906":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:46035:5044":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:23817:8361":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"12:840:4432":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:5228:8008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:3325:4745":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:4227:7828":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:24323:5086":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:3426:126":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"9:776:5374":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:12093:4423":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:31987:4180":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:1472:4191":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:10864:6339":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:6852:8319":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:2843:5811":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:9759:8684":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:11915:6468":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:23873:39346":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:48246:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"18:0:3029":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:15741:3062":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"15:230:5479":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"18:660:6013":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:1524:4440":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:48194:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"18:636:6199":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"9:996:5393":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:15732:3053":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:681:6360":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:14380:3209":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:45700:3983":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:1311:5989":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:1518:4439":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4133:7813":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13205:6807":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"0:364:122":{"crate_id":0,"path":["cc","Error"],"kind":"struct"},"6:1617:7574":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:1633:4443":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11539:6397":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4317:7859":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:11407:1571":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:13537:145":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:14665:6150":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:10656:6307":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:6769:4364":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:55805:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3307:3266":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:4535:7057":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"13:232:7350":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:6124:8243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:50004:186":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:5414:8107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:1224:5285":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"9:692:5327":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:9769:60774":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:10071:5988":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:49140:5001":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:9207:4417":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:10095:5982":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:15734:3055":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:15115:4548":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:5191:7994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:47427:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:1690:7629":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:9616:75":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12741:6626":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:5790:5618":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:0:1724":{"crate_id":17,"path":["object"],"kind":"module"},"2:9621:82":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:12307:6541":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:9034:46956":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:2912:5813":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"3:300:190":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:12275:6534":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:7786:5569":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}