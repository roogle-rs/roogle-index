{"root":"0:0:2692","crate_version":"1.0.83","includes_private":false,"index":{"0:88:1990":{"id":"0:88:1990","crate_id":0,"name":"flag","span":{"filename":"src/lib.rs","begin":[425,4],"end":[428,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"-ffunction-sections\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12982:34797":{"id":"2:12982:34797","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:10016"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:10011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:580":{"id":"0:121:580","crate_id":0,"name":"debug","span":{"filename":"src/lib.rs","begin":[948,4],"end":[951,5]},"visibility":"public","docs":"Configures whether the compiler will emit debug information when\ngenerating object files.\n\nThis option is automatically scraped from the `DEBUG` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["debug",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:2696":{"id":"0:57:2696","crate_id":0,"name":"find_tool","span":{"filename":"src/windows_registry.rs","begin":[43,0],"end":[45,1]},"visibility":"public","docs":"Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["_tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:331:461":{"id":"0:331:461","crate_id":0,"name":"clone","span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12973:2808":{"id":"2:12973:2808","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:10016"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:10011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5573:27994":{"id":"5:5573:27994","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12990:27997"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410:461":{"id":"0:410:461","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[193,9],"end":[193,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:3026":{"id":"0:271:3026","crate_id":0,"name":"is_like_gnu","span":{"filename":"src/lib.rs","begin":[3615,4],"end":[3617,5]},"visibility":"public","docs":"Whether the tool is GNU Compiler Collection-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12877:2023":{"id":"2:12877:2023","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42354:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:393:135":{"id":"b:2:2444-0:393:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:3905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:26826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2504:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:326:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[193,9],"end":[193,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:410:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[178,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10000:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12888:30335":{"id":"2:12888:30335","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12887:2734","str::split_at_mut_checked":"2:12890:30339"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:1994":{"id":"0:89:1994","crate_id":0,"name":"ar_flag","span":{"filename":"src/lib.rs","begin":[441,4],"end":[444,5]},"visibility":"public","docs":"Add a flag to the invocation of the ar\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .file(\"src/bar.c\")\n    .ar_flag(\"/NODEFAULTLIB:libc.dll\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:322":{"id":"0:322","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:323:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12897:9771":{"id":"2:12897:9771","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44493:3775","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1865":{"id":"0:127:1865","crate_id":0,"name":"archiver","span":{"filename":"src/lib.rs","begin":[989,4],"end":[992,5]},"visibility":"public","docs":"Configures the tool used to assemble archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["archiver",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42476:4138-0:332:1846":{"id":"a:2:42476:4138-0:332:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:4138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:264:2031":{"id":"0:264:2031","crate_id":0,"name":"to_command","span":{"filename":"src/lib.rs","begin":[3534,4],"end":[3556,5]},"visibility":"public","docs":"Converts this compiler into a `Command` that's ready to be run.\n\nThis is useful for when the compiler needs to be executed and the\ncommand returned will already have the initial arguments and environment\nvariables configured.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5515:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:1977":{"id":"0:81:1977","crate_id":0,"name":"includes","span":{"filename":"src/lib.rs","begin":[381,4],"end":[390,5]},"visibility":"public","docs":"Add multiple directories to the `-I` include path.\n\n# Example\n\n```no_run\n# use std::path::Path;\n# let condition = true;\n#\nlet mut extra_dir = None;\nif condition {\n    extra_dir = Some(Path::new(\"/path/to\"));\n}\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .includes(extra_dir)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dirs",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7904:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:7904:163","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:253-0:311:3317":{"id":"a:2:2966:253-0:311:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2966:253-0:332:1846":{"id":"a:2:2966:253-0:332:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:55:2270":{"id":"0:55:2270","crate_id":0,"name":"find","span":{"filename":"src/windows_registry.rs","begin":[35,0],"end":[37,1]},"visibility":"public","docs":"Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.\n\nThe `target` argument is the target that the tool should work for (e.g.\ncompile or link for) and the `tool` argument is the tool to find (e.g.\n`cl.exe` or `link.exe`).\n\nThis function will return `None` if the tool could not be found, or it will\nreturn `Some(cmd)` which represents a command that's ready to execute the\ntool with the appropriate environment variables set.\n\nNote that this function always returns `None` for non-MSVC targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::process::Command","id":"1:5515:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:1841":{"id":"0:52:1841","crate_id":0,"name":"windows_registry","span":{"filename":"src/windows_registry.rs","begin":[11,0],"end":[896,1]},"visibility":"public","docs":"A helper module to probe the Windows Registry when looking for\nwindows-specific tools.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:55:2270","0:57:2696","0:311:3317","0:58:3331"],"is_stripped":false}}},"0:330":{"id":"0:330","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:331:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42476:4138-0:311:3317":{"id":"a:2:42476:4138-0:311:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:4138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"1:3012:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:412:725":{"id":"0:412:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[193,16],"end":[193,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2762:135":{"id":"2:2762:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32755:3838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12929:34788":{"id":"2:12929:34788","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12558:10016","str::split":"2:12917:2586","prim@char":"1:12055:457","str::split_terminator":"2:12926:34787"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44307:10041","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:10011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:311:3317":{"id":"b:2:2441-0:311:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:3905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:267:334":{"id":"0:267:334","crate_id":0,"name":"args","span":{"filename":"src/lib.rs","begin":[3568,4],"end":[3570,5]},"visibility":"public","docs":"Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"OsString","id":"1:2032:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:3646":{"id":"2:12944:3646","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12558:10016","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::rmatches":"2:12947:34789"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44443:10036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32882:3906-0:400:1906":{"id":"a:2:32882:3906-0:400:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:3906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12886:34785":{"id":"2:12886:34785","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12061:1548","crate::ops::IndexMut":"2:3220:9931","str::slice_unchecked":"2:12885:34784"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:135:1877":{"id":"0:135:1877","crate_id":0,"name":"emit_rerun_if_env_changed","span":{"filename":"src/lib.rs","begin":[1060,4],"end":[1063,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo to detect environment\nchanges that should trigger a rebuild.\n\nThis has no effect if the `cargo_metadata` option is `false`.\n\nThis option defaults to `true`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["emit_rerun_if_env_changed",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12985:2393":{"id":"2:12985:2393","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12519:134","`FromStr`":"2:12518:3351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12518:3351","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12518:3351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:691:9626":{"id":"5:691:9626","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3558-0:311:3317":{"id":"b:2:3558-0:311:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:3905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:253:60":{"id":"0:253:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[3410,4],"end":[3412,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12890:30339":{"id":"2:12890:30339","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12889:30338"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:35485":{"id":"5:5555:35485","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:3373","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:3373","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12876:3266":{"id":"2:12876:3266","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12072:1652"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:253-0:393:135":{"id":"a:2:2966:253-0:393:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12873:2256":{"id":"2:12873:2256","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12106:3000"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149:2329":{"id":"0:149:2329","crate_id":0,"name":"compile","span":{"filename":"src/lib.rs","begin":[1288,4],"end":[1292,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\n# Library name\n\nThe `output` string argument determines the file name for the compiled\nlibrary. The Rust compiler will create an assembly named \"lib\"+output+\".a\".\nMSVC will create a file named output+\".lib\".\n\nThe choice of `output` is close to arbitrary, but:\n\n- must be nonempty,\n- must not contain a path separator (`/`),\n- must be unique across all `compile` invocations made by the same build\n  script.\n\nIf your build script compiles a single source file, the base name of\nthat source file would usually be reasonable:\n\n```no_run\ncc::Build::new().file(\"blobstore.c\").compile(\"blobstore\");\n```\n\nCompiling multiple source files, some people use their crate's name, or\ntheir crate's name + \"-cc\".\n\nOtherwise, please use your imagination.\n\nFor backwards compatibility, if `output` starts with \"lib\" *and* ends\nwith \".a\", a second \"lib\" prefix and \".a\" suffix do not get added on,\nbut this usage is deprecated; please omit `lib` and `.a` in the argument\nthat you pass.\n\n# Panics\n\nPanics if `output` is not formatted correctly or if one of the underlying\ncompiler commands fails. It can also panic if it fails reading file names\nor creating directories.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:399:725":{"id":"0:399:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[155,16],"end":[155,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1048":{"id":"0:78:1048","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[299,4],"end":[341,5]},"visibility":"public","docs":"Construct a new instance of a blank set of configuration.\n\nThis builder is finished with the [`compile`] function.\n\n[`compile`]: struct.Build.html#method.compile","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:332:1846":{"id":"b:2:2748-0:332:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12967:2737":{"id":"2:12967:2737","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:10016"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3558-0:332:1846":{"id":"b:2:3558-0:332:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:3905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:98:718":{"id":"0:98:718","crate_id":0,"name":"file","span":{"filename":"src/lib.rs","begin":[649,4],"end":[652,5]},"visibility":"public","docs":"Add a file which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:400:1906":{"id":"b:2:2748-0:400:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:95:1871":{"id":"0:95:1871","crate_id":0,"name":"shared_flag","span":{"filename":"src/lib.rs","begin":[613,4],"end":[616,5]},"visibility":"public","docs":"Set the `-shared` flag.\n\nWhen enabled, the compiler will produce a shared object which can\nthen be linked with other objects to form an executable.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["shared_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:1864":{"id":"0:122:1864","crate_id":0,"name":"force_frame_pointer","span":{"filename":"src/lib.rs","begin":[959,4],"end":[962,5]},"visibility":"public","docs":"Configures whether the compiler will emit instructions to store\nframe pointers during codegen.\n\nThis option is automatically enabled when debug information is emitted.\nOtherwise the target platform compiler's default will be used.\nYou can use this option to force a specific setting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["force",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:2028":{"id":"0:157:2028","crate_id":0,"name":"try_get_compiler","span":{"filename":"src/lib.rs","begin":[1634,4],"end":[1714,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis will return a result instead of panicing; see get_compiler() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:332:1846":{"id":"0:332:1846","crate_id":0,"name":"Build","span":{"filename":"src/lib.rs","begin":[95,0],"end":[135,1]},"visibility":"public","docs":"A builder for compilation of a native library.\n\nA `Build` is the main type of the `cc` crate and is used to control all the\nvarious configuration options and such of a compile. You'll find more\ndocumentation on each method itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:77","a:2:42477:4137-0:332:1846","a:2:2966:253-0:332:1846","a:2:32825:244-0:332:1846","a:2:32882:3906-0:332:1846","a:2:42476:4138-0:332:1846","b:2:2754-0:332:1846","b:2:2744-0:332:1846","b:2:2748-0:332:1846","b:2:2441-0:332:1846","b:2:2444-0:332:1846","b:2:3558-0:332:1846","b:2:2759-0:332:1846","b:5:687-0:332:1846","0:252","0:374","0:372"]}}},"a:2:32825:244-0:332:1846":{"id":"a:2:32825:244-0:332:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:105:1540":{"id":"0:105:1540","crate_id":0,"name":"std","span":{"filename":"src/lib.rs","begin":[739,4],"end":[742,5]},"visibility":"public","docs":"Specify the C or C++ language standard version.\n\nThese values are common to modern versions of GCC, Clang and MSVC:\n- `c11` for ISO/IEC 9899:2011\n- `c17` for ISO/IEC 9899:2018\n- `c++14` for ISO/IEC 14882:2014\n- `c++17` for ISO/IEC 14882:2017\n- `c++20` for ISO/IEC 14882:2020\n\nOther values have less broad support, e.g. MSVC does not support `c++11`\n(`c++14` is the minimum), `c89` (omit the flag instead) or `c99`.\n\nFor compiling C++ code, you should also set `.cpp(true)`.\n\nThe default is that no standard flag is passed to the compiler, so the\nlanguage version will be the compiler's default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/modern.cpp\")\n    .cpp(true)\n    .std(\"c++17\")\n    .compile(\"modern\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["std",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[184,0],"end":[184,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","cause","source","description","type_id"],"trait":{"name":"Error","id":"2:2806:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2747:1895":{"id":"2:2747:1895","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2721:142"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5571:35488":{"id":"5:5571:35488","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:3373","`String`":"5:7571:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:3373","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:373:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:90:2001":{"id":"0:90:2001","crate_id":0,"name":"asm_flag","span":{"filename":"src/lib.rs","begin":[460,4],"end":[463,5]},"visibility":"public","docs":"Add a flag that will only be used with assembly files.\n\nThe flag will be applied to input files with either a `.s` or\n`.asm` extension (case insensitive).\n\n# Example\n\n```no_run\ncc::Build::new()\n    .asm_flag(\"-Wa,-defsym,abc=1\")\n    .file(\"src/foo.S\")  // The asm flag will be applied here\n    .file(\"src/bar.c\")  // The asm flag will not be applied here\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:793":{"id":"0:118:793","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[920,4],"end":[923,5]},"visibility":"public","docs":"Configures the host assumed by this configuration.\n\nThis option is automatically scraped from the `HOST` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .host(\"arm-linux-gnueabihf\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["host",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12963:34795":{"id":"2:12963:34795","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12964:34796":{"id":"2:12964:34796","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:10016"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12583:10009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:1818":{"id":"0:107:1818","crate_id":0,"name":"warnings","span":{"filename":"src/lib.rs","begin":[784,4],"end":[788,5]},"visibility":"public","docs":"Set warnings flags.\n\nAdds some flags:\n- \"-Wall\" for MSVC.\n- \"-Wall\", \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12989:27996":{"id":"2:12989:27996","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3558-0:400:1906":{"id":"b:2:3558-0:400:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:3905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12962:34794":{"id":"2:12962:34794","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12956:3002":{"id":"2:12956:3002","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:393:135":{"id":"0:393:135","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[156,0],"end":[161,1]},"visibility":"public","docs":"Represents an internal error that occurred, with an explanation.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:42477:4137-0:393:135","a:2:2966:253-0:393:135","a:2:32825:244-0:393:135","a:2:32882:3906-0:393:135","a:2:42476:4138-0:393:135","b:2:2754-0:393:135","b:2:2744-0:393:135","b:2:2748-0:393:135","b:2:2441-0:393:135","b:2:2444-0:393:135","b:2:3558-0:393:135","b:2:2759-0:393:135","b:5:687-0:393:135","b:5:5828-0:393:135","0:396","0:63","0:398","0:65","0:61"]}}},"b:2:2744-0:400:1906":{"id":"b:2:2744-0:400:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:1895"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:687-0:400:1906":{"id":"b:5:687-0:400:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2972","5:690:2046","5:691:9626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32882:3906-0:393:135":{"id":"a:2:32882:3906-0:393:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:3906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:326:668":{"id":"0:326:668","crate_id":0,"name":"eq","span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1857":{"id":"0:102:1857","crate_id":0,"name":"cpp","span":{"filename":"src/lib.rs","begin":[676,4],"end":[679,5]},"visibility":"public","docs":"Set C++ support.\n\nThe other `cpp_*` options will only become active if this is set to\n`true`.\n\nThe name of the C++ standard library to link is decided by:\n1. If [cpp_link_stdlib](Build::cpp_link_stdlib) is set, use its value.\n2. Else if the `CXXSTDLIB` environment variable is set, use its value.\n3. Else the default is `libc++` for OS X and BSDs, `libc++_shared` for Android,\n`None` for MSVC and `libstdc++` for anything else.","links":{"Build::cpp_link_stdlib":"0:109:1858"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:332:1846":{"id":"b:2:2441-0:332:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:3905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12906:2240":{"id":"2:12906:2240","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:10016"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:10011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:393:135":{"id":"b:2:2759-0:393:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:398":{"id":"0:398","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[155,16],"end":[155,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:399:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5559:35486":{"id":"5:5559:35486","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:311:3317":{"id":"b:2:2759-0:311:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:62:752":{"id":"0:62:752","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[173,4],"end":[175,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"io::Error","id":"1:3012:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2692":{"id":"0:0:2692","crate_id":0,"name":"cc","span":{"filename":"src/lib.rs","begin":[1,0],"end":[4024,1]},"visibility":"public","docs":"A library for build scripts to compile custom C code\n\nThis library is intended to be used as a `build-dependencies` entry in\n`Cargo.toml`:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n```\n\nThe purpose of this crate is to provide the utility functions necessary to\ncompile C code into a static archive which is then linked into a Rust crate.\nConfiguration is available through the `Build` struct.\n\nThis crate will automatically detect situations such as cross compilation or\nother environment variables set by Cargo and will build code appropriately.\n\nThe crate is not limited to C code, it can accept any source code that can\nbe passed to a C or C++ compiler. As such, assembly files with extensions\n`.s` (gcc/clang) and `.asm` (MSVC) can also be compiled.\n\n[`Build`]: struct.Build.html\n\n# Parallelism\n\nTo parallelize computation, enable the `parallel` feature for the crate.\n\n```toml\n[build-dependencies]\ncc = { version = \"1.0\", features = [\"parallel\"] }\n```\nTo specify the max number of concurrent compilation jobs, set the `NUM_JOBS`\nenvironment variable to the desired amount.\n\nCargo will also set this environment variable when executed with the `-jN` flag.\n\n# Examples\n\nUse the `Build` struct to compile `src/foo.c`:\n\n```no_run\nfn main() {\n    cc::Build::new()\n        .file(\"src/foo.c\")\n        .define(\"FOO\", Some(\"bar\"))\n        .include(\"src\")\n        .compile(\"foo\");\n}\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/cc/1.0\")]","#![allow(deprecated)]","#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:52:1841","0:332:1846","0:393:135","0:400:1906"],"is_stripped":false}}},"2:3560:1643":{"id":"2:3560:1643","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40123:13840","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12867:34780":{"id":"2:12867:34780","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:311:3317":{"id":"b:2:2748-0:311:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:208:2774":{"id":"0:208:2774","crate_id":0,"name":"try_get_archiver","span":{"filename":"src/lib.rs","begin":[2855,4],"end":[2857,5]},"visibility":"public","docs":"Get the archiver that's in use for this configuration.\n\nThis will return a result instead of panicing;\nsee [`get_archiver()`] for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5515:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:120:2177":{"id":"0:120:2177","crate_id":0,"name":"opt_level_str","span":{"filename":"src/lib.rs","begin":[938,4],"end":[941,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42477:4137-0:311:3317":{"id":"a:2:42477:4137-0:311:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:4137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:327":{"id":"0:327","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2509:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:134:1869":{"id":"0:134:1869","crate_id":0,"name":"use_plt","span":{"filename":"src/lib.rs","begin":[1049,4],"end":[1052,5]},"visibility":"public","docs":"Configures whether the Procedure Linkage Table is used for indirect\ncalls into shared libraries.\n\nThe PLT is used to provide features like lazy binding, but introduces\na small performance loss due to extra pointer indirection. Setting\n`use_plt` to `false` can provide a small performance increase.\n\nNote that skipping the PLT requires a recent version of GCC/Clang.\n\nThis only applies to ELF targets. It has no effect on other platforms.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["use_plt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:30349":{"id":"2:12938:30349","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:1862":{"id":"0:123:1862","crate_id":0,"name":"out_dir","span":{"filename":"src/lib.rs","begin":[969,4],"end":[972,5]},"visibility":"public","docs":"Configures the output directory where all object files and static\nlibraries will be located.\n\nThis option is automatically scraped from the `OUT_DIR` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["out_dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12960:34793":{"id":"2:12960:34793","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:393:135":{"id":"b:2:2748-0:393:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2758:1630":{"id":"2:2758:1630","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2443:1820":{"id":"2:2443:1820","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:1867":{"id":"0:131:1867","crate_id":0,"name":"cargo_metadata","span":{"filename":"src/lib.rs","begin":[1015,4],"end":[1018,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.\n\nThe emitted metadata is:\n\n - `rustc-link-lib=static=`*compiled lib*\n - `rustc-link-search=native=`*target folder*\n - When target is MSVC, the ATL-MFC libs are added via `rustc-link-search=native=`\n - When C++ is enabled, the C++ stdlib is added via `rustc-link-lib`\n - If `emit_rerun_if_env_changed` is not `false`, `rerun-if-env-changed=`*env*\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_metadata",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12903:2239":{"id":"2:12903:2239","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:10016"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373:461":{"id":"0:373:461","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12995:34798":{"id":"2:12995:34798","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4738:34798"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44538:10029","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:690:2046":{"id":"5:690:2046","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:393:135":{"id":"b:5:687-0:393:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2972","5:690:2046","5:691:9626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12895:2760":{"id":"2:12895:2760","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12896:2990"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44513:10020","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12909:2270":{"id":"2:12909:2270","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42354:198","prim@char":"1:12055:457","self::pattern":"2:12558:10016"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:2586":{"id":"2:12917:2586","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12558:10016","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::split_whitespace":"2:12895:2760","str::rsplit":"2:12923:30343"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44239:3779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:2415":{"id":"0:153:2415","crate_id":0,"name":"try_expand","span":{"filename":"src/lib.rs","begin":[1562,4],"end":[1585,5]},"visibility":"public","docs":"This will return a result instead of panicing; see expand() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6994:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:411":{"id":"0:411","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[193,16],"end":[193,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:412:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12947:34789":{"id":"2:12947:34789","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12558:10016","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::matches":"2:12944:3646"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44461:10037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:10011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:400:1906":{"id":"b:2:2444-0:400:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:3905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:26826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12865:882":{"id":"2:12865:882","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12055:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:332:1846":{"id":"b:5:687-0:332:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2972","5:690:2046","5:691:9626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12881:30313":{"id":"2:12881:30313","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:332:1846":{"id":"b:2:2754-0:332:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:316:3323":{"id":"0:316:3323","crate_id":0,"name":"Vs15","span":{"filename":"src/windows_registry.rs","begin":[90,4],"end":[90,8]},"visibility":"default","docs":"Visual Studio 15 (2017)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12997:15495":{"id":"2:12997:15495","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4739:15495"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44547:10030","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[293,0],"end":[3407,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:1048","0:79:825","0:81:1977","0:83:1982","0:86:1986","0:88:1990","0:89:1994","0:90:2001","0:92:2019","0:93:2050","0:94:2062","0:95:1871","0:96:1872","0:97:1855","0:98:718","0:100:1856","0:102:1857","0:103:1860","0:104:1861","0:105:1540","0:106:1873","0:107:1818","0:108:1874","0:109:1858","0:113:1859","0:117:1572","0:118:793","0:119:1863","0:120:2177","0:121:580","0:122:1864","0:123:1862","0:125:483","0:127:1865","0:129:1866","0:131:1867","0:132:2209","0:133:1154","0:134:1869","0:135:1877","0:136:1870","0:140:2233","0:149:2329","0:153:2415","0:155:2424","0:156:2289","0:157:2028","0:207:2773","0:208:2774","0:211:2783","0:212:2784"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:375:725":{"id":"0:375:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[94,16],"end":[94,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12864":{"id":"2:12864","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12865:882","2:12866:2044","2:12867:34780","2:12868:34781","2:12870:34782","2:12873:2256","2:12874:34783","2:12875:339","2:12876:3266","2:12877:2023","2:12879:30312","2:12881:30313","2:12883:30314","2:12885:34784","2:12886:34785","2:12887:2734","2:12888:30335","2:12889:30338","2:12890:30339","2:12892:3023","2:12893:14084","2:12894:9777","2:12895:2760","2:12896:2990","2:12897:9771","2:12898:34786","2:12899:32235","2:12900:2033","2:12903:2239","2:12906:2240","2:12909:2270","2:12913:2735","2:12917:2586","2:12920:30341","2:12923:30343","2:12926:34787","2:12929:34788","2:12932:30345","2:12935:30347","2:12938:30349","2:12941:30350","2:12944:3646","2:12947:34789","2:12950:34790","2:12953:34791","2:12956:3002","2:12958:34792","2:12960:34793","2:12962:34794","2:12963:34795","2:12964:34796","2:12967:2737","2:12970:3113","2:12973:2808","2:12976:2812","2:12979:3532","2:12982:34797","2:12985:2393","2:12987:27992","2:12988:30229","2:12989:27996","2:12990:27997","2:12991:27998","2:12992:30232","2:12993:30233","2:12994:30234","2:12995:34798","2:12997:15495","2:12998:34799"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:312:3319":{"id":"0:312:3319","crate_id":0,"name":"Vs12","span":{"filename":"src/windows_registry.rs","begin":[86,4],"end":[86,8]},"visibility":"default","docs":"Visual Studio 12 (2013)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:2966:253-0:400:1906":{"id":"a:2:2966:253-0:400:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5562:3120":{"id":"5:5562:3120","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:393:135":{"id":"b:2:2744-0:393:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:1895"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12898:34786":{"id":"2:12898:34786","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44503:10033","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324":{"id":"0:324","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32827:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3558-0:393:135":{"id":"b:2:3558-0:393:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:3905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32825:244-0:393:135":{"id":"a:2:32825:244-0:393:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2763:1628":{"id":"2:2763:1628","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:311:3317":{"id":"b:2:2754-0:311:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12896:2990":{"id":"2:12896:2990","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12895:2760"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44522:10018","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:483":{"id":"0:125:483","crate_id":0,"name":"compiler","span":{"filename":"src/lib.rs","begin":[979,4],"end":[982,5]},"visibility":"public","docs":"Configures the compiler to be used to produce output.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["compiler",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12958:34792":{"id":"2:12958:34792","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:400:1906":{"id":"b:2:2441-0:400:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:3905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12875:339":{"id":"2:12875:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12876:3266","`u8`":"1:12072:1652"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5556:2506":{"id":"5:5556:2506","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:393:135":{"id":"b:2:2441-0:393:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:3905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12976:2812":{"id":"2:12976:2812","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:10016"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:10011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:2019":{"id":"0:92:2019","crate_id":0,"name":"is_flag_supported","span":{"filename":"src/lib.rs","begin":[495,4],"end":[553,5]},"visibility":"public","docs":"Run the compiler to test if it accepts the given flag.\n\nFor a convenience method for setting flags conditionally,\nsee `flag_if_supported()`.\n\nIt may return error if it's unable to run the compiler with a test file\n(e.g. the compiler is missing or a write to the `out_dir` failed).\n\nNote: Once computed, the result of this call is stored in the\n`known_flag_support` field. If `is_flag_supported(flag)`\nis called again, the result will be read from the hash table.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}},{"type":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12991:27998":{"id":"2:12991:27998","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:3050":{"id":"0:270:3050","crate_id":0,"name":"cflags_env","span":{"filename":"src/lib.rs","begin":[3603,4],"end":[3612,5]},"visibility":"public","docs":"Returns the compiler flags in format of CFLAGS environment variable.\nImportant here - this will not be CFLAGS from env, its internal gcc's flags to use as CFLAGS\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:2032:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:1982":{"id":"0:83:1982","crate_id":0,"name":"define","span":{"filename":"src/lib.rs","begin":[403,4],"end":[407,5]},"visibility":"public","docs":"Specify a `-D` variable with an optional value.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .define(\"FOO\", \"BAR\")\n    .define(\"BAZ\", None)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["val",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12913:2735":{"id":"2:12913:2735","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42354:198","prim@char":"1:12055:457","self::pattern":"2:12558:10016"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:10011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12994:30234":{"id":"2:12994:30234","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:36500"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:2783":{"id":"0:211:2783","crate_id":0,"name":"get_ranlib","span":{"filename":"src/lib.rs","begin":[2895,4],"end":[2900,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5548:10003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5515:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12887:2734":{"id":"2:12887:2734","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12889:30338","str::split_at_mut":"2:12888:30335"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:397:461":{"id":"0:397:461","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[155,9],"end":[155,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:311:3317":{"id":"b:2:2744-0:311:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:1895"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:314:3321":{"id":"0:314:3321","crate_id":0,"name":"Vs14","span":{"filename":"src/windows_registry.rs","begin":[88,4],"end":[88,8]},"visibility":"default","docs":"Visual Studio 14 (2015)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:106:1873":{"id":"0:106:1873","crate_id":0,"name":"warnings_into_errors","span":{"filename":"src/lib.rs","begin":[763,4],"end":[766,5]},"visibility":"public","docs":"Set warnings into errors flag.\n\nDisabled by default.\n\nWarning: turning warnings into errors only make sense\nif you are a developer of the crate using cc-rs.\nSome warnings only appear on some architecture or\nspecific version of the compiler. Any user of this crate,\nor any other crate depending on it, could fail during\ncompile time.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings_into_errors(true)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings_into_errors",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:1866":{"id":"0:129:1866","crate_id":0,"name":"ranlib","span":{"filename":"src/lib.rs","begin":[999,4],"end":[1002,5]},"visibility":"public","docs":"Configures the tool used to index archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ranlib",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12883:30314":{"id":"2:12883:30314","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:30345":{"id":"2:12932:30345","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:10016","str::rsplitn":"2:12935:30347"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44343:10040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1855":{"id":"0:97:1855","crate_id":0,"name":"no_default_flags","span":{"filename":"src/lib.rs","begin":[643,4],"end":[646,5]},"visibility":"public","docs":"Disables the generation of default compiler flags. The default compiler\nflags may cause conflicts in some cross compiling scenarios.\n\nSetting the `CRATE_CC_NO_DEFAULTS` environment variable has the same\neffect as setting this to `true`. The presence of the environment\nvariable and the value of `no_default_flags` will be OR'd together.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["no_default_flags",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32825:244-0:311:3317":{"id":"a:2:32825:244-0:311:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:103:1860":{"id":"0:103:1860","crate_id":0,"name":"cuda","span":{"filename":"src/lib.rs","begin":[691,4],"end":[698,5]},"visibility":"public","docs":"Set CUDA C++ support.\n\nEnabling CUDA will invoke the CUDA compiler, NVCC. While NVCC accepts\nthe most common compiler flags, e.g. `-std=c++17`, some project-specific\nflags might have to be prefixed with \"-Xcompiler\" flag, for example as\n`.flag(\"-Xcompiler\").flag(\"-fpermissive\")`. See the documentation for\n`nvcc`, the CUDA compiler driver, at https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/\nfor more information.\n\nIf enabled, this also implicitly enables C++ support.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cuda",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42476:4138-0:400:1906":{"id":"a:2:42476:4138-0:400:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:4138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:86:1986":{"id":"0:86:1986","crate_id":0,"name":"object","span":{"filename":"src/lib.rs","begin":[410,4],"end":[413,5]},"visibility":"public","docs":"Add an arbitrary object file to link in","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["obj",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323:725":{"id":"0:323:725","crate_id":0,"name":"fmt","span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3409,0],"end":[3413,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:253:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:687-0:311:3317":{"id":"b:5:687-0:311:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2972","5:690:2046","5:691:9626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12990:27997":{"id":"2:12990:27997","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1856":{"id":"0:100:1856","crate_id":0,"name":"files","span":{"filename":"src/lib.rs","begin":[655,4],"end":[664,5]},"visibility":"public","docs":"Add files which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7904:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:7904:163","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:1863":{"id":"0:119:1863","crate_id":0,"name":"opt_level","span":{"filename":"src/lib.rs","begin":[929,4],"end":[932,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"primitive":"u32"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:1858":{"id":"0:109:1858","crate_id":0,"name":"cpp_link_stdlib","span":{"filename":"src/lib.rs","begin":[838,4],"end":[844,5]},"visibility":"public","docs":"Set the standard library to link against when compiling with C++\nsupport.\n\nIf the `CXXSTDLIB` environment variable is set, its value will\noverride the default value, but not the value explicitly set by calling\nthis function.\n\nA value of `None` indicates that no automatic linking should happen,\notherwise cargo will link against the specified library.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n- `c++_shared` or `c++_static` for Android\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .cpp_link_stdlib(\"stdc++\")\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_link_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:332:1846":{"id":"b:2:2444-0:332:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:3905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:26826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:268:665":{"id":"0:268:665","crate_id":0,"name":"env","span":{"filename":"src/lib.rs","begin":[3576,4],"end":[3578,5]},"visibility":"public","docs":"Returns the set of environment variables needed for this compiler to\noperate.\n\nThis is typically only used for MSVC compilers currently.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"tuple":[{"resolved_path":{"name":"OsString","id":"1:2032:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"OsString","id":"1:2032:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:3024":{"id":"0:273:3024","crate_id":0,"name":"is_like_msvc","span":{"filename":"src/lib.rs","begin":[3625,4],"end":[3630,5]},"visibility":"public","docs":"Whether the tool is MSVC-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:2033":{"id":"2:12900:2033","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:10016"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:825":{"id":"0:79:825","crate_id":0,"name":"include","span":{"filename":"src/lib.rs","begin":[358,4],"end":[361,5]},"visibility":"public","docs":"Add a directory to the `-I` or include path for headers\n\n# Example\n\n```no_run\nuse std::path::Path;\n\nlet library_path = Path::new(\"/path/to/library\");\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .include(library_path)\n    .include(\"src\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2712:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1572":{"id":"0:117:1572","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[902,4],"end":[905,5]},"visibility":"public","docs":"Configures the target this configuration will be compiling for.\n\nThis option is automatically scraped from the `TARGET` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .target(\"aarch64-linux-android\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32882:3906-0:311:3317":{"id":"a:2:32882:3906-0:311:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:3906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12866:2044":{"id":"2:12866:2044","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:332:1846":{"id":"b:2:2744-0:332:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:1895"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42477:4137-0:393:135":{"id":"a:2:42477:4137-0:393:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:4137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:136:1870":{"id":"0:136:1870","crate_id":0,"name":"static_crt","span":{"filename":"src/lib.rs","begin":[1068,4],"end":[1071,5]},"visibility":"public","docs":"Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.\n\nThis option defaults to `false`, and affect only msvc targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_crt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:2809":{"id":"0:269:2809","crate_id":0,"name":"cc_env","span":{"filename":"src/lib.rs","begin":[3584,4],"end":[3598,5]},"visibility":"public","docs":"Returns the compiler command in format of CC environment variable.\nOr empty string if CC env was not present\n\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:2032:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12935:30347":{"id":"2:12935:30347","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12055:457","str::splitn":"2:12932:30345","self::pattern":"2:12558:10016"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44361:10039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:10011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2446:26826":{"id":"2:2446:26826","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:2289":{"id":"0:156:2289","crate_id":0,"name":"get_compiler","span":{"filename":"src/lib.rs","begin":[1624,4],"end":[1629,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis function will return a `Tool` which represents the culmination\nof this configuration at a snapshot in time. The returned compiler can\nbe inspected (e.g. the path, arguments, environment) to forward along to\nother tools, or the `to_command` method can be used to invoke the\ncompiler itself.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:1861":{"id":"0:104:1861","crate_id":0,"name":"cudart","span":{"filename":"src/lib.rs","begin":[706,4],"end":[711,5]},"visibility":"public","docs":"Link CUDA run-time.\n\nThis option mimics the `--cudart` NVCC command-line option. Just like\nthe original it accepts `{none|shared|static}`, with default being\n`static`. The method has to be invoked after `.cuda(true)`, or not\nat all, if the default is right for the project.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cudart",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3415,0],"end":[3631,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:2031","0:266:1151","0:267:334","0:268:665","0:269:2809","0:270:3050","0:271:3026","0:272:3027","0:273:3024"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12923:30343":{"id":"2:12923:30343","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12558:10016","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::split":"2:12917:2586"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44257:10038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:10011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:311:3317":{"id":"0:311:3317","crate_id":0,"name":"VsVers","span":{"filename":"src/windows_registry.rs","begin":[84,0],"end":[95,1]},"visibility":"public","docs":"A version of Visual Studio","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:312:3319","0:314:3321","0:316:3323","0:318:3325","0:320:3327"],"impls":["a:2:42477:4137-0:311:3317","a:2:2966:253-0:311:3317","a:2:32825:244-0:311:3317","a:2:32882:3906-0:311:3317","a:2:42476:4138-0:311:3317","b:2:2754-0:311:3317","b:2:2744-0:311:3317","b:2:2748-0:311:3317","b:2:2441-0:311:3317","b:2:2444-0:311:3317","b:2:3558-0:311:3317","b:2:2759-0:311:3317","b:5:687-0:311:3317","0:322","0:327","0:330","0:325","0:329","0:324"]}}},"2:12920:30341":{"id":"2:12920:30341","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:10016"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12374:10019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:725":{"id":"0:64:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[179,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:1872":{"id":"0:96:1872","crate_id":0,"name":"static_flag","span":{"filename":"src/lib.rs","begin":[632,4],"end":[635,5]},"visibility":"public","docs":"Set the `-static` flag.\n\nWhen enabled on systems that support dynamic linking, this prevents\nlinking with the shared libraries.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .static_flag(true)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272:3027":{"id":"0:272:3027","crate_id":0,"name":"is_like_clang","span":{"filename":"src/lib.rs","begin":[3620,4],"end":[3622,5]},"visibility":"public","docs":"Whether the tool is Clang-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2757:135":{"id":"2:2757:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:400:1906":{"id":"0:400:1906","crate_id":0,"name":"Tool","span":{"filename":"src/lib.rs","begin":[194,0],"end":[203,1]},"visibility":"public","docs":"Configuration used to represent an invocation of a C compiler.\n\nThis can be used to figure out what compiler is in use, what the arguments\nto it are, and what the environment variables look like for the compiler.\nThis can be used to further configure other build systems (e.g. forward\nalong CC and/or CFLAGS) or the `to_command` method can be used to run the\ncompiler itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:254","a:2:42477:4137-0:400:1906","a:2:2966:253-0:400:1906","a:2:32825:244-0:400:1906","a:2:32882:3906-0:400:1906","a:2:42476:4138-0:400:1906","b:2:2754-0:400:1906","b:2:2744-0:400:1906","b:2:2748-0:400:1906","b:2:2441-0:400:1906","b:2:2444-0:400:1906","b:2:3558-0:400:1906","b:2:2759-0:400:1906","b:5:687-0:400:1906","0:411","0:409"]}}},"2:12879:30312":{"id":"2:12879:30312","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42354:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:30350":{"id":"2:12941:30350","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:10011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12868:34781":{"id":"2:12868:34781","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12892:3023":{"id":"2:12892:3023","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12055:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44209:10025","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:311:3317":{"id":"b:2:2444-0:311:3317","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:3905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:26826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5828-0:393:135":{"id":"b:5:5828-0:393:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10000:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:3905","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5826:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5830:1605"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12889:30338":{"id":"2:12889:30338","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12890:30339"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:2773":{"id":"0:207:2773","crate_id":0,"name":"get_archiver","span":{"filename":"src/lib.rs","begin":[2844,4],"end":[2849,5]},"visibility":"public","docs":"Get the archiver (ar) that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5548:10003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5515:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12998:34799":{"id":"2:12998:34799","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4736:34799"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44556:10031","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2424":{"id":"0:155:2424","crate_id":0,"name":"expand","span":{"filename":"src/lib.rs","begin":[1599,4],"end":[1604,5]},"visibility":"public","docs":"Run the compiler, returning the macro-expanded version of the input files.\n\nThis is only relevant for C and C++ files.\n\n# Panics\nPanics if more than one file is present in the config, or if compiler\npath has an invalid file name.\n\n# Example\n```no_run\nlet out = cc::Build::new().file(\"src/foo.c\").expand();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6994:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:396":{"id":"0:396","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[155,9],"end":[155,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:397:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12894:9777":{"id":"2:12894:9777","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44225:3778","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:34791":{"id":"2:12953:34791","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12558:10016","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::match_indices":"2:12950:34790"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44407:10035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:10011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12993:30233":{"id":"2:12993:30233","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:36500"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:2050":{"id":"0:93:2050","crate_id":0,"name":"flag_if_supported","span":{"filename":"src/lib.rs","begin":[566,4],"end":[569,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler if it supports it\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag_if_supported(\"-Wlogical-op\") // only supported by GCC\n    .flag_if_supported(\"-Wunreachable-code\") // only supported by clang\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5572:3798":{"id":"5:5572:3798","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42477:4137-0:400:1906":{"id":"a:2:42477:4137-0:400:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:4137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:108:1874":{"id":"0:108:1874","crate_id":0,"name":"extra_warnings","span":{"filename":"src/lib.rs","begin":[807,4],"end":[810,5]},"visibility":"public","docs":"Set extra warnings flags.\n\nAdds some flags:\n- nothing for MSVC.\n- \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\n// Disables -Wextra, -Wall remains enabled:\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .extra_warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12893:14084":{"id":"2:12893:14084","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12055:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44215:10024","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:393:135":{"id":"b:2:2754-0:393:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:212:2784":{"id":"0:212:2784","crate_id":0,"name":"try_get_ranlib","span":{"filename":"src/lib.rs","begin":[2906,4],"end":[2912,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nThis will return a result instead of panicing;\nsee [`get_ranlib()`] for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5515:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320:3327":{"id":"0:320:3327","crate_id":0,"name":"Vs17","span":{"filename":"src/windows_registry.rs","begin":[94,4],"end":[94,8]},"visibility":"default","docs":"Visual Studio 17 (2022)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12992:30232":{"id":"2:12992:30232","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:36500"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2062":{"id":"0:94:2062","crate_id":0,"name":"try_flags_from_environment","span":{"filename":"src/lib.rs","begin":[594,4],"end":[598,5]},"visibility":"public","docs":"Add flags from the specified environment variable.\n\nNormally the `cc` crate will consult with the standard set of environment\nvariables (such as `CFLAGS` and `CXXFLAGS`) to construct the compiler invocation. Use of\nthis method provides additional levers for the end user to use when configuring the build\nprocess.\n\nJust like the standard variables, this method will search for an environment variable with\nappropriate target prefixes, when appropriate.\n\n# Examples\n\nThis method is particularly beneficial in introducing the ability to specify crate-specific\nflags.\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .try_flags_from_environment(concat!(env!(\"CARGO_PKG_NAME\"), \"_CFLAGS\"))\n    .expect(\"the environment variable must be specified and UTF-8\")\n    .compile(\"foo\");\n```\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["environ_key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5830:1605":{"id":"5:5830:1605","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42476:4138-0:393:135":{"id":"a:2:42476:4138-0:393:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:4138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12988:30229":{"id":"2:12988:30229","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40309:30236","Self::is_ascii":"2:12987:27992"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40309:30236","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,31],"end":[82,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2961:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:132:2209":{"id":"0:132:2209","crate_id":0,"name":"link_lib_modifier","span":{"filename":"src/lib.rs","begin":[1025,4],"end":[1028,5]},"visibility":"public","docs":"Adds a native library modifier that will be added to the\n`rustc-link-lib=static:MODIFIERS=LIBRARY_NAME` metadata line\nemitted for cargo if `cargo_metadata` is enabled.\nSee https://doc.rust-lang.org/rustc/command-line-arguments.html#-l-link-the-generated-crate-to-a-native-library\nfor the list of modifiers accepted by rustc.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["link_lib_modifier",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42477:4137-0:332:1846":{"id":"a:2:42477:4137-0:332:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:4137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12970:3113":{"id":"2:12970:3113","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:10016"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12870:34782":{"id":"2:12870:34782","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12868:34781"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5574:27995":{"id":"5:5574:27995","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12991:27998"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:689:2972":{"id":"5:689:2972","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:133:1154":{"id":"0:133:1154","crate_id":0,"name":"pic","span":{"filename":"src/lib.rs","begin":[1034,4],"end":[1037,5]},"visibility":"public","docs":"Configures whether the compiler will emit position independent code.\n\nThis option defaults to `false` for `windows-gnu` and bare metal targets and\nto `true` for all other targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pic",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:2233":{"id":"0:140:2233","crate_id":0,"name":"try_compile","span":{"filename":"src/lib.rs","begin":[1086,4],"end":[1249,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThis will return a result instead of panicing; see compile() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:393:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12899:32235":{"id":"2:12899:32235","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44531:10017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266:1151":{"id":"0:266:1151","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[3562,4],"end":[3564,5]},"visibility":"public","docs":"Returns the path for this compiler.\n\nNote that this may not be a path to a file on the filesystem, e.g. \"cc\",\nbut rather something which will be resolved when a process is spawned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5309:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:332:1846":{"id":"b:2:2759-0:332:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32882:3906-0:332:1846":{"id":"a:2:32882:3906-0:332:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:3906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:374":{"id":"0:374","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,16],"end":[94,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:375:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2750:752":{"id":"2:2750:752","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:400:1906":{"id":"b:2:2754-0:400:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2759-0:400:1906":{"id":"b:2:2759-0:400:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12950:34790":{"id":"2:12950:34790","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12558:10016","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::rmatch_indices":"2:12953:34791"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44389:10034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12987:27992":{"id":"2:12987:27992","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554":{"id":"5:5554","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5555:35485","5:5556:2506","5:5559:35486","5:5562:3120","5:5570:35487","5:5571:35488","5:5572:3798","5:5573:27994","5:5574:27995"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12979:3532":{"id":"2:12979:3532","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:10016"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:318:3325":{"id":"0:318:3325","crate_id":0,"name":"Vs16","span":{"filename":"src/windows_registry.rs","begin":[92,4],"end":[92,8]},"visibility":"default","docs":"Visual Studio 16 (2019)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:113:1859":{"id":"0:113:1859","crate_id":0,"name":"cpp_set_stdlib","span":{"filename":"src/lib.rs","begin":[879,4],"end":[887,5]},"visibility":"public","docs":"Force the C++ compiler to use the specified standard library.\n\nSetting this option will automatically set `cpp_link_stdlib` to the same\nvalue.\n\nThe default value of this option is always `None`.\n\nThis option has no effect when compiling for a Visual Studio based\ntarget.\n\nThis option sets the `-stdlib` flag, which is only supported by some\ncompilers (clang, icc) but not by others (gcc). The library will not\ndetect which compiler is used, as such it is the responsibility of the\ncaller to ensure that this option is only used in conjunction with a\ncompiler which supports the `-stdlib` flag.\n\nA value of `None` indicates that no specific C++ standard library should\nbe used, otherwise `-stdlib` is added to the compile invocation.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .cpp_set_stdlib(\"c++\")\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_set_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12885:34784":{"id":"2:12885:34784","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12061:1548","str::slice_mut_unchecked":"2:12886:34785","crate::ops::Index":"2:39955:9930"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32825:244-0:400:1906":{"id":"a:2:32825:244-0:400:1906","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:400:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12926:34787":{"id":"2:12926:34787","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12558:10016","str::split":"2:12917:2586","prim@char":"1:12055:457","`DoubleEndedIterator`":"2:7942:128","str::rsplit_terminator":"2:12929:34788"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44289:10042","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:10010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12874:34783":{"id":"2:12874:34783","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:3331":{"id":"0:58:3331","crate_id":0,"name":"find_vs_version","span":{"filename":"src/windows_registry.rs","begin":[102,0],"end":[104,1]},"visibility":"public","docs":"Find the most recent installed version of Visual Studio\n\nThis is used by the cmake crate to figure out the correct\ngenerator.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"VsVers","id":"0:311:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5570:35487":{"id":"5:5570:35487","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:2721:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:6764:5513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:44556:10031":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:7482:14524":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"20:4071:7905":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"18:80:26783":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:10317:12018":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:4986:14371":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"20:5676:8586":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:1718:5596":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:3268:3795":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:5568:13041":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:7946:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:45239:14119":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:12076:1648":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:4584:7929":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:14025:12334":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:9984:22607":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:22013:32845":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"20:4108:7908":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"11:2326:9823":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:569:4697":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:2593:12964":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10534:35600":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:8879:3836":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:3233:28429":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:40986:3735":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:38662:9924":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:13526:12234":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:3579:1825":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:41157:14001":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:6913:9007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:44812:20747":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:12072:1652":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:23797:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:2341:642":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:44761:14089":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:5111:13655":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:21341:32838":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:11637:14290":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:22755:13745":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4480:7916":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:3801:14602":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:41589:10985":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:4724:7941":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12887:12170":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:3206:13496":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:5464:3829":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:13235:12200":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:1682:5591":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:5404:10014":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:15356:12688":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"11:2443:9812":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:15376:12694":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:790:10933":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:1537:14544":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:42477:4137":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:3245:34162":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:735:26793":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:4989:13627":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:6268:12979":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:10699:3734":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:10155:12012":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:5408:10015":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:6159:8586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:3397:9935":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:11764:12072":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:10251:12016":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:13899:12317":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:32883:4272":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"11:2352:9824":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:8276:3779":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7653:13302":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:7998:12998":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:40116:9934":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:2994:34030":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:2847:9796":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:563:4696":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:2675:3740":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"20:607:4701":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"11:434:35576":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"11:1025:9823":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"20:5576:8577":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:10828:35597":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"12:0:3552":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:2988:34026":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:3227:27726":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:7341:10941":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:7332:20835":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:1596:5584":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"11:2469:9813":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:3512:3737":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11051:14381":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"18:635:11896":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:46972:14153":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:4396:10951":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:6114:8583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:10651:246":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:12053:407":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"20:7143:8102":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:7366:12992":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:6691:8996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"11:1582:14537":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:22840:13759":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:4674:13020":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:12070:805":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:2032:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:45202:14591":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:4093:3762":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:5038:13032":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:8300:15519":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:2157:3873":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:46304:14128":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:7622:8099":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:2709:12969":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:11841:11033":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:7706:22549":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:1639:5587":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:14147:12352":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:513:14359":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"11:299:13489":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:41574:14014":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:1697:5593":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:6929:13229":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"10:0:3550":{"crate_id":10,"path":["adler"],"kind":"module"},"20:4160:7912":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:15418:12703":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:7453:29940":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"13:0:3546":{"crate_id":13,"path":["std_detect"],"kind":"module"},"18:651:11875":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:13497:12225":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:10886:3837":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"20:5564:8576":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:14503:12425":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:15445:12710":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:9220:27912":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:12433:12136":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:14111:12346":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:43314:14045":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13774:12298":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12659:14447":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:11743:12068":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:15426:12705":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:6535:3866":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:12251:14438":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"18:515:11878":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"14:7:14529":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:40866:13982":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:12054:1044":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:12792:11983":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:38552:9922":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:15092:12622":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:3170:3780":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:41206:14005":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:11382:14284":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"20:5499:8573":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:6788:35592":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:15616:12774":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:44734:14088":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:6718:4475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:16165:12913":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:5878:12937":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:44209:10025":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:3556:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:6394:13142":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:6927:9008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:10448:10990":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"15:394:21641":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:41073:13990":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:4764:7944":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"0:314:3321":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs14"],"kind":"variant"},"17:14489:12422":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:5044:7968":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:21312:32832":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:6062:13113":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"18:0:3556":{"crate_id":18,"path":["memchr"],"kind":"module"},"20:4689:7969":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:12851:12168":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:15957:12847":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"11:2369:14541":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:6215:14492":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:10014:3713":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:4890:3898":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:3185:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:10728:3736":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"6:6012:8575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4884:7959":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:15734:12804":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:16212:12924":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:9150:10010":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:40066:223":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:5928:8570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:5068:7970":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:1487:9811":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:13723:12286":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"20:518:4690":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"1:8908:14631":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:12563:10010":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:10002:3707":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:39959:9932":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:2553:12962":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:6665:3867":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"11:1917:13497":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:1585:9813":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:40136:13841":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:5974:8572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"20:6255:5540":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:15383:12695":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13424:12218":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:48393:14214":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12353:12129":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:12485:22734":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:574:4698":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:4572:10977":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4449:7913":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"11:883:9821":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:1795:641":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:1496:9814":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4783:7946":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:4527:9632":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:5152:7974":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:2504:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"20:6382:9004":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"20:4216:7918":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:12289:12114":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:6961:9010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"20:5617:8581":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:8511:3817":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:44053:14586":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:10820:9809":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:6612:3863":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:4302:14559":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:3049:9929":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:4968:13030":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:6100:8581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:5640:3833":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:2353:20857":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:6692:13197":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"20:4574:7955":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"11:832:9814":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:1887:9865":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:14372:12402":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:2487:13684":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:12106:3000":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:6059:8577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"20:4348:7934":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:266:10930":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"20:512:4689":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6331:13133":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:22975:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:11396:14614":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"20:6278:5513":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:11115:14386":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:12071:801":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:21586:13729":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:34281:9916":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:9087:26971":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:3416:32493":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:12278:14440":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"20:1503:5573":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:22388:15677":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:7869:13343":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4488:7917":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:698:11901":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:24025:243":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:4638:15550":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:10675:3730":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:4228:15540":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:6292:13129":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:6811:22544":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:14977:12598":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"20:6869:9378":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:31574:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"20:506:4688":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"6:1604:5585":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:10718:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"20:7131:8100":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:8109:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:40008:219":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"20:4550:7952":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"20:4148:7910":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13922:12321":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11647:12061":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:5681:3762":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"20:5509:8574":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"20:5780:8620":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:10641:3740":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"20:1684:5591":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:42418:9809":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:1939:9791":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:48645:14228":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:13538:12237":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:4560:15545":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:4182:14558":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:3702:10930":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:11107:14568":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:11583:14410":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:11093:10039":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4893:7960":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:6679:3868":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"11:1891:9812":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:13211:12199":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:6221:13120":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"9:481:21526":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:4491:13015":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:4381:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:6032:21146":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"20:1572:5581":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:8051:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:4535:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:3188:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:9054:14636":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"11:2498:21602":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"16:6965:14257":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:42435:4134":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:9445:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:12336:14073":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:15646:12781":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"20:1516:5575":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:4666:7936":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:437:11969":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:3906:14604":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6408:13144":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:14386:12403":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:2718:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:12318:12119":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:5776:3762":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:14235:12383":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:45029:14113":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:5867:8564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:9938:22606":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:5346:13035":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:7361:34127":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13146:12190":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:6362:12997":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:13015:12136":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"20:1666:5589":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:9074:14257":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:46274:14127":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:16235:12929":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:12374:10019":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:43831:14061":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:830:10936":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"0:332:1846":{"crate_id":0,"path":["cc","Build"],"kind":"struct"},"1:6499:3859":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"18:589:11886":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:48458:14217":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:40787:13975":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:15289:12666":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:1024:10930":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:5794:13068":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:1708:3762":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:7376:13285":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:33674:9910":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:12711:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:43378:3703":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:6040:11012":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:7679:3848":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:40798:10031":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:13325:12206":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:10431:10989":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:16093:12895":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"16:2529:12961":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:41123:13998":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:1914:13702":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:10211:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:15434:12706":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"0:393:135":{"crate_id":0,"path":["cc","Error"],"kind":"struct"},"6:6666:5512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"11:1160:9825":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:261:14357":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:7571:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:5309:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:47075:14155":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"20:4406:7938":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"20:7060:9540":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:10381:11023":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"18:613:35608":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:6837:9003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:12090:14572":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:10982:22620":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:44155:13727":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:14475:12421":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:5849:3857":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:2728:3789":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:4538:15544":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"18:754:11913":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:31205:32234":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:26425:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6169:8587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:42314:14038":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:5885:8565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:39875:9942":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"9:177:15232":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:9033:26967":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:621:9793":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:403:14358":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:8966:15557":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"11:1603:14538":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:11497:14399":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:8534:3818":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4603:7931":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:47153:14167":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:16198:12920":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"18:726:11908":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:4518:13016":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:46464:14135":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:2037:14362":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:12572:12047":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:10419:12021":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:46819:14149":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:7788:15500":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:7492:3683":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:2652:2352":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:3403:9937":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:41351:14009":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:14356:12401":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:7397:32616":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:5966:13711":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"20:4200:7916":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:1098:14360":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:15655:12783":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:12683:14449":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:22668:13733":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:6030:13108":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:3551:1828":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:489:4687":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"20:4084:7906":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:22319:3740":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:1517:9816":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:7609:13294":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:40749:32233":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:5515:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:16105:12897":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:4968:13612":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:11630:27953":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:2336:12947":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"9:391:21528":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:15456:12711":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13116:12186":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:3310:3797":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:11688:12064":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:4111:15532":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:40026:222":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:41063:13989":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:40910:3687":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:10950:11026":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:34144:9914":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:44084:14063":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:47229:14169":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:48247:14211":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:42174:14030":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:42352:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"20:1676:5590":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:11562:14604":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:15701:12797":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:9026:3877":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:8370:14241":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"20:4642:7964":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:14189:12373":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:11788:14415":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:15266:12663":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:46220:14125":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:10246:27098":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:2035:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:2436:3724":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"11:2140:9823":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:2419:12956":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:11606:14570":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:13568:12249":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7194:35594":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:6713:10930":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:4217:20718":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:11367:12031":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"11:856:9819":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"18:598:35609":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:22123:3740":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:11158:14277":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:3741:13005":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:14560:12433":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:14847:12548":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:22477:15668":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:6431:12985":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:40:10072":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:475:4685":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:32827:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:6071:8578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"20:61:4295":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"6:4578:7928":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:44823:14091":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:6366:227":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:40046:221":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:32914:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:4805:20776":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:5955:8548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:40840:13978":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:10012:3712":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:10075:14643":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:34085:9912":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:14311:12392":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:43631:14059":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:15078:12618":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:9130:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:596:4701":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:12808:12166":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:2074:14546":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:1862:9860":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:11016:14379":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4808:7949":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:4035:15526":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:4506:7919":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:7604:8097":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:4517:10976":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13064:12182":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:3494:1827":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:5645:13047":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:482:11002":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:15151:12634":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:5921:8569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:1507:5574":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:6804:9000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"20:5402:8565":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"10:44:13509":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:16138:12904":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:1287:9824":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:15023:12606":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:849:9809":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:46843:14150":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"20:6448:9009":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:6798:8999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:12074:1650":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:4987:33150":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12056:12106":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:14246:12385":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:9659:15241":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:2269:13683":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4914:7963":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:40821:20782":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:10229:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:13553:12243":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"11:673:3820":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:6941:22545":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"20:5529:8575":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:42495:233":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:7227:9585":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:7365:9378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:4220:15539":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:21573:15588":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:11413:14287":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:4267:3820":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:40721:10030":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:41135:13999":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"20:4208:7917":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:2835:12975":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:4932:13592":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"20:6875:9379":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:13367:11000":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:42898:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:41044:13986":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:40923:3689":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:11812:14418":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:7973:2255":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:3596:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:21514:15589":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:14436:12418":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"20:4154:7911":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:11093:3746":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:13753:12294":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:5580:12982":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:4708:11768":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:1710:5595":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:21971:3740":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:928:9818":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"20:6214:8997":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:7740:3884":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:7968:3751":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:4881:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:31601:4261":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"20:4175:7757":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:8362:14626":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:7823:9868":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:4745:7942":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:44343:10040":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:6893:10078":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:6086:8580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:7056:14974":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:13594:12254":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:10073:14644":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:7429:35590":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:4198:29802":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"0:55:2270":{"crate_id":0,"path":["cc","windows_registry","find"],"kind":"function"},"18:608:14350":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:640:14595":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:40833:13977":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:501:4689":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:3001:4268":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:4616:7933":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:3039:9927":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:4543:7924":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"20:5384:8564":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:0:3547":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:15678:12796":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:11153:14376":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:2234:14366":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:7351:13693":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"20:4567:7954":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:9452:3733":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:6646:13195":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"20:544:4692":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"18:507:11875":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:11407:14286":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:8071:14621":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:3080:9919":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:6724:13201":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:6895:13224":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:23609:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:41082:13992":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"11:1007:9822":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:5085:13638":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:12454:12139":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:14868:12557":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12647:14446":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:11773:12152":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:1809:665":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:22853:13760":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:5982:8573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:45250:13507":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:7913:3908":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:4878:7958":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:903:9813":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:7452:22547":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:689:11900":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:588:15494":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:8892:3837":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:15944:12199":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:10524:14372":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:42976:3854":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:11075:14110":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:6139:11007":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:5075:7971":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:2971:3886":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12584:14376":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:15992:12877":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"9:329:13546":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:7613:14660":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:10008:3715":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:1316:9825":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:46941:14152":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"20:6205:8996":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:7176:35595":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:8549:1829":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:5484:3830":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:11000:10038":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:10846:9868":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:6934:13666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:11166:12033":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:4065:10930":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"20:4705:7970":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:22722:13742":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:2284:21650":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"20:4255:7923":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:21356:32836":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:42466:4135":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:8283:3775":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:11443:12052":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:12056:1668":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:7383:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"11:1883:3820":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"20:4528:7949":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"20:5624:8582":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:2203:14363":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:2375:12954":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:12724:22610":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:13766:12296":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:14079:12342":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"11:364:10920":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:3768:14545":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:8295:14628":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:15273:12664":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:34627:9918":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:4283:13010":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:42487:3887":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:47465:14173":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4496:7918":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:11574:13499":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12422:12134":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:15608:12771":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:8348:15543":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:0:1986":{"crate_id":17,"path":["object"],"kind":"module"},"11:1896:9813":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:46797:14148":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:10446:3792":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:5117:13658":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:9807:22593":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:5123:13661":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:12969:12174":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:3753:3790":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:7118:4134":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:13363:12208":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:4937:13029":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:2438:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:3177:12944":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:45223:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:1578:9580":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:10155:3840":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"20:4722:7972":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"20:7173:9568":{"crate_id":20,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:2665:12967":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:3308:3796":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"0:316:3323":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs15"],"kind":"variant"},"14:220:13440":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:6445:13146":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:44257:10038":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"0:312:3319":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs12"],"kind":"variant"},"20:4712:7971":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:6631:9580":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11621:12058":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:7388:9380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:14529:12427":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:15521:12755":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:9061:14637":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:22334:15676":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:44655:14082":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:3386:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:6745:12987":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:3569:3738":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:4556:7926":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12863:12169":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:13606:12257":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:33967:9915":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:44979:14108":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"20:5631:8583":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11524:14401":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:2990:13680":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:32882:3906":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:1802:13701":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:12030:14425":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:1425:3820":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"20:5414:8567":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:8253:3776":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:21370:32841":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:10439:12022":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:46482:14136":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:3232:13497":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:40966:3701":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"20:4193:7915":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:8407:32776":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:4170:14557":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11877:12073":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:15313:12673":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:5759:13065":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:12260:14068":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:1558:5580":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"20:1523:5576":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:40895:32231":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:10944:11025":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:39986:217":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"11:787:9811":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"11:1923:13498":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:12929:12172":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:1506:9815":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:7924:3734":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:6889:9005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"20:4298:7928":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"20:4484:7944":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:12824:22611":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:10888:10019":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:504:3873":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:1734:5597":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"20:6427:9007":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:32795:13277":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:14575:12136":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:13375:12211":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:5170:3853":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:5151:14608":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:14463:12420":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"20:6412:9006":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:16079:12891":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:6099:14478":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:13738:12290":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"11:2383:3820":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:5708:14233":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:7302:10071":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:15214:12650":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:4399:13012":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:6870:10077":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:45210:14116":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:5485:12978":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"20:585:4698":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"11:2554:35571":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:6669:13196":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:7716:3740":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"15:327:15219":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:1501:5573":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:12055:457":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:11075:12031":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:430:35575":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:3313:218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:7152:13260":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:4119:15533":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"20:7102:8096":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"20:5596:8579":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"18:521:26795":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"11:2536:13500":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:2110:13707":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"20:6196:4562":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:40738:13970":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"14:214:13438":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:11595:12055":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:1674:5590":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:11501:14602":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:5140:7972":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:12629:20740":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:8391:4475":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:5696:13053":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:14855:12551":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:6320:13132":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:15039:12609":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:21565:3740":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"20:7114:8098":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:22747:13744":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:4787:13024":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:2509:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:11634:12060":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"20:4634:7963":{"crate_id":20,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"0:58:3331":{"crate_id":0,"path":["cc","windows_registry","find_vs_version"],"kind":"function"},"11:2151:9824":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:11605:12056":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:43353:13321":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:45161:234":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:14091:12343":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:13946:12322":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"14:160:14529":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:3999:15525":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:1832:1199":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:44669:14085":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"11:844:9818":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:4453:14561":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:9145:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"15:0:3554":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:0:887":{"crate_id":6,"path":["libc"],"kind":"module"},"1:893:9812":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:4902:7961":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"13:110:35581":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:47997:14208":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:31043:32264":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:8323:3260":{"crate_id":1,"path":["std","os","raw","c_int"],"kind":"type_alias"},"17:14260:12387":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"18:718:11905":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:10457:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:9181:14261":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:9467:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:44846:10043":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:4035:9812":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:10845:3779":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:23425:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:1528:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:10006:3714":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"20:486:4685":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"17:15822:12826":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:10887:35605":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:23985:13764":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:10737:26969":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"20:134:4362":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:6056:227":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:14912:12588":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"20:6232:4475":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:6908:13227":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:42818:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:3358:9813":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"20:1498:5572":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6849:14494":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:1072:9825":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:11799:14416":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11324:14391":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:6248:8619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:21976:15591":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:42426:9580":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:7343:4642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:765:26794":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:2749:12971":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:7594:14556":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:10720:35598":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"9:446:21527":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:1975:712":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"20:5486:8571":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:44963:14104":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:13272:12203":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:7331:9812":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:5959:21649":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:32816:13831":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:11056:3836":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"20:6172:4604":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:9135:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:48515:14222":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:44389:10034":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:9886:22604":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:16187:12919":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:14933:12593":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:39911:9939":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:8022:22550":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:670:14355":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:23891:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:4686:7938":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8951:2358":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:1574:3820":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:7802:15501":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:33302:9908":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"20:5445:8570":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:22791:32253":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:2712:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:4776:7945":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:8263:3777":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"20:4509:7947":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"11:2548:13502":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:42114:14021":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:6700:8997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:2819:12974":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:12478:12141":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:11242:14390":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:2167:13675":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:6741:5540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:3211:34158":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:12342:12125":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:4:1125":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:44547:10030":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:40993:13725":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:4947:13597":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:6128:8585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:4847:7954":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:13187:33064":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"9:237:3817":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:7556:9540":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:48469:14218":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:4448:14560":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11256:12037":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:9002:3858":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:7324:13280":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:4444:228":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:4440:7912":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:4975:15553":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:4867:3903":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:11853:14423":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:14038:12336":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:9916:22605":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:13214:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:13406:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:7653:9813":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:46427:14133":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:41607:14017":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:1546:5579":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:3017:9911":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:2457:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:40956:3702":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:4523:7921":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:6231:11011":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:5630:13046":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:4738:3897":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"20:5427:8568":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:3266:3794":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:16249:12930":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:2266:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"20:4520:7948":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:533:4692":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:1478:9810":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:44975:14107":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:11368:14283":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:10670:14267":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:1570:5581":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"20:5739:8618":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8210:3802":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:12557:12031":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:39955:9930":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:588:4700":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:7270:13081":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:22683:13734":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6188:13118":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11467:12054":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:46721:14145":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:43369:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:13814:12305":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"20:6351:9003":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:15778:12819":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"20:5765:8619":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:6813:9001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:16050:12203":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:11228:14657":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:12583:10009":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"20:494:4686":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"20:4396:7937":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:6152:13115":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:46773:14147":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:42779:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:9799:3704":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:31017:13766":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:12076:14428":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:531:11880":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:6376:13134":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:10927:14565":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:9457:11022":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"5:3199:3820":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"20:4386:7936":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:5298:22536":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"9:0:3549":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:6549:10930":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:0:3555":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:6713:240":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:6682:4562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:15390:12696":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:44513:10020":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:5450:1831":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:1496:5572":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:3468:9941":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"20:4734:7974":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:7914:13346":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:8233:3739":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:6495:2334":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:10746:26974":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:9107:14260":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:909:9814":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:8336:14239":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:5146:7973":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:16069:12890":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:38607:9923":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:6011:3853":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:44493:3775":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:8981:15558":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:6903:10079":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:7619:3800":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:11644:14290":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:23245:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:2268:3716":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:41580:3801":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:15281:12665":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:44967:14105":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:15176:12642":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:8066:14620":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"20:5637:8584":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:15400:12699":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:42551:9580":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"20:4544:7951":{"crate_id":20,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:10869:26973":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"20:5376:8563":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:1537:5578":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:11043:3835":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13999:12331":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"20:500:4687":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"2:22448:15667":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:1456:9580":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13173:12197":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:1703:5594":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:4800:7948":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:12107:12047":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:7942:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"20:4534:7950":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:6045:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:13252:12202":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:12530:14444":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:2584:1826":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:9995:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:11128:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"0:400:1906":{"crate_id":0,"path":["cc","Tool"],"kind":"struct"},"17:3264:14367":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:2689:12968":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:34800:9920":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:12074:20920":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:1596:13496":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:7982:14619":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:12075:1651":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:7633:8100":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:48309:14212":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:9020:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"20:591:4699":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"1:5894:3865":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:2859:12976":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:14723:12445":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:4236:15541":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"20:1560:5580":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:4769:15555":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:1521:5576":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:3473:14368":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:4566:7927":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:47199:14168":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:945:9820":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:1207:14361":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:7990:3788":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:41599:14015":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"20:7120:8099":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:4461:7914":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:4649:13019":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4998:13633":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:7536:3684":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"20:1720:5596":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:6370:15679":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"3:0:484":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:13986:12330":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:10010:213":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:15197:12647":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6759:12988":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:3856:13008":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:6590:13716":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"20:4430:7940":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12150:12112":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:16269:12217":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:16259:12212":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"11:102:13488":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:149:10915":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"9:501:13568":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:12038:26962":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:30979:10067":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:44035:13721":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:5713:13057":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:2959:4266":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:12371:12172":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:11510:14400":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:2617:12965":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:951:9821":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"20:4169:7913":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:44522:10018":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:23515:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"0:57:2696":{"crate_id":0,"path":["cc","windows_registry","find_tool"],"kind":"function"},"2:46130:14121":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:43592:3755":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:5278:13034":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:42410:3820":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:14212:12382":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:7684:13306":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:7521:32231":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:12077:857":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:5500:3831":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:44443:10036":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:45262:14120":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"20:1736:5597":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:11639:14571":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:39971:220":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:44987:14110":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:4628:7934":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:7672:11020":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"11:2403:9809":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:4628:9634":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:7507:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:2242:1823":{"crate_id":1,"path":["std","fs"],"kind":"module"},"17:11825:14420":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:11318:11027":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:12572:10012":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:4841:7953":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:8616:3822":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:7679:13671":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:6610:13183":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:6116:14481":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:2435:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:16121:12902":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:7598:8096":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:10170:12013":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:41167:14002":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:42280:14037":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:12213:14435":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:23155:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:7962:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:10573:35603":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:5865:13077":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:7565:13292":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:8354:14629":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:21512:3740":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:46344:14130":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:2351:20856":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:40806:10030":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:3230:28426":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:4702:13021":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:5025:3803":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:10443:3796":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"6:6819:9002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"20:4604:7959":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4870:7957":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7951:13352":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:2459:12958":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:5846:14456":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:9039:4136":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5897:8567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12900:12171":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:42332:14039":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:4676:7937":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:3597:14369":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:7294:13279":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10068:22592":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:6134:14489":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:22348:20856":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:1968:9792":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:11038:14567":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"20:7183:9569":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:12066:701":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"7:78:21521":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:15635:12780":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:5969:8571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:7692:9568":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:3545:3441":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"11:837:9817":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:8360:3823":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"14:165:21612":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:46575:14141":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:10399:3778":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:43341:32280":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:6966:11015":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"20:4065:7904":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:46150:14122":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:43074:3706":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:6462:22542":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:31011:10068":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:6136:3762":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:4984:15554":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"18:680:11897":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:5541:13037":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:10710:14375":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"20:6847:4642":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:9198:14640":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"2:33908:3669":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"3:234:233":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:4375:7907":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:113:26785":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:44833:14095":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:4792:725":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:13165:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"20:1712:5595":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:9140:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:914:9815":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:40309:30236":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"20:4304:7929":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:7639:8101":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:9970:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:1446:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:42560:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:10665:14265":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"16:2883:21677":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:10688:14271":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:10877:14377":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:10092:22609":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:15720:12802":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:5499:12981":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:3739:15521":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:5120:14608":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:48185:14210":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"20:6892:9380":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:10259:3754":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"20:5645:8585":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:6263:8620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:21567:15585":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:10933:11024":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:8076:1879":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:542:4693":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:32826:3905":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:41558:14013":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:3260:13002":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:12597:12147":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:12062:1633":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:3406:13003":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"20:1699:5593":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"20:1634:5586":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:5023:7965":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:212:10928":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:2509:12960":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"20:6466:9010":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:7419:9580":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:2434:3723":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:7900:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:9951:233":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:10254:3752":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:13844:12308":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:40086:3673":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:8363:15508":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:4922:13586":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:8270:3778":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:4813:13025":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:12022:15243":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:22699:13738":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:42662:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:6263:14611":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:12080:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:12073:1649":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"18:538:11883":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"9:423:21529":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:41022:3776":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:11541:14603":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:5980:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:45151:226":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"20:5588:8578":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:30749:15522":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:7995:3907":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:7099:11016":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:5377:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:12089:12109":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"20:4598:7958":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:5825:13074":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:2995:21679":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:2249:34129":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"18:706:10012":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:4333:13708":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:11567:14405":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:12464:22733":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"18:623:35606":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:6773:13205":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:7998:3790":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:6047:8576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:12543:14445":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"5:3240:13495":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"20:4286:7927":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:22001:13730":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:1990:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:6136:11680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:119:4361":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:46675:14144":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:5701:11012":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"20:580:4697":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"1:922:9817":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:12516:14442":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:41013:14578":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:16223:12926":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:43416:3705":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:4434:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:11354:14395":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:8289:14626":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:3665:9812":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:11537:14402":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"11:0:3551":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:4966:425":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:4364:7906":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:1923:13704":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"20:5745:7819":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:1826:9851":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:7548:3685":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:12621:12148":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"18:643:11875":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"20:1641:5587":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6599:13182":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:42857:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:48107:14209":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:13399:12215":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:14325:12395":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:536:12935":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:2806:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:4733:13022":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:25:665":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:44983:14109":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"18:659:14351":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:8605:3821":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:15463:12713":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:8012:13354":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:10284:12017":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"20:130:4361":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"16:5316:12012":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:2049:3790":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:32802:14577":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:1607:13498":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:15596:12768":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:32791:14576":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:11110:14276":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:12388:12131":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:8387:14630":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:8599:3820":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:4907:13028":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:10185:12014":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:9163:3746":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:7411:9580":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:7904:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:7306:14516":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:918:9816":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:4809:3899":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"11:2569:3679":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:5616:13043":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:11618:14289":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:43576:3753":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:7414:13286":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:5891:8566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4401:7909":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:41365:14010":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10350:12019":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:15624:12775":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:1131:34028":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:7319:13692":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:62:4295":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:3266:13498":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:12399:12132":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:12671:14448":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:44798:14090":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12695:14450":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:5992:8574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:7867:20833":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:42292:14239":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:6868:9004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:41176:14003":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:1440:9809":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:12065:699":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:0:539":{"crate_id":2,"path":["core"],"kind":"module"},"17:14752:12465":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"11:1051:9824":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:44215:10024":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6282:13128":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:2489:12959":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:22125:15587":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:13024:22613":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:36676:9921":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:4351:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:11227:14389":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:43601:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:14994:12600":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:9472:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:10854:1832":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:14545:12429":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:44198:10028":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:42478:9804":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:15748:12811":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:3376:9933":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:8369:20832":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:7863:20834":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:4647:7935":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:15769:12817":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"20:538:4691":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:2718:13687":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:15836:12829":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:5919:22540":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:6882:13221":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"20:6318:9000":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"20:4323:7931":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:46375:14131":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:39296:9926":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:10018:22589":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:6120:8584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4529:7922":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:44407:10035":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:11841:14422":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:1566:21607":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"11:1066:21606":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:7619:22548":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12707:14451":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:13356:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:8055:13277":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:12768:22590":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:2275:3439":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:3830:13007":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12201:14434":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:14587:12436":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:5006:13031":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11405:14397":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:6898:9006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:5569:1832":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:12127:12111":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:15:1897":{"crate_id":2,"path":["core","write"],"kind":"macro"},"13:226:13487":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11730:12067":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"20:4418:7939":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:11288:10793":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:48530:14223":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"20:4236:7920":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5829:8519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:10463:10995":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:2966:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:4549:7925":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:47649:14175":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:40847:20783":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:10671:35599":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"20:6180:5512":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:15168:12639":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:42092:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:22833:13757":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"20:1548:5579":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:41565:2334":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:45148:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"18:481:11873":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10759:12047":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:4005:15524":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:5910:8568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:1591:5583":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:48583:14226":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"20:1885:5736":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10915:35604":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:32912:4271":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:15410:12702":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:48431:14215":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"20:4367:7935":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:4197:3762":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:13959:12325":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"20:4613:7960":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:7610:8098":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:13855:12309":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:44686:14086":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:6201:12977":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"20:4458:3897":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"20:1539:5578":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:14131:12347":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:40123:13840":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:5897:22539":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:4428:7910":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:23065:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"11:774:9810":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:4610:7932":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:307:1598":{"crate_id":1,"path":["std","thread"],"kind":"module"},"17:11419:12047":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"8:0:3548":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:7444:14523":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:42543:9809":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"11:2231:13499":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:44110:13725":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"20:4660:7966":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:5331:12013":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:11392:14396":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:12443:12138":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"20:4330:7932":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:43081:3707":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:41192:11894":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:12518:3351":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:6244:22541":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"18:491:11874":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:5066:863":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:2271:3717":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:7917:3730":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:5694:227":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:34026:9913":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"20:6225:8998":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"18:96:26784":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:12058:1162":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:44063:13724":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:5555:14454":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"20:4269:7925":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:6781:5516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:15760:12813":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"20:4243:7921":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:44951:14101":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:21695:13729":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:580:4699":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:10044:22608":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"14:202:20748":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:47389:14171":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:7760:3882":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11089:14384":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:9066:14638":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:533:3878":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:48606:14227":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:42535:3820":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:7063:10972":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:44165:14590":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:4704:11764":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:5033:7967":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:3600:3442":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:7355:13284":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"20:6441:9008":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:7934:3731":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:48489:14220":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"20:5603:8580":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"20:4681:7968":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"20:5653:11680":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:21324:32832":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:7386:12993":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"20:4315:7930":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2546:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"20:599:4700":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"1:4107:15531":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"20:5438:8569":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11313:12044":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:13387:12212":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:4977:13618":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:2728:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:10769:35601":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:4860:7956":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:10338:3834":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:43088:3714":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:10365:10987":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:8855:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"20:5408:8566":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:10818:14376":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:3804:14603":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:4811:3261":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:4063:15529":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:15190:12645":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:44044:13722":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:4057:15528":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"20:4121:7909":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:43395:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:11189:12035":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:7560:10956":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"11:1887:9580":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"11:2542:13501":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:14968:12594":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"20:1652:5588":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:281:3373":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:1686:10930":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:42701:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:44461:10037":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:6943:9009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13292:12204":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4698:7939":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4455:7757":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:47311:14170":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:7466:3679":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:1664:5589":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:10054:9860":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:8939:14255":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:42401:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"20:4181:7914":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:4236:20759":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:12189:14433":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:3044:9928":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:6555:13170":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:6107:8582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:6230:13121":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:10486:3882":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:5726:13058":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:7616:13669":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"11:1107:14535":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:48568:14225":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12993:22612":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:11042:14380":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:48478:14219":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:7735:2348":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:2917:21678":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"11:742:9816":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:7209:29803":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:123:4362":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"11:687:9809":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:7477:3680":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:40764:13973":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"15:306:21632":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:12079:1258":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:5015:7964":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:13412:12217":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:5130:7966":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13797:12302":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:4813:3902":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:2418:3719":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:3157:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:7523:12995":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:6077:14463":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:44531:10017":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:10612:14373":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:21339:32843":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:22806:32285":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:31032:3703":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:44955:14102":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:3463:3762":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:12320:14072":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:6658:4604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:41091:13993":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"9:52:15222":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:2641:12966":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:44640:14076":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:7717:3894":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:46894:14151":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:40727:13969":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:44185:10032":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:12043:14426":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:5521:12983":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:5004:13636":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:42476:4138":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:5822:3856":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13509:12226":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:11341:14394":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:2446:3482":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:46529:14137":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:43623:14058":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:2977:11006":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:44136:13726":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:1824:9850":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:42130:14023":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:15324:12677":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:38717:9925":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:7595:12984":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:14177:12371":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11102:14385":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11674:12063":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:2196:13677":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13473:12221":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:4545:13017":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:9737:22587":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:4821:14370":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:33488:9907":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:555:4695":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:6422:10917":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:4376:9631":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"20:566:4695":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"17:10905:14378":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:42146:15520":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:6395:13712":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12264:14439":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11557:14404":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:11269:22638":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:10440:3794":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:6254:13125":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:7537:12996":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:9858:22603":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:6579:22543":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:22482:15666":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:4355:13011":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:5033:4126":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:10004:3706":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"18:581:4261":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:12225:14436":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:48449:14216":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11915:22708":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:4227:3762":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:1271:9822":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:15222:12652":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:11478:11029":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:11121:14569":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:44538:10029":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:43816:14060":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:44123:14588":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:880:9811":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:11067:26960":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:8866:3835":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:46326:14129":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:5815:3855":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:7984:14528":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:23703:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:8201:3800":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:3435:3801":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:2492:1824":{"crate_id":1,"path":["std","io"],"kind":"module"},"20:1509:5574":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:11661:12062":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6803:14493":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:3010:11916":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:2319:12945":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:2355:12953":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:46605:14142":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:15126:12625":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:7602:12009":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:2540:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:2769:12972":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:3560:27156":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"20:4336:7933":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:4581:9633":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:14599:12443":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:44225:3778":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:1691:5592":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:15138:12628":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:6711:8998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"14:31:14529":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:3139:9938":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:3191:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:13674:12261":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"20:1693:5592":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:14284:12390":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"20:5458:8547":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:3609:3820":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:4601:3885":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:11702:12065":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:5197:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:7657:8103":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"20:574:4696":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"1:8900:3820":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"20:4249:7922":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:2729:12970":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:46196:14124":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"20:4226:7919":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"20:6333:9002":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4388:7908":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:5669:10077":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:41551:14012":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"0:0:2692":{"crate_id":0,"path":["cc"],"kind":"module"},"6:7651:13670":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:6858:13220":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:5941:8547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:10954:22619":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"9:356:21542":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:15249:12656":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:44145:14589":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:4194:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:12297:14071":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:6228:7819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"20:1593:5583":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"20:4503:7946":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:12494:12142":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:7038:10969":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"20:7149:8103":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:44239:3779":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"11:1676:10924":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:2063:14545":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"20:5472:8548":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:2715:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:3027:9909":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"7:31:21514":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:8849:3834":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4908:7962":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:45169:214":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"20:6295:5516":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4789:7947":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"20:5491:8572":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:41341:3777":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:4772:15544":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:3391:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:15814:12823":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:44307:10041":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"11:2304:9822":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:836:3820":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:7932:13349":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:6318:11012":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:14341:12397":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"20:1606:5585":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11547:11962":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:4871:13027":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"20:559:4694":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"6:6222:8618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:13239:14574":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:22562:13731":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:4452:14607":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:6994:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:3993:13009":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:8463:3816":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:13485:12224":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:6426:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:22733:32230":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:14414:12407":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:22346:32443":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:22771:32221":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:10218:12015":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:1632:5586":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:4107:9809":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:44959:14103":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"20:644:4729":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:15333:12680":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:6079:8579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:3799:9580":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:11335:14281":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:2987:2972":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:6348:12980":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:14986:12599":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:6215:11000":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:41035:13984":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:21684:3740":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:2688:3781":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:12006:14663":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:1650:5588":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:22864:15523":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"11:2423:9580":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:7889:13344":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:7375:9580":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:7971:14525":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:47435:14172":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"11:710:9815":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:4249:15542":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:12067:806":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:15342:12681":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:7333:20836":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:43095:3715":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:14402:12406":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:14012:12333":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:3622:9809":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:7653:11018":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:10000:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:5826:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"20:5347:8519":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:15473:12718":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:867:9810":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:2175:22666":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:14876:12558":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:483:4686":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"20:7160:8104":{"crate_id":20,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:43324:3703":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:8916:9580":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4814:7950":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:11680:10021":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:4300:14605":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:9949:14034":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:12558:10016":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:46751:14146":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:46627:14143":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13187:12198":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:2789:12973":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11214:14388":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:41105:13996":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"15:288:21631":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"11:1903:13495":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"0:311:3317":{"crate_id":0,"path":["cc","windows_registry","VsVers"],"kind":"enum"},"1:12027:15502":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:15058:12610":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"11:700:9580":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:1063:9824":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:46405:14132":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"11:811:9813":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:256:14356":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:363:3893":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:14788:12496":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:4462:13014":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:634:14542":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:645:15497":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:7391:13694":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:46995:14154":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:7371:9379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"11:800:9812":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11493:14398":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:16176:12918":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:22211:15671":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:15569:12756":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:1900:20866":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12238:14437":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"0:320:3327":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs17"],"kind":"variant"},"2:23335:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:12949:12119":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:7311:9580":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10137:22586":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:1576:5582":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:5009:7904":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:15301:12672":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:14298:12391":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:16032:12202":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"5:4459:10951":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:3431:9940":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:44361:10039":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:10646:14652":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"0:318:3325":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs16"],"kind":"variant"},"17:13832:12306":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13308:12205":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"11:1910:13496":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13455:12220":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:14051:12338":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:3170:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:6880:15583":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:9284:9864":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:12408:12133":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:47499:14174":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:9952:1828":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:11865:14424":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:32809:9632":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"20:1705:5594":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:6584:13717":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:15799:12822":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:7645:8102":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:0:1540":{"crate_id":1,"path":["std"],"kind":"module"},"20:1530:5577":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:2420:3720":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:22256:15672":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:7491:13290":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:7449:20828":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:43835:14062":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:7225:22546":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:14516:12426":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13089:12183":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:7103:35593":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:637:14593":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:4473:7915":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:7912:3733":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:42258:32282":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:6737:13203":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"11:2124:9822":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:4380:14606":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:495:4688":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:13461:10070":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"0:52:1841":{"crate_id":0,"path":["cc","windows_registry"],"kind":"module"},"16:4844:13026":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:3347:3792":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"20:1598:5584":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:48355:14213":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:1115:34204":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:7508:3686":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"20:6312:8999":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"20:4465:7942":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:41216:14006":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"20:4561:7953":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"20:6403:9005":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:1790:9813":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:9755:22585":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:43984:14585":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"20:4276:7926":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:15102:12623":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:5238:13033":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:15582:12762":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:12175:14429":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:1514:5575":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:4670:7967":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:7335:12991":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:5896:9812":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:45005:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:11293:22639":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:43584:14054":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:12059:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:10965:14566":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:2439:12957":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"20:4444:7941":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:9654:32773":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:44864:10044":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"11:396:10922":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:13046:12179":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:42937:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"20:4263:7924":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"11:328:13492":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:548:4694":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4854:7955":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"11:1142:14536":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:40777:13974":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:40879:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:11128:12002":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"11:2562:13504":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11755:12071":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:12362:12130":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:3181:2397":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4755:7943":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"20:4628:7962":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:939:9819":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:5020:3762":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:7668:8104":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:1803:1822":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"20:5686:8587":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:7400:12994":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:4761:13023":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:3349:3793":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:4706:11766":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:4939:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:2304:21676":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:44971:14106":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10661:14374":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:15931:12198":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:12061:1548":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:5852:13709":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:2666:10990":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:563:11885":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:4572:13018":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:1302:9823":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:7808:9867":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:2676:20787":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:22615:13732":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:12068:803":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:3012:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:13785:12301":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:507:4690":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:1590:13495":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:7345:13283":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:14066:12341":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:8446:4130":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:527:4691":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:14449:12419":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:12508:12145":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:557:1833":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:10219:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:41144:14000":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:4097:15530":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:5662:22538":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13972:12079":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:2573:12963":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:2979:12999":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:46242:14126":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:4049:15527":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:7702:9569":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:1054:9823":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"7:0:1697":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:4694:15529":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:9015:14632":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:12060:1515":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:3773:13006":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:8097:13361":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:1913:5736":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:2961:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:46445:14134":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:13877:12316":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:41114:13997":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:44619:20746":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:8343:14240":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:859:9580":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"20:7137:8101":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:12578:10011":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:21302:4261":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:903:3820":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"11:123:10918":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"14:40:12200":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:351:35572":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"10:36:13508":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:1388:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:13581:12253":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:11063:14382":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:32755:3838":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"20:4590:7957":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:8922:14254":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:3392:3785":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:12328:12121":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:5052:7969":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"20:4095:7907":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"20:4580:7956":{"crate_id":20,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:10796:3820":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"14:187:21619":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:2724:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:42623:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:12300:22732":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:5360:10930":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:10709:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:11715:12066":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:3012:3668":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:1602:13497":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:11341:3842":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:21358:32844":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:4710:7940":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:4595:7930":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"20:0:887":{"crate_id":20,"path":["libc"],"kind":"module"},"5:6503:9812":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:45040:20958":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"20:4650:7965":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:7551:12986":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:9671:22588":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:1528:5577":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:11898:12075":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10622:35602":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:32825:244":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:44289:10042":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:15010:12601":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"20:6327:9001":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:14271:12388":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:22402:20856":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:3010:233":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"5:2998:34029":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:31100:32256":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:3833:9813":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:4433:13013":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:886:10938":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:6595:10983":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:22295:15673":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:12078:1707":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:9781:22602":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:7584:13698":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:654:4729":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:5601:22537":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:43613:3817":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:4516:7920":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:357:3892":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:15116:12624":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:22:739":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:7669:10073":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"20:4496:7945":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:5104:13652":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:11026:22621":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:13437:12219":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4830:7952":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:12789:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:11079:10040":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:3008:4270":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:1040:9822":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"20:1578:5582":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:7907:3732":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:597:12009":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:44503:10033":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:22433:3740":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:41053:13987":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:13344:12207":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:5859:8563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:1885:9864":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"20:4475:7943":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:6546:13169":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:3709:13004":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:8413:3901":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:1581:9812":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"11:875:9820":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"11:1087:35580":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:47855:14207":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:16151:12910":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:42740:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"20:4622:7961":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:4955:13602":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"20:4728:7973":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:6141:35591":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:15368:12691":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:8221:3736":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:40814:10029":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"14:0:3553":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:40884:3688":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:2399:12955":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:48553:14224":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:15206:12648":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:6609:3862":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"18:573:11875":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:10997:12028":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:8589:3819":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:46174:14123":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:4426:3762":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:4824:7951":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:12069:804":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"20:553:4693":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"2:34454:9917":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:48504:14221":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:1151:34202":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:21693:15586":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:42584:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11142:12047":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:44073:14587":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"20:7108:8097":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:5637:3075":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:2795:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:3220:9931":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}