{"root":"0:0:3302","crate_version":"1.0.97","includes_private":false,"index":{"b:2:2990-0:519:2475":{"id":"b:2:2990-0:519:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:231":{"id":"0:231","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[381,0],"end":[3863,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:232:1178","0:233:933","0:235:2566","0:237:2571","0:240:2575","0:242:2470","0:243:2584","0:245:2590","0:246:2597","0:248:2615","0:250:2659","0:251:2671","0:252:2500","0:253:2501","0:254:2484","0:255:791","0:257:2485","0:259:2693","0:260:2486","0:261:2288","0:262:2489","0:263:1714","0:264:2502","0:265:2450","0:266:2503","0:267:2487","0:271:2488","0:275:1748","0:276:876","0:277:2491","0:278:2788","0:279:606","0:280:2492","0:281:2490","0:283:504","0:285:2493","0:287:2494","0:289:2626","0:290:2818","0:291:2823","0:292:2829","0:293:1306","0:294:2498","0:295:2507","0:296:2499","0:300:2852","0:305:2926","0:306:2932","0:307:2933","0:312:2997","0:314:3007","0:315:2888","0:316:2629","0:347:3383","0:348:3384","0:352:3393","0:353:3394"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13361:4045":{"id":"2:13361:4045","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:31869":{"id":"2:13282:31869","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:248:2615":{"id":"0:248:2615","crate_id":0,"name":"is_flag_supported","span":{"filename":"src/lib.rs","begin":[603,4],"end":[605,5]},"visibility":"public","docs":"Run the compiler to test if it accepts the given flag.\n\nFor a convenience method for setting flags conditionally,\nsee `flag_if_supported()`.\n\nIt may return error if it's unable to run the compiler with a test file\n(e.g. the compiler is missing or a write to the `out_dir` failed).\n\nNote: Once computed, the result of this call is stored in the\n`known_flag_support` field. If `is_flag_supported(flag)`\nis called again, the result will be read from the hash table.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}},{"type":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:2788":{"id":"0:278:2788","crate_id":0,"name":"opt_level_str","span":{"filename":"src/lib.rs","begin":[1079,4],"end":[1082,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:738-0:586:137":{"id":"b:5:738-0:586:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:740:2988","5:741:2861","5:742:5208"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32305:237-0:586:137":{"id":"a:2:32305:237-0:586:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13280:31868":{"id":"2:13280:31868","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42075:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13268:36156":{"id":"2:13268:36156","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42168:4887-0:586:137":{"id":"a:2:42168:4887-0:586:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:4887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:265:2450":{"id":"0:265:2450","crate_id":0,"name":"warnings","span":{"filename":"src/lib.rs","begin":[925,4],"end":[929,5]},"visibility":"public","docs":"Set warnings flags.\n\nAdds some flags:\n- \"-Wall\" for MSVC.\n- \"-Wall\", \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:3304":{"id":"0:38:3304","crate_id":0,"name":"find_tool","span":{"filename":"src/windows/find_tools.rs","begin":[58,0],"end":[91,1]},"visibility":"public","docs":"Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:741:2861":{"id":"5:741:2861","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:250:2659":{"id":"0:250:2659","crate_id":0,"name":"flag_if_supported","span":{"filename":"src/lib.rs","begin":[702,4],"end":[705,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler if it supports it\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag_if_supported(\"-Wlogical-op\") // only supported by GCC\n    .flag_if_supported(\"-Wunreachable-code\") // only supported by clang\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:36868":{"id":"5:5617:36868","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2469","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:2469","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3209:247-0:477:2464":{"id":"a:2:3209:247-0:477:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13321:4175":{"id":"2:13321:4175","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4971"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12770:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:740:2988":{"id":"5:740:2988","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:2989:2532":{"id":"2:2989:2532","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2963:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:227:802":{"id":"0:227:802","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[358,4],"end":[360,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290:2818":{"id":"0:290:2818","crate_id":0,"name":"cargo_warnings","span":{"filename":"src/lib.rs","begin":[1166,4],"end":[1169,5]},"visibility":"public","docs":"Define whether compile warnings should be emitted for cargo. Defaults to\n`true`.\n\nIf disabled, compiler messages will not be printed.\nIssues unrelated to the compilation will always produce cargo warnings regardless of this setting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314:3007":{"id":"0:314:3007","crate_id":0,"name":"expand","span":{"filename":"src/lib.rs","begin":[1722,4],"end":[1727,5]},"visibility":"public","docs":"Run the compiler, returning the macro-expanded version of the input files.\n\nThis is only relevant for C and C++ files.\n\n# Panics\nPanics if more than one file is present in the config, or if compiler\npath has an invalid file name.\n\n# Example\n```no_run\nlet out = cc::Build::new().file(\"src/foo.c\").expand();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:7059:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:347:3383":{"id":"0:347:3383","crate_id":0,"name":"get_archiver","span":{"filename":"src/lib.rs","begin":[3134,4],"end":[3139,5]},"visibility":"public","docs":"Get the archiver (ar) that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5681:5711"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5648:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252:2500":{"id":"0:252:2500","crate_id":0,"name":"shared_flag","span":{"filename":"src/lib.rs","begin":[749,4],"end":[752,5]},"visibility":"public","docs":"Set the `-shared` flag.\n\nWhen enabled, the compiler will produce a shared object which can\nthen be linked with other objects to form an executable.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["shared_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/tool.rs","begin":[40,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:171:2638","0:173:1300","0:174:331","0:175:696","0:176:3421","0:177:4277","0:178:4254","0:179:2634","0:181:2646"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13294:8416":{"id":"2:13294:8416","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12341:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43941:5731","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2990-0:477:2464":{"id":"b:2:2990-0:477:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:237:2571":{"id":"0:237:2571","crate_id":0,"name":"define","span":{"filename":"src/lib.rs","begin":[493,4],"end":[497,5]},"visibility":"public","docs":"Specify a `-D` variable with an optional value.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .define(\"FOO\", \"BAR\")\n    .define(\"BAZ\", None)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["val",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13380:4126":{"id":"2:13380:4126","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4971"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13388:28729":{"id":"2:13388:28729","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:456:3880":{"id":"0:456:3880","crate_id":0,"name":"Vs17","span":{"filename":"src/windows/find_tools.rs","begin":[106,4],"end":[106,8]},"visibility":"default","docs":"Visual Studio 17 (2022)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2716-0:477:2464":{"id":"b:2:2716-0:477:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:28242"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:266:2503":{"id":"0:266:2503","crate_id":0,"name":"extra_warnings","span":{"filename":"src/lib.rs","begin":[948,4],"end":[951,5]},"visibility":"public","docs":"Set extra warnings flags.\n\nAdds some flags:\n- nothing for MSVC.\n- \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\n// Disables -Wextra, -Wall remains enabled:\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .extra_warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:31896":{"id":"2:13291:31896","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13290:31895"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:175:696":{"id":"0:175:696","crate_id":0,"name":"env","span":{"filename":"src/tool.rs","begin":[318,4],"end":[320,5]},"visibility":"public","docs":"Returns the set of environment variables needed for this compiler to\noperate.\n\nThis is typically only used for MSVC compilers currently.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"tuple":[{"resolved_path":{"name":"OsString","id":"1:2067:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"OsString","id":"1:2067:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13386:3213":{"id":"2:13386:3213","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12916:136","`FromStr`":"2:12915:3913"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12915:3913","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12915:3913","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13265":{"id":"2:13265","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13266:997","2:13267:2654","2:13268:36156","2:13269:36157","2:13271:36158","2:13274:4195","2:13275:36159","2:13276:336","2:13277:31871","2:13278:2623","2:13280:31868","2:13282:31869","2:13284:31870","2:13286:36160","2:13287:36161","2:13288:3343","2:13289:31892","2:13290:31895","2:13291:31896","2:13293:4253","2:13294:8416","2:13295:5416","2:13296:3371","2:13297:3600","2:13298:28795","2:13299:36162","2:13300:34318","2:13301:2640","2:13304:2858","2:13307:2859","2:13310:2868","2:13314:3344","2:13318:3188","2:13321:4175","2:13324:31899","2:13327:36163","2:13330:36164","2:13333:31901","2:13336:31903","2:13339:3087","2:13342:31905","2:13345:4281","2:13348:36165","2:13351:36166","2:13354:36167","2:13357:3366","2:13359:36168","2:13361:4045","2:13363:36169","2:13364:36170","2:13365:36171","2:13368:3346","2:13371:3708","2:13374:3420","2:13377:3424","2:13380:4126","2:13383:36172","2:13386:3213","2:13388:28729","2:13389:33066","2:13390:28733","2:13391:28734","2:13392:28735","2:13393:33069","2:13394:33070","2:13395:33071","2:13396:36173","2:13398:11341","2:13399:36174"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13377:3424":{"id":"2:13377:3424","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4971"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:5719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13297:3600":{"id":"2:13297:3600","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13296:3371"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44248:5725","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294:2498":{"id":"0:294:2498","crate_id":0,"name":"use_plt","span":{"filename":"src/lib.rs","begin":[1210,4],"end":[1213,5]},"visibility":"public","docs":"Configures whether the Procedure Linkage Table is used for indirect\ncalls into shared libraries.\n\nThe PLT is used to provide features like lazy binding, but introduces\na small performance loss due to extra pointer indirection. Setting\n`use_plt` to `false` can provide a small performance increase.\n\nNote that skipping the PLT requires a recent version of GCC/Clang.\n\nThis only applies to ELF targets. It has no effect on other platforms.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["use_plt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13392:28735":{"id":"2:13392:28735","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13399:36174":{"id":"2:13399:36174","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5019:36174"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44282:5738","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:281:2490":{"id":"0:281:2490","crate_id":0,"name":"out_dir","span":{"filename":"src/lib.rs","begin":[1110,4],"end":[1113,5]},"visibility":"public","docs":"Configures the output directory where all object files and static\nlibraries will be located.\n\nThis option is automatically scraped from the `OUT_DIR` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["out_dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2954:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5441:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:316:2629":{"id":"0:316:2629","crate_id":0,"name":"try_get_compiler","span":{"filename":"src/lib.rs","begin":[1758,4],"end":[1833,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis will return a result instead of panicking; see\n[`get_compiler()`](Self::get_compiler) for the complete description.","links":{"Self::get_compiler":"0:315:2888"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616":{"id":"5:5616","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5617:36868","5:5618:3406","5:5621:36869","5:5624:3715","5:5632:36870","5:5633:36871","5:5634:4563","5:5635:28731","5:5636:28732"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2986-0:519:2475":{"id":"b:2:2986-0:519:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:2532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:255:791":{"id":"0:255:791","crate_id":0,"name":"file","span":{"filename":"src/lib.rs","begin":[785,4],"end":[788,5]},"visibility":"public","docs":"Add a file which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2954:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5441:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179:2634":{"id":"0:179:2634","crate_id":0,"name":"is_like_clang","span":{"filename":"src/tool.rs","begin":[362,4],"end":[364,5]},"visibility":"public","docs":"Whether the tool is Clang-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:257:2485":{"id":"0:257:2485","crate_id":0,"name":"files","span":{"filename":"src/lib.rs","begin":[791,4],"end":[800,5]},"visibility":"public","docs":"Add files which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:8295:165","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2954:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5441:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:589":{"id":"0:589","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[334,9],"end":[334,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:590:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32364:4711-0:519:2475":{"id":"a:2:32364:4711-0:519:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:4711","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13274:4195":{"id":"2:13274:4195","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12502:3630"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:590:475":{"id":"0:590:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[334,9],"end":[334,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:2488":{"id":"0:271:2488","crate_id":0,"name":"cpp_set_stdlib","span":{"filename":"src/lib.rs","begin":[1020,4],"end":[1028,5]},"visibility":"public","docs":"Force the C++ compiler to use the specified standard library.\n\nSetting this option will automatically set `cpp_link_stdlib` to the same\nvalue.\n\nThe default value of this option is always `None`.\n\nThis option has no effect when compiling for a Visual Studio based\ntarget.\n\nThis option sets the `-stdlib` flag, which is only supported by some\ncompilers (clang, icc) but not by others (gcc). The library will not\ndetect which compiler is used, as such it is the responsibility of the\ncaller to ensure that this option is only used in conjunction with a\ncompiler which supports the `-stdlib` flag.\n\nA value of `None` indicates that no specific C++ standard library should\nbe used, otherwise `-stdlib` is added to the compile invocation.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .cpp_set_stdlib(\"c++\")\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_set_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291:2823":{"id":"0:291:2823","crate_id":0,"name":"cargo_debug","span":{"filename":"src/lib.rs","begin":[1176,4],"end":[1179,5]},"visibility":"public","docs":"Define whether debug information should be emitted for cargo. Defaults to whether\nor not the environment variable `CC_ENABLE_DEBUG_OUTPUT` is set.\n\nIf enabled, the compiler will emit debug information when generating object files,\nsuch as the command invoked and the exit status.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_debug",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:3302":{"id":"0:0:3302","crate_id":0,"name":"cc","span":{"filename":"src/lib.rs","begin":[1,0],"end":[4118,1]},"visibility":"public","docs":"A library for [Cargo build scripts](https://doc.rust-lang.org/cargo/reference/build-scripts.html)\nto compile a set of C/C++/assembly/CUDA files into a static archive for Cargo\nto link into the crate being built. This crate does not compile code itself;\nit calls out to the default compiler for the platform. This crate will\nautomatically detect situations such as cross compilation and\n[various environment variables](#external-configuration-via-environment-variables) and will build code appropriately.\n\n# Example\n\nFirst, you'll want to both add a build script for your crate (`build.rs`) and\nalso add this crate to your `Cargo.toml` via:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n```\n\nNext up, you'll want to write a build script like so:\n\n```rust,no_run\n// build.rs\n\nfn main() {\n    cc::Build::new()\n        .file(\"foo.c\")\n        .file(\"bar.c\")\n        .compile(\"foo\");\n}\n```\n\nAnd that's it! Running `cargo build` should take care of the rest and your Rust\napplication will now have the C files `foo.c` and `bar.c` compiled into a file\nnamed `libfoo.a`. If the C files contain\n\n```c\nvoid foo_function(void) { ... }\n```\n\nand\n\n```c\nint32_t bar_function(int32_t x) { ... }\n```\n\nyou can call them from Rust by declaring them in\nyour Rust code like so:\n\n```rust,no_run\nextern \"C\" {\n    fn foo_function();\n    fn bar_function(x: i32) -> i32;\n}\n\npub fn call() {\n    unsafe {\n        foo_function();\n        bar_function(42);\n    }\n}\n\nfn main() {\n    call();\n}\n```\n\nSee [the Rustonomicon](https://doc.rust-lang.org/nomicon/ffi.html) for more details.\n\n# External configuration via environment variables\n\nTo control the programs and flags used for building, the builder can set a\nnumber of different environment variables.\n\n* `CFLAGS` - a series of space separated flags passed to compilers. Note that\nindividual flags cannot currently contain spaces, so doing\nsomething like: `-L=foo\\ bar` is not possible.\n* `CC` - the actual C compiler used. Note that this is used as an exact\nexecutable name, so (for example) no extra flags can be passed inside\nthis variable, and the builder must ensure that there aren't any\ntrailing spaces. This compiler must understand the `-c` flag. For\ncertain `TARGET`s, it also is assumed to know about other flags (most\ncommon is `-fPIC`).\n* `AR` - the `ar` (archiver) executable to use to build the static library.\n* `CRATE_CC_NO_DEFAULTS` - the default compiler flags may cause conflicts in\nsome cross compiling scenarios. Setting this variable\nwill disable the generation of default compiler\nflags.\n* `CC_ENABLE_DEBUG_OUTPUT` - if set, compiler command invocations and exit codes will\nbe logged to stdout. This is useful for debugging build script issues, but can be\noverly verbose for normal use.\n* `CXX...` - see [C++ Support](#c-support).\n\nFurthermore, projects using this crate may specify custom environment variables\nto be inspected, for example via the `Build::try_flags_from_environment`\nfunction. Consult the project‚Äôs own documentation or its use of the `cc` crate\nfor any additional variables it may use.\n\nEach of these variables can also be supplied with certain prefixes and suffixes,\nin the following prioritized order:\n\n  1. `<var>_<target>` - for example, `CC_x86_64-unknown-linux-gnu`\n  2. `<var>_<target_with_underscores>` - for example, `CC_x86_64_unknown_linux_gnu`\n  3. `<build-kind>_<var>` - for example, `HOST_CC` or `TARGET_CFLAGS`\n  4. `<var>` - a plain `CC`, `AR` as above.\n\nIf none of these variables exist, cc-rs uses built-in defaults.\n\nIn addition to the above optional environment variables, `cc-rs` has some\nfunctions with hard requirements on some variables supplied by [cargo's\nbuild-script driver][cargo] that it has the `TARGET`, `OUT_DIR`, `OPT_LEVEL`,\nand `HOST` variables.\n\n[cargo]: https://doc.rust-lang.org/cargo/reference/build-scripts.html#inputs-to-the-build-script\n\n# Optional features\n\n## Parallel\n\nCurrently cc-rs supports parallel compilation (think `make -jN`) but this\nfeature is turned off by default. To enable cc-rs to compile C/C++ in parallel,\nyou can change your dependency to:\n\n```toml\n[build-dependencies]\ncc = { version = \"1.0\", features = [\"parallel\"] }\n```\n\nBy default cc-rs will limit parallelism to `$NUM_JOBS`, or if not present it\nwill limit it to the number of cpus on the machine. If you are using cargo,\nuse `-jN` option of `build`, `test` and `run` commands as `$NUM_JOBS`\nis supplied by cargo.\n\n# Compile-time Requirements\n\nTo work properly this crate needs access to a C compiler when the build script\nis being run. This crate does not ship a C compiler with it. The compiler\nrequired varies per platform, but there are three broad categories:\n\n* Unix platforms require `cc` to be the C compiler. This can be found by\ninstalling cc/clang on Linux distributions and Xcode on macOS, for example.\n* Windows platforms targeting MSVC (e.g. your target triple ends in `-msvc`)\nrequire Visual Studio to be installed. `cc-rs` attempts to locate it, and\nif it fails, `cl.exe` is expected to be available in `PATH`. This can be\nset up by running the appropriate developer tools shell.\n* Windows platforms targeting MinGW (e.g. your target triple ends in `-gnu`)\nrequire `cc` to be available in `PATH`. We recommend the\n[MinGW-w64](https://www.mingw-w64.org/) distribution, which is using the\n[Win-builds](http://win-builds.org/) installation system.\nYou may also acquire it via\n[MSYS2](https://www.msys2.org/), as explained [here][msys2-help].  Make sure\nto install the appropriate architecture corresponding to your installation of\nrustc. GCC from older [MinGW](http://www.mingw.org/) project is compatible\nonly with 32-bit rust compiler.\n\n[msys2-help]: https://github.com/rust-lang/rust#building-on-windows\n\n# C++ support\n\n`cc-rs` supports C++ libraries compilation by using the `cpp` method on\n`Build`:\n\n```rust,no_run\nfn main() {\n    cc::Build::new()\n        .cpp(true) // Switch to C++ library compilation.\n        .file(\"foo.cpp\")\n        .compile(\"foo\");\n}\n```\n\nFor C++ libraries, the `CXX` and `CXXFLAGS` environment variables are used instead of `CC` and `CFLAGS`.\n\nThe C++ standard library may be linked to the crate target. By default it's `libc++` for macOS, FreeBSD, and OpenBSD, `libc++_shared` for Android, nothing for MSVC, and `libstdc++` for anything else. It can be changed in one of two ways:\n\n1. by using the `cpp_link_stdlib` method on `Build`:\n```rust,no_run\nfn main() {\n    cc::Build::new()\n        .cpp(true)\n        .file(\"foo.cpp\")\n        .cpp_link_stdlib(\"stdc++\") // use libstdc++\n        .compile(\"foo\");\n}\n```\n2. by setting the `CXXSTDLIB` environment variable.\n\nIn particular, for Android you may want to [use `c++_static` if you have at most one shared library](https://developer.android.com/ndk/guides/cpp-support).\n\nRemember that C++ does name mangling so `extern \"C\"` might be required to enable Rust linker to find your functions.\n\n# CUDA C++ support\n\n`cc-rs` also supports compiling CUDA C++ libraries by using the `cuda` method\non `Build`:\n\n```rust,no_run\nfn main() {\n    cc::Build::new()\n        // Switch to CUDA C++ library compilation using NVCC.\n        .cuda(true)\n        .cudart(\"static\")\n        // Generate code for Maxwell (GTX 970, 980, 980 Ti, Titan X).\n        .flag(\"-gencode\").flag(\"arch=compute_52,code=sm_52\")\n        // Generate code for Maxwell (Jetson TX1).\n        .flag(\"-gencode\").flag(\"arch=compute_53,code=sm_53\")\n        // Generate code for Pascal (GTX 1070, 1080, 1080 Ti, Titan Xp).\n        .flag(\"-gencode\").flag(\"arch=compute_61,code=sm_61\")\n        // Generate code for Pascal (Tesla P100).\n        .flag(\"-gencode\").flag(\"arch=compute_60,code=sm_60\")\n        // Generate code for Pascal (Jetson TX2).\n        .flag(\"-gencode\").flag(\"arch=compute_62,code=sm_62\")\n        // Generate code in parallel\n        .flag(\"-t0\")\n        .file(\"bar.cu\")\n        .compile(\"bar\");\n}\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/cc/1.0\")]","#![allow(deprecated)]","#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:65-0:26:2460","0:191-0:477:2464","0:519:2475","0:586:137"],"is_stripped":false}}},"0:240:2575":{"id":"0:240:2575","crate_id":0,"name":"object","span":{"filename":"src/lib.rs","begin":[500,4],"end":[503,5]},"visibility":"public","docs":"Add an arbitrary object file to link in","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["obj",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2954:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5441:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:561":{"id":"0:561","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[264,9],"end":[264,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:562:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3830:1822":{"id":"2:3830:1822","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39788:8331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13267:2654":{"id":"2:13267:2654","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3244:5117-0:447:3870":{"id":"a:2:3244:5117-0:447:3870","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:5117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:226":{"id":"0:226","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[357,0],"end":[361,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10389:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:227:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13301:2640":{"id":"2:13301:2640","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4971"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:447:3870":{"id":"b:2:2716-0:447:3870","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:28242"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:487":{"id":"0:487","crate_id":0,"name":null,"span":{"filename":"src/tool.rs","begin":[26,9],"end":[26,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_docs)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:488:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:586:137":{"id":"0:586:137","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[335,0],"end":[340,1]},"visibility":"public","docs":"Represents an internal error that occurred, with an explanation.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:42167:4888-0:586:137","a:2:32364:4711-0:586:137","a:2:42168:4887-0:586:137","a:2:3244:5117-0:586:137","a:2:32305:237-0:586:137","a:2:3209:247-0:586:137","b:2:2996-0:586:137","b:2:2990-0:586:137","b:2:2986-0:586:137","b:2:2716-0:586:137","b:2:3001-0:586:137","b:2:3828-0:586:137","b:2:2713-0:586:137","b:5:5866-0:586:137","b:5:738-0:586:137","0:591","0:228","0:224","0:226","0:589"]}}},"0:191-0:477:2464":{"id":"0:191-0:477:2464","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[247,0],"end":[247,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tool::Tool","name":"Tool","id":"0:477:2464","glob":false}}},"b:2:2716-0:519:2475":{"id":"b:2:2716-0:519:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:28242"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5635:28731":{"id":"5:5635:28731","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13391:28734"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:260:2486":{"id":"0:260:2486","crate_id":0,"name":"cpp","span":{"filename":"src/lib.rs","begin":[817,4],"end":[820,5]},"visibility":"public","docs":"Set C++ support.\n\nThe other `cpp_*` options will only become active if this is set to\n`true`.\n\nThe name of the C++ standard library to link is decided by:\n1. If [`cpp_link_stdlib`](Build::cpp_link_stdlib) is set, use its value.\n2. Else if the `CXXSTDLIB` environment variable is set, use its value.\n3. Else the default is `libc++` for OS X and BSDs, `libc++_shared` for Android,\n`None` for MSVC and `libstdc++` for anything else.","links":{"Build::cpp_link_stdlib":"0:267:2487"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:466":{"id":"0:466","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,37],"end":[94,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:467:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32305:237-0:447:3870":{"id":"a:2:32305:237-0:447:3870","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:65-0:26:2460":{"id":"0:65-0:26:2460","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[241,0],"end":[241,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"windows::find_tools","name":"windows_registry","id":"0:26:2460","glob":false}}},"2:13327:36163":{"id":"2:13327:36163","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12955:4971","str::split":"2:13318:3188","prim@char":"1:12341:471","`DoubleEndedIterator`":"2:8333:129","str::rsplit_terminator":"2:13330:36164"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44015:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:563":{"id":"0:563","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[264,16],"end":[264,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:564:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13383:36172":{"id":"2:13383:36172","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4971"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:5719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2996-0:519:2475":{"id":"b:2:2996-0:519:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5866-0:586:137":{"id":"b:5:5866-0:586:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10389:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5864:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5868:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:181:2646":{"id":"0:181:2646","crate_id":0,"name":"is_like_msvc","span":{"filename":"src/tool.rs","begin":[378,4],"end":[383,5]},"visibility":"public","docs":"Whether the tool is MSVC-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:295:2507":{"id":"0:295:2507","crate_id":0,"name":"emit_rerun_if_env_changed","span":{"filename":"src/lib.rs","begin":[1221,4],"end":[1224,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo to detect environment\nchanges that should trigger a rebuild.\n\nThis has no effect if the `cargo_metadata` option is `false`.\n\nThis option defaults to `true`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["emit_rerun_if_env_changed",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13354:36167":{"id":"2:13354:36167","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12955:4971","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::match_indices":"2:13351:36166"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44133:5742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:5719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13363:36169":{"id":"2:13363:36169","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:292:2829":{"id":"0:292:2829","crate_id":0,"name":"link_lib_modifier","span":{"filename":"src/lib.rs","begin":[1186,4],"end":[1189,5]},"visibility":"public","docs":"Adds a native library modifier that will be added to the\n`rustc-link-lib=static:MODIFIERS=LIBRARY_NAME` metadata line\nemitted for cargo if `cargo_metadata` is enabled.\nSee <https://doc.rust-lang.org/rustc/command-line-arguments.html#-l-link-the-generated-crate-to-a-native-library>\nfor the list of modifiers accepted by rustc.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["link_lib_modifier",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13300:34318":{"id":"2:13300:34318","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44257:5724","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300:2852":{"id":"0:300:2852","crate_id":0,"name":"try_compile","span":{"filename":"src/lib.rs","begin":[1247,4],"end":[1371,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThis will return a result instead of panicking; see compile() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:276:876":{"id":"0:276:876","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[1061,4],"end":[1064,5]},"visibility":"public","docs":"Configures the host assumed by this configuration.\n\nThis option is automatically scraped from the `HOST` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .host(\"arm-linux-gnueabihf\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["host",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13307:2859":{"id":"2:13307:2859","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4971"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:5719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2996-0:477:2464":{"id":"b:2:2996-0:477:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13396:36173":{"id":"2:13396:36173","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5021:36173"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44264:5736","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13359:36168":{"id":"2:13359:36168","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:3884":{"id":"0:42:3884","crate_id":0,"name":"find_vs_version","span":{"filename":"src/windows/find_tools.rs","begin":[113,0],"end":[156,1]},"visibility":"public","docs":"Find the most recent installed version of Visual Studio\n\nThis is used by the cmake crate to figure out the correct\ngenerator.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:448:3872":{"id":"0:448:3872","crate_id":0,"name":"Vs12","span":{"filename":"src/windows/find_tools.rs","begin":[98,4],"end":[98,8]},"visibility":"default","docs":"Visual Studio 12 (2013)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:305:2926":{"id":"0:305:2926","crate_id":0,"name":"compile","span":{"filename":"src/lib.rs","begin":[1410,4],"end":[1414,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\n# Library name\n\nThe `output` string argument determines the file name for the compiled\nlibrary. The Rust compiler will create an assembly named \"lib\"+output+\".a\".\nMSVC will create a file named output+\".lib\".\n\nThe choice of `output` is close to arbitrary, but:\n\n- must be nonempty,\n- must not contain a path separator (`/`),\n- must be unique across all `compile` invocations made by the same build\n  script.\n\nIf your build script compiles a single source file, the base name of\nthat source file would usually be reasonable:\n\n```no_run\ncc::Build::new().file(\"blobstore.c\").compile(\"blobstore\");\n```\n\nCompiling multiple source files, some people use their crate's name, or\ntheir crate's name + \"-cc\".\n\nOtherwise, please use your imagination.\n\nFor backwards compatibility, if `output` starts with \"lib\" *and* ends\nwith \".a\", a second \"lib\" prefix and \".a\" suffix do not get added on,\nbut this usage is deprecated; please omit `lib` and `.a` in the argument\nthat you pass.\n\n# Panics\n\nPanics if `output` is not formatted correctly or if one of the underlying\ncompiler commands fails. It can also panic if it fails reading file names\nor creating directories.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3828-0:586:137":{"id":"b:2:3828-0:586:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2990-0:447:3870":{"id":"b:2:2990-0:447:3870","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:452:3876":{"id":"0:452:3876","crate_id":0,"name":"Vs15","span":{"filename":"src/windows/find_tools.rs","begin":[102,4],"end":[102,8]},"visibility":"default","docs":"Visual Studio 15 (2017)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:3828-0:519:2475":{"id":"b:2:3828-0:519:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:263:1714":{"id":"0:263:1714","crate_id":0,"name":"std","span":{"filename":"src/lib.rs","begin":[880,4],"end":[883,5]},"visibility":"public","docs":"Specify the C or C++ language standard version.\n\nThese values are common to modern versions of GCC, Clang and MSVC:\n- `c11` for ISO/IEC 9899:2011\n- `c17` for ISO/IEC 9899:2018\n- `c++14` for ISO/IEC 14882:2014\n- `c++17` for ISO/IEC 14882:2017\n- `c++20` for ISO/IEC 14882:2020\n\nOther values have less broad support, e.g. MSVC does not support `c++11`\n(`c++14` is the minimum), `c89` (omit the flag instead) or `c99`.\n\nFor compiling C++ code, you should also set `.cpp(true)`.\n\nThe default is that no standard flag is passed to the compiler, so the\nlanguage version will be the compiler's default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/modern.cpp\")\n    .cpp(true)\n    .std(\"c++17\")\n    .compile(\"modern\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["std",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:519:2475":{"id":"0:519:2475","crate_id":0,"name":"Build","span":{"filename":"src/lib.rs","begin":[265,0],"end":[307,1]},"visibility":"public","docs":"A builder for compilation of a native library.\n\nA `Build` is the main type of the `cc` crate and is used to control all the\nvarious configuration options and such of a compile. You'll find more\ndocumentation on each method itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:231","a:2:42167:4888-0:519:2475","a:2:32364:4711-0:519:2475","a:2:42168:4887-0:519:2475","a:2:3244:5117-0:519:2475","a:2:32305:237-0:519:2475","a:2:3209:247-0:519:2475","b:2:2996-0:519:2475","b:2:2990-0:519:2475","b:2:2986-0:519:2475","b:2:2716-0:519:2475","b:2:3001-0:519:2475","b:2:3828-0:519:2475","b:2:2713-0:519:2475","b:5:738-0:519:2475","0:563","0:561","0:404"]}}},"0:490:802":{"id":"0:490:802","crate_id":0,"name":"fmt","span":{"filename":"src/tool.rs","begin":[26,16],"end":[26,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:2494":{"id":"0:287:2494","crate_id":0,"name":"ranlib","span":{"filename":"src/lib.rs","begin":[1140,4],"end":[1143,5]},"visibility":"public","docs":"Configures the tool used to index archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ranlib",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2954:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5441:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5633:36871":{"id":"5:5633:36871","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:2469","`String`":"5:7645:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2469","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:488:475":{"id":"0:488:475","crate_id":0,"name":"clone","span":{"filename":"src/tool.rs","begin":[26,9],"end":[26,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13364:36170":{"id":"2:13364:36170","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42167:4888-0:586:137":{"id":"a:2:42167:4888-0:586:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:4888","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:738-0:477:2464":{"id":"b:5:738-0:477:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:740:2988","5:741:2861","5:742:5208"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13389:33066":{"id":"2:13389:33066","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39974:16636","Self::is_ascii":"2:13388:28729"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39974:16636","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:243:2584":{"id":"0:243:2584","crate_id":0,"name":"remove_flag","span":{"filename":"src/lib.rs","begin":[533,4],"end":[536,5]},"visibility":"public","docs":"Removes a compiler flag that was added by [`Build::flag`].\n\nWill not remove flags added by other means (default flags,\nflags from env, and so on).\n\n# Example\n```\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"unwanted_flag\")\n    .remove_flag(\"unwanted_flag\");\n```","links":{"`Build::flag`":"0:242:2470"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3001-0:447:3870":{"id":"b:2:3001-0:447:3870","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42168:4887-0:447:3870":{"id":"a:2:42168:4887-0:447:3870","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:4887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2996-0:447:3870":{"id":"b:2:2996-0:447:3870","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:742:5208":{"id":"5:742:5208","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:307:2933":{"id":"0:307:2933","crate_id":0,"name":"try_compile_intermediates","span":{"filename":"src/lib.rs","begin":[1432,4],"end":[1439,5]},"visibility":"public","docs":"Run the compiler, generating intermediate files, but without linking\nthem into an archive file.\n\nThis will return a result instead of panicking; see `compile_intermediates()` for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7059:264","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5329:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:279:606":{"id":"0:279:606","crate_id":0,"name":"debug","span":{"filename":"src/lib.rs","begin":[1089,4],"end":[1092,5]},"visibility":"public","docs":"Configures whether the compiler will emit debug information when\ngenerating object files.\n\nThis option is automatically scraped from the `DEBUG` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["debug",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:591":{"id":"0:591","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[334,16],"end":[334,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:592:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:405:60":{"id":"0:405:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[3866,4],"end":[3868,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:228":{"id":"0:228","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[363,0],"end":[363,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","cause","provide","type_id","description"],"trait":{"name":"Error","id":"2:3049:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5868:1782":{"id":"5:5868:1782","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:224":{"id":"0:224","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[351,0],"end":[355,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"1:3061:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:225:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13398:11341":{"id":"2:13398:11341","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5022:11341"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44273:5737","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13269:36157":{"id":"2:13269:36157","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:462:699":{"id":"0:462:699","crate_id":0,"name":"eq","span":{"filename":"src/windows/find_tools.rs","begin":[94,16],"end":[94,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:312:2997":{"id":"0:312:2997","crate_id":0,"name":"try_expand","span":{"filename":"src/lib.rs","begin":[1672,4],"end":[1708,5]},"visibility":"public","docs":"This will return a result instead of panicking; see expand() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7059:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2715:2452":{"id":"2:2715:2452","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:285:2493":{"id":"0:285:2493","crate_id":0,"name":"archiver","span":{"filename":"src/lib.rs","begin":[1130,4],"end":[1133,5]},"visibility":"public","docs":"Configures the tool used to assemble archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["archiver",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2954:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5441:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:4277":{"id":"0:177:4277","crate_id":0,"name":"cflags_env","span":{"filename":"src/tool.rs","begin":[345,4],"end":[354,5]},"visibility":"public","docs":"Returns the compiler flags in format of CFLAGS environment variable.\nImportant here - this will not be CFLAGS from env, its internal gcc's flags to use as CFLAGS\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:2067:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:264:2502":{"id":"0:264:2502","crate_id":0,"name":"warnings_into_errors","span":{"filename":"src/lib.rs","begin":[904,4],"end":[907,5]},"visibility":"public","docs":"Set warnings into errors flag.\n\nDisabled by default.\n\nWarning: turning warnings into errors only make sense\nif you are a developer of the crate using cc-rs.\nSome warnings only appear on some architecture or\nspecific version of the compiler. Any user of this crate,\nor any other crate depending on it, could fail during\ncompile time.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings_into_errors(true)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings_into_errors",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2986-0:586:137":{"id":"b:2:2986-0:586:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:2532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13391:28734":{"id":"2:13391:28734","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13345:4281":{"id":"2:13345:4281","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12955:4971","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::rmatches":"2:13348:36165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44169:5743","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:4253":{"id":"2:13293:4253","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12341:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43935:5732","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13299:36162":{"id":"2:13299:36162","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44229:5740","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3001-0:586:137":{"id":"b:2:3001-0:586:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13330:36164":{"id":"2:13330:36164","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12955:4971","str::split":"2:13318:3188","prim@char":"1:12341:471","str::split_terminator":"2:13327:36163"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44033:5748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:5719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13393:33069":{"id":"2:13393:33069","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:40167"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2718:28242":{"id":"2:2718:28242","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:586:137":{"id":"b:2:2716-0:586:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:28242"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2713-0:519:2475":{"id":"b:2:2713-0:519:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:2452"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13368:3346":{"id":"2:13368:3346","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4971"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3000:1809":{"id":"2:3000:1809","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:233:933":{"id":"0:233:933","crate_id":0,"name":"include","span":{"filename":"src/lib.rs","begin":[448,4],"end":[451,5]},"visibility":"public","docs":"Add a directory to the `-I` or include path for headers\n\n# Example\n\n```no_run\nuse std::path::Path;\n\nlet library_path = Path::new(\"/path/to/library\");\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .include(library_path)\n    .include(\"src\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2954:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5441:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13276:336":{"id":"2:13276:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13277:31871","`u8`":"1:12360:1852"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:353:3394":{"id":"0:353:3394","crate_id":0,"name":"try_get_ranlib","span":{"filename":"src/lib.rs","begin":[3198,4],"end":[3204,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nThis will return a result instead of panicking;\nsee [`Self::get_ranlib`] for the complete description.","links":{"`Self::get_ranlib`":"0:352:3393"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5648:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:4254":{"id":"0:178:4254","crate_id":0,"name":"is_like_gnu","span":{"filename":"src/tool.rs","begin":[357,4],"end":[359,5]},"visibility":"public","docs":"Whether the tool is GNU Compiler Collection-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:458":{"id":"0:458","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:459:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13290:31895":{"id":"2:13290:31895","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13291:31896"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42167:4888-0:447:3870":{"id":"a:2:42167:4888-0:447:3870","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:4888","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13304:2858":{"id":"2:13304:2858","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4971"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13271:36158":{"id":"2:13271:36158","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13269:36157"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:461":{"id":"0:461","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,16],"end":[94,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2763:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:462:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42167:4888-0:519:2475":{"id":"a:2:42167:4888-0:519:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:4888","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3209:247-0:447:3870":{"id":"a:2:3209:247-0:447:3870","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13296:3371":{"id":"2:13296:3371","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13297:3600"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44239:5727","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:254:2484":{"id":"0:254:2484","crate_id":0,"name":"no_default_flags","span":{"filename":"src/lib.rs","begin":[779,4],"end":[782,5]},"visibility":"public","docs":"Disables the generation of default compiler flags. The default compiler\nflags may cause conflicts in some cross compiling scenarios.\n\nSetting the `CRATE_CC_NO_DEFAULTS` environment variable has the same\neffect as setting this to `true`. The presence of the environment\nvariable and the value of `no_default_flags` will be OR'd together.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["no_default_flags",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:477:2464":{"id":"0:477:2464","crate_id":0,"name":"Tool","span":{"filename":"src/tool.rs","begin":[28,0],"end":[38,1]},"visibility":"public","docs":"Configuration used to represent an invocation of a C compiler.\n\nThis can be used to figure out what compiler is in use, what the arguments\nto it are, and what the environment variables look like for the compiler.\nThis can be used to further configure other build systems (e.g. forward\nalong CC and/or CFLAGS) or the `to_command` method can be used to run the\ncompiler itself.","links":{},"attrs":["#[allow(missing_docs)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:155","a:2:42167:4888-0:477:2464","a:2:32364:4711-0:477:2464","a:2:42168:4887-0:477:2464","a:2:3244:5117-0:477:2464","a:2:32305:237-0:477:2464","a:2:3209:247-0:477:2464","b:2:2996-0:477:2464","b:2:2990-0:477:2464","b:2:2986-0:477:2464","b:2:2716-0:477:2464","b:2:3001-0:477:2464","b:2:3828-0:477:2464","b:2:2713-0:477:2464","b:5:738-0:477:2464","0:489","0:487"]}}},"0:261:2288":{"id":"0:261:2288","crate_id":0,"name":"cuda","span":{"filename":"src/lib.rs","begin":[832,4],"end":[839,5]},"visibility":"public","docs":"Set CUDA C++ support.\n\nEnabling CUDA will invoke the CUDA compiler, NVCC. While NVCC accepts\nthe most common compiler flags, e.g. `-std=c++17`, some project-specific\nflags might have to be prefixed with \"-Xcompiler\" flag, for example as\n`.flag(\"-Xcompiler\").flag(\"-fpermissive\")`. See the documentation for\n`nvcc`, the CUDA compiler driver, at <https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/>\nfor more information.\n\nIf enabled, this also implicitly enables C++ support.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cuda",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:5416":{"id":"2:13295:5416","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43951:4541","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2996-0:586:137":{"id":"b:2:2996-0:586:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3828-0:447:3870":{"id":"b:2:3828-0:447:3870","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42168:4887-0:519:2475":{"id":"a:2:42168:4887-0:519:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:4887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2999:137":{"id":"2:2999:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:2992:832":{"id":"2:2992:832","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:586:137":{"id":"b:2:2713-0:586:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:2452"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13310:2868":{"id":"2:13310:2868","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42075:191","prim@char":"1:12341:471","self::pattern":"2:12955:4971"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:463":{"id":"0:463","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,27],"end":[94,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2768:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13277:31871":{"id":"2:13277:31871","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12360:1852"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13336:31903":{"id":"2:13336:31903","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12341:471","str::splitn":"2:13333:31901","self::pattern":"2:12955:4971"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44087:5746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:5719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13318:3188":{"id":"2:13318:3188","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12955:4971","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::split_whitespace":"2:13296:3371","str::rsplit":"2:13324:31899"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43965:4542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32364:4711-0:447:3870":{"id":"a:2:32364:4711-0:447:3870","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:4711","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:352:3393":{"id":"0:352:3393","crate_id":0,"name":"get_ranlib","span":{"filename":"src/lib.rs","begin":[3187,4],"end":[3192,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5681:5711"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5648:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:592:802":{"id":"0:592:802","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[334,16],"end":[334,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2990-0:586:137":{"id":"b:2:2990-0:586:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:36:2868":{"id":"0:36:2868","crate_id":0,"name":"find","span":{"filename":"src/windows/find_tools.rs","begin":[51,0],"end":[53,1]},"visibility":"public","docs":"Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.\n\nThe `target` argument is the target that the tool should work for (e.g.\ncompile or link for) and the `tool` argument is the tool to find (e.g.\n`cl.exe` or `link.exe`).\n\nThis function will return `None` if the tool could not be found, or it will\nreturn `Some(cmd)` which represents a command that's ready to execute the\ntool with the appropriate environment variables set.\n\nNote that this function always returns `None` for non-MSVC targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::process::Command","id":"1:5648:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5632:36870":{"id":"5:5632:36870","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3001-0:519:2475":{"id":"b:2:3001-0:519:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2986-0:477:2464":{"id":"b:2:2986-0:477:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:2532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3209:247-0:586:137":{"id":"a:2:3209:247-0:586:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:459:802":{"id":"0:459:802","crate_id":0,"name":"fmt","span":{"filename":"src/windows/find_tools.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:465":{"id":"0:465","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,31],"end":[94,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3204:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:253:2501":{"id":"0:253:2501","crate_id":0,"name":"static_flag","span":{"filename":"src/lib.rs","begin":[768,4],"end":[771,5]},"visibility":"public","docs":"Set the `-static` flag.\n\nWhen enabled on systems that support dynamic linking, this prevents\nlinking with the shared libraries.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .static_flag(true)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:235:2566":{"id":"0:235:2566","crate_id":0,"name":"includes","span":{"filename":"src/lib.rs","begin":[471,4],"end":[480,5]},"visibility":"public","docs":"Add multiple directories to the `-I` include path.\n\n# Example\n\n```no_run\n# use std::path::Path;\n# let condition = true;\n#\nlet mut extra_dir = None;\nif condition {\n    extra_dir = Some(Path::new(\"/path/to\"));\n}\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .includes(extra_dir)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dirs",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:8295:165","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2954:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5441:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:28795":{"id":"2:13298:28795","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44219:4538","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13365:36171":{"id":"2:13365:36171","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4971"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12981:5717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13371:3708":{"id":"2:13371:3708","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4971"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:251:2671":{"id":"0:251:2671","crate_id":0,"name":"try_flags_from_environment","span":{"filename":"src/lib.rs","begin":[730,4],"end":[734,5]},"visibility":"public","docs":"Add flags from the specified environment variable.\n\nNormally the `cc` crate will consult with the standard set of environment\nvariables (such as `CFLAGS` and `CXXFLAGS`) to construct the compiler invocation. Use of\nthis method provides additional levers for the end user to use when configuring the build\nprocess.\n\nJust like the standard variables, this method will search for an environment variable with\nappropriate target prefixes, when appropriate.\n\n# Examples\n\nThis method is particularly beneficial in introducing the ability to specify crate-specific\nflags.\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .try_flags_from_environment(concat!(env!(\"CARGO_PKG_NAME\"), \"_CFLAGS\"))\n    .expect(\"the environment variable must be specified and UTF-8\")\n    .compile(\"foo\");\n```\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["environ_key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174:331":{"id":"0:174:331","crate_id":0,"name":"args","span":{"filename":"src/tool.rs","begin":[310,4],"end":[312,5]},"visibility":"public","docs":"Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"OsString","id":"1:2067:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:262:2489":{"id":"0:262:2489","crate_id":0,"name":"cudart","span":{"filename":"src/lib.rs","begin":[847,4],"end":[852,5]},"visibility":"public","docs":"Link CUDA run-time.\n\nThis option mimics the `--cudart` NVCC command-line option. Just like\nthe original it accepts `{none|shared|static}`, with default being\n`static`. The method has to be invoked after `.cuda(true)`, or not\nat all, if the default is right for the project.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cudart",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:460":{"id":"0:460","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,16],"end":[94,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32307:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2713-0:477:2464":{"id":"b:2:2713-0:477:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:2452"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:277:2491":{"id":"0:277:2491","crate_id":0,"name":"opt_level","span":{"filename":"src/lib.rs","begin":[1070,4],"end":[1073,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"primitive":"u32"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2460":{"id":"0:26:2460","crate_id":0,"name":"find_tools","span":{"filename":"src/windows/find_tools.rs","begin":[11,0],"end":[1084,1]},"visibility":"public","docs":"A helper module to looking for windows-specific tools:\n1. On Windows host, probe the Windows Registry if needed;\n2. On non-Windows host, check specified environment variables.","links":{},"attrs":["#![allow(clippy::upper_case_acronyms)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:36:2868","0:38:3304","0:447:3870","0:42:3884"],"is_stripped":false}}},"a:2:32305:237-0:477:2464":{"id":"a:2:32305:237-0:477:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2986-0:447:3870":{"id":"b:2:2986-0:447:3870","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:2532"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13289:31892":{"id":"2:13289:31892","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13288:3343","str::split_at_mut_checked":"2:13291:31896"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13394:33070":{"id":"2:13394:33070","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:40167"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:564:802":{"id":"0:564:802","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[264,16],"end":[264,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:2638":{"id":"0:171:2638","crate_id":0,"name":"to_command","span":{"filename":"src/tool.rs","begin":[276,4],"end":[298,5]},"visibility":"public","docs":"Converts this compiler into a `Command` that's ready to be run.\n\nThis is useful for when the compiler needs to be executed and the\ncommand returned will already have the initial arguments and environment\nvariables configured.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5648:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:467:475":{"id":"0:467:475","crate_id":0,"name":"clone","span":{"filename":"src/windows/find_tools.rs","begin":[94,37],"end":[94,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:259:2693":{"id":"0:259:2693","crate_id":0,"name":"get_files","span":{"filename":"src/lib.rs","begin":[803,4],"end":[805,5]},"visibility":"public","docs":"Get the files which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"impl_trait":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8441:178","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5441:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:245:2590":{"id":"0:245:2590","crate_id":0,"name":"ar_flag","span":{"filename":"src/lib.rs","begin":[549,4],"end":[552,5]},"visibility":"public","docs":"Add a flag to the invocation of the ar\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .file(\"src/bar.c\")\n    .ar_flag(\"/NODEFAULTLIB:libc.dll\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13288:3343":{"id":"2:13288:3343","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13290:31895","str::split_at_mut":"2:13289:31892"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13357:3366":{"id":"2:13357:3366","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13395:33071":{"id":"2:13395:33071","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:40167"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13390:28733":{"id":"2:13390:28733","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13333:31901":{"id":"2:13333:31901","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4971","str::rsplitn":"2:13336:31903"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44069:5747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:36869":{"id":"5:5621:36869","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3828-0:477:2464":{"id":"b:2:3828-0:477:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42168:4887-0:477:2464":{"id":"a:2:42168:4887-0:477:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:4887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3209:247-0:519:2475":{"id":"a:2:3209:247-0:519:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:173:1300":{"id":"0:173:1300","crate_id":0,"name":"path","span":{"filename":"src/tool.rs","begin":[304,4],"end":[306,5]},"visibility":"public","docs":"Returns the path for this compiler.\n\nNote that this may not be a path to a file on the filesystem, e.g. \"cc\",\nbut rather something which will be resolved when a process is spawned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5441:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32364:4711-0:477:2464":{"id":"a:2:32364:4711-0:477:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:4711","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:283:504":{"id":"0:283:504","crate_id":0,"name":"compiler","span":{"filename":"src/lib.rs","begin":[1120,4],"end":[1123,5]},"visibility":"public","docs":"Configures the compiler to be used to produce output.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["compiler",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2954:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5441:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3005:1807":{"id":"2:3005:1807","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3001-0:477:2464":{"id":"b:2:3001-0:477:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32305:237-0:519:2475":{"id":"a:2:32305:237-0:519:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13348:36165":{"id":"2:13348:36165","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12955:4971","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::matches":"2:13345:4281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44187:5744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:5719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5624:3715":{"id":"5:5624:3715","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3244:5117-0:586:137":{"id":"a:2:3244:5117-0:586:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:5117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3004:137":{"id":"2:3004:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32229:4602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13374:3420":{"id":"2:13374:3420","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4971"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:5719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13339:3087":{"id":"2:13339:3087","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13342:31905":{"id":"2:13342:31905","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:5719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42167:4888-0:477:2464":{"id":"a:2:42167:4888-0:477:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:4888","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:489":{"id":"0:489","crate_id":0,"name":null,"span":{"filename":"src/tool.rs","begin":[26,16],"end":[26,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_docs)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:490:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:738-0:519:2475":{"id":"b:5:738-0:519:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:740:2988","5:741:2861","5:742:5208"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:225:832":{"id":"0:225:832","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[352,4],"end":[354,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"io::Error","id":"1:3061:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13287:36161":{"id":"2:13287:36161","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12347:1722","crate::ops::IndexMut":"2:3487:5530","str::slice_unchecked":"2:13286:36160"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:306:2932":{"id":"0:306:2932","crate_id":0,"name":"compile_intermediates","span":{"filename":"src/lib.rs","begin":[1421,4],"end":[1426,5]},"visibility":"public","docs":"Run the compiler, generating intermediate files, but without linking\nthem into an archive file.\n\nThis will return a list of compiled object files, in the same order\nas they were passed in as `file`/`files` methods.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:7059:264","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5329:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:447:3870":{"id":"0:447:3870","crate_id":0,"name":"VsVers","span":{"filename":"src/windows/find_tools.rs","begin":[96,0],"end":[107,1]},"visibility":"public","docs":"A version of Visual Studio","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:448:3872","0:450:3874","0:452:3876","0:454:3878","0:456:3880"],"impls":["a:2:42167:4888-0:447:3870","a:2:32364:4711-0:447:3870","a:2:42168:4887-0:447:3870","a:2:3244:5117-0:447:3870","a:2:32305:237-0:447:3870","a:2:3209:247-0:447:3870","b:2:2996-0:447:3870","b:2:2990-0:447:3870","b:2:2986-0:447:3870","b:2:2716-0:447:3870","b:2:3001-0:447:3870","b:2:3828-0:447:3870","b:2:2713-0:447:3870","b:5:738-0:447:3870","0:458","0:461","0:460","0:466","0:465","0:463"]}}},"2:13278:2623":{"id":"2:13278:2623","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42075:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13284:31870":{"id":"2:13284:31870","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:242:2470":{"id":"0:242:2470","crate_id":0,"name":"flag","span":{"filename":"src/lib.rs","begin":[515,4],"end":[518,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"-ffunction-sections\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:404":{"id":"0:404","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3865,0],"end":[3869,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3038:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:405:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13275:36159":{"id":"2:13275:36159","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5634:4563":{"id":"5:5634:4563","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13351:36166":{"id":"2:13351:36166","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12955:4971","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::rmatch_indices":"2:13354:36167"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44115:5741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:315:2888":{"id":"0:315:2888","crate_id":0,"name":"get_compiler","span":{"filename":"src/lib.rs","begin":[1747,4],"end":[1752,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis function will return a `Tool` which represents the culmination\nof this configuration at a snapshot in time. The returned compiler can\nbe inspected (e.g. the path, arguments, environment) to forward along to\nother tools, or the `to_command` method can be used to invoke the\ncompiler itself.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3244:5117-0:519:2475":{"id":"a:2:3244:5117-0:519:2475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:5117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13314:3344":{"id":"2:13314:3344","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42075:191","prim@char":"1:12341:471","self::pattern":"2:12955:4971"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:5719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:348:3384":{"id":"0:348:3384","crate_id":0,"name":"try_get_archiver","span":{"filename":"src/lib.rs","begin":[3145,4],"end":[3147,5]},"visibility":"public","docs":"Get the archiver that's in use for this configuration.\n\nThis will return a result instead of panicking;\nsee [`Self::get_archiver`] for the complete description.","links":{"`Self::get_archiver`":"0:347:3383"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5648:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13286:36160":{"id":"2:13286:36160","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12347:1722","str::slice_mut_unchecked":"2:13287:36161","crate::ops::Index":"2:39619:5529"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:3406":{"id":"5:5618:3406","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:562:475":{"id":"0:562:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[264,9],"end":[264,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:454:3878":{"id":"0:454:3878","crate_id":0,"name":"Vs16","span":{"filename":"src/windows/find_tools.rs","begin":[104,4],"end":[104,8]},"visibility":"default","docs":"Visual Studio 16 (2019)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:246:2597":{"id":"0:246:2597","crate_id":0,"name":"asm_flag","span":{"filename":"src/lib.rs","begin":[568,4],"end":[571,5]},"visibility":"public","docs":"Add a flag that will only be used with assembly files.\n\nThe flag will be applied to input files with either a `.s` or\n`.asm` extension (case insensitive).\n\n# Example\n\n```no_run\ncc::Build::new()\n    .asm_flag(\"-Wa,-defsym,abc=1\")\n    .file(\"src/foo.S\")  // The asm flag will be applied here\n    .file(\"src/bar.c\")  // The asm flag will not be applied here\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:447:3870":{"id":"b:2:2713-0:447:3870","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:2452"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:232:1178":{"id":"0:232:1178","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[387,4],"end":[431,5]},"visibility":"public","docs":"Construct a new instance of a blank set of configuration.\n\nThis builder is finished with the [`compile`] function.\n\n[`compile`]: struct.Build.html#method.compile","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280:2492":{"id":"0:280:2492","crate_id":0,"name":"force_frame_pointer","span":{"filename":"src/lib.rs","begin":[1100,4],"end":[1103,5]},"visibility":"public","docs":"Configures whether the compiler will emit instructions to store\nframe pointers during codegen.\n\nThis option is automatically enabled when debug information is emitted.\nOtherwise the target platform compiler's default will be used.\nYou can use this option to force a specific setting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["force",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:267:2487":{"id":"0:267:2487","crate_id":0,"name":"cpp_link_stdlib","span":{"filename":"src/lib.rs","begin":[979,4],"end":[985,5]},"visibility":"public","docs":"Set the standard library to link against when compiling with C++\nsupport.\n\nIf the `CXXSTDLIB` environment variable is set, its value will\noverride the default value, but not the value explicitly set by calling\nthis function.\n\nA value of `None` indicates that no automatic linking should happen,\notherwise cargo will link against the specified library.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n- `c++_shared` or `c++_static` for Android\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .cpp_link_stdlib(\"stdc++\")\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_link_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:3421":{"id":"0:176:3421","crate_id":0,"name":"cc_env","span":{"filename":"src/tool.rs","begin":[326,4],"end":[340,5]},"visibility":"public","docs":"Returns the compiler command in format of CC environment variable.\nOr empty string if CC env was not present\n\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:2067:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:293:1306":{"id":"0:293:1306","crate_id":0,"name":"pic","span":{"filename":"src/lib.rs","begin":[1195,4],"end":[1198,5]},"visibility":"public","docs":"Configures whether the compiler will emit position independent code.\n\nThis option defaults to `false` for `windows-gnu` and bare metal targets and\nto `true` for all other targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pic",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3244:5117-0:477:2464":{"id":"a:2:3244:5117-0:477:2464","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:5117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:477:2464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13266:997":{"id":"2:13266:997","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12341:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:275:1748":{"id":"0:275:1748","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[1043,4],"end":[1046,5]},"visibility":"public","docs":"Configures the target this configuration will be compiling for.\n\nThis option is automatically scraped from the `TARGET` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .target(\"aarch64-linux-android\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:296:2499":{"id":"0:296:2499","crate_id":0,"name":"static_crt","span":{"filename":"src/lib.rs","begin":[1229,4],"end":[1232,5]},"visibility":"public","docs":"Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.\n\nThis option defaults to `false`, and affect only msvc targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_crt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:738-0:447:3870":{"id":"b:5:738-0:447:3870","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:447:3870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:740:2988","5:741:2861","5:742:5208"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13324:31899":{"id":"2:13324:31899","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12955:4971","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::split":"2:13318:3188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43983:5745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:5718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:5719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32364:4711-0:586:137":{"id":"a:2:32364:4711-0:586:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:4711","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:586:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5636:28732":{"id":"5:5636:28732","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13392:28735"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:450:3874":{"id":"0:450:3874","crate_id":0,"name":"Vs14","span":{"filename":"src/windows/find_tools.rs","begin":[100,4],"end":[100,8]},"visibility":"default","docs":"Visual Studio 14 (2015)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:289:2626":{"id":"0:289:2626","crate_id":0,"name":"cargo_metadata","span":{"filename":"src/lib.rs","begin":[1156,4],"end":[1159,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.\n\nThe emitted metadata is:\n\n - `rustc-link-lib=static=`*compiled lib*\n - `rustc-link-search=native=`*target folder*\n - When target is MSVC, the ATL-MFC libs are added via `rustc-link-search=native=`\n - When C++ is enabled, the C++ stdlib is added via `rustc-link-lib`\n - If `emit_rerun_if_env_changed` is not `false`, `rerun-if-env-changed=`*env*\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_metadata",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:519:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:8611:11398":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:10828:37237":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:4916:9956":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:10399:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:304:2469":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:39711:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"7:32:22931":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:4932:9960":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:12292:8720":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:22894:8284":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:14012:6760":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:14341:6824":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:40927:8225":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:46623:8511":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:14111:6773":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:7595:16750":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:43558:8250":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:44877:10725":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:10092:24026":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:13738:6714":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:11316:10732":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:1680:9848":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:3778:7439":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:5014:10001":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:41086:8227":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:44899:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:9112:4598":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:7412:10559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:40392:8333":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:11841:6442":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:12341:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:13999:6758":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:23111:4707":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"5:7634:5999":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:15473:7143":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:10898:8703":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:4195:5571":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:7360:10960":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:7944:6068":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:12089:6483":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:2028:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:44489:8268":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"0:0:3302":{"crate_id":0,"path":["cc"],"kind":"module"},"2:46142:8466":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:7385:4674":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:42254:4673":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:4531:7449":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:9852:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"0:586:137":{"crate_id":0,"path":["cc","Error"],"kind":"struct"},"16:6079:7367":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:2770:9339":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"11:2124:4687":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"11:2326:4688":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:2302:36006":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:3899:7442":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:538:9696":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:4850:6021":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:10044:24025":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:16121:7328":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"11:837:4682":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:46405:8487":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:2203:6211":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:42198:8246":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:12300:24149":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:2116:8040":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:47233:8564":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:2323:23093":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:15281:7090":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:10393:4502":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:12363:1846":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:21794:11430":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:14977:7025":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:491:6140":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:12225:6495":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:7546:10624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:2479:4697":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:13922:6748":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:13899:6743":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:3430:4557":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:5370:10116":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:980:4686":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:494:6045":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:4952:9969":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:9337:8686":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:564:9709":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:8236:4318":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:3480:4547":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:8226:23968":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:43324:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:8259:10668":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:12308:11035":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:1369:4690":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:44695:10720":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:1891:5342":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:46291:8481":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:2035:8066":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:6849:7666":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:43064:7825":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:6958:5539":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:8650:8660":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:9317:8682":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:46338:8484":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:4481:4518":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:8253:10667":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:8317:10681":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6670:10416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:5146:10032":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:7561:10631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:9296:28320":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:5075:7466":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:8063:4620":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:44768:16804":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:10397:4511":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:14847:6975":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:8306:10677":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:42648:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:5296:10093":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:1621:9812":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:6231:7548":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:8012:8634":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:40578:8342":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:8441:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:10339:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:22443:11516":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:1997:5599":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:3805:4555":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:542:7365":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:8548:4538":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:3294:31576":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:40505:16629":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:6813:7655":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:6664:10413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:10227:8371":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:16032:6604":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:11654:8627":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:5031:10009":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"15:394:23058":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:22487:11517":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"11:1087:37213":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:7813:7798":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:2970:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:43025:10706":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:4161:5570":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"11:1007:4687":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:10917:10728":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"11:2542:9642":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:8479:4567":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:3699:5660":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:15126:7051":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:513:6202":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13594:6680":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:21692:35173":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:11051:6356":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:7465:8059":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:4766:11417":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:40:5533":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:47108:8555":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:41310:6028":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:22997:33887":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:1610:4677":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:1083:4688":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12030:6478":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:32396:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:11609:8712":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"6:5671:10253":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:6562:10365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:40471:8339":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:11035:4707":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"18:698:6175":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11341:6384":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:1739:5973":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:8093:7848":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:33666:5635":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"9:357:22959":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"14:202:16595":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:680:8036":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:15822:7251":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:23721:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:12076:6482":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:44733:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:7355:7733":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:6758:7642":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:47271:8569":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:0:1002":{"crate_id":6,"path":["libc"],"kind":"module"},"16:6120:23957":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:5037:7465":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:43346:8388":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:3049:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:40707:4569":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"5:5422:5973":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:5400:6327":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:8862:4586":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:32271:8323":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:23236:8317":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:41286:3914":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:21690:35168":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:7549:7786":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:13325:6621":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:10018:24006":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:2220:8042":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:6385:7589":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:42785:4502":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:4897:9943":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:7405:4677":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:43354:8389":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:3251:5119":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:4103:11383":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:12278:6499":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:437:6201":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:6714:10433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:10350:6193":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:15151:7060":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:2998:7434":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:16269:6636":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:3604:4527":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:44687:10718":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:3329:7437":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:5336:10104":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:38381:5647":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:9202:8674":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:11432:8255":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:34464:5642":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:14475:6848":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:3297:31571":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:12056:6481":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:2660:7401":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:3446:2973":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:40422:8334":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:7715:16632":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"9:178:11024":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:9781:24019":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:42799:4510":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:12361:1834":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:2684:7402":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:46661:8513":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:11773:6431":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:3291:29171":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:4424:7446":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:2459:3222":{"crate_id":1,"path":["std","fs","remove_file"],"kind":"function"},"6:5236:10062":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:11877:6445":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"11:1676:5968":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:1603:4586":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11102:6362":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:13308:6619":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:4724:8204":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:12371:6554":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"14:165:23029":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:289:5973":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:4848:802":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:46253:8479":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:9743:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:12929:6554":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:11354:6385":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:1832:4145":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"2:41867:11366":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:39691:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:12408:6514":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:2153:8067":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:9807:24010":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:256:6195":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:8759:16683":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:12716:8266":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:40888:8358":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:16176:7344":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:0:2575":{"crate_id":17,"path":["object"],"kind":"module"},"6:5565:10205":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:21739:4707":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:12976:5719":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:43539:8390":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:47050:8553":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"14:40:6601":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:7885:8717":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:3318:7964":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:12422:6515":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:12313:11348":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:5092:11419":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:22575:34157":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"16:7144:23963":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:46594:8510":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5546:10197":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:15957:7272":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:45947:8450":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:6409:10285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:43863:8401":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:13577:8272":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"16:7132:7702":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:11688:6421":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:11631:29615":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"17:14587:6863":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:15836:7254":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:3754:5973":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:5106:11420":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13485:6650":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:46532:8508":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:40593:8344":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:47187:8560":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:1625:7962":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:3671:5657":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:7780:34221":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4870:9931":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:4856:7459":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:8175:7857":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:6447:10304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:8194:4706":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:12348:1812":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:23203:8314":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:4449:8201":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:12352:738":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:2936:23095":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:2535:2455":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:22708:11511":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:819:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:40482:5738":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:5102:10028":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:2219:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"11:2536:9641":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:7686:7793":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:7306:10507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:5283:8613":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:800:4677":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:4688:11400":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:8155:7856":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:12656:8262":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"11:102:9635":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:4992:9988":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12213:6494":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:30694:8322":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:44033:5748":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:7648:7792":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:1853:5332":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"15:327:11011":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:947:4681":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:7633:37226":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:47286:8570":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:4097:11384":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:1619:7961":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:680:6172":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:6895:7668":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:8617:8656":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:15023:7033":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:6620:7616":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:5466:5722":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:14271:6815":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:12470:16761":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:4880:11399":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:1653:9835":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"11:1051:4689":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:6278:7555":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13173:6585":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:11764:6077":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:878:4673":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:11473:5747":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:13986:6757":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:14876:6986":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:11848:8605":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:1628:9816":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:42189:5613":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:6790:4635":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"11:364:5964":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:608:6158":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:6874:10474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:13497:6651":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:1855:5333":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:12485:24151":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:1636:7964":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:4209:5573":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:6177:6058":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:8247:16685":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:8560:8652":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:559:9707":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:5415:7470":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:8676:8610":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:10724:4557":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:7485:10581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:7823:23966":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:15814:7248":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:7610:4482":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:12454:6520":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:1590:8038":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:578:9717":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:4882:7460":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:5653:10244":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:13553:6669":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:12360:1852":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:8058:11346":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:14529:6854":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:4998:5580":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:7604:7429":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:12961:5718":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:44187:5744":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:12915:3913":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:4437:8200":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:8187:4319":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11567:6402":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:3209:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:11367:6360":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:21741:11434":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:15748:7236":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:10403:4509":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:4650:2938":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:9938:24023":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:7668:8064":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:4451:5994":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:8182:4705":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:44115:5741":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:4959:9972":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:44940:8434":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:2934:16635":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:3661:4528":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:8271:10670":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:5250:10068":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:40433:33880":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:4147:5569":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"11:1025:4688":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:40765:8349":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:3455:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:44948:8436":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:13187:6586":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:5515:10185":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:6268:8214":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:6872:7667":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:21800:11433":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:5557:10203":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:3475:7438":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:6566:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:23258:8319":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:4912:5215":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"9:392:22945":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:40812:8352":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:33733:5634":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:46644:8512":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:2729:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:11028:28331":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:6976:7676":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:2132:16714":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:865:4586":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:6927:7672":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:11166:6367":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:8259:7754":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:5981:4518":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:5509:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:21812:8281":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13526:6660":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:16165:7339":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"18:589:6151":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:1547:9758":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"9:447:22944":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:12981:5717":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:5122:10030":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11595:6412":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:5092:16623":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:43941:5731":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:485:9663":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:40897:8223":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:6478:10315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:40803:8211":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:22841:8283":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11647:6418":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:4859:5214":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:15301:7097":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:12516:6529":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:12695:6539":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"5:7658:8063":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:11423:8020":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"11:430:37212":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:1707:9859":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:4062:7444":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:11537:6398":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:13785:6726":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:6968:5540":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"16:3842:7441":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:4555:8609":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:10759:6030":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:4891:9940":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"11:1891:4677":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:10421:4604":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:12955:4971":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:10927:4319":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:46084:8462":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:12362:1840":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:32229:4602":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:23066:8304":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:42013:8606":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:6768:10447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:12851:6550":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:13029:16587":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:44462:8420":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:22218:8280":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:12502:3630":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"13:229:9634":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"9:53:11014":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"18:706:5720":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:4515:5994":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:4800:9879":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:11524:6397":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:5470:5723":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:909:4676":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:6471:10313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:1540:4676":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"11:1160:4690":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:3669:4026":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12107:6342":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:10284:6191":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:8304:4713":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:45021:8441":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:562:6046":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:46306:8482":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:2322:10694":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:11013:3996":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:10661:6340":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:22630:16703":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"16:7741:7431":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:2728:7404":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:6763:10446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:23269:8320":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:10842:6033":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:7988:4707":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:5630:10237":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:47176:8559":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:2707:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:2774:4554":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:1101:4690":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:22351:11432":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:932:4678":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:14131:6774":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:39801:8332":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:1559:4680":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:3244:5117":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:23181:8312":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:40448:8337":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:14933:7020":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:3059:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"18:726:6182":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:4481:8608":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:5436:10151":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:13855:6735":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:7393:8057":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:11090:6072":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:956:4586":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:10818:6343":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:4587:7451":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:3204:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:7590:7428":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:12324:28326":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:16050:6614":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:11682:8630":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:12443:6519":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:11642:8624":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:5212:10054":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:5400:10131":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:7537:10621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:12707:6540":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:23017:33885":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"11:2498:23018":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:10976:4536":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:6543:7605":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"11:2231:6405":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:39623:5652":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:4837:9907":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11142:6342":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:3389:4562":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:12399:6513":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:1549:4679":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:10604:4598":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:951:4682":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:2355:7382":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:44248:5725":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:8470:4565":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:843:5976":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:261:6196":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:11825:6440":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:15342:7106":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:11668:8628":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:6636:10400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:1723:9864":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11405:6388":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"10:36:9647":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:7415:5984":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:4297:31193":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:8535:4541":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:5588:10212":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:10439:6328":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:23079:8305":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:41301:4566":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:5266:10077":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:3661:4586":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:957:4683":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:14463:6847":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:5581:10210":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:44282:5738":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"12:0:4342":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:2004:785":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"5:1204:36091":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:6706:10430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:2309:4691":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:38271:5645":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:12433:6517":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:46931:8550":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:40622:16750":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:46422:8488":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:5039:10013":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:13455:6646":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:9858:24020":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:4976:7463":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:497:9667":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:46854:8549":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:46727:8515":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"5:3820:8040":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:13424:6637":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:15624:7200":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:4824:9897":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10997:6351":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:9129:4599":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:1077:5973":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:15992:7302":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:7478:31190":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:4217:5575":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"11:2569:4474":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:15222:7077":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:9916:24022":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:10600:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:13706:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:6455:6058":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:7875:6203":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:40386:5737":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:40659:4484":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:3523:4566":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:11788:6435":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:8216:7862":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:2699:2954":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:12732:8267":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:1503:9733":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:6847:4642":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:6047:7511":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:597:6203":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:5477:10177":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:32305:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"11:328:9639":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:3430:4543":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:5385:6326":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:4502:7448":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:839:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:12362:6511":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:465:9653":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:15102:7049":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11269:24055":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:1825:5320":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"14:220:7952":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:15582:7187":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:8078:5348":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:15376:7119":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:12342:6506":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:3263:36054":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:7014:23962":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:12355:909":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:12340:1174":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:7645:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3487:5530":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:6738:10437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"16:6442:7595":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:7429:10560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:14189:6800":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:44885:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:4718:7454":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:12328:6502":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:10957:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:10648:4646":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:6689:10421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"18:113:28201":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:1883:4586":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:10512:29602":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:42001:8374":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:6412:23958":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:45885:8442":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:42167:4888":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:34118:5639":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:13344:6626":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:11634:6417":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:22948:8290":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:6519:10336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:521:5987":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:5457:10166":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:5423:10141":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:8753:11354":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"11:351:37205":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:4162:4673":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:3264:6215":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:2283:2454":{"crate_id":1,"path":["std","fs"],"kind":"module"},"1:8541:4542":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"11:875:4685":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:3665:5655":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:4985:9985":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:5831:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:44972:8439":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"15:306:23049":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13146:6577":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:2838:7409":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"18:563:6150":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:1184:36057":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:9163:4586":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:44907:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:7723:28396":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"14:214:7950":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:40490:5737":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:10068:24009":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:12724:24027":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:5624:10234":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:8188:7860":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:13774:6723":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:47324:8572":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:13844:6734":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"11:299:9636":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:8868:4587":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:11621:6415":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:1914:5345":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:11865:6444":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6427:7593":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:7425:8058":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"5:1531:4675":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13766:6721":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:42271:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:11108:6074":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:13024:24030":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:14051:6765":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:43780:8395":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:42490:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:6977:6027":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"11:811:4678":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:40714:8345":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:5648:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:10612:6339":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:5742:7472":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:47301:8571":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:4793:6020":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:8030:5463":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"11:2140:4688":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:12175:6488":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:5306:10096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:4876:9933":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:44574:5750":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:23192:8313":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:4881:4670":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:15418:7128":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:10905:6345":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:5134:10031":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"11:1923:7964":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11730:6425":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"11:844:4683":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"11:2469:4678":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:7321:4884":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:5002:9995":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:1968:5598":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:25:696":{"crate_id":2,"path":["core","env"],"kind":"macro"},"17:9755:24002":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:5415:10136":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:12356:891":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:7111:7700":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:5702:3996":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:1585:9782":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:42126:4884":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:14503:6852":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:46682:8514":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:9433:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:8216:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:44383:8414":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:10710:6341":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:6775:5973":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:10608:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:5445:10157":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:46437:8489":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:12808:6548":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:5897:7490":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:11225:28618":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:15410:7127":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:46482:8506":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:2710:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:3659:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:7857:7806":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12671:6537":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:42792:4503":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:1593:9787":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:9420:4886":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:6916:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:40498:5736":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:651:6141":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:5219:10055":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:44699:10721":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:15039:7036":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:9155:4601":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:7348:10531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:47150:8557":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:5174:10034":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:12238:6496":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:6077:4518":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:4560:7450":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:8554:8650":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:22788:8282":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:22230:35161":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:15596:7193":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:13399:6634":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:4729:8205":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:4252:4518":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:1559:9766":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:6634:7420":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:13191:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:39651:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:13272:6614":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:6400:8620":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:150:5960":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:10155:6326":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:6861:4643":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:44219:4538":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:46046:8460":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:43771:8393":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:12365:966":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:10954:24036":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:14545:6856":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:15616:7199":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:13363:6627":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:12368:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:6756:10445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:2960:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"18:635:6164":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"18:643:6141":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:2394:7389":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:43052:10714":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:11510:6396":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:5283:10088":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:8072:11347":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:40878:8357":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13015:6517":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"0:519:2475":{"crate_id":0,"path":["cc","Build"],"kind":"struct"},"5:2102:4555":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:4282:4518":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:44229:5740":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:6775:10448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:3026:6051":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:2548:9643":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:8007:8632":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:22661:4707":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:21792:4707":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:15569:7181":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:7656:23965":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:14449:6846":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:22616:11522":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:3432:4558":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:8012:10655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:10982:24037":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"9:482:22943":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:11904:8714":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:33260:5632":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:11755:6429":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:11898:6447":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:5845:8614":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:479:9661":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:11853:6443":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:46976:8551":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:3014:23096":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:11286:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:11699:10740":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:6749:7641":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:5200:10047":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:2805:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:32289:5213":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:9142:4600":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:7461:10570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:13884:6042":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:9244:11426":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:42168:4887":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:5802:23954":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:2438:7391":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:14325:6822":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:10857:6037":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:5366:977":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:46355:8485":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:6746:10438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"14:160:7946":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:13861:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:16138:7330":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:22549:4707":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:15400:7124":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:16079:7317":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:11153:6343":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:7984:10652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:3258:7962":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:8599:8606":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"18:598:37248":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:42295:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:40774:8350":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:16212:7350":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"5:7743:5534":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:11293:24056":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:15799:7247":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:5064:10026":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5320:10100":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:43790:8396":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"14:7:7946":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:6066:7518":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:4461:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"11:856:4684":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:46384:8486":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:3826:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:3284:7963":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:8386:4712":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:22577:16703":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:40743:4539":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:6317:7576":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:15273:7089":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11661:6419":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:12358:903":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:12768:24007":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:40734:8347":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:15:2534":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:10534:37238":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12993:24029":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:1581:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:6433:11525":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:44982:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:2340:8070":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"18:531:6145":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:12127:6081":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:16093:7321":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:42334:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:5277:10085":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:1916:5346":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:2144:10697":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:38326:5646":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:43554:10715":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:10720:37241":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:22196:11436":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:752:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:11102:6073":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:31067:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:6532:10342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:14855:6978":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"11:396:5966":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:7144:11428":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:9737:24004":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:39619:5529":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:7379:37228":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:7570:7427":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:5846:7486":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:43983:5745":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:33599:5637":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:4909:9952":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:40937:8359":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:5756:7476":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:13617:8355":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:10524:6338":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:21675:35171":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:5083:11418":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:44526:8421":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:32296:8325":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:6991:37227":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:12770:5726":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:15678:7221":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:473:9658":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:8257:4553":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:4641:7453":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:6335:7586":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:7052:7690":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:4720:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:10495:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:40756:8348":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"13:110:37214":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:15168:7065":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:3255:4462":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:5960:7503":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:7006:7679":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:5046:10015":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:7473:7522":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:8202:7433":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:14311:6819":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:43762:8392":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:9370:9209":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:3282:5649":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:45900:8445":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:5390:10125":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:4319:11394":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:6435:10300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"11:2562:9645":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:6665:23960":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:4400:8607":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6160:23066":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:10353:8694":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:40865:8221":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:6176:4518":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:3671:4531":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"11:1603:7960":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:46171:8475":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:5077:4518":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:12367:1419":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"9:238:4583":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:15445:7135":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:7580:7788":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:41328:8234":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"15:0:4344":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:11239:4542":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:13731:8277":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:12693:8265":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:2799:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:21721:35166":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:44757:8431":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:11233:9208":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:2629:4552":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:16187:7345":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:14489:6849":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:7769:7796":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:4877:11421":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:7799:7419":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:10185:6188":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:43882:8403":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:15190:7071":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:3399:5658":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:15769:7242":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:1565:9768":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:14372:6829":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:13996:5531":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:10399:4541":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:8284:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13753:6719":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:8341:10686":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:46274:8480":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:42609:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"13:0:4336":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:15456:7136":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:14212:6809":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:11419:6342":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:367:8590":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:15944:6600":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:10622:37244":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:3473:6217":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:6441:10303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:40794:8209":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:15289:7091":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:1535:9749":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:6504:7602":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:43711:8391":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:6368:6057":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:6098:23956":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:872:6196":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:7925:6066":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:13941:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:8003:4565":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:13972:6451":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:7359:10536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"11:1910:7962":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:8812:2457":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:3090:5603":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:7098:7697":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:2508:7394":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:669:8596":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:6712:4641":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"11:2423:4674":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:5483:10178":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:11214:4600":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:12970:5720":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:8249:8641":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:7428:23964":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:5314:10099":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:7376:5532":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:8241:4194":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"11:2369:7967":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:7566:4478":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:3050:35601":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:43911:5739":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:7610:5167":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:47167:8558":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:38216:5644":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5489:10180":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:44715:9208":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:9425:4639":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:7331:6063":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:10573:37240":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:9329:8684":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:41895:10705":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:13606:6683":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:39751:4468":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:4771:7456":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:3202:5114":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:32836:5630":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:5773:4597":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:7403:6064":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:2312:4170":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:11359:8254":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:6793:4636":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:47079:8554":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:5598:10217":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:42073:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:9551:5345":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:1699:9855":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:22925:8285":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:553:9704":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:4079:3249":{"crate_id":1,"path":["std","os"],"kind":"module"},"17:14402:6833":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:3597:6218":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:7061:7693":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:3933:4677":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:14298:6818":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:860:7374":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:11268:9210":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:12508:6527":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:39636:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:6072:16995":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:6597:10386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:12621:6534":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:8265:10669":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:5677:10256":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:10137:24003":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:43139:4501":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:2489:4039":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:15116:7050":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:7539:7426":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13797:6728":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:1496:9730":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:43924:5735":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:14079:6769":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:9289:8678":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:3039:2988":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:6588:7606":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:46000:8457":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"7:79:22938":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:523:9687":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:7622:4483":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:10759:6342":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:47363:8585":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:6648:7618":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:39731:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:545:9699":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:11282:5726":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:9118:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:14246:6812":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:42687:4626":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:11547:6272":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:40856:8220":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:8197:10665":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12659:6536":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:1607:4674":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:7306:37231":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:40611:4479":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:2609:16704":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"6:6811:10461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:32275:7754":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:888:4674":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:12543:6532":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:6609:10391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:9185:8615":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:5769:7481":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"11:2151:4689":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:5986:4629":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:9420:4638":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"4:0:4337":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"19:0:1291":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:4002:8605":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"11:0:4341":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:7314:10512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:5307:7468":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:44561:8426":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:5536:10191":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:46032:8459":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:32394:5120":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:6300:7570":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:12824:24028":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:7888:7810":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:6629:10399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:15356:7113":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:5466:10172":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:1475:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:12074:5728":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:47222:8563":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:23148:8309":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"5:1340:4689":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:10384:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:6276:6053":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:8333:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:5934:4677":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:4913:7461":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:7602:10646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4811:9887":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:23214:8315":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:45979:8452":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:4360:4518":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:42035:8241":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:3581:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:42568:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:2316:4043":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:12354:733":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"2:5286:35206":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:2303:23067":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:5729:5538":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"18:689:6174":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12264:6498":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:13387:6631":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:938:4679":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:7085:7694":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:44347:16593":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:6915:10500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:7132:6016":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:12359:884":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:8606:10726":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:8301:7869":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:14436:6845":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:2548:7396":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:7330:10524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:42117:4674":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:4938:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:39781:5654":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:8631:8658":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:4335:11396":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:6414:11524":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:9410:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:5230:4625":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:33532:4463":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:23032:33871":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:9393:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"11:2383:4586":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"5:1509:4674":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:10994:28620":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:21663:35171":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:7910:23967":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:6353:7372":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:12318:6219":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"11:700:4674":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:6698:10427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:14091:6770":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:623:37249":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:11242:6371":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:6966:8222":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"11:1107:7957":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:1493:4673":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:15734:7229":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:13904:6044":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"5:1843:4678":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:1580:9780":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6560:7415":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:44257:5724":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:10764:5463":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:40677:4498":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:4614:7452":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:46099:8463":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:4743:7455":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:14599:6870":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:922:4677":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:3897:8603":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:22:817":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:42101:4586":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:11115:6364":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:2636:7400":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"18:80:28199":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4971:9977":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:4436:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:44397:8417":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:5502:10184":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:6621:10398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:4811:10551":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:15010:7028":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:6019:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:3046:35602":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:12557:6360":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:5376:10117":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:10922:10730":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:9171:8673":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:4919:11386":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:12189:6492":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:44087:5746":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:12346:1688":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:13211:6600":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:4468:7447":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:21908:4707":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:6678:10418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:6676:4632":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:5700:7416":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:8339:8642":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:674:11343":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:44683:10717":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:10769:37243":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11063:6359":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11605:6413":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:4921:11387":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:7516:10607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:47129:8556":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:10671:37239":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:617:11340":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:735:28209":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12127:6485":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:9179:4674":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:3040:36056":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:47248:8565":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:4322:4586":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:44015:5749":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:2735:4544":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:4133:5568":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:12647:6535":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:8230:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:41851:8240":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:41979:33902":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:43035:4499":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:1092:4689":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:2127:8041":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"5:1441:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:11743:6426":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:2463:4693":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:1671:9842":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:3885:4678":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:5686:7413":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:2713:6033":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11042:6354":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11128:6317":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:6505:10335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13814:6731":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:4602:8203":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:11674:6420":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:40461:8338":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:816:11369":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:16105:7323":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:6782:23961":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"2:43811:8398":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:11515:8257":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:6417:10287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:39788:8331":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:3417:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:5770:3659":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"11:832:4679":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11702:6422":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:6934:5538":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:5643:10243":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:6031:4640":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:4666:11399":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:4503:16606":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:13679:35156":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:5617:10231":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:32306:4710":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:42206:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:14868:6985":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:10355:8693":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:7584:10643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:1069:4687":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:6491:10324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:7107:6013":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:9671:24005":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:15655:7208":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:43837:8345":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:40913:6162":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:22703:11513":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:517:9684":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:1517:9738":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:491:9664":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:15463:7138":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"11:1896:4678":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:6900:10489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:13412:6636":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:8295:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:3684:34051":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:5665:10251":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:1168:36090":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13581:6679":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:14235:6810":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:40606:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:14414:6834":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:43872:8402":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:5052:10017":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13538:6663":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:11045:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:9265:4630":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:14912:7015":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:15176:7068":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:6456:23959":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:43307:8383":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:532:9693":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:44368:8409":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:9324:8683":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:11360:8711":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"5:1478:4586":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:4352:7445":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"11:1566:23023":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:40585:8343":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:896:4675":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:22349:4707":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:7989:8592":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:11497:6395":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:3038:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:46128:8465":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:867:6195":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"16:7528:7783":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:42262:4674":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:12863:6551":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:2748:7405":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:8750:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:30720:33881":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:1686:9851":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:42529:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12150:6486":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:9406:4518":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:5162:4876":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:23170:8311":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:15383:7120":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:3652:31798":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:8300:10676":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:6777:8216":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:1485:9725":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:6566:4677":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:46067:8461":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13375:6630":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:1207:6206":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:6026:7361":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:6494:7601":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:8565:11365":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:4801:5570":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:11026:24038":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:13473:6647":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:12201:6493":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:7467:10571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:16151:7336":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"11:1582:7959":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:15313:7098":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:16198:7346":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:2592:7398":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:12887:6552":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:6880:10475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:8774:4583":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:26121:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:15646:7206":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6480:7414":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:3458:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:5441:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:40835:8215":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:5838:6058":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:15521:7180":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:7452:10567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:7509:7775":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:11487:5746":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:2966:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:5225:10058":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"11:1887:4674":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:8349:2510":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"14:187:23036":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:6503:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"11:2554:37204":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:2593:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:10039:34080":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:8247:10666":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"11:787:4676":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:2070:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:11557:6400":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:5329:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:12000:8258":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:9469:8688":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:15608:7196":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:15720:7227":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:4348:11397":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:38960:5648":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:15197:7072":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:4:1256":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:42092:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:9415:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13959:6752":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:11799:6436":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:43800:8397":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:10964:8692":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"2:46209:8477":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:3644:5653":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:6398:7412":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:2307:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:12345:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:9398:4631":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:10317:6192":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:22563:11521":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"10:44:7970":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:3452:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:943:4680":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:15333:7105":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:32365:5121":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:12388:6512":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:2226:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:46756:8516":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:8177:4704":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:4787:9870":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:12792:6292":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:33800:5636":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:8344:8643":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:7339:10530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:42109:4673":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:10218:6189":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:10985:28622":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:4979:9982":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:9451:4709":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:13252:6604":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:1903:7961":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:15426:7130":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:4802:7457":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:44169:5743":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:2957:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:13723:6710":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:1490:9727":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:16259:6631":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"5:7059:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:10938:8689":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:39673:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:45932:8449":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11016:6353":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:8488:4536":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:3251:4586":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:743:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:8328:10682":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:5863:23955":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:4885:9938":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:21709:35163":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:5407:1243":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:2067:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"18:481:6139":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:42412:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:5914:7495":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:43093:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:10044:11033":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:44961:35258":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:43080:34313":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:5382:10120":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"9:0:4339":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:8073:7847":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:2065:1358":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"18:613:37247":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:7540:4474":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:11214:4673":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:10170:6327":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:8528:4540":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"11:774:4675":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:21707:35175":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:8852:4585":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"11:123:5962":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:2458:7392":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:6606:7614":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:14038:6763":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:14788:6923":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:13832:6732":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:47021:8552":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:2768:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:12530:6531":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:13116:6573":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:14066:6768":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:8118:7851":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:15206:7073":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:43118:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:21920:8281":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:10915:37236":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"18:670:6171":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:2768:7406":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:36340:5643":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:11005:5349":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:4205:5572":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:15092:7048":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:14575:6517":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:6693:4674":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:1838:696":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:11075:6360":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:44691:10719":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:7449:4674":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:5352:10106":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:11045:4601":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:8294:10675":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:39575:5659":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:11321:8253":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:11392:6387":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:6342:37232":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:3270:5631":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:8797:4584":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:7457:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:8288:10674":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6466:7598":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:9714:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:23247:8318":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:9857:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:40826:8355":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:10184:4500":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:33945:5638":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:7446:10565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:1631:7963":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:11916:29756":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"18:515:6138":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:14177:6798":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:8654:10540":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:5995:7505":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:11227:6370":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:44133:5742":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:16223:7352":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:7497:7774":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:5329:10103":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:2528:7395":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:22675:11512":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"11:2443:4677":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"5:1355:4688":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:11583:6408":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:3290:5651":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:3925:7443":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11574:6405":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:11467:6393":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:30709:4499":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:7831:16679":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:2612:7399":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:44679:10716":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:3435:4464":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:46323:8483":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:4975:6052":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:2763:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:42451:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:5952:4627":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:11201:4599":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:5817:7482":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:43965:4542":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:9886:24021":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:10334:5342":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:3586:3911":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:13046:6564":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:44239:5727":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:5781:7417":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:12900:6553":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:44592:5751":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:13594:8275":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:21653:5131":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:15214:7075":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:2963:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:5083:10027":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:12344:1314":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:6574:7432":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:21918:11431":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:5596:4594":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:2477:4696":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:46549:8509":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:12366:1912":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:16069:7316":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:12584:6343":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"11:2403:4673":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:8797:34084":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:4815:10555":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:6972:10699":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:15368:7116":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:4830:7458":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:11443:6392":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:974:4685":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:7695:7794":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:5864:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:10643:4320":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:41320:8232":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:7435:36044":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:8625:8650":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:7727:4678":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"14:31:7946":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:44882:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:9229:11424":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:3643:2456":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:3410:4678":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:939:5981":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:8351:10688":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:12351:735":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"11:434:37208":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:586:8593":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:7727:7430":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:5636:10240":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:14560:6860":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:12339:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:3736:5661":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:4066:4674":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:6051:4625":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:10825:6032":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:11189:6368":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"15:288:23048":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:15266:7088":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:5160:10033":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:3334:4559":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:5632:4146":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:7168:8686":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:12464:24150":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"9:424:22946":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:8518:4539":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:15078:7045":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11256:6373":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:2854:7410":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"18:659:6165":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:10947:4706":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:15138:7054":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:7755:7421":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:23225:8316":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:10389:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:15249:7081":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:3900:8604":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:5831:7485":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:4942:9966":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:581:5131":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:14723:6872":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:5181:10035":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"10:0:4340":{"crate_id":10,"path":["adler"],"kind":"module"},"5:6612:5973":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:4813:10553":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"5:7493:4674":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:3260:5633":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:6154:8212":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:6948:7422":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"18:521:28211":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:10395:4510":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:30688:5527":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:4803:5213":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"11:1142:7958":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:4327:11395":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:2249:10690":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:2478:7393":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:5260:10074":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:1952:4518":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:6193:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:1663:9841":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:15058:7037":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:3222:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:11324:6381":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:5347:7469":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:14284:6817":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:42246:4586":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:16235:7355":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:1098:6204":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:8879:4588":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"11:687:4673":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:11827:8604":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:6352:6042":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:15701:7222":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:9984:24024":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:11251:4709":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"18:507:6141":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:5722:7418":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:2175:24083":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"18:0:4346":{"crate_id":18,"path":["memchr"],"kind":"module"},"9:330:9648":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:41279:8230":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:41062:4540":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:40844:8356":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11764:6430":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:6433:7594":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:12342:1874":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:10391:4503":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:41295:8231":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"18:96:28200":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11812:6438":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:4087:4677":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:6650:10411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:13509:6652":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:22981:8292":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"18:718:6179":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:44889:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:5472:10175":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:2461:2627":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:12347:1722":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:13292:6615":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"18:538:6148":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:12478:6522":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:44703:10722":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:34291:5640":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:11501:8256":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:44711:10724":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:12572:6342":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:11787:8603":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:47196:8561":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:11394:5745":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:6379:10260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:9726:6070":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:1614:4678":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:3214:5115":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:7366:10540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:2878:7411":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:42053:8243":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:42373:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:9350:28327":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:45915:8446":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:22525:11518":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:4864:9930":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:10419:6197":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:11513:6075":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:44264:5736":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:44414:8418":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:3387:4561":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:219:5971":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:4917:5581":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:0:4345":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:2338:7380":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:11931:8631":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:8282:10673":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11493:6394":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:15635:7205":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:12353:754":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:7397:37230":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:12486:8260":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:5107:7467":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:6524:10337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:46192:8476":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:6657:10412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:12969:6556":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:8136:7853":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:426:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:14516:6853":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13946:6749":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:43315:4647":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:2607:16703":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"18:573:6141":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:373:8591":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"11:673:4586":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:22959:33895":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:586:9721":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:22191:4707":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:4821:6224":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:44998:8440":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"11:2352:4689":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"5:883:5979":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:13437:6638":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:4986:6226":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:15390:7121":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:3196:7379":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:6460:10305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:1324:4687":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:46224:8478":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:2130:16713":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:6542:10349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:11923:8631":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:8006:10653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:4484:16564":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:13089:6568":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:12033:8259":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:30656:5526":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:32364:4711":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:6532:7604":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:6729:10435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:2708:7403":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:2234:6214":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:7582:4481":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:11214:6369":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:23159:8310":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:8709:4880":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:11693:10739":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:12949:6219":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:5324:4568":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:40544:8341":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:43299:4645":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:570:9712":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:3648:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:42157:4885":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:6940:7674":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:39539:5662":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:3553:4518":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"9:502:8023":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:44069:5747":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:2037:6207":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:40784:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:10718:4559":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:42806:4511":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:45009:7969":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:43892:8404":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:40687:4497":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:5361:10110":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:44707:10723":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:3292:7961":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12353:6510":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:6672:3914":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:7389:10558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:3810:7440":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:5252:8613":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:43336:4583":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"11:710:4680":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:968:4684":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:46113:8464":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:6263:7553":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:9214:11425":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:2788:7407":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:14968:7021":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:650:5600":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:40649:4541":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:10877:6344":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:11313:6379":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:14386:6830":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:3614:4025":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:734:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:5367:23953":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:4155:4328":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:5528:10186":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:2902:23094":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:16249:7356":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:3340:5641":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"14:0:4343":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:43935:5732":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:2572:7397":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:10358:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:15434:7131":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"11:742:4681":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:7575:10640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:12043:6479":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:11915:24125":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:4940:7462":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:6821:10463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:9531:5718":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:33048:5629":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:1639:9824":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:8498:4537":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:12289:6500":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:23059:10703":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:46511:8507":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:40637:4480":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:5344:10105":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:10887:37242":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:10721:4561":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:22973:8291":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:11648:4606":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4924:9958":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:5616:4595":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:7716:16633":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"7:0:1902":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:5290:10090":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:14147:6779":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12251:6497":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:4571:8202":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:4117:5973":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:3061:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:5265:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:41272:8229":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:7551:4475":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:6721:10434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:39974:16636":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:14260:6814":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:5927:7496":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:22909:10700":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:7618:7789":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:12494:6524":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:32282:8324":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:12357:897":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"18:754:6187":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:0:1714":{"crate_id":1,"path":["std"],"kind":"module"},"16:6962:7423":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:14356:6828":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:5582:2459":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"11:2304:4687":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:7559:7787":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:14752:6892":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:9721:4705":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:8265:4555":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:3835:11367":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:5191:10042":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:10647:6071":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:23090:11382":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:14986:7026":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:2539:9341":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:12364:1828":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:13235:6601":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:41835:8238":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:10251:6190":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:9278:8675":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:3042:10691":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:30433:11368":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:14025:6761":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:32307:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:2374:7388":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:5244:10066":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:403:6198":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:13568:6675":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:5959:4628":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:10340:2456":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:15760:7238":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:5020:10004":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4965:9974":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:41072:8226":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:8726:4582":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:44551:8422":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:8029:10664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:15931:6586":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:46017:8458":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:2933:4707":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:3336:4560":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:3674:4673":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"8:0:4338":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:5006:7464":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:2954:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:11190:4586":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:666:8594":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:43951:4541":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:47207:8562":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:41813:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:13877:6742":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:3285:5650":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:31094:5131":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:1570:4681":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:12683:6538":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:13674:6685":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:44273:5737":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:14994:7027":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"11:1917:7963":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:6802:7654":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"18:765:28210":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11089:6361":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:2418:7390":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:15778:7244":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"11:883:4686":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:1526:9743":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:8093:5349":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:8251:16684":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:11715:6423":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:12597:6533":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:13064:6567":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:6788:10455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:44540:16594":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:15324:7102":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:3029:6229":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:10401:4508":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:46777:8517":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:1510:9735":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:5112:10029":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:7485:4674":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:45964:8451":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:43101:4499":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:1692:9852":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:2210:5987":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:3654:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:8204:4703":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"11:1066:23022":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:9283:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:43850:8400":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:2808:7408":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:3297:36055":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}