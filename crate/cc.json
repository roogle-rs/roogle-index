{"root":"0:0:3306","crate_version":"1.0.98","includes_private":false,"index":{"b:2:3832-0:588:137":{"id":"b:2:3832-0:588:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32338:4715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3830:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3834:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:3306":{"id":"0:0:3306","crate_id":0,"name":"cc","span":{"filename":"src/lib.rs","begin":[1,0],"end":[4116,1]},"visibility":"public","docs":"A library for [Cargo build scripts](https://doc.rust-lang.org/cargo/reference/build-scripts.html)\nto compile a set of C/C++/assembly/CUDA files into a static archive for Cargo\nto link into the crate being built. This crate does not compile code itself;\nit calls out to the default compiler for the platform. This crate will\nautomatically detect situations such as cross compilation and\n[various environment variables](#external-configuration-via-environment-variables) and will build code appropriately.\n\n# Example\n\nFirst, you'll want to both add a build script for your crate (`build.rs`) and\nalso add this crate to your `Cargo.toml` via:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n```\n\nNext up, you'll want to write a build script like so:\n\n```rust,no_run\n// build.rs\n\nfn main() {\n    cc::Build::new()\n        .file(\"foo.c\")\n        .file(\"bar.c\")\n        .compile(\"foo\");\n}\n```\n\nAnd that's it! Running `cargo build` should take care of the rest and your Rust\napplication will now have the C files `foo.c` and `bar.c` compiled into a file\nnamed `libfoo.a`. If the C files contain\n\n```c\nvoid foo_function(void) { ... }\n```\n\nand\n\n```c\nint32_t bar_function(int32_t x) { ... }\n```\n\nyou can call them from Rust by declaring them in\nyour Rust code like so:\n\n```rust,no_run\nextern \"C\" {\n    fn foo_function();\n    fn bar_function(x: i32) -> i32;\n}\n\npub fn call() {\n    unsafe {\n        foo_function();\n        bar_function(42);\n    }\n}\n\nfn main() {\n    call();\n}\n```\n\nSee [the Rustonomicon](https://doc.rust-lang.org/nomicon/ffi.html) for more details.\n\n# External configuration via environment variables\n\nTo control the programs and flags used for building, the builder can set a\nnumber of different environment variables.\n\n* `CFLAGS` - a series of space separated flags passed to compilers. Note that\nindividual flags cannot currently contain spaces, so doing\nsomething like: `-L=foo\\ bar` is not possible.\n* `CC` - the actual C compiler used. Note that this is used as an exact\nexecutable name, so (for example) no extra flags can be passed inside\nthis variable, and the builder must ensure that there aren't any\ntrailing spaces. This compiler must understand the `-c` flag. For\ncertain `TARGET`s, it also is assumed to know about other flags (most\ncommon is `-fPIC`).\n* `AR` - the `ar` (archiver) executable to use to build the static library.\n* `CRATE_CC_NO_DEFAULTS` - the default compiler flags may cause conflicts in\nsome cross compiling scenarios. Setting this variable\nwill disable the generation of default compiler\nflags.\n* `CC_ENABLE_DEBUG_OUTPUT` - if set, compiler command invocations and exit codes will\nbe logged to stdout. This is useful for debugging build script issues, but can be\noverly verbose for normal use.\n* `CXX...` - see [C++ Support](#c-support).\n\nFurthermore, projects using this crate may specify custom environment variables\nto be inspected, for example via the `Build::try_flags_from_environment`\nfunction. Consult the project’s own documentation or its use of the `cc` crate\nfor any additional variables it may use.\n\nEach of these variables can also be supplied with certain prefixes and suffixes,\nin the following prioritized order:\n\n  1. `<var>_<target>` - for example, `CC_x86_64-unknown-linux-gnu`\n  2. `<var>_<target_with_underscores>` - for example, `CC_x86_64_unknown_linux_gnu`\n  3. `<build-kind>_<var>` - for example, `HOST_CC` or `TARGET_CFLAGS`\n  4. `<var>` - a plain `CC`, `AR` as above.\n\nIf none of these variables exist, cc-rs uses built-in defaults.\n\nIn addition to the above optional environment variables, `cc-rs` has some\nfunctions with hard requirements on some variables supplied by [cargo's\nbuild-script driver][cargo] that it has the `TARGET`, `OUT_DIR`, `OPT_LEVEL`,\nand `HOST` variables.\n\n[cargo]: https://doc.rust-lang.org/cargo/reference/build-scripts.html#inputs-to-the-build-script\n\n# Optional features\n\n## Parallel\n\nCurrently cc-rs supports parallel compilation (think `make -jN`) but this\nfeature is turned off by default. To enable cc-rs to compile C/C++ in parallel,\nyou can change your dependency to:\n\n```toml\n[build-dependencies]\ncc = { version = \"1.0\", features = [\"parallel\"] }\n```\n\nBy default cc-rs will limit parallelism to `$NUM_JOBS`, or if not present it\nwill limit it to the number of cpus on the machine. If you are using cargo,\nuse `-jN` option of `build`, `test` and `run` commands as `$NUM_JOBS`\nis supplied by cargo.\n\n# Compile-time Requirements\n\nTo work properly this crate needs access to a C compiler when the build script\nis being run. This crate does not ship a C compiler with it. The compiler\nrequired varies per platform, but there are three broad categories:\n\n* Unix platforms require `cc` to be the C compiler. This can be found by\ninstalling cc/clang on Linux distributions and Xcode on macOS, for example.\n* Windows platforms targeting MSVC (e.g. your target triple ends in `-msvc`)\nrequire Visual Studio to be installed. `cc-rs` attempts to locate it, and\nif it fails, `cl.exe` is expected to be available in `PATH`. This can be\nset up by running the appropriate developer tools shell.\n* Windows platforms targeting MinGW (e.g. your target triple ends in `-gnu`)\nrequire `cc` to be available in `PATH`. We recommend the\n[MinGW-w64](https://www.mingw-w64.org/) distribution, which is using the\n[Win-builds](http://win-builds.org/) installation system.\nYou may also acquire it via\n[MSYS2](https://www.msys2.org/), as explained [here][msys2-help].  Make sure\nto install the appropriate architecture corresponding to your installation of\nrustc. GCC from older [MinGW](http://www.mingw.org/) project is compatible\nonly with 32-bit rust compiler.\n\n[msys2-help]: https://github.com/rust-lang/rust#building-on-windows\n\n# C++ support\n\n`cc-rs` supports C++ libraries compilation by using the `cpp` method on\n`Build`:\n\n```rust,no_run\nfn main() {\n    cc::Build::new()\n        .cpp(true) // Switch to C++ library compilation.\n        .file(\"foo.cpp\")\n        .compile(\"foo\");\n}\n```\n\nFor C++ libraries, the `CXX` and `CXXFLAGS` environment variables are used instead of `CC` and `CFLAGS`.\n\nThe C++ standard library may be linked to the crate target. By default it's `libc++` for macOS, FreeBSD, and OpenBSD, `libc++_shared` for Android, nothing for MSVC, and `libstdc++` for anything else. It can be changed in one of two ways:\n\n1. by using the `cpp_link_stdlib` method on `Build`:\n```rust,no_run\nfn main() {\n    cc::Build::new()\n        .cpp(true)\n        .file(\"foo.cpp\")\n        .cpp_link_stdlib(\"stdc++\") // use libstdc++\n        .compile(\"foo\");\n}\n```\n2. by setting the `CXXSTDLIB` environment variable.\n\nIn particular, for Android you may want to [use `c++_static` if you have at most one shared library](https://developer.android.com/ndk/guides/cpp-support).\n\nRemember that C++ does name mangling so `extern \"C\"` might be required to enable Rust linker to find your functions.\n\n# CUDA C++ support\n\n`cc-rs` also supports compiling CUDA C++ libraries by using the `cuda` method\non `Build`:\n\n```rust,no_run\nfn main() {\n    cc::Build::new()\n        // Switch to CUDA C++ library compilation using NVCC.\n        .cuda(true)\n        .cudart(\"static\")\n        // Generate code for Maxwell (GTX 970, 980, 980 Ti, Titan X).\n        .flag(\"-gencode\").flag(\"arch=compute_52,code=sm_52\")\n        // Generate code for Maxwell (Jetson TX1).\n        .flag(\"-gencode\").flag(\"arch=compute_53,code=sm_53\")\n        // Generate code for Pascal (GTX 1070, 1080, 1080 Ti, Titan Xp).\n        .flag(\"-gencode\").flag(\"arch=compute_61,code=sm_61\")\n        // Generate code for Pascal (Tesla P100).\n        .flag(\"-gencode\").flag(\"arch=compute_60,code=sm_60\")\n        // Generate code for Pascal (Jetson TX2).\n        .flag(\"-gencode\").flag(\"arch=compute_62,code=sm_62\")\n        // Generate code in parallel\n        .flag(\"-t0\")\n        .file(\"bar.cu\")\n        .compile(\"bar\");\n}\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/cc/1.0\")]","#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:65-0:26:2464","0:193-0:479:2468","0:521:2479","0:588:137"],"is_stripped":false}}},"0:566:804":{"id":"0:566:804","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[263,16],"end":[263,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10360:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10341:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:302:2856":{"id":"0:302:2856","crate_id":0,"name":"try_compile","span":{"filename":"src/lib.rs","begin":[1246,4],"end":[1370,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThis will return a result instead of panicking; see compile() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42238:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5937-0:588:137":{"id":"b:5:5937-0:588:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10391:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32338:4715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5935:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5939:1786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13400:29042":{"id":"2:13400:29042","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2994-0:479:2468":{"id":"b:2:2994-0:479:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2996:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:287:2497":{"id":"0:287:2497","crate_id":0,"name":"archiver","span":{"filename":"src/lib.rs","begin":[1129,4],"end":[1132,5]},"visibility":"public","docs":"Configures the tool used to assemble archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["archiver",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2958:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13276:36064":{"id":"2:13276:36064","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282:2496":{"id":"0:282:2496","crate_id":0,"name":"force_frame_pointer","span":{"filename":"src/lib.rs","begin":[1099,4],"end":[1102,5]},"visibility":"public","docs":"Configures whether the compiler will emit instructions to store\nframe pointers during codegen.\n\nThis option is automatically enabled when debug information is emitted.\nOtherwise the target platform compiler's default will be used.\nYou can use this option to force a specific setting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["force",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:3888":{"id":"0:42:3888","crate_id":0,"name":"find_vs_version","span":{"filename":"src/windows/find_tools.rs","begin":[113,0],"end":[156,1]},"visibility":"public","docs":"Find the most recent installed version of Visual Studio\n\nThis is used by the cmake crate to figure out the correct\ngenerator.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42238:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3000-0:588:137":{"id":"b:2:3000-0:588:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2970:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3003:137","2:3004:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13316:2862":{"id":"2:13316:2862","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:4979"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:469:475":{"id":"0:469:475","crate_id":0,"name":"clone","span":{"filename":"src/windows/find_tools.rs","begin":[94,37],"end":[94,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:452:3878":{"id":"0:452:3878","crate_id":0,"name":"Vs14","span":{"filename":"src/windows/find_tools.rs","begin":[100,4],"end":[100,8]},"visibility":"default","docs":"Visual Studio 14 (2015)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13303:5424":{"id":"2:13303:5424","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43972:4546","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13386:3424":{"id":"2:13386:3424","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:4979"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:5727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/tool.rs","begin":[40,0],"end":[400,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:173:2642","0:175:1303","0:176:331","0:177:696","0:178:3425","0:179:4282","0:180:4259","0:181:2638","0:183:2650"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:317:2892":{"id":"0:317:2892","crate_id":0,"name":"get_compiler","span":{"filename":"src/lib.rs","begin":[1746,4],"end":[1751,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis function will return a `Tool` which represents the culmination\nof this configuration at a snapshot in time. The returned compiler can\nbe inspected (e.g. the path, arguments, environment) to forward along to\nother tools, or the `to_command` method can be used to invoke the\ncompiler itself.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13402:29046":{"id":"2:13402:29046","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:467":{"id":"0:467","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,31],"end":[94,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3208:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:307:2930":{"id":"0:307:2930","crate_id":0,"name":"compile","span":{"filename":"src/lib.rs","begin":[1409,4],"end":[1413,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\n# Library name\n\nThe `output` string argument determines the file name for the compiled\nlibrary. The Rust compiler will create an assembly named \"lib\"+output+\".a\".\nMSVC will create a file named output+\".lib\".\n\nThe choice of `output` is close to arbitrary, but:\n\n- must be nonempty,\n- must not contain a path separator (`/`),\n- must be unique across all `compile` invocations made by the same build\n  script.\n\nIf your build script compiles a single source file, the base name of\nthat source file would usually be reasonable:\n\n```no_run\ncc::Build::new().file(\"blobstore.c\").compile(\"blobstore\");\n```\n\nCompiling multiple source files, some people use their crate's name, or\ntheir crate's name + \"-cc\".\n\nOtherwise, please use your imagination.\n\nFor backwards compatibility, if `output` starts with \"lib\" *and* ends\nwith \".a\", a second \"lib\" prefix and \".a\" suffix do not get added on,\nbut this usage is deprecated; please omit `lib` and `.a` in the argument\nthat you pass.\n\n# Panics\n\nPanics if `output` is not formatted correctly or if one of the underlying\ncompiler commands fails. It can also panic if it fails reading file names\nor creating directories.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13411:11346":{"id":"2:13411:11346","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5025:11346"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44294:5745","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13313:2644":{"id":"2:13313:2644","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:4979"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:349:3387":{"id":"0:349:3387","crate_id":0,"name":"get_archiver","span":{"filename":"src/lib.rs","begin":[3132,4],"end":[3137,5]},"visibility":"public","docs":"Get the archiver (ar) that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5687:5719"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5654:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5686:3410":{"id":"5:5686:3410","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3213:247-0:521:2479":{"id":"a:2:3213:247-0:521:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:179:4282":{"id":"0:179:4282","crate_id":0,"name":"cflags_env","span":{"filename":"src/tool.rs","begin":[361,4],"end":[370,5]},"visibility":"public","docs":"Returns the compiler flags in format of CFLAGS environment variable.\nImportant here - this will not be CFLAGS from env, its internal gcc's flags to use as CFLAGS\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:2073:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:355:3398":{"id":"0:355:3398","crate_id":0,"name":"try_get_ranlib","span":{"filename":"src/lib.rs","begin":[3196,4],"end":[3202,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nThis will return a result instead of panicking;\nsee [`Self::get_ranlib`] for the complete description.","links":{"`Self::get_ranlib`":"0:354:3397"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42238:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5654:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42199:4893-0:521:2479":{"id":"a:2:42199:4893-0:521:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42199:4893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3832-0:449:3874":{"id":"b:2:3832-0:449:3874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32338:4715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3830:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3834:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:462":{"id":"0:462","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,16],"end":[94,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32339:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2720-0:521:2479":{"id":"b:2:2720-0:521:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32338:4715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2714:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2722:28260"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:229:804":{"id":"0:229:804","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[357,4],"end":[359,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10360:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10341:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:354:3397":{"id":"0:354:3397","crate_id":0,"name":"get_ranlib","span":{"filename":"src/lib.rs","begin":[3185,4],"end":[3190,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5687:5719"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5654:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32396:4716-0:449:3874":{"id":"a:2:32396:4716-0:449:3874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32396:4716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13273":{"id":"2:13273","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13274:1000","2:13275:2658","2:13276:36064","2:13277:36065","2:13279:36066","2:13282:4198","2:13283:36067","2:13284:336","2:13285:31235","2:13286:2627","2:13288:31232","2:13290:31233","2:13292:31234","2:13294:36068","2:13295:36069","2:13296:3347","2:13297:31256","2:13298:31259","2:13299:31260","2:13301:4258","2:13302:8424","2:13303:5424","2:13304:3375","2:13306:3604","2:13309:29133","2:13311:36070","2:13312:34053","2:13313:2644","2:13316:2862","2:13319:2863","2:13322:2872","2:13326:3348","2:13330:3192","2:13333:4178","2:13336:31263","2:13339:36071","2:13342:36072","2:13345:31265","2:13348:31267","2:13351:3091","2:13354:31269","2:13357:4286","2:13360:36073","2:13363:36074","2:13366:36075","2:13369:3370","2:13371:36076","2:13373:4049","2:13375:36077","2:13376:36078","2:13377:36079","2:13380:3350","2:13383:3712","2:13386:3424","2:13389:3428","2:13392:36080","2:13395:36081","2:13398:3217","2:13400:29042","2:13401:32402","2:13402:29046","2:13403:29047","2:13404:29048","2:13405:32405","2:13406:32406","2:13407:32407","2:13408:36082","2:13411:11346","2:13412:36083"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:793-0:479:2468":{"id":"b:5:793-0:479:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2733:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:2992","5:796:2865","5:797:5216"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:264:2493":{"id":"0:264:2493","crate_id":0,"name":"cudart","span":{"filename":"src/lib.rs","begin":[846,4],"end":[851,5]},"visibility":"public","docs":"Link CUDA run-time.\n\nThis option mimics the `--cudart` NVCC command-line option. Just like\nthe original it accepts `{none|shared|static}`, with default being\n`static`. The method has to be invoked after `.cuda(true)`, or not\nat all, if the default is right for the project.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cudart",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:237:2570":{"id":"0:237:2570","crate_id":0,"name":"includes","span":{"filename":"src/lib.rs","begin":[470,4],"end":[479,5]},"visibility":"public","docs":"Add multiple directories to the `-I` include path.\n\n# Example\n\n```no_run\n# use std::path::Path;\n# let condition = true;\n#\nlet mut extra_dir = None;\nif condition {\n    extra_dir = Some(Path::new(\"/path/to\"));\n}\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .includes(extra_dir)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dirs",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8297:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:8297:165","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2958:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:2492":{"id":"0:273:2492","crate_id":0,"name":"cpp_set_stdlib","span":{"filename":"src/lib.rs","begin":[1019,4],"end":[1027,5]},"visibility":"public","docs":"Force the C++ compiler to use the specified standard library.\n\nSetting this option will automatically set `cpp_link_stdlib` to the same\nvalue.\n\nThe default value of this option is always `None`.\n\nThis option has no effect when compiling for a Visual Studio based\ntarget.\n\nThis option sets the `-stdlib` flag, which is only supported by some\ncompilers (clang, icc) but not by others (gcc). The library will not\ndetect which compiler is used, as such it is the responsibility of the\ncaller to ensure that this option is only used in conjunction with a\ncompiler which supports the `-stdlib` flag.\n\nA value of `None` indicates that no specific C++ standard library should\nbe used, otherwise `-stdlib` is added to the compile invocation.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .cpp_set_stdlib(\"c++\")\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_set_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2964:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298:2503":{"id":"0:298:2503","crate_id":0,"name":"static_crt","span":{"filename":"src/lib.rs","begin":[1228,4],"end":[1231,5]},"visibility":"public","docs":"Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.\n\nThis option defaults to `false`, and affect only msvc targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_crt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:283:2494":{"id":"0:283:2494","crate_id":0,"name":"out_dir","span":{"filename":"src/lib.rs","begin":[1109,4],"end":[1112,5]},"visibility":"public","docs":"Configures the output directory where all object files and static\nlibraries will be located.\n\nThis option is automatically scraped from the `OUT_DIR` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["out_dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2958:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32396:4716-0:479:2468":{"id":"a:2:32396:4716-0:479:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32396:4716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5701:36779":{"id":"5:5701:36779","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:2473","`String`":"5:7744:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2473","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3004:1813":{"id":"2:3004:1813","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3000-0:479:2468":{"id":"b:2:3000-0:479:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2970:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3003:137","2:3004:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13373:4049":{"id":"2:13373:4049","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:256:2488":{"id":"0:256:2488","crate_id":0,"name":"no_default_flags","span":{"filename":"src/lib.rs","begin":[778,4],"end":[781,5]},"visibility":"public","docs":"Disables the generation of default compiler flags. The default compiler\nflags may cause conflicts in some cross compiling scenarios.\n\nSetting the `CRATE_CC_NO_DEFAULTS` environment variable has the same\neffect as setting this to `true`. The presence of the environment\nvariable and the value of `no_default_flags` will be OR'd together.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["no_default_flags",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2717-0:449:3874":{"id":"b:2:2717-0:449:3874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32338:4715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2711:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2719:2456"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32337:237-0:588:137":{"id":"a:2:32337:237-0:588:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13333:4178":{"id":"2:13333:4178","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:4979"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12778:5734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3005-0:588:137":{"id":"b:2:3005-0:588:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3008:137","2:3009:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:564:475":{"id":"0:564:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[263,9],"end":[263,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13405:32405":{"id":"2:13405:32405","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1060:40210"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:226":{"id":"0:226","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[350,0],"end":[354,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2967:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"1:3067:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:227:834"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:350:3388":{"id":"0:350:3388","crate_id":0,"name":"try_get_archiver","span":{"filename":"src/lib.rs","begin":[3143,4],"end":[3145,5]},"visibility":"public","docs":"Get the archiver that's in use for this configuration.\n\nThis will return a result instead of panicking;\nsee [`Self::get_archiver`] for the complete description.","links":{"`Self::get_archiver`":"0:349:3387"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42238:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5654:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:588:137":{"id":"b:5:793-0:588:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2733:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:2992","5:796:2865","5:797:5216"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13297:31256":{"id":"2:13297:31256","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13296:3347","str::split_at_mut_checked":"2:13299:31260"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13301:4258":{"id":"2:13301:4258","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12363:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43956:5740","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13360:36073":{"id":"2:13360:36073","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12963:4979","`DoubleEndedIterator`":"2:8335:129","prim@char":"1:12363:471","str::matches":"2:13357:4286"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44208:5752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:5727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13366:36075":{"id":"2:13366:36075","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12963:4979","`DoubleEndedIterator`":"2:8335:129","prim@char":"1:12363:471","str::match_indices":"2:13363:36074"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44154:5750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:5727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:235:936":{"id":"0:235:936","crate_id":0,"name":"include","span":{"filename":"src/lib.rs","begin":[447,4],"end":[450,5]},"visibility":"public","docs":"Add a directory to the `-I` or include path for headers\n\n# Example\n\n```no_run\nuse std::path::Path;\n\nlet library_path = Path::new(\"/path/to/library\");\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .include(library_path)\n    .include(\"src\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2958:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3834:1826":{"id":"2:3834:1826","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39820:8339","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:296:2502":{"id":"0:296:2502","crate_id":0,"name":"use_plt","span":{"filename":"src/lib.rs","begin":[1209,4],"end":[1212,5]},"visibility":"public","docs":"Configures whether the Procedure Linkage Table is used for indirect\ncalls into shared libraries.\n\nThe PLT is used to provide features like lazy binding, but introduces\na small performance loss due to extra pointer indirection. Setting\n`use_plt` to `false` can provide a small performance increase.\n\nNote that skipping the PLT requires a recent version of GCC/Clang.\n\nThis only applies to ELF targets. It has no effect on other platforms.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["use_plt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:292:2822":{"id":"0:292:2822","crate_id":0,"name":"cargo_warnings","span":{"filename":"src/lib.rs","begin":[1165,4],"end":[1168,5]},"visibility":"public","docs":"Define whether compile warnings should be emitted for cargo. Defaults to\n`true`.\n\nIf disabled, compiler messages will not be printed.\nIssues unrelated to the compilation will always produce cargo warnings regardless of this setting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32337:237-0:521:2479":{"id":"a:2:32337:237-0:521:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:285:504":{"id":"0:285:504","crate_id":0,"name":"compiler","span":{"filename":"src/lib.rs","begin":[1119,4],"end":[1122,5]},"visibility":"public","docs":"Configures the compiler to be used to produce output.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["compiler",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2958:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291:2630":{"id":"0:291:2630","crate_id":0,"name":"cargo_metadata","span":{"filename":"src/lib.rs","begin":[1155,4],"end":[1158,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.\n\nThe emitted metadata is:\n\n - `rustc-link-lib=static=`*compiled lib*\n - `rustc-link-search=native=`*target folder*\n - When target is MSVC, the ATL-MFC libs are added via `rustc-link-search=native=`\n - When C++ is enabled, the C++ stdlib is added via `rustc-link-lib`\n - If `emit_rerun_if_env_changed` is not `false`, `rerun-if-env-changed=`*env*\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_metadata",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3248:5125-0:521:2479":{"id":"a:2:3248:5125-0:521:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3248:5125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2996:834":{"id":"2:2996:834","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:254:2504":{"id":"0:254:2504","crate_id":0,"name":"shared_flag","span":{"filename":"src/lib.rs","begin":[748,4],"end":[751,5]},"visibility":"public","docs":"Set the `-shared` flag.\n\nWhen enabled, the compiler will produce a shared object which can\nthen be linked with other objects to form an executable.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["shared_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:454:3880":{"id":"0:454:3880","crate_id":0,"name":"Vs15","span":{"filename":"src/windows/find_tools.rs","begin":[102,4],"end":[102,8]},"visibility":"default","docs":"Visual Studio 15 (2017)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:267:2454":{"id":"0:267:2454","crate_id":0,"name":"warnings","span":{"filename":"src/lib.rs","begin":[924,4],"end":[928,5]},"visibility":"public","docs":"Set warnings flags.\n\nAdds some flags:\n- \"-Wall\" for MSVC.\n- \"-Wall\", \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13279:36066":{"id":"2:13279:36066","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13277:36065"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:309:2937":{"id":"0:309:2937","crate_id":0,"name":"try_compile_intermediates","span":{"filename":"src/lib.rs","begin":[1431,4],"end":[1438,5]},"visibility":"public","docs":"Run the compiler, generating intermediate files, but without linking\nthem into an archive file.\n\nThis will return a result instead of panicking; see `compile_intermediates()` for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42238:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7158:264","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5335:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32396:4716-0:521:2479":{"id":"a:2:32396:4716-0:521:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32396:4716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:563":{"id":"0:563","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[263,9],"end":[263,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2733:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:564:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13298:31259":{"id":"2:13298:31259","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13299:31260"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702:4568":{"id":"5:5702:4568","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13284:336":{"id":"2:13284:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13285:31235","`u8`":"1:12382:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:491":{"id":"0:491","crate_id":0,"name":null,"span":{"filename":"src/tool.rs","begin":[26,16],"end":[26,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_docs)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10386:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:492:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3213:247-0:449:3874":{"id":"a:2:3213:247-0:449:3874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2720-0:479:2468":{"id":"b:2:2720-0:479:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32338:4715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2714:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2722:28260"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13383:3712":{"id":"2:13383:3712","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:4979"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13311:36070":{"id":"2:13311:36070","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44250:5748","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3000-0:521:2479":{"id":"b:2:3000-0:521:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2970:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3003:137","2:3004:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:490:475":{"id":"0:490:475","crate_id":0,"name":"clone","span":{"filename":"src/tool.rs","begin":[26,9],"end":[26,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280:2792":{"id":"0:280:2792","crate_id":0,"name":"opt_level_str","span":{"filename":"src/lib.rs","begin":[1078,4],"end":[1081,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13348:31267":{"id":"2:13348:31267","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12363:471","str::splitn":"2:13345:31265","self::pattern":"2:12963:4979"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44108:5754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:5727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:29044":{"id":"5:5703:29044","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13403:29047"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13403:29047":{"id":"2:13403:29047","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:279:2495":{"id":"0:279:2495","crate_id":0,"name":"opt_level","span":{"filename":"src/lib.rs","begin":[1069,4],"end":[1072,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"primitive":"u32"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492:804":{"id":"0:492:804","crate_id":0,"name":"fmt","span":{"filename":"src/tool.rs","begin":[26,16],"end":[26,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10360:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10341:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:281:606":{"id":"0:281:606","crate_id":0,"name":"debug","span":{"filename":"src/lib.rs","begin":[1088,4],"end":[1091,5]},"visibility":"public","docs":"Configures whether the compiler will emit debug information when\ngenerating object files.\n\nThis option is automatically scraped from the `DEBUG` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["debug",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:565":{"id":"0:565","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[263,16],"end":[263,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10386:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:566:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:227:834":{"id":"0:227:834","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[351,4],"end":[353,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"io::Error","id":"1:3067:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13330:3192":{"id":"2:13330:3192","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12963:4979","`DoubleEndedIterator`":"2:8335:129","prim@char":"1:12363:471","str::split_whitespace":"2:13304:3375","str::rsplit":"2:13336:31263"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43986:4547","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13299:31260":{"id":"2:13299:31260","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13298:31259"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:2872":{"id":"0:36:2872","crate_id":0,"name":"find","span":{"filename":"src/windows/find_tools.rs","begin":[51,0],"end":[53,1]},"visibility":"public","docs":"Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.\n\nThe `target` argument is the target that the tool should work for (e.g.\ncompile or link for) and the `tool` argument is the tool to find (e.g.\n`cl.exe` or `link.exe`).\n\nThis function will return `None` if the tool could not be found, or it will\nreturn `Some(cmd)` which represents a command that's ready to execute the\ntool with the appropriate environment variables set.\n\nNote that this function always returns `None` for non-MSVC targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::process::Command","id":"1:5654:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:239:2575":{"id":"0:239:2575","crate_id":0,"name":"define","span":{"filename":"src/lib.rs","begin":[492,4],"end":[496,5]},"visibility":"public","docs":"Specify a `-D` variable with an optional value.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .define(\"FOO\", \"BAR\")\n    .define(\"BAZ\", None)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["val",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2964:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13401:32402":{"id":"2:13401:32402","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40006:16641","Self::is_ascii":"2:13400:29042"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40006:16641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13275:2658":{"id":"2:13275:2658","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:247:2594":{"id":"0:247:2594","crate_id":0,"name":"ar_flag","span":{"filename":"src/lib.rs","begin":[548,4],"end":[551,5]},"visibility":"public","docs":"Add a flag to the invocation of the ar\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .file(\"src/bar.c\")\n    .ar_flag(\"/NODEFAULTLIB:libc.dll\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:265:1718":{"id":"0:265:1718","crate_id":0,"name":"std","span":{"filename":"src/lib.rs","begin":[879,4],"end":[882,5]},"visibility":"public","docs":"Specify the C or C++ language standard version.\n\nThese values are common to modern versions of GCC, Clang and MSVC:\n- `c11` for ISO/IEC 9899:2011\n- `c17` for ISO/IEC 9899:2018\n- `c++14` for ISO/IEC 14882:2014\n- `c++17` for ISO/IEC 14882:2017\n- `c++20` for ISO/IEC 14882:2020\n\nOther values have less broad support, e.g. MSVC does not support `c++11`\n(`c++14` is the minimum), `c89` (omit the flag instead) or `c99`.\n\nFor compiling C++ code, you should also set `.cpp(true)`.\n\nThe default is that no standard flag is passed to the compiler, so the\nlanguage version will be the compiler's default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/modern.cpp\")\n    .cpp(true)\n    .std(\"c++17\")\n    .compile(\"modern\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["std",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13389:3428":{"id":"2:13389:3428","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:4979"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:5727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13283:36067":{"id":"2:13283:36067","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3248:5125-0:479:2468":{"id":"a:2:3248:5125-0:479:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3248:5125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3248:5125-0:449:3874":{"id":"a:2:3248:5125-0:449:3874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3248:5125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13357:4286":{"id":"2:13357:4286","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12963:4979","`DoubleEndedIterator`":"2:8335:129","prim@char":"1:12363:471","str::rmatches":"2:13360:36073"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44190:5751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13304:3375":{"id":"2:13304:3375","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13306:3604"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44260:5735","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:257:793":{"id":"0:257:793","crate_id":0,"name":"file","span":{"filename":"src/lib.rs","begin":[784,4],"end":[787,5]},"visibility":"public","docs":"Add a file which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2958:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13339:36071":{"id":"2:13339:36071","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12963:4979","str::split":"2:13330:3192","prim@char":"1:12363:471","`DoubleEndedIterator`":"2:8335:129","str::rsplit_terminator":"2:13342:36072"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44036:5757","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5692:3719":{"id":"5:5692:3719","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252:2663":{"id":"0:252:2663","crate_id":0,"name":"flag_if_supported","span":{"filename":"src/lib.rs","begin":[701,4],"end":[704,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler if it supports it\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag_if_supported(\"-Wlogical-op\") // only supported by GCC\n    .flag_if_supported(\"-Wunreachable-code\") // only supported by clang\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32337:237-0:479:2468":{"id":"a:2:32337:237-0:479:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:248:2601":{"id":"0:248:2601","crate_id":0,"name":"asm_flag","span":{"filename":"src/lib.rs","begin":[567,4],"end":[570,5]},"visibility":"public","docs":"Add a flag that will only be used with assembly files.\n\nThe flag will be applied to input files with either a `.s` or\n`.asm` extension (case insensitive).\n\n# Example\n\n```no_run\ncc::Build::new()\n    .asm_flag(\"-Wa,-defsym,abc=1\")\n    .file(\"src/foo.S\")  // The asm flag will be applied here\n    .file(\"src/bar.c\")  // The asm flag will not be applied here\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:318:2633":{"id":"0:318:2633","crate_id":0,"name":"try_get_compiler","span":{"filename":"src/lib.rs","begin":[1757,4],"end":[1832,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis will return a result instead of panicking; see\n[`get_compiler()`](Self::get_compiler) for the complete description.","links":{"Self::get_compiler":"0:317:2892"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42238:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:2650":{"id":"0:183:2650","crate_id":0,"name":"is_like_msvc","span":{"filename":"src/tool.rs","begin":[394,4],"end":[399,5]},"visibility":"public","docs":"Whether the tool is MSVC-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:193-0:479:2468":{"id":"0:193-0:479:2468","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,0],"end":[246,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tool::Tool","name":"Tool","id":"0:479:2468","glob":false}}},"b:2:3000-0:449:3874":{"id":"b:2:3000-0:449:3874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2970:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3003:137","2:3004:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:308:2936":{"id":"0:308:2936","crate_id":0,"name":"compile_intermediates","span":{"filename":"src/lib.rs","begin":[1420,4],"end":[1425,5]},"visibility":"public","docs":"Run the compiler, generating intermediate files, but without linking\nthem into an archive file.\n\nThis will return a list of compiled object files, in the same order\nas they were passed in as `file`/`files` methods.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:7158:264","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5335:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253:2675":{"id":"0:253:2675","crate_id":0,"name":"try_flags_from_environment","span":{"filename":"src/lib.rs","begin":[729,4],"end":[733,5]},"visibility":"public","docs":"Add flags from the specified environment variable.\n\nNormally the `cc` crate will consult with the standard set of environment\nvariables (such as `CFLAGS` and `CXXFLAGS`) to construct the compiler invocation. Use of\nthis method provides additional levers for the end user to use when configuring the build\nprocess.\n\nJust like the standard variables, this method will search for an environment variable with\nappropriate target prefixes, when appropriate.\n\n# Examples\n\nThis method is particularly beneficial in introducing the ability to specify crate-specific\nflags.\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .try_flags_from_environment(concat!(env!(\"CARGO_PKG_NAME\"), \"_CFLAGS\"))\n    .expect(\"the environment variable must be specified and UTF-8\")\n    .compile(\"foo\");\n```\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["environ_key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42238:226","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:591":{"id":"0:591","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[333,9],"end":[333,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2733:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:592:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:228":{"id":"0:228","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[356,0],"end":[360,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10391:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:229:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:293:2827":{"id":"0:293:2827","crate_id":0,"name":"cargo_debug","span":{"filename":"src/lib.rs","begin":[1175,4],"end":[1178,5]},"visibility":"public","docs":"Define whether debug information should be emitted for cargo. Defaults to whether\nor not the environment variable `CC_ENABLE_DEBUG_OUTPUT` is set.\n\nIf enabled, the compiler will emit debug information when generating object files,\nsuch as the command invoked and the exit status.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_debug",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:242:2579":{"id":"0:242:2579","crate_id":0,"name":"object","span":{"filename":"src/lib.rs","begin":[499,4],"end":[502,5]},"visibility":"public","docs":"Add an arbitrary object file to link in","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["obj",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2958:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:245:2588":{"id":"0:245:2588","crate_id":0,"name":"remove_flag","span":{"filename":"src/lib.rs","begin":[532,4],"end":[535,5]},"visibility":"public","docs":"Removes a compiler flag that was added by [`Build::flag`].\n\nWill not remove flags added by other means (default flags,\nflags from env, and so on).\n\n# Example\n```\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"unwanted_flag\")\n    .remove_flag(\"unwanted_flag\");\n```","links":{"`Build::flag`":"0:244:2474"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:316:3011":{"id":"0:316:3011","crate_id":0,"name":"expand","span":{"filename":"src/lib.rs","begin":[1721,4],"end":[1726,5]},"visibility":"public","docs":"Run the compiler, returning the macro-expanded version of the input files.\n\nThis is only relevant for C and C++ files.\n\n# Panics\nPanics if more than one file is present in the config, or if compiler\npath has an invalid file name.\n\n# Example\n```no_run\nlet out = cc::Build::new().file(\"src/foo.c\").expand();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:7158:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3008:137":{"id":"2:3008:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32261:4607","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:592:475":{"id":"0:592:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[333,9],"end":[333,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:797:5216":{"id":"5:797:5216","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13274:1000":{"id":"2:13274:1000","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12363:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13285:31235":{"id":"2:13285:31235","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12382:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:331":{"id":"0:176:331","crate_id":0,"name":"args","span":{"filename":"src/tool.rs","begin":[326,4],"end":[328,5]},"visibility":"public","docs":"Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"OsString","id":"1:2073:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2719:2456":{"id":"2:2719:2456","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294:2833":{"id":"0:294:2833","crate_id":0,"name":"link_lib_modifier","span":{"filename":"src/lib.rs","begin":[1185,4],"end":[1188,5]},"visibility":"public","docs":"Adds a native library modifier that will be added to the\n`rustc-link-lib=static:MODIFIERS=LIBRARY_NAME` metadata line\nemitted for cargo if `cargo_metadata` is enabled.\nSee <https://doc.rust-lang.org/rustc/command-line-arguments.html#-l-link-the-generated-crate-to-a-native-library>\nfor the list of modifiers accepted by rustc.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["link_lib_modifier",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:594:804":{"id":"0:594:804","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[333,16],"end":[333,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10360:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10341:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:593":{"id":"0:593","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[333,16],"end":[333,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10386:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:594:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13309:29133":{"id":"2:13309:29133","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44240:4543","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13380:3350":{"id":"2:13380:3350","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:4979"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13292:31234":{"id":"2:13292:31234","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:295:1309":{"id":"0:295:1309","crate_id":0,"name":"pic","span":{"filename":"src/lib.rs","begin":[1194,4],"end":[1197,5]},"visibility":"public","docs":"Configures whether the compiler will emit position independent code.\n\nThis option defaults to `false` for `windows-gnu` and bare metal targets and\nto `true` for all other targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pic",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:230":{"id":"0:230","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[362,0],"end":[362,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","description","cause","provide"],"trait":{"name":"Error","id":"2:3053:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3213:247-0:588:137":{"id":"a:2:3213:247-0:588:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:262:2490":{"id":"0:262:2490","crate_id":0,"name":"cpp","span":{"filename":"src/lib.rs","begin":[816,4],"end":[819,5]},"visibility":"public","docs":"Set C++ support.\n\nThe other `cpp_*` options will only become active if this is set to\n`true`.\n\nThe name of the C++ standard library to link is decided by:\n1. If [`cpp_link_stdlib`](Build::cpp_link_stdlib) is set, use its value.\n2. Else if the `CXXSTDLIB` environment variable is set, use its value.\n3. Else the default is `libc++` for OS X and BSDs, `libc++_shared` for Android,\n`None` for MSVC and `libstdc++` for anything else.","links":{"Build::cpp_link_stdlib":"0:269:2491"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:289:2498":{"id":"0:289:2498","crate_id":0,"name":"ranlib","span":{"filename":"src/lib.rs","begin":[1139,4],"end":[1142,5]},"visibility":"public","docs":"Configures the tool used to index archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ranlib",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2958:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3863,0],"end":[3867,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3042:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:407:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13392:36080":{"id":"2:13392:36080","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:4979"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13412:36083":{"id":"2:13412:36083","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5022:36083"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44303:5746","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:407:60":{"id":"0:407:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[3864,4],"end":[3866,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3005-0:449:3874":{"id":"b:2:3005-0:449:3874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3008:137","2:3009:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13369:3370":{"id":"2:13369:3370","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:461:804":{"id":"0:461:804","crate_id":0,"name":"fmt","span":{"filename":"src/windows/find_tools.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10360:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10341:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3248:5125-0:588:137":{"id":"a:2:3248:5125-0:588:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3248:5125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:796:2865":{"id":"5:796:2865","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:696":{"id":"0:177:696","crate_id":0,"name":"env","span":{"filename":"src/tool.rs","begin":[334,4],"end":[336,5]},"visibility":"public","docs":"Returns the set of environment variables needed for this compiler to\noperate.\n\nThis is typically only used for MSVC compilers currently.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"tuple":[{"resolved_path":{"name":"OsString","id":"1:2073:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"OsString","id":"1:2073:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:795:2992":{"id":"5:795:2992","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:234:1181":{"id":"0:234:1181","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[386,4],"end":[430,5]},"visibility":"public","docs":"Construct a new instance of a blank set of configuration.\n\nThis builder is finished with the [`compile`] function.\n\n[`compile`]: struct.Build.html#method.compile","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:259:2489":{"id":"0:259:2489","crate_id":0,"name":"files","span":{"filename":"src/lib.rs","begin":[790,4],"end":[799,5]},"visibility":"public","docs":"Add files which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8297:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:8297:165","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2958:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13404:29048":{"id":"2:13404:29048","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:175:1303":{"id":"0:175:1303","crate_id":0,"name":"path","span":{"filename":"src/tool.rs","begin":[320,4],"end":[322,5]},"visibility":"public","docs":"Returns the path for this compiler.\n\nNote that this may not be a path to a file on the filesystem, e.g. \"cc\",\nbut rather something which will be resolved when a process is spawned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2717-0:479:2468":{"id":"b:2:2717-0:479:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32338:4715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2711:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2719:2456"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2717-0:588:137":{"id":"b:2:2717-0:588:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32338:4715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2711:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2719:2456"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:468":{"id":"0:468","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,37],"end":[94,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2733:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:469:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:464:699":{"id":"0:464:699","crate_id":0,"name":"eq","span":{"filename":"src/windows/find_tools.rs","begin":[94,16],"end":[94,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2990-0:479:2468":{"id":"b:2:2990-0:479:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2993:2536"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:250:2619":{"id":"0:250:2619","crate_id":0,"name":"is_flag_supported","span":{"filename":"src/lib.rs","begin":[602,4],"end":[604,5]},"visibility":"public","docs":"Run the compiler to test if it accepts the given flag.\n\nFor a convenience method for setting flags conditionally,\nsee `flag_if_supported()`.\n\nIt may return error if it's unable to run the compiler with a test file\n(e.g. the compiler is missing or a write to the `out_dir` failed).\n\nNote: Once computed, the result of this call is stored in the\n`known_flag_support` field. If `is_flag_supported(flag)`\nis called again, the result will be read from the hash table.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42238:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}},{"type":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:233":{"id":"0:233","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[380,0],"end":[3861,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:234:1181","0:235:936","0:237:2570","0:239:2575","0:242:2579","0:244:2474","0:245:2588","0:247:2594","0:248:2601","0:250:2619","0:252:2663","0:253:2675","0:254:2504","0:255:2505","0:256:2488","0:257:793","0:259:2489","0:261:2697","0:262:2490","0:263:2292","0:264:2493","0:265:1718","0:266:2506","0:267:2454","0:268:2507","0:269:2491","0:273:2492","0:277:1752","0:278:879","0:279:2495","0:280:2792","0:281:606","0:282:2496","0:283:2494","0:285:504","0:287:2497","0:289:2498","0:291:2630","0:292:2822","0:293:2827","0:294:2833","0:295:1309","0:296:2502","0:297:2511","0:298:2503","0:302:2856","0:307:2930","0:308:2936","0:309:2937","0:314:3001","0:316:3011","0:317:2892","0:318:2633","0:349:3387","0:350:3388","0:354:3397","0:355:3398"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2994-0:449:3874":{"id":"b:2:2994-0:449:3874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2996:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42200:4892-0:449:3874":{"id":"a:2:42200:4892-0:449:3874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42200:4892","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3009:1811":{"id":"2:3009:1811","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:463":{"id":"0:463","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,16],"end":[94,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2767:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:464:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13395:36081":{"id":"2:13395:36081","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:4979"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:5727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5685:36776":{"id":"5:5685:36776","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2473","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:2473","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13351:3091":{"id":"2:13351:3091","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5704:29045":{"id":"5:5704:29045","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13404:29048"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314:3001":{"id":"0:314:3001","crate_id":0,"name":"try_expand","span":{"filename":"src/lib.rs","begin":[1671,4],"end":[1707,5]},"visibility":"public","docs":"This will return a result instead of panicking; see expand() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42238:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7158:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32396:4716-0:588:137":{"id":"a:2:32396:4716-0:588:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32396:4716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:173:2642":{"id":"0:173:2642","crate_id":0,"name":"to_command","span":{"filename":"src/tool.rs","begin":[292,4],"end":[314,5]},"visibility":"public","docs":"Converts this compiler into a `Command` that's ready to be run.\n\nThis is useful for when the compiler needs to be executed and the\ncommand returned will already have the initial arguments and environment\nvariables configured.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5654:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2720-0:449:3874":{"id":"b:2:2720-0:449:3874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32338:4715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2714:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2722:28260"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:297:2511":{"id":"0:297:2511","crate_id":0,"name":"emit_rerun_if_env_changed","span":{"filename":"src/lib.rs","begin":[1220,4],"end":[1223,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo to detect environment\nchanges that should trigger a rebuild.\n\nThis has no effect if the `cargo_metadata` option is `false`.\n\nThis option defaults to `true`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["emit_rerun_if_env_changed",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:521:2479":{"id":"0:521:2479","crate_id":0,"name":"Build","span":{"filename":"src/lib.rs","begin":[264,0],"end":[306,1]},"visibility":"public","docs":"A builder for compilation of a native library.\n\nA `Build` is the main type of the `cc` crate and is used to control all the\nvarious configuration options and such of a compile. You'll find more\ndocumentation on each method itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:233","a:2:42199:4893-0:521:2479","a:2:32337:237-0:521:2479","a:2:32396:4716-0:521:2479","a:2:3248:5125-0:521:2479","a:2:3213:247-0:521:2479","a:2:42200:4892-0:521:2479","b:2:2717-0:521:2479","b:2:2994-0:521:2479","b:2:3000-0:521:2479","b:2:3832-0:521:2479","b:2:3005-0:521:2479","b:2:2990-0:521:2479","b:2:2720-0:521:2479","b:5:793-0:521:2479","0:565","0:563","0:406"]}}},"b:2:2720-0:588:137":{"id":"b:2:2720-0:588:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32338:4715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2714:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2722:28260"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5689:36777":{"id":"5:5689:36777","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3832-0:521:2479":{"id":"b:2:3832-0:521:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32338:4715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3830:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3834:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5700:36778":{"id":"5:5700:36778","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13322:2872":{"id":"2:13322:2872","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42107:191","prim@char":"1:12363:471","self::pattern":"2:12963:4979"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13326:3348":{"id":"2:13326:3348","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42107:191","prim@char":"1:12363:471","self::pattern":"2:12963:4979"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:5727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13286:2627":{"id":"2:13286:2627","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42107:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13371:36076":{"id":"2:13371:36076","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13294:36068":{"id":"2:13294:36068","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12369:1726","str::slice_mut_unchecked":"2:13295:36069","crate::ops::Index":"2:39651:5537"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42200:4892-0:588:137":{"id":"a:2:42200:4892-0:588:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42200:4892","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5684":{"id":"5:5684","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5685:36776","5:5686:3410","5:5689:36777","5:5692:3719","5:5700:36778","5:5701:36779","5:5702:4568","5:5703:29044","5:5704:29045"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:465":{"id":"0:465","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,27],"end":[94,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2772:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13408:36082":{"id":"2:13408:36082","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5024:36082"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44285:5744","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:36069":{"id":"2:13295:36069","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12369:1726","crate::ops::IndexMut":"2:3491:5538","str::slice_unchecked":"2:13294:36068"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:2638":{"id":"0:181:2638","crate_id":0,"name":"is_like_clang","span":{"filename":"src/tool.rs","begin":[378,4],"end":[380,5]},"visibility":"public","docs":"Whether the tool is Clang-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:449:3874":{"id":"0:449:3874","crate_id":0,"name":"VsVers","span":{"filename":"src/windows/find_tools.rs","begin":[96,0],"end":[107,1]},"visibility":"public","docs":"A version of Visual Studio","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:450:3876","0:452:3878","0:454:3880","0:456:3882","0:458:3884"],"impls":["a:2:42199:4893-0:449:3874","a:2:32337:237-0:449:3874","a:2:32396:4716-0:449:3874","a:2:3248:5125-0:449:3874","a:2:3213:247-0:449:3874","a:2:42200:4892-0:449:3874","b:2:2717-0:449:3874","b:2:2994-0:449:3874","b:2:3000-0:449:3874","b:2:3832-0:449:3874","b:2:3005-0:449:3874","b:2:2990-0:449:3874","b:2:2720-0:449:3874","b:5:793-0:449:3874","0:462","0:468","0:460","0:463","0:467","0:465"]}}},"2:2993:2536":{"id":"2:2993:2536","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2967:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:460":{"id":"0:460","crate_id":0,"name":null,"span":{"filename":"src/windows/find_tools.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10386:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:461:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:479:2468":{"id":"0:479:2468","crate_id":0,"name":"Tool","span":{"filename":"src/tool.rs","begin":[28,0],"end":[38,1]},"visibility":"public","docs":"Configuration used to represent an invocation of a C compiler.\n\nThis can be used to figure out what compiler is in use, what the arguments\nto it are, and what the environment variables look like for the compiler.\nThis can be used to further configure other build systems (e.g. forward\nalong CC and/or CFLAGS) or the `to_command` method can be used to run the\ncompiler itself.","links":{},"attrs":["#[allow(missing_docs)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:155","a:2:42199:4893-0:479:2468","a:2:32337:237-0:479:2468","a:2:32396:4716-0:479:2468","a:2:3248:5125-0:479:2468","a:2:3213:247-0:479:2468","a:2:42200:4892-0:479:2468","b:2:2717-0:479:2468","b:2:2994-0:479:2468","b:2:3000-0:479:2468","b:2:3832-0:479:2468","b:2:3005-0:479:2468","b:2:2990-0:479:2468","b:2:2720-0:479:2468","b:5:793-0:479:2468","0:491","0:489"]}}},"2:13375:36077":{"id":"2:13375:36077","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13345:31265":{"id":"2:13345:31265","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:4979","str::rsplitn":"2:13348:31267"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44090:5755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:2491":{"id":"0:269:2491","crate_id":0,"name":"cpp_link_stdlib","span":{"filename":"src/lib.rs","begin":[978,4],"end":[984,5]},"visibility":"public","docs":"Set the standard library to link against when compiling with C++\nsupport.\n\nIf the `CXXSTDLIB` environment variable is set, its value will\noverride the default value, but not the value explicitly set by calling\nthis function.\n\nA value of `None` indicates that no automatic linking should happen,\notherwise cargo will link against the specified library.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n- `c++_shared` or `c++_static` for Android\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .cpp_link_stdlib(\"stdc++\")\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_link_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2964:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:879":{"id":"0:278:879","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[1060,4],"end":[1063,5]},"visibility":"public","docs":"Configures the host assumed by this configuration.\n\nThis option is automatically scraped from the `HOST` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .host(\"arm-linux-gnueabihf\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["host",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13407:32407":{"id":"2:13407:32407","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1060:40210"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2994-0:588:137":{"id":"b:2:2994-0:588:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2996:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:268:2507":{"id":"0:268:2507","crate_id":0,"name":"extra_warnings","span":{"filename":"src/lib.rs","begin":[947,4],"end":[950,5]},"visibility":"public","docs":"Set extra warnings flags.\n\nAdds some flags:\n- nothing for MSVC.\n- \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\n// Disables -Wextra, -Wall remains enabled:\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .extra_warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2717-0:521:2479":{"id":"b:2:2717-0:521:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32338:4715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2711:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2719:2456"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:277:1752":{"id":"0:277:1752","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[1042,4],"end":[1045,5]},"visibility":"public","docs":"Configures the target this configuration will be compiling for.\n\nThis option is automatically scraped from the `TARGET` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .target(\"aarch64-linux-android\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13336:31263":{"id":"2:13336:31263","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12963:4979","`DoubleEndedIterator`":"2:8335:129","prim@char":"1:12363:471","str::split":"2:13330:3192"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44004:5753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:5727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13363:36074":{"id":"2:13363:36074","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12963:4979","`DoubleEndedIterator`":"2:8335:129","prim@char":"1:12363:471","str::rmatch_indices":"2:13366:36075"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44136:5749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:588:137":{"id":"0:588:137","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[334,0],"end":[339,1]},"visibility":"public","docs":"Represents an internal error that occurred, with an explanation.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:42199:4893-0:588:137","a:2:32337:237-0:588:137","a:2:32396:4716-0:588:137","a:2:3248:5125-0:588:137","a:2:3213:247-0:588:137","a:2:42200:4892-0:588:137","b:2:2717-0:588:137","b:2:2994-0:588:137","b:2:3000-0:588:137","b:2:3832-0:588:137","b:2:3005-0:588:137","b:2:2990-0:588:137","b:2:2720-0:588:137","b:5:5937-0:588:137","b:5:793-0:588:137","0:230","0:591","0:593","0:226","0:228"]}}},"b:2:3832-0:479:2468":{"id":"b:2:3832-0:479:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32338:4715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3830:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3834:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42199:4893-0:588:137":{"id":"a:2:42199:4893-0:588:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42199:4893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:456:3882":{"id":"0:456:3882","crate_id":0,"name":"Vs16","span":{"filename":"src/windows/find_tools.rs","begin":[104,4],"end":[104,8]},"visibility":"default","docs":"Visual Studio 16 (2019)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13277:36065":{"id":"2:13277:36065","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13319:2863":{"id":"2:13319:2863","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:4979"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:5727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180:4259":{"id":"0:180:4259","crate_id":0,"name":"is_like_gnu","span":{"filename":"src/tool.rs","begin":[373,4],"end":[375,5]},"visibility":"public","docs":"Whether the tool is GNU Compiler Collection-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13354:31269":{"id":"2:13354:31269","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:5727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13377:36079":{"id":"2:13377:36079","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:4979"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12989:5725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2990-0:449:3874":{"id":"b:2:2990-0:449:3874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2993:2536"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:793-0:449:3874":{"id":"b:5:793-0:449:3874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2733:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:2992","5:796:2865","5:797:5216"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65-0:26:2464":{"id":"0:65-0:26:2464","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,0],"end":[240,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"windows::find_tools","name":"windows_registry","id":"0:26:2464","glob":false}}},"2:13342:36072":{"id":"2:13342:36072","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12963:4979","str::split":"2:13330:3192","prim@char":"1:12363:471","str::split_terminator":"2:13339:36071"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44054:5756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:5726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:5727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:3425":{"id":"0:178:3425","crate_id":0,"name":"cc_env","span":{"filename":"src/tool.rs","begin":[342,4],"end":[356,5]},"visibility":"public","docs":"Returns the compiler command in format of CC environment variable.\nOr empty string if CC env was not present\n\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:2073:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:458:3884":{"id":"0:458:3884","crate_id":0,"name":"Vs17","span":{"filename":"src/windows/find_tools.rs","begin":[106,4],"end":[106,8]},"visibility":"default","docs":"Visual Studio 17 (2022)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:489":{"id":"0:489","crate_id":0,"name":null,"span":{"filename":"src/tool.rs","begin":[26,9],"end":[26,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_docs)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2733:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:490:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13290:31233":{"id":"2:13290:31233","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2722:28260":{"id":"2:2722:28260","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42200:4892-0:479:2468":{"id":"a:2:42200:4892-0:479:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42200:4892","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13296:3347":{"id":"2:13296:3347","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13298:31259","str::split_at_mut":"2:13297:31256"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:521:2479":{"id":"b:5:793-0:521:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2733:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:2992","5:796:2865","5:797:5216"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:266:2506":{"id":"0:266:2506","crate_id":0,"name":"warnings_into_errors","span":{"filename":"src/lib.rs","begin":[903,4],"end":[906,5]},"visibility":"public","docs":"Set warnings into errors flag.\n\nDisabled by default.\n\nWarning: turning warnings into errors only make sense\nif you are a developer of the crate using cc-rs.\nSome warnings only appear on some architecture or\nspecific version of the compiler. Any user of this crate,\nor any other crate depending on it, could fail during\ncompile time.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings_into_errors(true)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings_into_errors",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263:2292":{"id":"0:263:2292","crate_id":0,"name":"cuda","span":{"filename":"src/lib.rs","begin":[831,4],"end":[838,5]},"visibility":"public","docs":"Set CUDA C++ support.\n\nEnabling CUDA will invoke the CUDA compiler, NVCC. While NVCC accepts\nthe most common compiler flags, e.g. `-std=c++17`, some project-specific\nflags might have to be prefixed with \"-Xcompiler\" flag, for example as\n`.flag(\"-Xcompiler\").flag(\"-fpermissive\")`. See the documentation for\n`nvcc`, the CUDA compiler driver, at <https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/>\nfor more information.\n\nIf enabled, this also implicitly enables C++ support.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cuda",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13302:8424":{"id":"2:13302:8424","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12363:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43962:5739","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:244:2474":{"id":"0:244:2474","crate_id":0,"name":"flag","span":{"filename":"src/lib.rs","begin":[514,4],"end":[517,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"-ffunction-sections\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3003:137":{"id":"2:3003:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:26:2464":{"id":"0:26:2464","crate_id":0,"name":"find_tools","span":{"filename":"src/windows/find_tools.rs","begin":[11,0],"end":[1084,1]},"visibility":"public","docs":"A helper module to looking for windows-specific tools:\n1. On Windows host, probe the Windows Registry if needed;\n2. On non-Windows host, check specified environment variables.","links":{},"attrs":["#![allow(clippy::upper_case_acronyms)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:36:2872","0:38:3308","0:449:3874","0:42:3888"],"is_stripped":false}}},"2:13406:32406":{"id":"2:13406:32406","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1060:40210"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42199:4893-0:449:3874":{"id":"a:2:42199:4893-0:449:3874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42199:4893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:255:2505":{"id":"0:255:2505","crate_id":0,"name":"static_flag","span":{"filename":"src/lib.rs","begin":[767,4],"end":[770,5]},"visibility":"public","docs":"Set the `-static` flag.\n\nWhen enabled on systems that support dynamic linking, this prevents\nlinking with the shared libraries.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .static_flag(true)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:3308":{"id":"0:38:3308","crate_id":0,"name":"find_tool","span":{"filename":"src/windows/find_tools.rs","begin":[58,0],"end":[91,1]},"visibility":"public","docs":"Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13306:3604":{"id":"2:13306:3604","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13304:3375"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44269:5733","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3005-0:479:2468":{"id":"b:2:3005-0:479:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3008:137","2:3009:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42199:4893-0:479:2468":{"id":"a:2:42199:4893-0:479:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42199:4893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13288:31232":{"id":"2:13288:31232","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42107:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13398:3217":{"id":"2:13398:3217","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12924:136","`FromStr`":"2:12923:3917"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12923:3917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12923:3917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42200:4892-0:521:2479":{"id":"a:2:42200:4892-0:521:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42200:4892","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13376:36078":{"id":"2:13376:36078","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261:2697":{"id":"0:261:2697","crate_id":0,"name":"get_files","span":{"filename":"src/lib.rs","begin":[802,4],"end":[804,5]},"visibility":"public","docs":"Get the files which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"impl_trait":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8443:178","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5447:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3213:247-0:479:2468":{"id":"a:2:3213:247-0:479:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:479:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2990-0:588:137":{"id":"b:2:2990-0:588:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:588:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2993:2536"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5939:1786":{"id":"5:5939:1786","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32337:237-0:449:3874":{"id":"a:2:32337:237-0:449:3874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:449:3874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3005-0:521:2479":{"id":"b:2:3005-0:521:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3008:137","2:3009:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2994-0:521:2479":{"id":"b:2:2994-0:521:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2996:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2990-0:521:2479":{"id":"b:2:2990-0:521:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:521:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2993:2536"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13282:4198":{"id":"2:13282:4198","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12510:3634"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:450:3876":{"id":"0:450:3876","crate_id":0,"name":"Vs12","span":{"filename":"src/windows/find_tools.rs","begin":[98,4],"end":[98,8]},"visibility":"default","docs":"Visual Studio 12 (2013)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13312:34053":{"id":"2:13312:34053","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44278:5732","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:11402:5753":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:15778:7252":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:23003:8299":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:12342:6514":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:7504:4682":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:8762:4588":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:12494:8268":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:6358:6050":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:13497:6659":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:4605:8211":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:4829:9903":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:656:5608":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:5368:980":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:22381:11437":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:15324:7110":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:8343:10692":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:10044:24043":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:8246:4558":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12433:6525":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:8599:11403":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:3094:2992":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:32261:4607":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:11715:10735":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:5334:10109":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:6543:7613":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:7715:33629":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:5349:10111":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:12510:3634":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:12969:5726":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:15368:7124":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:47080:8567":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:5851:8622":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:46046:8474":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:1696:9858":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:12364:1878":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"11:2121:4692":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:1613:4679":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:6704:5981":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:1586:4680":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6638:10406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:41927:10711":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:46631:8523":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"6:1675:9848":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:5927:7504":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:40766:8355":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:21950:8289":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:11676:8635":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:12387:969":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:7833:16684":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:15957:7280":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"18:698:6183":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11367:6368":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:12374:740":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:43084:10720":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:3462:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:894:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:11094:6082":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:13424:6645":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:10933:4711":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:6199:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:1625:7969":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:12989:5725":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:44418:8425":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4984:9988":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13024:24048":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:10534:37287":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:11509:8264":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:592:8601":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:6572:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:5846:7494":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:5756:7484":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"9:236:4588":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:11405:6396":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:11499:6083":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:12408:6522":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:4830:7466":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:10068:24027":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:3842:7449":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:10439:6336":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:5965:4633":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:12369:1726":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:6335:7594":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:12701:8273":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:15799:7255":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:1838:4148":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"2:22924:8292":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:507:6149":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:14575:6525":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12371:6562":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:15176:7076":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:980:4690":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:4817:10557":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"6:4881:9939":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:735:8044":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:532:9699":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:1920:5353":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:15836:7262":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:1551:9764":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12647:6543":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:10137:24021":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:10999:4000":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:6796:4640":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:1481:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:4929:9964":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:1496:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"11:351:37248":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:15342:7114":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"14:220:7960":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:7033:5546":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:12251:6505":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:22871:8291":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:8171:4710":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:7709:4487":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:14587:6871":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:7492:8065":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:44090:5755":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:6623:10404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:2772:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:31097:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:6521:10342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:5635:10243":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:7448:10571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:15023:7041":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:2234:6222":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:13889:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:7648:7800":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:4085:3253":{"crate_id":1,"path":["std","os"],"kind":"module"},"1:8553:11370":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:43986:4547":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:13604:8280":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:43884:8409":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:12390:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:5385:6334":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:3105:35914":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:7694:16755":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:1604:4684":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:3259:4467":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"15:394:23076":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:5117:10035":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:12381:887":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"18:659:6173":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:6442:7603":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:3648:5661":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:22473:11521":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:8335:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:13538:6671":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:46326:8496":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:4333:11400":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:8619:8666":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:5779:4602":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:2660:7409":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11567:6410":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:5217:10060":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:3456:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:538:9702":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11621:6423":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:3094:5611":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:4672:11404":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:2714:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:4153:5577":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:22379:4712":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:11346:8719":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"6:1507:9739":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"11:740:4686":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:2780:4559":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:6419:10293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:44269:5733":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:884:4678":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:5267:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:8867:4593":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"11:785:4681":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:3032:6059":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:30750:34123":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"16:2748:7413":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:16151:7344":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:8238:8649":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5462:10172":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:44561:16599":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:42641:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:8255:10673":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"0:521:2479":{"crate_id":0,"path":["cc","Build"],"kind":"struct"},"17:12969:6564":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:527:5995":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:40424:8341":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:7316:10518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:3585:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:2937:4712":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:6427:7601":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:7996:8640":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:22226:11441":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:1637:7971":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:7592:4679":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:11198:4591":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:7782:34054":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:12378:894":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:2465:3226":{"crate_id":1,"path":["std","fs","remove_file"],"kind":"function"},"5:5298:4630":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:10829:6040":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:38992:5656":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:10828:37282":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:11051:6364":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:0:4350":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:7341:10536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:7509:7783":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:42149:4679":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:545:9705":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:4886:11404":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:7368:10546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12516:6537":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"9:328:9654":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:2147:10703":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:13199:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:11755:6437":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:14968:7029":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:40610:8350":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:1897:5350":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:10877:6352":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:672:8602":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:379:8599":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:6342:37275":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:7604:10652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11227:6378":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:16235:7363":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:7936:6076":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:40835:8219":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:43832:8406":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:5375:10122":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:1589:9788":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:44876:8447":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:6047:7519":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:11329:8261":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:6631:10405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:10652:4651":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"9:0:4344":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:6813:7663":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"11:809:4683":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:43821:8405":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:2182:8049":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:2974:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:13932:6052":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:2541:2459":{"crate_id":1,"path":["std","io"],"kind":"module"},"14:40:6609":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:14246:6820":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:2289:2458":{"crate_id":1,"path":["std","fs"],"kind":"module"},"2:46227:8491":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:22955:8293":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"18:623:37293":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:6765:10452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:42327:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:6882:10481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:46498:8518":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:12089:6491":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"11:1914:7971":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:2323:23111":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:12041:8267":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:8219:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:40876:8364":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:7665:4483":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:1632:9822":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:5405:10137":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:32428:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"5:1132:5981":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:16269:6644":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:871:4591":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:10407:4609":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:4902:9949":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:8290:10680":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:3067:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:9284:28360":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:12175:6496":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:0:2579":{"crate_id":17,"path":["object"],"kind":"module"},"2:4806:5221":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:13969:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:11674:6428":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:15624:7208":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:7813:7806":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:23277:8326":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"5:7231:6024":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:47175:8577":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:46075:8483":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:22646:11527":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:9159:8681":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:7484:4679":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:8061:11352":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:43913:8412":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:8301:7877":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:3675:5665":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5311:10102":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13211:6608":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:4882:7468":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:6748:10444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:11721:10736":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:3529:4571":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:3213:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:44595:5758":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:14024:5539":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:8267:10675":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:10720:37285":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"7:32:22949":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12043:6487":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:2394:7397":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:47190:8578":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:43339:8391":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"18:726:6190":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"15:288:23066":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:5570:10211":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"9:390:22963":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:8468:4572":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:5319:10105":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:7379:37274":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"11:1920:7972":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:23120:11387":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6606:7622":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:11661:6427":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:21948:11436":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:4142:4682":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:7986:10658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:4796:6028":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:8714:4587":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:2572:7405":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:2958:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:3465:4683":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:32868:5638":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:8297:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:2768:7414":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:13832:6740":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:11089:6369":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:5004:5588":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:12422:6523":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:10943:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:14147:6787":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:42278:4591":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:3329:7445":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:5271:10083":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:3439:4469":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:40888:8228":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:1584:9786":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:38303:5653":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:44811:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:1098:4694":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:9305:8690":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:10710:4562":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:11187:4604":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:9858:24038":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:21737:34220":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:6708:10436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:3403:5666":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:7111:7708":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:8388:4717":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:12368:1692":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:2355:7390":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:8642:10546":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:1533:4591":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"18:563:6158":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11702:6430":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:7497:7782":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:8856:4592":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:23096:8312":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:1642:7972":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:16105:7331":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:15249:7089":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:11142:6350":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:46527:8519":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:43331:4650":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:15760:7246":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11764:6438":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:10884:8711":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:3925:7451":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"11:2148:4694":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:517:9690":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:7757:8071":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:12370:1816":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:4139:5576":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"11:2440:4682":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"9:500:8031":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:5326:4573":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"5:6090:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:21938:4712":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:1107:4695":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"11:430:37255":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:43972:4546":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:3649:2460":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:5781:7425":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:42719:4631":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:4377:4591":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:531:6153":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:6443:10309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:6634:7428":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:12264:6506":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:7877:8723":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11256:6381":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:4856:7467":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:44661:8439":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:43956:5740":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:15102:7057":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"11:123:5970":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:523:9693":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:44368:16598":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:4215:5581":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:32396:4716":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:11557:6408":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:45819:8454":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:8506:4544":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:40454:8342":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:1521:9744":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:39651:5537":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:1955:4523":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:12900:6561":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:8333:8651":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:8548:8660":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:5205:10053":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:43811:8404":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"11:772:4680":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:8155:7864":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:44613:5759":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:2705:2958":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"7:79:22956":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:13738:6722":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:7741:7439":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12863:6559":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:578:9723":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:4506:16611":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:4201:5579":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:14876:6994":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:10360:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:39705:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:7168:8694":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:1011:4591":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:6493:10330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:41304:8237":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:815:11374":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:10633:6079":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:11574:6413":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:5288:34104":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:46548:8520":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:1514:9741":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:15390:7129":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:43347:4652":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:43932:5747":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:21683:5139":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:11809:8611":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:7580:7796":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:7686:7801":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:9533:5726":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:5844:6066":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:44190:5751":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"11:1023:4693":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:8605:8664":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:7487:10587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:0:1005":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11026:24056":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:4587:7459":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:898:5984":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:14489:6857":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:15138:7062":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:5107:10034":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:8516:4545":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:21771:11439":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:12366:1317":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:40945:6170":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:2031:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:44925:8449":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"18:96:28218":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:5139:10037":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:403:6206":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:6948:7430":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:1620:4683":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:2344:8078":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:9386:4636":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:12278:6507":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:5366:10116":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:3614:4029":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:867:6203":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"6:586:9727":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:11302:10728":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:5347:7477":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:40522:5745":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12353:6518":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:4653:2942":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:4352:7453":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:5069:10032":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:680:11348":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:4807:5578":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:306:2473":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:3740:5669":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:32338:4715":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:2838:7417":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:2936:23113":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:11915:24143":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:5722:7426":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:15463:7146":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:12824:24046":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:43893:8410":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:46017:8472":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:41311:8238":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:44303:5746":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"19:0:1294":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:7098:7705":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6160:23084":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:10395:4507":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:10185:6196":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:8840:4590":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:2967:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:2508:7402":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:45971:8469":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"11:299:9642":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:6509:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:14271:6823":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:5112:11425":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:5482:10183":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:11953:8639":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:33977:5646":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:15748:7244":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"11:2566:4479":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:3306:4591":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:46003:8471":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:11704:8638":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:22978:8298":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:2133:16718":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:1424:4695":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:13706:34996":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12289:6508":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:1880:4591":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6480:7422":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:5395:10131":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:8529:4547":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:1379:4692":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:6143:17009":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:13509:6660":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:3208:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:6682:4637":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:46415:8515":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:42230:8254":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:2068:1361":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:2304:10696":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12792:6300":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:3459:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:623:11345":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:6456:23977":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:9317:8692":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:15333:7113":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:3937:4682":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:2156:8075":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:3475:7446":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:15426:7138":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:13606:6691":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:5089:11423":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:10339:8702":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:40493:8346":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:14449:6854":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:5295:10096":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:16259:6639":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:11510:6404":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:7767:8072":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:8014:10661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:1861:5341":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:39763:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:6927:7680":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:14599:6878":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:10612:6347":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:2467:2631":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:570:9718":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:9167:4679":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:1564:4679":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:7052:7698":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:8193:4708":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:7057:5547":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:10341:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:6799:4641":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:12362:1177":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:7681:4486":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:23047:34136":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:6917:10506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:3340:4564":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:15356:7121":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:22989:34283":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:13437:6646":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11595:6420":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:7539:7434":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:11926:8720":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:12389:1422":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:12671:6545":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"11:2551:37247":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:994:5989":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:5255:10074":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:44260:5735":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:6588:7614":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:12543:6540":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:11272:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:6398:7420":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:1530:9749":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:7857:7814":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"12:0:4347":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"11:685:4678":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:42303:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:44004:5753":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"11:698:4679":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:10213:8379":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:46128:8486":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:12724:8274":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:44404:8422":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:14066:6776":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:46835:8558":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:45904:8465":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:5387:10126":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:7014:23980":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:3809:5981":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"11:1085:37256":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:42817:4507":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:7612:5175":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:7332:10530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:1922:5354":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:8176:4324":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:2377:10700":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:6532:7612":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:10647:4325":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:13733:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:11075:6368":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:7717:16637":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:46341:8497":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:21705:34222":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:373:8598":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:11523:8265":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:3313:7970":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"11:2539:9648":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6412:23976":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"16:6940:7682":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:10590:4603":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:6665:23978":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10887:37289":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:765:28228":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:3592:3915":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:1089:4693":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11647:6426":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:22:819":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:10604:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:41845:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:43096:7833":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:6263:7561":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:6156:8220":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:40910:8365":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:4981:6060":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:515:6146":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12949:6227":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:11237:4714":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:9859:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:491:9670":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:6979:6035":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:8065:4625":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:8188:7868":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:7085:7702":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:6659:10418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:12082:5736":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:4964:9978":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:21720:34227":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:2548:7404":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:860:7382":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"6:5325:10106":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:1974:5606":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:40969:8367":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:10092:24044":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:3339:7971":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:5301:10099":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:14012:6768":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:15190:7079":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:4406:8615":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:5051:10021":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:7656:23983":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:10707:4566":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:42824:4508":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:3875:8048":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:44285:5744":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:9312:8691":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:46954:8561":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:3248:5125":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:21751:34229":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:22818:8290":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5044:10019":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:15313:7106":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:2073:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:1898:4683":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:5586:10216":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:9413:4644":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:10903:10724":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:15289:7099":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:3669:4030":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:33631:5645":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:513:6210":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:12584:6351":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:23751:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:6823:10469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:10962:4541":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:11605:6421":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:7618:7797":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:11269:24073":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:938:5987":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:6534:10348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:23222:8321":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:13308:6627":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:40654:16755":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7428:23982":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:42831:4515":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:3667:4533":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:12399:6521":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"15:0:4349":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:4883:11426":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:8067:5356":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:4161:4333":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:7559:7795":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:5551:10203":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:3274:5639":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:15655:7216":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:42522:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:44781:10721":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"5:7206:6021":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:5897:7498":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:11670:4611":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"14:31:7954":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:9729:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:40503:8347":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:10846:6041":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:2938:16640":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:10405:4514":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:1631:7970":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11583:6416":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:8302:10682":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:8166:4709":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:4468:7455":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:12664:8270":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:4452:8209":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:102:9641":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:8443:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:46096:8484":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:8594:10722":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:44510:8276":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:1569:9774":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:3277:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:12984:5727":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:43368:4588":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:46309:8495":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:15992:7310":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:4805:9885":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:47137:8572":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"18:581:5139":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:1645:8046":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:6740:10443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:8001:8642":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:5958:4632":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:5769:7489":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:5006:7472":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"11:798:4682":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6574:7440":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:32426:5128":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:12335:11353":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:40775:4544":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:14235:6818":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:14994:7035":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:3940:4683":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:40806:8358":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:12454:6528":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:46436:8516":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:873:4690":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:5412:1246":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:6802:7662":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:41104:8234":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:16223:7360":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:4819:10559":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"5:1239:36004":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:21693:34222":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:14372:6837":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:4913:7469":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:11715:6431":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:2232:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"16:5863:23973":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13064:6575":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:44852:8444":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"11:830:4684":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:40897:8229":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:5562:10209":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:4303:30608":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:46586:8522":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:15383:7128":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:43962:5739":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:7584:4679":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:3029:6237":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:39683:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:13037:16592":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:39783:4473":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"18:613:37295":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:7150:11433":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:15281:7098":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:23011:8300":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:2315:4696":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:949:4685":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:5127:10036":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:16198:7354":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:14051:6773":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:5249:10072":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:4307:4523":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:10401:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:14260:6822":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:6620:7624":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:7361:10542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:4070:4679":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:9542:5353":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:11219:9214":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:32337:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:5837:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:25:696":{"crate_id":2,"path":["core","env"],"kind":"macro"},"5:6874:5981":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:5335:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:3830:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:47054:8565":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:14529:6862":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:4718:7462":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:3303:33389":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:41094:4545":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:41327:8239":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:7769:7804":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10905:6353":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:6749:7649":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:3352:36006":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:8800:2461":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:2438:7399":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:42033:8382":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:45936:8467":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:12363:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:1500:9736":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:2010:787":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:5151:10038":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:43125:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:11247:4547":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:13986:6765":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:3778:7447":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:5603:10223":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:1489:9731":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13553:6677":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:14463:6855":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:5139:4523":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"11:1674:5976":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:10317:6200":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:4172:5981":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:542:7373":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:589:6159":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:8755:11359":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:1844:696":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:5507:10190":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:3342:4565":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:1597:9793":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:291:5981":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:23178:8317":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:10971:33016":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:15058:7045":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:4937:9966":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:8785:4589":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:10763:6038":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:6853:4647":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:1539:9755":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:14212:6817":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13173:6593":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:46210:8490":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:33564:4468":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:22733:11518":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:3703:5668":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:6611:10397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:2719:6041":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:5520:10191":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:6658:4682":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:7514:5992":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:44294:5745":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11841:6450":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:40816:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:13899:6751":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:14091:6778":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"14:0:4348":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:40643:4484":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:12530:6539":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"5:5538:5731":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:12572:6350":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:21830:11438":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13723:6718":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:2592:7406":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:15151:7068":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:2613:16709":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:33080:5637":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:12375:756":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:1643:9830":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11166:6375":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"18:670:6179":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:40826:8217":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5629:10240":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:12107:6350":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:40959:8233":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:4723:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:9984:24042":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:8296:10681":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:15596:7201":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:15822:7259":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:10908:10726":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11799:6444":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:13959:6760":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"18:635:6172":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:41360:8242":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:1690:9857":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:497:9673":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"11:835:4687":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:1548:4678":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:473:9664":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11547:6280":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:11898:6455":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:46565:8521":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:41333:4571":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11853:6451":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:15473:7151":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:6231:7556":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:42600:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:3289:5658":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:4732:8213":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6462:10311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:2803:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:8328:8650":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:42011:34279":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:437:6209":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:44672:16818":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:42680:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:42838:4516":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:10950:8700":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"6:5471:10178":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:44054:5756":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:6652:10417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:13644:8363":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:4821:10561":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"11:2420:4679":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:14177:6806":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:11440:8263":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"11:1888:4682":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:10759:6350":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:42286:4678":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:9217:11429":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:11664:8632":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:938:4683":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:42105:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:31124:5139":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:14986:7034":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:47100:8569":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:5307:7476":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"11:2228:6413":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:11467:6401":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12494:6532":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:11688:6429":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:12993:24047":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:7158:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:44036:5757":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:13774:6731":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:8047:11351":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:13485:6658":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:16079:7325":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:14545:6864":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:43858:8353":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:7556:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:7470:30609":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:7414:10565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:10320:5350":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:7534:35971":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:9266:8683":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:5420:10142":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:5288:10094":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:40480:8345":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:13568:6683":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:9173:8623":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:43112:34130":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"5:7842:5542":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:2788:7415":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:13814:6739":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12659:6544":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"0:588:137":{"crate_id":0,"path":["cc","Error"],"kind":"struct"},"16:8093:7856":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:2970:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:14325:6830":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4842:9913":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:974:4689":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:2349:4694":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"11:1005:4692":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:32314:8332":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:2635:4557":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:13252:6612":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:41318:3918":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:15206:7081":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:14560:6868":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:44389:8417":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:40709:4503":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:4914:9958":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:14025:6769":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7355:7741":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:6758:7650":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:4940:7470":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:22579:4712":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:12201:6501":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"11:1105:7965":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:5037:7473":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:8249:16690":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:6494:7609":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:9712:6078":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:1684:9854":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:45789:8450":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"11:1580:7967":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:8073:7855":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:4506:6002":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:4487:16569":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:16069:7324":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:7549:7794":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:4570:6002":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:6785:4679":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:43579:8258":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:6680:10424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:2458:7400":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"11:1064:23040":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:7067:5548":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:10524:6346":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:6270:8222":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:5258:8621":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:46681:8525":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:10997:6359":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:10915:37283":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"11:1907:7970":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:4103:11389":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:3264:6223":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:12923:3917":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12030:6486":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:43150:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:2998:7442":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:12318:6227":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:6779:8224":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:44240:4543":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:6317:7584":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:8697:4885":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12225:6503":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:5708:4000":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:11341:6392":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:8273:10676":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:40418:5745":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:9755:24020":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:2684:7410":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"18:521:28229":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5224:10061":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:11014:28958":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:2275:8050":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:11324:6389":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:16187:7353":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:14855:6986":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:12362:6519":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:915:4681":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:5593:10218":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:15092:7056":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:11938:29011":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:6466:7606":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:14356:6836":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:3393:4566":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:5776:3663":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:46157:8487":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"15:306:23067":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:10924:8697":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:5995:7513":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:39743:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:46983:8562":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"11:2466:4683":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:7524:8066":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:42067:8249":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:2528:7403":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:6374:6065":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:491:6148":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:13375:6638":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:4905:804":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:5241:10068":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:675:8604":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:46453:8517":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4997:9994":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11743:6434":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:22738:11516":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:12300:24167":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:2322:4047":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:6406:8628":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:597:6211":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:3860:4560":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:5670:10257":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:2135:16719":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"2:39833:8340":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:5817:7490":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:13912:6050":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:9916:24040":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:6300:7578":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:2485:4702":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:7132:7710":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:818:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:9807:24028":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:8253:16689":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:7888:7818":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:43945:5743":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:1657:9841":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:15521:7188":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:3014:23114":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"9:480:22961":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:8175:7865":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:2825:9345":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:11128:6325":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:5186:10041":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:1075:4692":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"18:608:6166":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:41118:8235":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:2175:24101":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:6381:10266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:6507:10341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:11788:6443":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:41352:8240":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:986:4691":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:30686:5534":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:7695:7802":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:11495:5754":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:39655:5660":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:12464:24168":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:10622:37284":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:8338:2514":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:10186:4505":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:10498:28994":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"11:328:9645":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:2808:7416":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"11:2533:9647":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:758:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:43903:8411":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:7799:7427":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:6525:11530":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:47205:8579":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:9338:28364":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:10954:24054":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:12330:11031":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:43067:4504":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"18:573:6149":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:38358:5654":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:30463:11373":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:2961:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:13758:8285":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:8308:10683":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:15635:7213":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:3486:4552":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:0:4351":{"crate_id":18,"path":["memchr"],"kind":"module"},"11:854:4689":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:9422:4891":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5648:10249":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:2809:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:15222:7085":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:8523:4546":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:6278:7563":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:3688:34372":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:15456:7144":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:44208:5752":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:6902:10495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:43378:8396":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:1703:9861":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12597:6541":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:894:4679":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:12724:24045":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:4464:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:2636:7408":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:2038:8074":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11537:6406":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"18:706:5728":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:42221:5621":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:21824:11435":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:23288:8327":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:41899:11371":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:1410:4693":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:40858:8363":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"9:53:11010":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:8799:34343":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:3491:5538":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:12808:6556":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:7917:6074":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:2478:7401":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:21769:4712":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:10284:6199":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:6098:23974":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:3218:5123":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:43801:8403":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:7306:37273":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:40797:8357":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:4925:11391":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:4531:7457":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:44637:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:7397:37272":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:6079:7375":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:8353:10694":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:11497:6403":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"11:1140:7966":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:7604:7437":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:7718:16638":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:7528:7791":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:13946:6757":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:9202:11430":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:43732:8399":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:40:5541":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:7548:10630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:6968:8230":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:9398:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:33832:5644":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:485:9669":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:16121:7336":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:4771:7464":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"11:2323:4693":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:2223:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:15720:7235":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:12621:6542":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:150:5968":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:12380:906":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:6433:7602":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:4927:11392":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:11849:8612":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:6731:10441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:10391:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"11:1564:23041":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:7721:4488":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:11051:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:23027:34127":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:38248:5652":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:42444:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:32307:7762":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:6526:10343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:16165:7347":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:8284:10679":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:39668:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12076:6490":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:8183:4711":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:11653:4588":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"6:8199:10671":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4869:9936":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:2495:4043":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:21842:8289":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:4536:4523":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"11:1900:7969":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:11211:33018":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:8536:4543":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:7454:10573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:5088:10033":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:14516:6861":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:15:2538":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:4921:9962":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:7391:10564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:46259:8493":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:14436:6853":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:42085:8251":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:12887:6560":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:4561:8617":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:5622:4600":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:6672:10422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:4341:11401":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:13187:6594":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:6666:10419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:9938:24041":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:13399:6642":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:3373:7972":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:5477:10181":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:8031:10670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:40576:8349":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:6544:10355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:40844:8360":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:38413:5655":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:9106:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:7639:4479":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:5992:4634":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:23233:8322":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:6976:7684":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:1223:36017":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:3841:11372":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:7061:7701":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"11:1893:4683":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:14386:6838":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:8259:7762":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6648:7626":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:8005:4570":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:12367:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:3421:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:15434:7139":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:9190:8682":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:2171:8048":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:3716:4591":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:15734:7237":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:5107:7475":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:40514:5746":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:10481:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:32321:5221":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:6782:23979":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4896:9946":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:9358:9215":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:23255:8324":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"5:5490:5981":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:11409:8028":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:11812:6446":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:928:4682":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:10818:6351":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:957:4687":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:7823:23984":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"9:445:22962":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:11102:6370":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:3903:8611":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:8477:4541":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:12149:6089":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"14:7:7954":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:8486:4542":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:12768:24025":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:10399:4516":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:39723:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:8082:5357":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:8319:10687":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:10403:4513":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:39571:5670":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12056:6489":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:23141:4712":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:2708:7411":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:14038:6771":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:34323:5648":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:33698:5643":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:14788:6931":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:3297:30804":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:1616:4682":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:46880:8559":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:11214:6377":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:3095:36005":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:4694:11405":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:5095:16628":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:5265:10080":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:16249:7364":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:16093:7329":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:12929:6562":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:872:6204":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:43171:4506":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:43356:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:10218:6197":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:44793:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:45921:8466":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:22607:16708":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:5168:4881":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:5367:23971":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:6700:10433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:40669:4485":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:2318:4173":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:5641:10246":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:2469:4698":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:7475:5540":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"11:2137:4693":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:6026:7369":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:33292:5640":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:45868:8459":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:6723:10440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:8205:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:11115:6372":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13116:6581":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:15301:7105":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:963:4688":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"2:3294:5659":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:256:6203":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:4743:7463":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:4354:11402":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:4574:8210":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:7590:7436":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:12346:28960":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:4727:8212":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11443:6400":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:16032:6612":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:42294:4679":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:40006:16641":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:5494:10186":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:11222:4678":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:5654:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"8:0:4343":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:1207:6214":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:5357:10112":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:15931:6594":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:6790:10461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:42238:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:12238:6504":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:113:28219":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:22555:11523":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:47228:8580":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:3663:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"18:754:6195":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:5428:10147":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4957:9975":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:22517:11522":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:12314:8726":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:500:6053":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:10913:4324":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:30724:8330":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:553:9710":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:6120:23975":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:34496:5650":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:4:1259":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"11:2366:7975":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:7910:23985":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:44786:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:46178:8488":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:4772:11422":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:432:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:11313:6387":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:44250:5748":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:23200:8319":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"16:7633:37270":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:42189:4890":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:40788:8356":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:15273:7097":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11865:6452":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:2612:7407":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:465:9659":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:42045:8614":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:13766:6729":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:9277:8686":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:7577:10646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:8761:16688":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"11:2559:9651":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:23109:8313":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:3318:36007":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:11042:6362":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:2374:7396":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13412:6644":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:3906:8612":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:1859:5340":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:2076:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:42483:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:12382:1856":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:15701:7230":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:46195:8489":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:4641:7461":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:14723:6880":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:11031:4606":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:568:6054":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:4976:7471":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:30739:4504":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:7539:10627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:559:9713":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:7006:7687":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:6449:10310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:10341:8701":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:43792:8401":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:4560:7458":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:9781:24037":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:11189:6376":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:5686:7421":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:7744:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:3438:4563":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:44619:9214":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:5802:23972":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:14341:6832":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:14311:6827":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:2157:4560":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:15418:7136":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:10397:4515":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:3395:4567":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:12373:737":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"17:4986:6234":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:1667:9847":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:9232:11431":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:3677:4536":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:4915:5223":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:9130:4605":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4990:9991":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:4976:9983":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:2902:23112":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:14912:7023":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:4325:11399":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:3810:7448":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:41883:8248":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:13877:6750":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:1625:4686":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:7518:10613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:11290:5734":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:22605:34833":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"16:8216:7870":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:46113:8485":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:9457:8696":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:14111:6781":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:11063:6367":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"11:2545:9649":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:15582:7195":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:15445:7143":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:4502:7456":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:5441:10157":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:46386:8514":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"11:881:4691":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:46925:8560":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:10671:37288":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"18:80:28217":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"10:44:7978":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:6691:10427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:12328:6510":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12150:6494":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:1794:5981":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:22593:11526":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:564:9715":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:23211:8320":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"16:8118:7859":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:4862:5222":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:5230:10064":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:16176:7352":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:14131:6782":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:5588:2463":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:5831:7493":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:3053:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:8613:8658":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:11634:6425":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:13999:6766":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:46758:8557":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:10393:4508":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:4853:6029":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:26151:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"14:187:23054":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:7144:23981":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:9737:24022":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"13:0:4341":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:11870:8613":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:13797:6736":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:2400:4678":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:14284:6825":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:6461:6066":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:15126:7059":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:5025:10010":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:12478:16766":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"14:202:16600":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:4884:4675":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:39813:5662":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"18:643:6149":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:42133:4591":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"18:718:6187":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:7867:6211":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:15814:7256":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:13753:6727":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:5541:10197":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:40746:8353":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:10982:24055":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:13526:6668":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:15646:7214":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:2741:4549":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:12213:6502":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:6974:10705":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:8249:10672":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:9421:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"0:0:3306":{"crate_id":0,"path":["cc"],"kind":"module"},"1:9253:4635":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:8664:8618":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:14933:7028":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:4923:5589":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:1609:4591":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:5057:10023":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:3559:4523":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:7431:10566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"14:165:23047":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:4875:9937":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:22939:10706":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:3899:7450":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:5682:10262":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:2767:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:8330:10688":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"13:229:9640":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:47071:8566":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:10018:24024":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:11367:8262":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:7650:4480":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:7350:10537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:2597:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:5742:7480":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"9:176:11020":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:11786:6085":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5450:10163":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:11524:6405":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:12978:5728":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:12851:6558":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:14752:6900":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11293:24074":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:12707:6548":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:15400:7132":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:14402:6841":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:16212:7358":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:15608:7204":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:21722:34225":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:6991:37271":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:44547:8429":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:7323:6071":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:12478:6530":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:15569:7189":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:22660:16708":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:43783:8400":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:40638:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:8008:10659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:6005:4682":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:32397:5129":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:7727:7438":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:6867:4648":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"6:479:9667":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:12379:900":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:46288:8494":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:1828:5328":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:12008:8266":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:10350:6201":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:11773:6439":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:9707:4710":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:9408:4643":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:6758:10451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:3658:31061":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:9117:4604":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:44803:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:21822:4712":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:2854:7418":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"11:1158:4695":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:13235:6609":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:10251:6198":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:14503:6860":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:7755:7429":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:4211:5580":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:6564:10371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:11088:6081":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:8226:23986":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13272:6622":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:15616:7207":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"11:364:5972":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:9403:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:5341:10110":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:15010:7036":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:6599:10392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:3264:5641":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:11392:6395":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:11200:4605":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:12695:6547":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"5:4995:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:22248:8288":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12388:6520":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:13785:6734":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:12386:1832":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:40739:4574":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:9325:8694":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:5658:10250":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:7352:10956":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:13922:6756":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:22691:4712":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:6716:10439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:4802:7465":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:4109:11388":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:2594:9347":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:12557:6368":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:3101:35913":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:2313:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:40530:5744":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:4008:8613":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:7395:6072":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:23089:10709":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:5007:10001":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:8638:8668":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:9700:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:7563:10637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:538:6156":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:2728:7412":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:6282:6061":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:45804:8453":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:8254:4560":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:14475:6856":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:5935:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:6353:7380":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:22260:34218":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:23189:8318":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:40537:16634":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:15410:7135":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:1727:9870":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:7463:10576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"10:36:9653":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:3473:6225":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:33765:5642":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:5179:10040":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:10612:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:45836:8457":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:953:4686":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:11481:5755":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:5515:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:44582:8434":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6560:7423":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:12778:5734":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:7321:4889":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:8459:4570":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:8286:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13015:6525":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:1098:6212":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:6411:10291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:4167:5578":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:7981:8600":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12127:6493":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:5914:7503":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:5400:6335":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:5381:10123":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:42366:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:5676:10259":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"10:0:4345":{"crate_id":10,"path":["adler"],"kind":"module"},"1:10991:5357":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:11153:6351":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:7733:6007":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:2878:7419":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:6678:3918":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:7980:4712":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:6385:7597":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:9394:4523":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"18:735:28227":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:11254:9216":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:40867:8223":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:12361:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:10399:4546":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"7:0:1906":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:5289:8621":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:3658:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:12740:8275":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13972:6459":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:6066:7526":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"13:110:37257":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:2338:7388":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:2483:4701":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:9143:4606":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:11419:6350":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:5700:7424":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:6473:10319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:1494:9733":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12485:24169":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:9854:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:43057:10712":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"11:1884:4679":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:0:1718":{"crate_id":1,"path":["std"],"kind":"module"},"16:6962:7431":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13674:6693":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:4424:7454":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:15214:7083":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:2003:5607":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:7826:4683":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:8019:5471":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:944:4684":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:12384:1844":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:11690:8636":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:44108:5754":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:11877:6453":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:3597:6226":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:40691:4489":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:46032:8473":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:5533:10192":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:5282:10091":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:1563:9772":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:21739:34215":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:47033:8564":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:3434:4548":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:10861:6045":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:14189:6808":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:10769:37286":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:3669:5663":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:14868:6993":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:4947:9972":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:3300:33393":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:23244:8323":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:47126:8571":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:45950:8468":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:7308:10513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:221:5979":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:4440:8208":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:7570:7435":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:3436:4562":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:13455:6654":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:40719:4502":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:5036:10015":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:44154:5750":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:2265:5995":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:44902:8448":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10170:6335":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:4821:6232":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:44844:8442":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:5447:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:12683:6546":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"11:434:37251":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:5960:7511":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:46660:8524":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"5:1595:4681":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4890:9944":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:44483:8428":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:7473:7530":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:8202:7441":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:44435:8426":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:9671:24023":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11493:6402":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:41342:6036":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:13473:6655":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:9439:4714":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:10710:6349":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:3206:5122":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:3729:4678":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"14:160:7954":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:44886:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:5798:5546":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:3042:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:40617:8351":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:44278:5732":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"14:214:7958":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:4223:5583":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:15769:7250":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:6079:4523":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"9:355:22977":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:5019:10007":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:6876:10480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:44865:35430":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"18:680:6180":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:47267:8593":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:40625:8352":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:9271:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:2037:6215":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:39607:5667":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:23266:8325":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:8230:4197":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:6037:4645":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:2357:36002":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:42405:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4792:9876":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:2711:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:6895:7676":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:42158:4889":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:46242:8492":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:3450:2977":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:3255:5127":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:8850:4591":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:15116:7058":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13146:6585":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:13292:6623":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:14414:6842":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:22705:11517":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:15266:7096":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:43386:8397":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:1711:9865":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"11:0:4346":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:12376:735":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"16:6504:7610":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:15078:7053":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:11076:6080":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:7586:10649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:3286:5657":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:3610:4532":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:40465:34140":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13089:6576":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:3097:10697":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:902:4680":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:45883:8460":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"11:396:5974":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:14977:7033":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13344:6634":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:13594:6688":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:1259:36011":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:13621:8283":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:42200:4892":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:30718:5535":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:5165:10039":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11730:6433":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"15:327:11007":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:7548:4679":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:43871:8408":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:798:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12189:6500":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:10419:6205":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:10750:5471":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:6480:10321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"11:671:4591":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:15376:7127":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:5098:11424":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"5:5534:5730":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:42141:4678":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:12385:1850":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:42199:4893":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:22221:4712":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"11:1601:7968":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:10661:6348":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:8587:8614":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:43571:8398":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"18:651:6149":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:13581:6687":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:40920:8366":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:8752:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:7564:8067":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:47012:8563":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:16138:7338":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:13325:6629":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:7469:10577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"4:0:4342":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:11945:8639":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:6437:10306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"11:1049:4694":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:12508:6535":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:4217:4678":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:13387:6639":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:12388:1916":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:13844:6742":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:44572:8430":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:3065:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:5638:4149":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:2418:7398":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:32339:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:47091:8568":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"11:2380:4591":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:14298:6826":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:9381:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:45988:8470":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:14079:6777":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:8261:10674":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:6849:7674":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"11:2301:4692":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:8136:7861":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6872:7675":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:4970:9980":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"18:598:37296":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:5075:7474":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:6770:10453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:23062:34139":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:11242:6379":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:9100:4603":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:3196:7387":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:42561:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:41867:8246":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:1395:4694":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:14847:6983":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:10342:2460":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:2964:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:32303:8331":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:10573:37281":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"18:481:6147":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:261:6204":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:4337:4523":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:12963:4979":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:6506:11529":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:5622:10237":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:10704:4564":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:12383:1838":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:47152:8573":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:40681:4546":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:36372:5651":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:39820:8339":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:15197:7080":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:4364:4523":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"11:2495:23036":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"16:4062:7452":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13363:6635":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:40929:8231":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:10155:6334":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"11:842:4688":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:3344:5649":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:44136:5749":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"9:422:22964":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:11825:6448":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:6777:10454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"5:6248:4523":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:47111:8570":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:12377:912":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:5415:7478":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:23299:8328":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:15039:7044":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:6813:10467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:6922:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:13855:6743":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:5488:10184":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:11016:6361":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:10980:33020":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:3347:7969":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:11041:4712":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:1614:4685":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:10046:11029":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:10041:34344":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:8225:4323":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:11354:6393":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:8542:8658":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:5602:4599":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:10386:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:5983:4523":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:9886:24039":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:13046:6572":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12443:6527":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:2203:6219":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:2733:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:4487:8616":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:8306:4718":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:34150:5647":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:6183:6066":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:44789:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:5196:10048":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:42124:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:16050:6622":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:32328:8333":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:44913:7977":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"18:689:6182":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:45851:8458":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:15944:6608":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:2303:23085":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:43133:4504":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:4614:7460":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:1625:9818":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:6718:4646":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4816:9893":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"11:708:4685":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:9151:4591":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:15168:7073":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:2611:16708":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:15678:7229":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:6122:4630":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}