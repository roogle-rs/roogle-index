{"root":"0:0:2345","crate_version":"1.0.73","includes_private":false,"index":{"2:3518:4703":{"id":"2:3518:4703","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3520:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3197-0:308:1639":{"id":"b:2:3197-0:308:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3200:1718"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13357:4772":{"id":"2:13357:4772","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13359:3821","2:13360:58871","2:13361:58872"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13351:4771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23138:4975":{"id":"2:23138:4975","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23139:58651","2:23140:1238","2:23141:1239","2:23142:58652","2:23143:58653","2:23144:58654","2:23145:58655","2:23146:58656","2:23147:58657","2:23148:58658"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23151:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:293:2849":{"id":"0:293:2849","crate_id":0,"name":"Vs17","span":{"filename":"src/windows_registry.rs","begin":[93,4],"end":[93,8]},"visibility":"default","docs":"Visual Studio 17 (2022)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:3463:4578":{"id":"2:3463:4578","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3465:271"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3212-0:284:2839":{"id":"b:2:3212-0:284:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3215:128","2:3216:1430"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:848-0:308:1639":{"id":"b:5:848-0:308:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:3873","5:851:1685","5:852:3874"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:259:1009":{"id":"0:259:1009","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[2966,4],"end":[2968,5]},"visibility":"public","docs":"Returns the path for this compiler.\n\nNote that this may not be a path to a file on the filesystem, e.g. \"cc\",\nbut rather something which will be resolved when a process is spawned.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7248:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9533:3664-0:284:2839":{"id":"a:2:9533:3664-0:284:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9533:3664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:848-0:371:1696":{"id":"b:5:848-0:371:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:3873","5:851:1685","5:852:3874"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3207-0:308:1639":{"id":"b:2:3207-0:308:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3177:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3210:128","2:3211:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:4410:1621":{"id":"1:4410:1621","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4411:4032","1:4412:4033","1:4414:4034","1:4415:2664","1:4416:2962","1:4417:4035","1:4418:4036","1:4420:4037","1:4421:3847","1:4422:3240","1:4423:2285","1:4425:2066"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:246:59":{"id":"0:246:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[2820,4],"end":[2822,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13721:56744":{"id":"2:13721:56744","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47810:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:364:128":{"id":"0:364:128","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[148,0],"end":[153,1]},"visibility":"public","docs":"Represents an internal error that occurred, with an explanation.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:3376:224-0:364:128","a:2:3405:3438-0:364:128","a:2:9533:3664-0:364:128","a:2:9534:3663-0:364:128","a:2:3364:215-0:364:128","b:2:3201-0:364:128","b:2:3197-0:364:128","b:2:3207-0:364:128","b:2:2868-0:364:128","b:2:4097-0:364:128","b:2:2865-0:364:128","b:2:3212-0:364:128","b:2:3279-0:364:128","b:5:848-0:364:128","b:5:6500-0:364:128","0:367","0:369","0:89","0:91","0:93"]}},"1:5497:4440":{"id":"1:5497:4440","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5498:58529","1:5499:58531","1:5500:58530","1:5501:58532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13733:3240":{"id":"2:13733:3240","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49775:3282","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9533:3664":{"id":"2:9533:3664","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:307:414":{"id":"0:307:414","crate_id":0,"name":"clone","span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:260:304":{"id":"0:260:304","crate_id":0,"name":"args","span":{"filename":"src/lib.rs","begin":[2972,4],"end":[2974,5]},"visibility":"public","docs":"Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2651:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13832:4454":{"id":"2:13832:4454","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5446:4454"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50097:4455","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9534:3663":{"id":"2:9534:3663","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13736:4031":{"id":"2:13736:4031","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50043:3285","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3197-0:284:2839":{"id":"b:2:3197-0:284:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3200:1718"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3216:1430":{"id":"2:3216:1430","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3201-0:308:1639":{"id":"b:2:3201-0:308:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3203:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:299":{"id":"0:299","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":{"restricted":{"parent":"0:76:1634","path":"::windows_registry"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:3372:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13809:15275":{"id":"2:13809:15275","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13332:4769","prim@char":"1:15883:3096"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10580:191":{"id":"2:10580:191","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10581:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3526:4707":{"id":"2:3526:4707","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3528:363"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2884:105":{"id":"2:2884:105","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2885:414","2:2886:416"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:175:1810":{"id":"0:175:1810","crate_id":0,"name":"try_get_compiler","span":{"filename":"src/lib.rs","begin":[1398,4],"end":[1469,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis will return a result instead of panicing; see get_compiler() for the complete description.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3210:128":{"id":"2:3210:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"2:13828:55713":{"id":"2:13828:55713","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3535:4711":{"id":"2:3535:4711","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3537:1248"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9533:3664-0:364:128":{"id":"a:2:9533:3664-0:364:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9533:3664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:131:1614":{"id":"0:131:1614","crate_id":0,"name":"warnings","span":{"filename":"src/lib.rs","begin":[675,4],"end":[679,5]},"visibility":"public","docs":"Set warnings flags.\n\nAdds some flags:\n- \"-Wall\" for MSVC.\n- \"-Wall\", \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["warnings",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:154:1659":{"id":"0:154:1659","crate_id":0,"name":"pic","span":{"filename":"src/lib.rs","begin":[905,4],"end":[908,5]},"visibility":"public","docs":"Configures whether the compiler will emit position independent code.\n\nThis option defaults to `false` for `windows-gnu` and bare metal targets and\nto `true` for all other targets.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["pic",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:305":{"id":"0:305","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,31],"end":[82,35]},"visibility":{"restricted":{"parent":"0:76:1634","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13821:2443":{"id":"2:13821:2443","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15883:3096","self::pattern":"2:13332:4769"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:141:1375":{"id":"0:141:1375","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[795,4],"end":[798,5]},"visibility":"public","docs":"Configures the target this configuration will be compiling for.\n\nThis option is automatically scraped from the `TARGET` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .target(\"aarch64-linux-android\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:91":{"id":"0:91","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[170,0],"end":[174,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10570:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:92:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3364:215-0:364:128":{"id":"a:2:3364:215-0:364:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3364:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:4467:1622":{"id":"1:4467:1622","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4468:1687","1:4469:4038","1:4471:4039","1:4472:4040","1:4473:2670","1:4474:4041","1:4475:3571","1:4484:3847"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3248:116":{"id":"2:3248:116","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3249:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:265:2627":{"id":"0:265:2627","crate_id":0,"name":"is_like_clang","span":{"filename":"src/lib.rs","begin":[3024,4],"end":[3026,5]},"visibility":"public","docs":"Whether the tool is Clang-like.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:370:664":{"id":"0:370:664","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[147,16],"end":[147,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10523:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10512:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:105:750":{"id":"0:105:750","crate_id":0,"name":"include","span":{"filename":"src/lib.rs","begin":[341,4],"end":[344,5]},"visibility":"public","docs":"Add a directory to the `-I` or include path for headers\n\n# Example\n\n```no_run\nuse std::path::Path;\n\nlet library_path = Path::new(\"/path/to/library\");\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .include(library_path)\n    .include(\"src\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dir",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7248:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8636:4857":{"id":"2:8636:4857","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8638:3865"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:245":{"id":"0:245","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2819,0],"end":[2823,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3248:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:246:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8874:158":{"id":"2:8874:158","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8875:1767","2:8876:928","2:8877:3830","2:8880:3831","2:8881:500","2:8883:3008","2:8886:3832","2:8887:2311","2:8888:3833","2:8889:2285","2:8891:3834","2:8893:3835","2:8894:3836","2:8896:847","2:8899:3837","2:8906:2635","2:8908:2667","2:8911:2652","2:8912:3838","2:8913:3839","2:8915:3840","2:8917:3841","2:8920:1321","2:8921:2066","2:8922:3842","2:8926:3843","2:8929:3844","2:8930:3845","2:8931:3846","2:8933:3847","2:8934:2286","2:8936:3848","2:8939:3849","2:8941:3850","2:8951:3851","2:8966:3852","2:8968:3853","2:8972:3854","2:8981:3855","2:8984:3856","2:8986:3857","2:8989:282","2:8996:300","2:9003:1987","2:9010:2580","2:9019:3858","2:9029:1021","2:9036:3859","2:9043:3010","2:9044:3806","2:9045:3809","2:9057:2941","2:9064:3808","2:9076:3807","2:9083:3018","2:9084:3860","2:9089:3861","2:9092:1806","2:9095:3862","2:9096:3863","2:9098:3864","2:9100:3865","2:9102:421","2:9105:3866","2:9108:1004","2:9111:3867","2:9114:608","2:9117:3868","2:9120:913","2:9122:832","2:9124:797","2:9126:716","2:9128:700","2:9130:3869","2:9131:3870","2:9139:3871"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3103:4753":{"id":"2:3103:4753","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3102:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3374:107":{"id":"2:3374:107","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:382":{"id":"0:382","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[185,16],"end":[185,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10563:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:383:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:284:2839":{"id":"0:284:2839","crate_id":0,"name":"VsVers","span":{"filename":"src/windows_registry.rs","begin":[83,0],"end":[101,1]},"visibility":"public","docs":"A version of Visual Studio","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:285:2841","0:287:2843","0:289:2845","0:291:2847","0:293:2849"],"impls":["a:2:3376:224-0:284:2839","a:2:3405:3438-0:284:2839","a:2:9533:3664-0:284:2839","a:2:9534:3663-0:284:2839","a:2:3364:215-0:284:2839","b:2:3201-0:284:2839","b:2:3197-0:284:2839","b:2:3207-0:284:2839","b:2:2868-0:284:2839","b:2:4097-0:284:2839","b:2:2865-0:284:2839","b:2:3212-0:284:2839","b:5:848-0:284:2839","0:297","0:299","0:300","0:302","0:303","0:305","0:306"]}},"1:5567:4445":{"id":"1:5567:4445","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5568:56026"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13802:60652":{"id":"2:13802:60652","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:132:1665":{"id":"0:132:1665","crate_id":0,"name":"extra_warnings","span":{"filename":"src/lib.rs","begin":[698,4],"end":[701,5]},"visibility":"public","docs":"Set extra warnings flags.\n\nAdds some flags:\n- nothing for MSVC.\n- \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\n// Disables -Wextra, -Wall remains enabled:\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .extra_warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["warnings",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:2345":{"id":"0:0:2345","crate_id":0,"name":"cc","span":{"filename":"src/lib.rs","begin":[1,0],"end":[3301,1]},"visibility":"public","docs":"A library for build scripts to compile custom C code\n\nThis library is intended to be used as a `build-dependencies` entry in\n`Cargo.toml`:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n```\n\nThe purpose of this crate is to provide the utility functions necessary to\ncompile C code into a static archive which is then linked into a Rust crate.\nConfiguration is available through the `Build` struct.\n\nThis crate will automatically detect situations such as cross compilation or\nother environment variables set by Cargo and will build code appropriately.\n\nThe crate is not limited to C code, it can accept any source code that can\nbe passed to a C or C++ compiler. As such, assembly files with extensions\n`.s` (gcc/clang) and `.asm` (MSVC) can also be compiled.\n\n[`Build`]: struct.Build.html\n\n# Parallelism\n\nTo parallelize computation, enable the `parallel` feature for the crate.\n\n```toml\n[build-dependencies]\ncc = { version = \"1.0\", features = [\"parallel\"] }\n```\nTo specify the max number of concurrent compilation jobs, set the `NUM_JOBS`\nenvironment variable to the desired amount.\n\nCargo will also set this environment variable when executed with the `-jN` flag.\n\nIf `NUM_JOBS` is not set, the `RAYON_NUM_THREADS` environment variable can\nalso specify the build parallelism.\n\n# Examples\n\nUse the `Build` struct to compile `src/foo.c`:\n\n```no_run\nfn main() {\n    cc::Build::new()\n        .file(\"src/foo.c\")\n        .define(\"FOO\", Some(\"bar\"))\n        .include(\"src\")\n        .compile(\"foo\");\n}\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/cc/1.0\")]","#![allow(deprecated)]","#![deny(missing_docs)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:76:1634","0:308:1639","0:364:128","0:371:1696"],"is_stripped":false}},"2:3211:1431":{"id":"2:3211:1431","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13719:1805":{"id":"2:13719:1805","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47810:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4099:1443":{"id":"2:4099:1443","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46336:4731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13762:56774":{"id":"2:13762:56774","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:15883:3096","self::pattern":"2:13332:4769","`DoubleEndedIterator`":"2:8717:121","str::split":"2:13756:2259"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49807:5100","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14057:139":{"id":"2:14057:139","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14058:183","2:14059:1020"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8669:137":{"id":"2:8669:137","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8671:688"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3364:215-0:308:1639":{"id":"a:2:3364:215-0:308:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3364:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13706":{"id":"2:13706","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12785:1353","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13707:798","2:13708:1824","2:13709:60636","2:13710:60637","2:13712:60638","2:13715:54335","2:13716:60639","2:13717:310","2:13718:56747","2:13719:1805","2:13721:56744","2:13723:56745","2:13725:56746","2:13727:4533","2:13728:60640","2:13729:2387","2:13730:56765","2:13731:2623","2:13732:4798","2:13733:3240","2:13734:2421","2:13735:2405","2:13736:4031","2:13737:60641","2:13738:32565","2:13739:1815","2:13742:1971","2:13745:1972","2:13748:1987","2:13752:2388","2:13756:2259","2:13759:32447","2:13762:56774","2:13765:60642","2:13768:60643","2:13771:56776","2:13774:56778","2:13777:60644","2:13780:60645","2:13783:3177","2:13786:60646","2:13789:60647","2:13792:60648","2:13795:2358","2:13797:60649","2:13799:60650","2:13801:60651","2:13802:60652","2:13803:60653","2:13806:2390","2:13809:15275","2:13812:56780","2:13815:3013","2:13818:3056","2:13821:2443","2:13824:2084","2:13826:5301","2:13827:55712","2:13828:55713","2:13829:55714","2:13830:60654","2:13832:4454","2:13833:60655"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3812:5197":{"id":"2:3812:5197","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3743:4246","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9533:3664-0:308:1639":{"id":"a:2:9533:3664-0:308:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9533:3664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3364:215-0:284:2839":{"id":"a:2:3364:215-0:284:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3364:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:8717:121":{"id":"2:8717:121","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8718:3821","2:8719:3822","2:8720:3823","2:8721:3824","2:8725:3825","2:8728:2388"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:2865-0:308:1639":{"id":"b:2:2865-0:308:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:3163"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:104:926":{"id":"0:104:926","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[287,4],"end":[324,5]},"visibility":"public","docs":"Construct a new instance of a blank set of configuration.\n\nThis builder is finished with the [`compile`] function.\n\n[`compile`]: struct.Build.html#method.compile","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9533:3664-0:371:1696":{"id":"a:2:9533:3664-0:371:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9533:3664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6186:55710":{"id":"5:6186:55710","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13828:55713"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8742:3439":{"id":"2:8742:3439","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8743:798","2:8744:1824"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3212-0:371:1696":{"id":"b:2:3212-0:371:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3215:128","2:3216:1430"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:346:664":{"id":"0:346:664","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[91,16],"end":[91,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10523:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10512:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3376:224-0:284:2839":{"id":"a:2:3376:224-0:284:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3376:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3376:224-0:364:128":{"id":"a:2:3376:224-0:364:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3376:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5519:4442":{"id":"1:5519:4442","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5520:7942","1:5521:56268","1:5522:6452","1:5523:56269","1:5524:4632","1:5525:4633","1:5526:56270","1:5527:1317","1:5528:56271","1:5529:56272","1:5530:56273","1:5531:56274","1:5532:56275","1:5533:56276","1:5534:56277","1:5535:56278"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:85:2349":{"id":"0:85:2349","crate_id":0,"name":"find_tool","span":{"filename":"src/windows_registry.rs","begin":[43,0],"end":[45,1]},"visibility":"public","docs":"Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["_target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["_tool",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:6573:4432":{"id":"1:6573:4432","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6574:8405","1:6575:56081"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13728:60640":{"id":"2:13728:60640","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15889:3101","crate::ops::IndexMut":"2:3676:4245","str::slice_unchecked":"2:13727:4533"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3600:3286":{"id":"2:3600:3286","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3601:550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3587:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13812:56780":{"id":"2:13812:56780","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15883:3096","self::pattern":"2:13332:4769"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2953:179":{"id":"2:2953:179","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2954:421","2:2955:3010","2:2956:3806","2:2957:3819"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2922:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2963:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3168:74":{"id":"2:3168:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3170:3820"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13739:1815":{"id":"2:13739:1815","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15883:3096","self::pattern":"2:13332:4769"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13717:310":{"id":"2:13717:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15900:3110","str::as_mut_ptr":"2:13718:56747"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3171:150":{"id":"2:3171:150","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3173:1718"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:155:1660":{"id":"0:155:1660","crate_id":0,"name":"use_plt","span":{"filename":"src/lib.rs","begin":[920,4],"end":[923,5]},"visibility":"public","docs":"Configures whether the Procedure Linkage Table is used for indirect\ncalls into shared libraries.\n\nThe PLT is used to provide features like lazy binding, but introduces\na small performance loss due to extra pointer indirection. Setting\n`use_plt` to `false` can provide a small performance increase.\n\nNote that skipping the PLT requires a recent version of GCC/Clang.\n\nThis only applies to ELF targets. It has no effect on other platforms.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["use_plt",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5910:5307":{"id":"5:5910:5307","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:183","5:5913:1786"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:306":{"id":"0:306","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":{"restricted":{"parent":"0:76:1634","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:307:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3364:215-0:371:1696":{"id":"a:2:3364:215-0:371:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3364:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[164,0],"end":[168,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:90:685"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13737:60641":{"id":"2:13737:60641","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50053:5137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3373:221":{"id":"2:3373:221","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13797:60649":{"id":"2:13797:60649","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:266:2624":{"id":"0:266:2624","crate_id":0,"name":"is_like_msvc","span":{"filename":"src/lib.rs","begin":[3029,4],"end":[3034,5]},"visibility":"public","docs":"Whether the tool is MSVC-like.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3203:685":{"id":"2:3203:685","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:380":{"id":"0:380","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[185,9],"end":[185,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:381:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3835:4835":{"id":"2:3835:4835","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3837:55141"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:345":{"id":"0:345","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[91,16],"end":[91,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10563:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:346:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:166:2045":{"id":"0:166:2045","crate_id":0,"name":"compile","span":{"filename":"src/lib.rs","begin":[1117,4],"end":[1121,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\n# Library name\n\nThe `output` string argument determines the file name for the compiled\nlibrary. The Rust compiler will create an assembly named \"lib\"+output+\".a\".\nMSVC will create a file named output+\".lib\".\n\nThe choice of `output` is close to arbitrary, but:\n\n- must be nonempty,\n- must not contain a path separator (`/`),\n- must be unique across all `compile` invocations made by the same build\n  script.\n\nIf your build script compiles a single source file, the base name of\nthat source file would usually be reasonable:\n\n```no_run\ncc::Build::new().file(\"blobstore.c\").compile(\"blobstore\");\n```\n\nCompiling multiple source files, some people use their crate's name, or\ntheir crate's name + \"-cc\".\n\nOtherwise, please use your imagination.\n\nFor backwards compatibility, if `output` starts with \"lib\" *and* ends\nwith \".a\", a second \"lib\" prefix and \".a\" suffix do not get added on,\nbut this usage is deprecated; please omit `lib` and `.a` in the argument\nthat you pass.\n\n# Panics\n\nPanics if `output` is not formatted correctly or if one of the underlying\ncompiler commands fails. It can also panic if it fails reading file names\nor creating directories.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:118:1801":{"id":"0:118:1801","crate_id":0,"name":"is_flag_supported","span":{"filename":"src/lib.rs","begin":[459,4],"end":[512,5]},"visibility":"public","docs":"Run the compiler to test if it accepts the given flag.\n\nFor a convenience method for setting flags conditionally,\nsee `flag_if_supported()`.\n\nIt may return error if it's unable to run the compiler with a test file\n(e.g. the compiler is missing or a write to the `out_dir` failed).\n\nNote: Once computed, the result of this call is stored in the\n`known_flag_support` field. If `is_flag_supported(flag)`\nis called again, the result will be read from the hash table.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23175:4935":{"id":"2:23175:4935","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23176:4718","2:23177:1260","2:23178:1285"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:381:414":{"id":"0:381:414","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[185,9],"end":[185,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23049:4934":{"id":"2:23049:4934","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23050:4718","2:23051:58651","2:23052:58899","2:23053:58900","2:23054:58901","2:23055:43243","2:23056:58902","2:23057:58903","2:23058:58904","2:23059:58905","2:23060:58906","2:23061:58907","2:23062:58908","2:23063:58909","2:23064:58910","2:23065:58911","2:23066:58701","2:23067:58912","2:23068:58913","2:23069:58914","2:23070:58915","2:23071:58652","2:23072:58653","2:23073:58654","2:23074:58655"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23151:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13732:4798":{"id":"2:13732:4798","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15883:3096"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49765:5124","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6841:4437":{"id":"1:6841:4437","crate_id":1,"name":"TcpStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6842:56034","1:6843:56035"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3587:117":{"id":"2:3587:117","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3588:226","2:3589:548"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2868-0:284:2839":{"id":"b:2:2868-0:284:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:54258"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13271:2876":{"id":"2:13271:2876","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13272:127","2:13273:2938"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3165:75":{"id":"2:3165:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3167:311"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3506:4697":{"id":"2:3506:4697","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3508:183","2:3509:1244"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:6500-0:364:128":{"id":"b:5:6500-0:364:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10570:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:6498:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:6502:1410"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:119:1829":{"id":"0:119:1829","crate_id":0,"name":"flag_if_supported","span":{"filename":"src/lib.rs","begin":[525,4],"end":[528,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler if it supports it\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag_if_supported(\"-Wlogical-op\") // only supported by GCC\n    .flag_if_supported(\"-Wunreachable-code\") // only supported by clang\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1031:4452":{"id":"1:1031:4452","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1032:3873","1:1033:5301","1:1034:55710","1:1035:55711","1:1036:55712","1:1037:55713","1:1038:55714"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6339:4480":{"id":"1:6339:4480","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6340:58641","1:6341:58642"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:4097-0:284:2839":{"id":"b:2:4097-0:284:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4095:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4099:1443"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:115:1779":{"id":"0:115:1779","crate_id":0,"name":"flag","span":{"filename":"src/lib.rs","begin":[408,4],"end":[411,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"-ffunction-sections\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3467:4579":{"id":"2:3467:4579","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3469:1369"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3174:136":{"id":"2:3174:136","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3176:685"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:130:1664":{"id":"0:130:1664","crate_id":0,"name":"warnings_into_errors","span":{"filename":"src/lib.rs","begin":[654,4],"end":[657,5]},"visibility":"public","docs":"Set warnings into errors flag.\n\nDisabled by default.\n\nWarning: turning warnings into errors only make sense\nif you are a developer of the crate using cc-rs.\nSome warnings only appear on some architecture or\nspecific version of the compiler. Any user of this crate,\nor any other crate depending on it, could fail during\ncompile time.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings_into_errors(true)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["warnings_into_errors",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:297":{"id":"0:297","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":{"restricted":{"parent":"0:76:1634","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10563:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:298:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5431:4474":{"id":"1:5431:4474","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5432:5968","1:5433:54335"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:160:1964":{"id":"0:160:1964","crate_id":0,"name":"try_compile","span":{"filename":"src/lib.rs","begin":[947,4],"end":[1078,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThis will return a result instead of panicing; see compile() for the complete description.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23387:16740":{"id":"2:23387:16740","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23388:7442","2:23389:60065","2:23390:60066"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23380:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3376:224-0:308:1639":{"id":"a:2:3376:224-0:308:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3376:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:10572:3246":{"id":"2:10572:3246","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10573:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":{"restricted":{"parent":"0:76:1634","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2917:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:301:608"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10582:3250":{"id":"2:10582:3250","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10583:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:156:1661":{"id":"0:156:1661","crate_id":0,"name":"static_crt","span":{"filename":"src/lib.rs","begin":[928,4],"end":[931,5]},"visibility":"public","docs":"Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.\n\nThis option defaults to `false`, and affect only msvc targets.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["static_crt",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13718:56747":{"id":"2:13718:56747","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15900:3110"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6649:4428":{"id":"1:6649:4428","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6650:58571"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3364:215":{"id":"2:3364:215","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:4097-0:364:128":{"id":"b:2:4097-0:364:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4095:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4099:1443"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[91,9],"end":[91,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:344:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3405:3438-0:364:128":{"id":"a:2:3405:3438-0:364:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3405:3438","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13715:54335":{"id":"2:13715:54335","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12796:2608"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13818:3056":{"id":"2:13818:3056","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13332:4769","prim@char":"1:15883:3096"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:127:1648":{"id":"0:127:1648","crate_id":0,"name":"cpp","span":{"filename":"src/lib.rs","begin":[600,4],"end":[603,5]},"visibility":"public","docs":"Set C++ support.\n\nThe other `cpp_*` options will only become active if this is set to\n`true`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cpp",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3376:224-0:371:1696":{"id":"a:2:3376:224-0:371:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3376:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3522:4705":{"id":"2:3522:4705","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3524:360"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13707:798":{"id":"2:13707:798","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15883:3096"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13771:56776":{"id":"2:13771:56776","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15883:3096","str::rsplitn":"2:13774:56778","self::pattern":"2:13332:4769"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49893:5103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8197:4727":{"id":"2:8197:4727","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8198:59968","2:8199:59969","2:8200:59966","2:8201:59962","2:8202:59970","2:8203:59967","2:8204:59965"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2963:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13833:60655":{"id":"2:13833:60655","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5443:60655"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50106:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:90:685":{"id":"0:90:685","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[165,4],"end":[167,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:383:664":{"id":"0:383:664","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[185,16],"end":[185,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10523:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10512:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:285:2841":{"id":"0:285:2841","crate_id":0,"name":"Vs12","span":{"filename":"src/windows_registry.rs","begin":[85,4],"end":[85,8]},"visibility":"default","docs":"Visual Studio 12 (2013)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:12772:5294":{"id":"2:12772:5294","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12773:1767","2:12774:59843"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:302":{"id":"0:302","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":{"restricted":{"parent":"0:76:1634","path":"::windows_registry"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:3373:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:109:1771":{"id":"0:109:1771","crate_id":0,"name":"define","span":{"filename":"src/lib.rs","begin":[386,4],"end":[390,5]},"visibility":"public","docs":"Specify a `-D` variable with an optional value.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .define(\"FOO\", \"BAR\")\n    .define(\"BAZ\", None)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["var",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["val",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3201-0:284:2839":{"id":"b:2:3201-0:284:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3203:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:4896:4861":{"id":"2:4896:4861","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4897:1767","2:4898:59648","2:4899:3831"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:264:2626":{"id":"0:264:2626","crate_id":0,"name":"is_like_gnu","span":{"filename":"src/lib.rs","begin":[3019,4],"end":[3021,5]},"visibility":"public","docs":"Whether the tool is GNU Compiler Collection-like.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13786:60646":{"id":"2:13786:60646","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:15883:3096","str::matches":"2:13783:3177","`DoubleEndedIterator`":"2:8717:121","self::pattern":"2:13332:4769"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50011:5136","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3459:4742":{"id":"2:3459:4742","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3460:183","2:3461:919"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:11205:218":{"id":"2:11205:218","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11207:183","2:11208:1805","2:11209:56744","2:11210:56745","2:11211:56746","2:11212:757","2:11213:758"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11196:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2862:98":{"id":"2:2862:98","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2864:54258"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9143:4483":{"id":"1:9143:4483","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9144:54340","1:9145:54341","1:9146:54342","1:9147:54343","1:9148:54344","1:9149:39854","1:9150:54339"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13783:3177":{"id":"2:13783:3177","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"2:13783:3177","self::pattern":"2:13332:4769","prim@char":"1:15883:3096","`DoubleEndedIterator`":"2:8717:121"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49993:5135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6745:4421":{"id":"1:6745:4421","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6746:56628"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3614:131":{"id":"2:3614:131","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3616:382"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3617:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:149:435":{"id":"0:149:435","crate_id":0,"name":"compiler","span":{"filename":"src/lib.rs","begin":[872,4],"end":[875,5]},"visibility":"public","docs":"Configures the compiler to be used to produce output.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["compiler",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7248:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:291:2847":{"id":"0:291:2847","crate_id":0,"name":"Vs16","span":{"filename":"src/windows_registry.rs","begin":[91,4],"end":[91,8]},"visibility":"default","docs":"Visual Studio 16 (2019)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:123:653":{"id":"0:123:653","crate_id":0,"name":"file","span":{"filename":"src/lib.rs","begin":[579,4],"end":[582,5]},"visibility":"public","docs":"Add a file which will be compiled","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["p",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7248:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3405:3438-0:308:1639":{"id":"a:2:3405:3438-0:308:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3405:3438","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:23768:16759":{"id":"2:23768:16759","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23769:58914","2:23770:58913","2:23771:58915"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23763:4720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3907:4841":{"id":"2:3907:4841","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13777:60644":{"id":"2:13777:60644","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9161:4724":{"id":"2:9161:4724","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8197:4727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:2868-0:364:128":{"id":"b:2:2868-0:364:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:54258"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3442:4735":{"id":"2:3442:4735","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3444:183","2:3445:898"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3405:3438":{"id":"2:3405:3438","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:153:1658":{"id":"0:153:1658","crate_id":0,"name":"cargo_metadata","span":{"filename":"src/lib.rs","begin":[896,4],"end":[899,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.\n\nThe emitted metadata is:\n\n - `rustc-link-lib=static=`*compiled lib*\n - `rustc-link-search=native=`*target folder*\n - When target is MSVC, the ATL-MFC libs are added via `rustc-link-search=native=`\n - When C++ is enabled, the C++ stdlib is added via `rustc-link-lib`\n","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cargo_metadata",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:151:1657":{"id":"0:151:1657","crate_id":0,"name":"archiver","span":{"filename":"src/lib.rs","begin":[882,4],"end":[885,5]},"visibility":"public","docs":"Configures the tool used to assemble archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["archiver",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7248:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3201-0:371:1696":{"id":"b:2:3201-0:371:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3203:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:128:1651":{"id":"0:128:1651","crate_id":0,"name":"cuda","span":{"filename":"src/lib.rs","begin":[613,4],"end":[620,5]},"visibility":"public","docs":"Set CUDA C++ support.\n\nEnabling CUDA will pass the detected C/C++ toolchain as an argument to\nthe CUDA compiler, NVCC. NVCC itself accepts some limited GNU-like args;\nany other arguments for the C/C++ toolchain will be redirected using\n\"-Xcompiler\" flags.\n\nIf enabled, this also implicitly enables C++ support.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cuda",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10846:4514":{"id":"2:10846:4514","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10847:147","2:10848:33888","2:10849:54471"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5513:4441":{"id":"1:5513:4441","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5514:6452","1:5515:8702"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:133:1649":{"id":"0:133:1649","crate_id":0,"name":"cpp_link_stdlib","span":{"filename":"src/lib.rs","begin":[731,4],"end":[737,5]},"visibility":"public","docs":"Set the standard library to link against when compiling with C++\nsupport.\n\nSee [`get_cpp_link_stdlib`](cc::Build::get_cpp_link_stdlib) documentation\nfor the default value.\nIf the `CXXSTDLIB` environment variable is set, its value will\noverride the default value, but not the value explicitly set by calling\nthis function.\n\nA value of `None` indicates that no automatic linking should happen,\notherwise cargo will link against the specified library.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n- `c++_shared` or `c++_static` for Android\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .cpp_link_stdlib(\"stdc++\")\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cpp_link_stdlib",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10811:147":{"id":"2:10811:147","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10812:656","2:10813:1687","2:10814:58336","2:10815:58337","2:10816:58338","2:10817:58339","2:10818:58340","2:10819:58341","2:10820:58342","2:10821:58343","2:10822:58344","2:10823:58345","2:10824:58346","2:10825:58347","2:10826:58348","2:10827:1549"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3475:4748":{"id":"2:3475:4748","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3477:564"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:301:608":{"id":"0:301:608","crate_id":0,"name":"eq","span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2867:3163":{"id":"2:2867:3163","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8682:3440":{"id":"2:8682:3440","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8684:3826","2:8686:3827","2:8687:3828"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6645:4426":{"id":"1:6645:4426","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6646:55780"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13738:32565":{"id":"2:13738:32565","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50081:5140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6241:4478":{"id":"1:6241:4478","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6242:58603","1:6243:8365","1:6244:58604","1:6245:58605","1:6246:58606","1:6247:58607"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14072:151":{"id":"2:14072:151","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14073:183","2:14074:151","2:14075:772"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:174:2005":{"id":"0:174:2005","crate_id":0,"name":"get_compiler","span":{"filename":"src/lib.rs","begin":[1388,4],"end":[1393,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis function will return a `Tool` which represents the culmination\nof this configuration at a snapshot in time. The returned compiler can\nbe inspected (e.g. the path, arguments, environment) to forward along to\nother tools, or the `to_command` method can be used to invoke the\ncompiler itself.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:844:227":{"id":"5:844:227","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:3873","5:846:1685","5:847:3874"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9154:3339":{"id":"2:9154:3339","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3272:128":{"id":"2:3272:128","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3273:5214","2:3275:8987","2:3276:8988","2:3277:8989"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10563:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10570:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4752:4456":{"id":"1:4752:4456","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4753:3332","1:4754:56638"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:86:2858":{"id":"0:86:2858","crate_id":0,"name":"find_vs_version","span":{"filename":"src/windows_registry.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Find the most recent installed version of Visual Studio\n\nThis is used by the cmake crate to figure out the correct\ngenerator.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:171:2099":{"id":"0:171:2099","crate_id":0,"name":"try_expand","span":{"filename":"src/lib.rs","begin":[1324,4],"end":[1349,5]},"visibility":"public","docs":"This will return a result instead of panicing; see expand() for the complete description.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7891:239","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:848-0:284:2839":{"id":"b:5:848-0:284:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:3873","5:851:1685","5:852:3874"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13731:2623":{"id":"2:13731:2623","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15883:3096"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49759:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9534:3663-0:371:1696":{"id":"a:2:9534:3663-0:371:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9534:3663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13826:5301":{"id":"2:13826:5301","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:144:1920":{"id":"0:144:1920","crate_id":0,"name":"opt_level_str","span":{"filename":"src/lib.rs","begin":[831,4],"end":[834,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["opt_level",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23238:4486":{"id":"2:23238:4486","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23228:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3376:224":{"id":"2:3376:224","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13803:60653":{"id":"2:13803:60653","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15883:3096","self::pattern":"2:13332:4769"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13362:4773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3491:4515":{"id":"2:3491:4515","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3493:183","2:3494:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:4097-0:308:1639":{"id":"b:2:4097-0:308:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4095:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4099:1443"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3530:4691":{"id":"2:3530:4691","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3532:1245"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13759:32447":{"id":"2:13759:32447","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13332:4769","prim@char":"1:15883:3096"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:13124:5097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13727:4533":{"id":"2:13727:4533","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"2:13728:60640","crate::ops::Index":"2:3672:4244","`str`":"1:15889:3101"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:137:1650":{"id":"0:137:1650","crate_id":0,"name":"cpp_set_stdlib","span":{"filename":"src/lib.rs","begin":[772,4],"end":[780,5]},"visibility":"public","docs":"Force the C++ compiler to use the specified standard library.\n\nSetting this option will automatically set `cpp_link_stdlib` to the same\nvalue.\n\nThe default value of this option is always `None`.\n\nThis option has no effect when compiling for a Visual Studio based\ntarget.\n\nThis option sets the `-stdlib` flag, which is only supported by some\ncompilers (clang, icc) but not by others (gcc). The library will not\ndetect which compiler is used, as such it is the responsibility of the\ncaller to ensure that this option is only used in conjunction with a\ncompiler which supports the `-stdlib` flag.\n\nA value of `None` indicates that no specific C++ standard library should\nbe used, otherwise `-stdlib` is added to the compile invocation.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .cpp_set_stdlib(\"c++\")\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cpp_set_stdlib",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:173:2108":{"id":"0:173:2108","crate_id":0,"name":"expand","span":{"filename":"src/lib.rs","begin":[1363,4],"end":[1368,5]},"visibility":"public","docs":"Run the compiler, returning the macro-expanded version of the input files.\n\nThis is only relevant for C and C++ files.\n\n# Panics\nPanics if more than one file is present in the config, or if compiler\npath has an invalid file name.\n\n# Example\n```no_run\nlet out = cc::Build::new().file(\"src/foo.c\").expand();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7891:239","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6164:61290":{"id":"5:6164:61290","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2898","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:4249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2898","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:4249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13756:2259":{"id":"2:13756:2259","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"2:13734:2421","`DoubleEndedIterator`":"2:8717:121","str::rsplit":"2:13762:56774","self::pattern":"2:13332:4769","prim@char":"1:15883:3096"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49789:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13725:56746":{"id":"2:13725:56746","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2859:97":{"id":"2:2859:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2861:3163"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10578:3253":{"id":"2:10578:3253","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10579:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2870:54258":{"id":"2:2870:54258","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9534:3663-0:284:2839":{"id":"a:2:9534:3663-0:284:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9534:3663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:8632:4855":{"id":"2:8632:4855","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8634:3864"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:289:2845":{"id":"0:289:2845","crate_id":0,"name":"Vs15","span":{"filename":"src/windows_registry.rs","begin":[89,4],"end":[89,8]},"visibility":"default","docs":"Visual Studio 15 (2017)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:287:2843":{"id":"0:287:2843","crate_id":0,"name":"Vs14","span":{"filename":"src/windows_registry.rs","begin":[87,4],"end":[87,8]},"visibility":"default","docs":"Visual Studio 14 (2015)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:13780:60645":{"id":"2:13780:60645","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9534:3663-0:364:128":{"id":"a:2:9534:3663-0:364:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9534:3663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5575:4447":{"id":"1:5575:4447","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5576:6452"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:120:1662":{"id":"0:120:1662","crate_id":0,"name":"shared_flag","span":{"filename":"src/lib.rs","begin":[543,4],"end":[546,5]},"visibility":"public","docs":"Set the `-shared` flag.\n\nWhen enabled, the compiler will produce a shared object which can\nthen be linked with other objects to form an executable.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["shared_flag",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6576:4434":{"id":"1:6576:4434","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6577:8893"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6168:61291":{"id":"5:6168:61291","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6171:2970":{"id":"5:6171:2970","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5906:5305":{"id":"5:5906:5305","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:183","5:5909:438"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:851:1685":{"id":"5:851:1685","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3177:233":{"id":"2:3177:233","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3179:128","2:3180:1431"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3620:133":{"id":"2:3620:133","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3622:183","2:3623:384"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:263:2651":{"id":"0:263:2651","crate_id":0,"name":"cflags_env","span":{"filename":"src/lib.rs","begin":[3007,4],"end":[3016,5]},"visibility":"public","docs":"Returns the compiler flags in format of CFLAGS environment variable.\nImportant here - this will not be CFLAGS from env, its internal gcc's flags to use as CFLAGS\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2651:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3405:3438-0:371:1696":{"id":"a:2:3405:3438-0:371:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3405:3438","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5425:4473":{"id":"1:5425:4473","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5426:54377","1:5427:3752"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13716:60639":{"id":"2:13716:60639","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:6467:4442":{"id":"1:6467:4442","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6468:54260","1:6469:8287","1:6470:8288","1:6471:8290","1:6472:8289","1:6473:8291","1:6474:8292","1:6475:8294","1:6476:6494","1:6477:8297","1:6478:8298","1:6479:8299","1:6480:8300","1:6481:8301","1:6482:8302","1:6483:8295","1:6484:8296"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:848-0:364:128":{"id":"b:5:848-0:364:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:3873","5:851:1685","5:852:3874"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:146:1656":{"id":"0:146:1656","crate_id":0,"name":"force_frame_pointer","span":{"filename":"src/lib.rs","begin":[852,4],"end":[855,5]},"visibility":"public","docs":"Configures whether the compiler will emit instructions to store\nframe pointers during codegen.\n\nThis option is automatically enabled when debug information is emitted.\nOtherwise the target platform compiler's default will be used.\nYou can use this option to force a specific setting.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["force",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4146:4730":{"id":"2:4146:4730","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4147:8989"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:121:1663":{"id":"0:121:1663","crate_id":0,"name":"static_flag","span":{"filename":"src/lib.rs","begin":[562,4],"end":[565,5]},"visibility":"public","docs":"Set the `-static` flag.\n\nWhen enabled on systems that support dynamic linking, this prevents\nlinking with the shared libraries.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .static_flag(true)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["static_flag",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2917:185":{"id":"2:2917:185","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2919:608","2:2920:913"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13801:60651":{"id":"2:13801:60651","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6219:4434":{"id":"1:6219:4434","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6220:4632","1:6221:4633","1:6222:8892","1:6223:55902","1:6225:55906","1:6227:55903","1:6228:55904","1:6230:55905"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1353","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:61290","5:6165:2181","5:6168:61291","5:6171:2970","5:6183:61292","5:6184:61293","5:6185:3302","5:6186:55710","5:6187:55711"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3484:4692":{"id":"2:3484:4692","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3485:183","2:3486:958"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3372:222":{"id":"2:3372:222","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13745:1972":{"id":"2:13745:1972","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15883:3096","self::pattern":"2:13332:4769"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:261:604":{"id":"0:261:604","crate_id":0,"name":"env","span":{"filename":"src/lib.rs","begin":[2980,4],"end":[2982,5]},"visibility":"public","docs":"Returns the set of environment variables needed for this compiler to\noperate.\n\nThis is typically only used for MSVC compilers currently.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2651:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2651:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:142:1653":{"id":"0:142:1653","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[813,4],"end":[816,5]},"visibility":"public","docs":"Configures the host assumed by this configuration.\n\nThis option is automatically scraped from the `HOST` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .host(\"arm-linux-gnueabihf\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["host",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13752:2388":{"id":"2:13752:2388","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47810:176","prim@char":"1:15883:3096","self::pattern":"2:13332:4769"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8673:152":{"id":"2:8673:152","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8674:1767","2:8675:3829","2:8676:773"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6165:2181":{"id":"5:6165:2181","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3829:138":{"id":"2:3829:138","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3831:691"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3824:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[281,0],"end":[2817,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:104:926","0:105:750","0:107:1765","0:109:1771","0:113:1775","0:115:1779","0:116:1783","0:118:1801","0:119:1829","0:120:1662","0:121:1663","0:122:1646","0:123:653","0:125:1647","0:127:1648","0:128:1651","0:129:1652","0:130:1664","0:131:1614","0:132:1665","0:133:1649","0:137:1650","0:141:1375","0:142:1653","0:143:1655","0:144:1920","0:145:524","0:146:1656","0:147:1654","0:149:435","0:151:1657","0:153:1658","0:154:1659","0:155:1660","0:156:1661","0:160:1964","0:166:2045","0:171:2099","0:173:2108","0:174:2005","0:175:1810"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2865-0:364:128":{"id":"b:2:2865-0:364:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:3163"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13723:56745":{"id":"2:13723:56745","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13712:60638":{"id":"2:13712:60638","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13710:60637"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6183:61292":{"id":"5:6183:61292","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3471:4746":{"id":"2:3471:4746","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3473:899"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:116:1783":{"id":"0:116:1783","crate_id":0,"name":"ar_flag","span":{"filename":"src/lib.rs","begin":[424,4],"end":[427,5]},"visibility":"public","docs":"Add a flag to the invocation of the ar\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .file(\"src/bar.c\")\n    .ar_flag(\"/NODEFAULTLIB:libc.dll\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3212-0:364:128":{"id":"b:2:3212-0:364:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3215:128","2:3216:1430"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3201-0:364:128":{"id":"b:2:3201-0:364:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3203:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:368:414":{"id":"0:368:414","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[147,9],"end":[147,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3197-0:371:1696":{"id":"b:2:3197-0:371:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3200:1718"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13709:60636":{"id":"2:13709:60636","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3654:4827":{"id":"2:3654:4827","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3656:242","2:3657:208","2:3658:59854"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3743:4246":{"id":"2:3743:4246","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3745:59517","2:3746:59518","2:3747:1815"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3611:2087":{"id":"2:3611:2087","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3612:583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:107:1765":{"id":"0:107:1765","crate_id":0,"name":"includes","span":{"filename":"src/lib.rs","begin":[364,4],"end":[373,5]},"visibility":"public","docs":"Add multiple directories to the `-I` include path.\n\n# Example\n\n```no_run\n# use std::path::Path;\n# let condition = true;\n#\nlet mut extra_dir = None;\nif condition {\n    extra_dir = Some(Path::new(\"/path/to\"));\n}\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .includes(extra_dir)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dirs",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8673:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:8673:152","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7248:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3281:8989":{"id":"2:3281:8989","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:4161:4729","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14540:4248":{"id":"2:14540:4248","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14541:58280","2:14542:58281","2:14543:58282","2:14544:58283","2:14545:58284","2:14546:58285","2:14547:3847"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:145:524":{"id":"0:145:524","crate_id":0,"name":"debug","span":{"filename":"src/lib.rs","begin":[841,4],"end":[844,5]},"visibility":"public","docs":"Configures whether the compiler will emit debug information when\ngenerating object files.\n\nThis option is automatically scraped from the `DEBUG` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["debug",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13342:4768":{"id":"2:13342:4768","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13344:4771","2:13345:59463","2:13346:59468","2:13347:59464","2:13348:59466","2:13349:59465","2:13350:59467"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:344:414":{"id":"0:344:414","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[91,9],"end":[91,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13362:4773":{"id":"2:13362:4773","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13710:60637":{"id":"2:13710:60637","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:371:1696":{"id":"b:2:2868-0:371:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:54258"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:125:1647":{"id":"0:125:1647","crate_id":0,"name":"files","span":{"filename":"src/lib.rs","begin":[585,4],"end":[594,5]},"visibility":"public","docs":"Add files which will be compiled","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["p",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8673:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:8673:152","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7248:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4492:1619":{"id":"1:4492:1619","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4493:4027","1:4494:4028","1:4495:4029","1:4497:3279","1:4498:4030","1:4500:2259","1:4501:4031"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4410:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10576:3252":{"id":"2:10576:3252","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10577:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:93":{"id":"0:93","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[176,0],"end":[176,35]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","provide","cause","source","description"],"trait":{"name":"Error","id":"2:3272:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13742:1971":{"id":"2:13742:1971","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13332:4769","prim@char":"1:15883:3096"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10563:110":{"id":"2:10563:110","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10564:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2922:125":{"id":"2:2922:125","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2917:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9157:4725":{"id":"2:9157:4725","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:113:1775":{"id":"0:113:1775","crate_id":0,"name":"object","span":{"filename":"src/lib.rs","begin":[393,4],"end":[396,5]},"visibility":"public","docs":"Add an arbitrary object file to link in","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["obj",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7248:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:371:1696":{"id":"b:2:2865-0:371:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:3163"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13774:56778":{"id":"2:13774:56778","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13332:4769","prim@char":"1:15883:3096","str::splitn":"2:13771:56776"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49911:5104","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6647:4427":{"id":"1:6647:4427","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6648:56591"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3432:4577":{"id":"2:3432:4577","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3434:183","2:3435:270"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":{"restricted":{"parent":"0:76:1634","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2922:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2963:186":{"id":"2:2963:186","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2965:1004","2:2966:832","2:2967:797","2:2968:716","2:2969:700"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2917:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:147:1654":{"id":"0:147:1654","crate_id":0,"name":"out_dir","span":{"filename":"src/lib.rs","begin":[862,4],"end":[865,5]},"visibility":"public","docs":"Configures the output directory where all object files and static\nlibraries will be located.\n\nThis option is automatically scraped from the `OUT_DIR` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["out_dir",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7248:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13815:3013":{"id":"2:13815:3013","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15883:3096","self::pattern":"2:13332:4769"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13799:60650":{"id":"2:13799:60650","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10570:120":{"id":"2:10570:120","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10571:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13735:2405":{"id":"2:13735:2405","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"2:13734:2421"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50072:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:129:1652":{"id":"0:129:1652","crate_id":0,"name":"cudart","span":{"filename":"src/lib.rs","begin":[628,4],"end":[633,5]},"visibility":"public","docs":"Link CUDA run-time.\n\nThis option mimics the `--cudart` NVCC command-line option. Just like\nthe original it accepts `{none|shared|static}`, with default being\n`static`. The method has to be invoked after `.cuda(true)`, or not\nat all, if the default is right for the project.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cudart",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3824:229":{"id":"2:3824:229","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3825:183","2:3826:4835","2:3827:690","2:3828:375"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3829:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3824:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3200:1718":{"id":"2:3200:1718","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3174:136"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:83:1987":{"id":"0:83:1987","crate_id":0,"name":"find","span":{"filename":"src/windows_registry.rs","begin":[35,0],"end":[37,1]},"visibility":"public","docs":"Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.\n\nThe `target` argument is the target that the tool should work for (e.g.\ncompile or link for) and the `tool` argument is the tool to find (e.g.\n`cl.exe` or `link.exe`).\n\nThis function will return `None` if the tool could not be found, or it will\nreturn `Some(cmd)` which represents a command that's ready to execute the\ntool with the appropriate environment variables set.\n\nNote that this function always returns `None` for non-MSVC targets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["tool",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Command","id":"1:7484:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:10574:3245":{"id":"2:10574:3245","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10575:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23763:4720":{"id":"2:23763:4720","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23764:1283","2:23765:1282","2:23766:1280","2:23767:1279"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23175:4935","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:143:1655":{"id":"0:143:1655","crate_id":0,"name":"opt_level","span":{"filename":"src/lib.rs","begin":[822,4],"end":[825,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["opt_level",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3676:4245":{"id":"2:3676:4245","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3678:758"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3672:4244","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5553:4443":{"id":"1:5553:4443","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5554:54359","1:5555:54360","1:5556:54361","1:5557:54362"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3870:4840":{"id":"2:3870:4840","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:2:4097-0:371:1696":{"id":"b:2:4097-0:371:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4095:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4099:1443"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:367":{"id":"0:367","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,9],"end":[147,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:368:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13824:2084":{"id":"2:13824:2084","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:13271:2876","FromStr::Err":"2:13272:127"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13271:2876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13271:2876","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3453:4732":{"id":"2:3453:4732","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3455:183","2:3456:1110"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3215:128":{"id":"2:3215:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39108:3358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:257:1813":{"id":"0:257:1813","crate_id":0,"name":"to_command","span":{"filename":"src/lib.rs","begin":[2938,4],"end":[2960,5]},"visibility":"public","docs":"Converts this compiler into a `Command` that's ready to be run.\n\nThis is useful for when the compiler needs to be executed and the\ncommand returned will already have the initial arguments and environment\nvariables configured.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"1:7484:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3197-0:364:128":{"id":"b:2:3197-0:364:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3200:1718"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:298:664":{"id":"0:298:664","crate_id":0,"name":"fmt","span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10523:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10512:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23102:4714":{"id":"2:23102:4714","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23103:4718","2:23104:58651","2:23105:1238","2:23106:1239","2:23107:43243","2:23108:58697","2:23109:58698","2:23110:58699","2:23111:58700","2:23112:58701","2:23113:58652","2:23114:58653","2:23115:58654","2:23116:58655","2:23117:58656","2:23118:58657","2:23119:58658"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23151:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6185:3302":{"id":"5:6185:3302","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13829:55714":{"id":"2:13829:55714","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23435:4866":{"id":"2:23435:4866","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:24072:4719","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23426:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:262:2440":{"id":"0:262:2440","crate_id":0,"name":"cc_env","span":{"filename":"src/lib.rs","begin":[2988,4],"end":[3002,5]},"visibility":"public","docs":"Returns the compiler command in format of CC environment variable.\nOr empty string if CC env was not present\n\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2651:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3496:4516":{"id":"2:3496:4516","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3498:183","2:3499:359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:76:1634":{"id":"0:76:1634","crate_id":0,"name":"windows_registry","span":{"filename":"src/windows_registry.rs","begin":[11,0],"end":[900,1]},"visibility":"public","docs":"A helper module to probe the Windows Registry when looking for\nwindows-specific tools.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:83:1987","0:85:2349","0:284:2839","0:86:2858"],"is_stripped":false}},"b:2:3212-0:308:1639":{"id":"b:2:3212-0:308:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3215:128","2:3216:1430"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3405:3438-0:284:2839":{"id":"a:2:3405:3438-0:284:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3405:3438","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3501:4517":{"id":"2:3501:4517","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3503:183","2:3504:362"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3479:4750":{"id":"2:3479:4750","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3481:1111"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13827:55712":{"id":"2:13827:55712","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3279-0:364:128":{"id":"b:2:3279-0:364:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:3272:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:4146:4730","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3281:8989"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"2:3447:4737":{"id":"2:3447:4737","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3449:183","2:3450:563"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6187:55711":{"id":"5:6187:55711","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13829:55714"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13792:60648":{"id":"2:13792:60648","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:8717:121","str::match_indices":"2:13789:60647","self::pattern":"2:13332:4769","prim@char":"1:15883:3096"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49957:5133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:852:3874":{"id":"5:852:3874","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9534:3663-0:308:1639":{"id":"a:2:9534:3663-0:308:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9534:3663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3181:232":{"id":"2:3181:232","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3183:128","2:3184:1430"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3207-0:364:128":{"id":"b:2:3207-0:364:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3177:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3210:128","2:3211:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3207-0:371:1696":{"id":"b:2:3207-0:371:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3177:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3210:128","2:3211:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:4095:68":{"id":"2:4095:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4096:1443"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"5:6502:1410":{"id":"5:6502:1410","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13765:60642":{"id":"2:13765:60642","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13332:4769","str::split":"2:13756:2259","prim@char":"1:15883:3096","`DoubleEndedIterator`":"2:8717:121","str::rsplit_terminator":"2:13768:60643"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49839:5128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:92:664":{"id":"0:92:664","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[171,4],"end":[173,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10523:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10512:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2825,0],"end":[3035,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:371:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:257:1813","0:259:1009","0:260:304","0:261:604","0:262:2440","0:263:2651","0:264:2626","0:265:2627","0:266:2624"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13729:2387":{"id":"2:13729:2387","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:13730:56765"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7602:3357":{"id":"1:7602:3357","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7603:55812"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13806:2390":{"id":"2:13806:2390","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13332:4769","prim@char":"1:15883:3096"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6184:61293":{"id":"5:6184:61293","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:444:2898","`String`":"5:8472:220"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2898","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:4249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3512:4700":{"id":"2:3512:4700","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3514:183","2:3515:1247"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10513:1622":{"id":"2:10513:1622","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10514:1549","2:10515:56677","2:10517:3571"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5563:4444":{"id":"1:5563:4444","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5564:56268"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3437:4518":{"id":"2:3437:4518","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3439:183","2:3440:1368"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:24072:4719":{"id":"2:24072:4719","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:24073:4718"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:24068:4435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13748:1987":{"id":"2:13748:1987","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15883:3096","`None`":"2:47810:176","self::pattern":"2:13332:4769"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10584:3251":{"id":"2:10584:3251","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10585:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3369:3437":{"id":"2:3369:3437","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3672:4244":{"id":"2:3672:4244","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3674:183","2:3675:757"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:4485:3277":{"id":"1:4485:3277","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4486:58435","1:4487:40258","1:4488:58436","1:4489:58437"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:371:1696":{"id":"0:371:1696","crate_id":0,"name":"Tool","span":{"filename":"src/lib.rs","begin":[186,0],"end":[195,1]},"visibility":"public","docs":"Configuration used to represent an invocation of a C compiler.\n\nThis can be used to figure out what compiler is in use, what the arguments\nto it are, and what the environment variables look like for the compiler.\nThis can be used to further configure other build systems (e.g. forward\nalong CC and/or CFLAGS) or the `to_command` method can be used to run the\ncompiler itself.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:247","a:2:3376:224-0:371:1696","a:2:3405:3438-0:371:1696","a:2:9533:3664-0:371:1696","a:2:9534:3663-0:371:1696","a:2:3364:215-0:371:1696","b:2:3201-0:371:1696","b:2:3197-0:371:1696","b:2:3207-0:371:1696","b:2:2868-0:371:1696","b:2:4097-0:371:1696","b:2:2865-0:371:1696","b:2:3212-0:371:1696","b:5:848-0:371:1696","0:380","0:382"]}},"2:13734:2421":{"id":"2:13734:2421","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"2:13735:2405"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50063:5138","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3617:132":{"id":"2:3617:132","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3619:383"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3620:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:2868-0:308:1639":{"id":"b:2:2868-0:308:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:54258"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10801:143":{"id":"2:10801:143","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10802:718","2:10804:56189"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13708:1824":{"id":"2:13708:1824","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13830:60654":{"id":"2:13830:60654","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5445:60654"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50088:5141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13351:4771":{"id":"2:13351:4771","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13353:4791","2:13354:928","2:13355:59911","2:13356:59912"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14456:142":{"id":"2:14456:142","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14457:283","2:14458:523","2:14459:286","2:14460:1087"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:369":{"id":"0:369","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,16],"end":[147,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10563:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:364:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:370:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:122:1646":{"id":"0:122:1646","crate_id":0,"name":"no_default_flags","span":{"filename":"src/lib.rs","begin":[573,4],"end":[576,5]},"visibility":"public","docs":"Disables the generation of default compiler flags. The default compiler\nflags may cause conflicts in some cross compiling scenarios.\n\nSetting the `CRATE_CC_NO_DEFAULTS` environment variable has the same\neffect as setting this to `true`. The presence of the environment\nvariable and the value of `no_default_flags` will be OR'd together.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["no_default_flags",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:308:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13789:60647":{"id":"2:13789:60647","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13332:4769","`DoubleEndedIterator`":"2:8717:121","str::rmatch_indices":"2:13792:60648","prim@char":"1:15883:3096"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49939:5132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6498:228":{"id":"5:6498:228","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2865-0:284:2839":{"id":"b:2:2865-0:284:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:3163"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13768:60643":{"id":"2:13768:60643","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13332:4769","prim@char":"1:15883:3096","str::split":"2:13756:2259","str::split_terminator":"2:13765:60642"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49857:5129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3207-0:284:2839":{"id":"b:2:3207-0:284:2839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3177:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:284:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3210:128","2:3211:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13795:2358":{"id":"2:13795:2358","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5505:4439":{"id":"1:5505:4439","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5506:6452","1:5507:55743","1:5508:55744"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:850:3873":{"id":"5:850:3873","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:308:1639":{"id":"0:308:1639","crate_id":0,"name":"Build","span":{"filename":"src/lib.rs","begin":[92,0],"end":[127,1]},"visibility":"public","docs":"A builder for compilation of a native library.\n\nA `Build` is the main type of the `cc` crate and is used to control all the\nvarious configuration options and such of a compile. You'll find more\ndocumentation on each method itself.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:103","a:2:3376:224-0:308:1639","a:2:3405:3438-0:308:1639","a:2:9533:3664-0:308:1639","a:2:9534:3663-0:308:1639","a:2:3364:215-0:308:1639","b:2:3201-0:308:1639","b:2:3197-0:308:1639","b:2:3207-0:308:1639","b:2:2868-0:308:1639","b:2:4097-0:308:1639","b:2:2865-0:308:1639","b:2:3212-0:308:1639","b:5:848-0:308:1639","0:343","0:345","0:245"]}},"2:13730:56765":{"id":"2:13730:56765","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13729:2387"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"6:3933:7788":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:51901:4891":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:5224:3888":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"19:0:1000":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6310:5785":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:1108:8877":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"0:83:1987":{"crate_id":0,"path":["cc","windows_registry","find"],"kind":"function"},"2:49747:4974":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:46972:8554":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:13873:7090":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"12:2059:4510":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"18:754:61563":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"12:379:5556":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11013:8824":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:23151:4435":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"12:2072:4512":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:580:7573":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:49993:5135":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:32988:4851":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:5746:4672":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:1547:4554":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:10291:6022":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:8974:8882":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"5:853:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:14460:3276":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:48110:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:11628:6506":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13840:7083":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12048:6594":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:53473:4905":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:12527:6685":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:10851:6427":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:9533:3664":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:7110:5803":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:15038:4528":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:10999:4458":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:14647:54397":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"18:837:4771":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"12:1183:5550":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:49142:2059":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:11205:218":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:88:40152":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4538:8035":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:9275:6378":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:15854:11693":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:46211:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:13147:6884":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:15890:3102":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:5348:5620":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:13089:5134":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:3614:131":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:783:6235":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:5321:3891":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:39148:4728":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:13215:6899":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:3600:3286":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"9:0:3073":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:6468:5789":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"13:0:3070":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:10584:3251":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:4694:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"18:169:53698":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:12646:6706":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:3838:4540":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:565:7564":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:53715:8642":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:24539:5189":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:10711:3292":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"12:353:7438":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:23387:16740":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:2792:5657":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12442:6671":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:1374:3332":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:3114:60219":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:5210:8081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:8777:3394":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:3265:5912":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:5855:5649":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:12431:6670":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11409:6454":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:10104:6074":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10503:6036":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:4270:4630":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:46594:8543":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:1909:6190":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"18:729:61562":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"12:114:61543":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:9746:8785":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:2481:4043":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:4005:7833":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:14862:3353":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:6573:4432":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:4296:7929":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"14:47:8851":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:13584:6997":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:9183:6008":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:8939:3392":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"12:2253:4551":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:2213:1057":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:22847:59061":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:2422:4118":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"0:85:2349":{"crate_id":0,"path":["cc","windows_registry","find_tool"],"kind":"function"},"16:3402:5658":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:12731:6718":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:51570:8584":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:527:7539":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:4116:7886":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:15883:3096":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:1764:7744":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:1740:4545":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:50237:4781":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:11960:3829":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:8549:4251":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:6407:5787":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"0:289:2845":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs15"],"kind":"variant"},"1:10417:3427":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:10545:8802":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:51831:4903":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3284:1620":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:46894:4938":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:5362:5621":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:1256:60081":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:5730:4669":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:46231:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:5278:3890":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:4660:7149":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:12015:6584":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:22902:59455":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:6858:5946":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:53581:4888":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:696:3428":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:13394:4112":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:15899:3109":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:5419:8191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:1489:4550":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"18:857:6095":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:3535:4711":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4379:7972":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:9756:61555":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:5143:3889":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"9:41:5469":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"5:1276:5379":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:9539:6049":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:11068:6009":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:15232:4611":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:4346:7952":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:9930:61551":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:4526:8030":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:51468:4877":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:7093:8881":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8000:6217":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"14:250:7392":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:10015:8790":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:3102:4435":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:10638:4053":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"12:2036:3829":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:14148:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:10318:6034":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:11998:4499":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:2119:3332":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:5388:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:11250:4671":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13938:7108":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:3521:2964":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"0:76:1634":{"crate_id":0,"path":["cc","windows_registry"],"kind":"module"},"1:3044:4061":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12406:6666":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:10530:6431":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:50349:4784":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:6907:5796":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:7281:5738":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:46934:4942":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:3340:5654":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:12282:6629":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:383:5353":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:24388:4987":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:15884:3097":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:4865:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"18:621:6286":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"15:269:5576":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"9:1056:5479":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11002:8823":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:15893:3103":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:3672:4244":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:46645:5283":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:46363:4826":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:10394:6058":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:14:1687":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:5288:8116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:2181:583":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:2839:5901":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:6433:5788":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:15865:54389":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:23138:4975":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"18:744:61560":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:50191:4774":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13428:6953":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:7721:5745":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:53779:8646":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:11245:4668":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:25085:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:7602:3357":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:13073:6873":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:668:6104":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:11966:4497":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:1662:7693":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:1533:4552":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12183:6613":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:56242:4845":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:13413:55709":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:3441:5340":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:13245:4625":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:2397:4112":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:5366:8166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:5519:4442":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:12620:6704":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:49911:5104":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:1751:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:14874:3354":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:859:3426":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:13452:6960":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:3104:3873":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:49160:8576":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:52661:4884":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"15:0:3078":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:10574:3245":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"0:86:2858":{"crate_id":0,"path":["cc","windows_registry","find_vs_version"],"kind":"function"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:23380:4435":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:15888:3100":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:50508:5150":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:1740:7735":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"12:2269:4552":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:11449:1623":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:1526:7606":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:1477:4548":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11547:6491":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:11501:3332":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:52691:4887":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:9535:3662":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:3494:6304":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:51853:4906":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:6841:4437":{"crate_id":1,"path":["std","os","net","tcp","TcpStreamExt"],"kind":"trait"},"2:10851:4853":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11907:6562":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:50777:4931":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:7684:5744":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:11314:4424":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:5447:8199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:22879:59460":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:8466:8437":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:46588:4455":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:10028:8791":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:13155:6885":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:4256:7916":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:50363:4785":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13735:7055":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:3981:7819":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:10390:6033":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4315:7937":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:7048:5302":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:15897:3107":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:9512:4606":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"17:13549:6989":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:4316:7139":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:1760:5377":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:5727:4970":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:10550:4113":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:6241:4478":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:49152:8575":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:1311:6079":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:49352:5299":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:5567:8235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:1719:4543":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:2963:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:50684:8581":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:3905:6190":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:3803:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:49670:5114":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:8742:3439":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:5962:6201":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:46858:3236":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:47286:8558":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:4467:7144":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:2188:8439":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:5326:5619":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:3479:4750":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:1704:7722":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5303:5618":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:50397:5209":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:12687:6711":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:13357:4772":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:11234:6050":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:11017:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:8373:3208":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10115:6075":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:52615:4880":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:3459:4742":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:24788:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:11725:6523":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:10476:6035":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:13233:6907":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:11985:4498":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:444:2898":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:3522:4705":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:46097:4765":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:6331:5568":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11742:6531":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:9706:8784":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:607:7587":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:11810:6551":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:12746:6719":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:2851:1617":{"crate_id":1,"path":["std","fs"],"kind":"module"},"12:1256:4554":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:2147:4511":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:11381:6450":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:24854:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:8717:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:49105:4558":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:46944:4943":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:13602:7000":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:13747:7058":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:32446:5234":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:4110:7883":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"7:38:45073":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12512:6681":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:3171:150":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:13361:6937":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:11270:4631":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:3870:4840":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:15886:3098":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:8646:8882":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:4841:4808":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5186:8065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:5609:3380":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"18:820:6092":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6482:5935":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:1544:7614":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:4489:3829":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:51653:4882":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:49607:5111":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:14253:59640":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:15894:3104":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"18:678:143":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:24477:39574":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:11668:5103":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:9466:6383":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10874:6428":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:4464:8008":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:3907:7768":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:5374:5622":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:12360:6656":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:9563:6234":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:7314:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:11822:6554":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:12106:4072":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:11256:4623":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:9636:8783":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:0:3080":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:14072:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:11945:6573":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"18:782:6287":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:9534:3663":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"12:2404:61547":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:50528:5154":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:14057:139":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:2843:5384":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:4038:7848":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11591:6500":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:2420:4117":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:3824:229":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:11507:3334":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:48152:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:8566:4252":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:11292:8286":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:5427:5627":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:7051:5798":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:13138:6883":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:24920:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"0:0:2345":{"crate_id":0,"path":["cc"],"kind":"module"},"2:47015:4952":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:46698:5279":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:4599:7147":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:6873:3660":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"12:869:4253":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:2922:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:47105:4960":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:1531:7608":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:10655:4057":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:5398:8179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:7449:5742":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:7659:5810":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:49113:8571":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:7960:6209":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:8361:3207":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:23426:4435":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:6595:5747":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:7323:5754":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"18:896:6098":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:15896:3106":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:157:40218":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:6340:4257":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:46768:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:7471:5730":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7169:5749":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:12674:6710":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:10468:3413":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:5273:6378":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:6775:5321":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:11603:6501":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:5906:5305":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:4127:7891":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:8314:3829":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11713:6522":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:53730:8643":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:46728:5281":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:46878:4939":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:6645:4426":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:4:985":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:4198:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:6900:59795":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:11314:6027":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:14404:4056":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:13481:6968":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:8127:4977":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:11514:6485":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:11912:8693":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:23238:4486":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:9873:8787":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:4061:7856":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"12:2040:4253":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:24527:5190":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:5478:8207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:7063:5799":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:4428:3275":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:14399:8698":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"12:815:4545":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:48859:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:9157:4725":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"18:645:6102":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:48589:3253":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5439:8197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:52301:4912":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:50081:5140":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:53794:8647":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:6034:8286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:50312:4783":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:10340:6062":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:8545:3393":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:6173:5782":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:10489:6391":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"12:895:5541":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:49130:147":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:7939:3414":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"16:6604:5793":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:7731:4257":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:4628:7148":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:12772:5294":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10937:8818":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:7309:5737":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:52167:8592":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"18:849:6094":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:4178:3298":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:10082:6072":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:2959:5904":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:1405:4541":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"18:766:6298":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"9:1020:5486":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:5426:8193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:5405:8180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:46986:4946":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:49518:5102":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:25118:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:3405:3287":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:15887:3099":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:13763:7062":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:13565:6992":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:47916:4048":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:6214:8373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:47840:1767":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:1721:7729":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:4356:7958":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:4775:7153":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:28330:4860":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:37952:3805":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:3437:4518":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4308:7936":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:13908:7103":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4179:7910":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:5530:5633":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:47074:4958":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:1673:4540":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:6549:5750":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:53223:4881":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:12014:4500":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:23768:16759":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:6467:4442":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:4476:56708":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:3369:3437":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:11238:4458":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13887:7097":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"18:829:6093":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:7768:5740":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:50285:4782":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:39184:3817":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:2937:5926":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:10975:8821":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:13783:1627":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:48320:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:15849:9235":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:47984:4540":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:12082:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:23232:4484":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12117:6603":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:50206:4777":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:4765:6195":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:11784:6546":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:3395:3332":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:46336:4731":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:7379:5755":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:51947:4879":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:50088:5141":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:50169:4770":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:48893:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"5:7477:3829":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:5154:4611":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"14:231:5318":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:11701:6521":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:50520:5155":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10266:6019":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:14470:58637":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:6035:5771":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:10980:3282":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:1431:4253":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:3530:4691":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:1441:4251":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:48404:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"12:559:144":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:50417:5210":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:9154:3339":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:9087:47407":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:46124:4828":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:13595:6998":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"0:293:2849":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs17"],"kind":"variant"},"17:8849:6048":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:1588:7639":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:10513:1622":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:3007:5905":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:6007:8276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:2044:3267":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:53871:8650":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"0:291:2847":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs16"],"kind":"variant"},"12:1121:4552":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"12:183:5557":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:22881:59458":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:48841:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:15315:8710":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:4871:7156":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:5331:8145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:3587:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"9:809:2059":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:4146:4730":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"16:2733:5656":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:53695:8640":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:9326:6026":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:14394:8696":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:13660:7042":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:539:7544":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:3297:5965":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:3372:222":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:1712:7723":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"12:0:3076":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:46615:5011":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13708:7043":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:15633:6245":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"12:1147:4553":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:1733:4624":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12573:6691":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:46785:5202":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:51690:4867":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:5240:8091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:8860:3389":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:3243:5911":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6490:5790":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:3501:4517":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:14795:6243":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12634:6705":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:2152:4512":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:2126:4253":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:6745:4421":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:2917:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:8241:4253":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:853:3425":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:9920:8788":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:46171:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:49893:5103":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:12558:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:69:4250":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:3966:7812":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:1991:146":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:49775:3282":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:3896:7760":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:4095:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:7141:5806":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:4896:4861":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:47874:3660":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:1502:4551":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:2314:6061":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:48808:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:10445:6339":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:12262:6623":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:7754:5812":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"18:712:3805":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:23175:4935":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:4689:7150":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"0:371:1696":{"crate_id":0,"path":["cc","Tool"],"kind":"struct"},"2:3512:4700":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:5708:4667":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"12:971:4549":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:25052:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:53704:8641":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"9:722:5420":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:11177:4661":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"6:3883:7751":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:0:1775":{"crate_id":17,"path":["object"],"kind":"module"},"1:15339:8711":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13557:6990":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:9064:47406":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:11682:5104":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:15053:4529":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:53675:8638":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"12:399:5555":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:6924:3652":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"12:2412:7444":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5178:8063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:5978:4628":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:2359:4101":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:13050:5130":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:9396:6381":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:5378:8171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:14968:3362":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:1621:7661":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11335:6006":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:5753:784":{"crate_id":2,"path":["core","iter"],"kind":"module"},"18:866:6096":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:4743:7152":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:5216:8082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:1592:4552":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:12228:5119":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"12:466:61542":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:3248:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:6100:4629":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:5998:5716":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:8217:4249":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:10517:4520":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:11696:5105":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:8096:3414":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"16:5784:5646":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:299:8778":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:12070:6595":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"0:308:1639":{"crate_id":0,"path":["cc","Build"],"kind":"struct"},"2:57952:8657":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:4516:8025":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:4581:5366":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:11134:8674":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"2:47331:8563":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:12770:6729":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:46275:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:13928:6241":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:6576:4434":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:46356:4825":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:4217:3300":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12026:6585":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12455:6673":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:15377:5580":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:3103:4753":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:1567:7624":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:8288:4495":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:12196:6614":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7792:5769":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:15907:3117":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:12209:6616":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:1610:4554":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:7734:3412":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"17:9259:6377":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:5685:5642":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:3617:132":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:3686:7133":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:10789:4565":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11142:6442":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:2772:5927":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:32592:4242":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:6153:8330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:14417:8703":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:8732:4644":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"6:6688:8413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:9526:4607":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:22900:59457":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:5516:5632":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:6643:5939":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:10438:3403":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:11282:47412":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:53411:4885":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:6643:8401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:14894:4072":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:1601:4553":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"18:801:6090":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:11196:4435":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:3654:4827":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:7826:4825":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:9291:6379":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:2286:4759":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:2510:4044":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:10364:6060":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:5293:8117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4020:7839":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:12567:6240":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:8449:3376":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:3105:60221":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"12:928:4543":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:47004:4949":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:3436:4509":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:11433:6468":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"7:0:1496":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:56599:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:15882:3095":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:25520:5000":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:51400:4909":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:9361:6380":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:8257:60136":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"0:284:2839":{"crate_id":0,"path":["cc","windows_registry","VsVers"],"kind":"enum"},"6:4028:7842":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:5649:5638":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:50504:5147":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"5:8472:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:973:3414":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:6120:8314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:24506:8469":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:4752:4456":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:3467:4579":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:13515:6981":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:2651:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:545:7547":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:56625:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:6647:4427":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:4509:3332":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:13167:6890":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:6851:3267":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:4829:4571":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"6:521:7536":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:3177:5908":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"18:651:6099":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4048:7851":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11968:6578":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:10068:6019":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:3471:4746":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:23049:4934":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:50512:5152":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11689:6518":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:3877:7750":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10831:6034":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:11105:4570":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"2:13013:5127":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13529:6983":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:46848:3237":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:8902:47402":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:12003:6582":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:1669:7697":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:8669:137":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4454:8002":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:4180:3299":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:47320:8561":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:2883:5921":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:5721:5644":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:11048:4462":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"9:996:5485":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"3:321:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:8715:2050":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:11615:6504":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:4493:8017":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:1694:7716":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:50072:5139":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:11491:3331":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:11354:6005":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:12302:6630":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:24423:8457":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"18:136:53696":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:5948:5900":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4425:7987":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:6012:5731":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:3770:7135":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:2543:6030":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10622:6393":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:10914:3304":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:626:7597":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:10814:6004":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:49857:5129":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:1397:3829":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:10240:5981":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:47293:2050":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:53081:4913":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:3812:5197":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:7456:3350":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:13124:5097":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:9561:6028":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:2484:47494":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:4142:7898":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:6856:8414":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:10511:11690":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:586:7576":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:9958:61550":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:12482:6676":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:6016:8277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:7155:5807":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"11:46:7447":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:23763:4720":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:10788:8811":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:10988:8822":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:11882:3355":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:50106:5142":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"9:234:5444":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:6902:8416":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:10496:11688":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:46773:3221":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:4230:7914":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:1466:4547":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:5443:5628":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:9988:47456":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"14:56:6469":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:10058:6078":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"18:720:6289":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:5575:4447":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:7834:3414":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:2141:4510":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:5274:8115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:3103:5917":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:3743:4246":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"14:194:45750":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:1912:41522":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:15065:4535":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:5257:6377":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:2361:4102":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:5706:3235":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"12:2392:7441":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:6759:3380":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:50384:4787":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:3042:4060":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:49644:4939":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:4017:4251":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"16:7079:5800":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:5639:5636":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"17:13495:6975":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:14064:3300":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:6027:8282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:10678:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:13345:6934":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:10455:6032":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:5566:5634":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:52045:4871":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:10223:5989":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:6477:8297":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:14420:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"9:749:5421":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:50043:3285":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:10250:5084":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:1296:5380":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:13332:4769":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:6937:8423":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:7131:5805":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:2765:584":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:4410:1621":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:12072:3386":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:6050:5777":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:2953:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"14:244:7390":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:3405:3438":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:12660:6707":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:52120:8591":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4340:7950":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:46370:3888":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:510:8779":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:6640:4947":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"12:1666:5562":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:9394:6231":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:13351:4771":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:14779:6242":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:8436:3218":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:513:7531":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:3060:4065":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:4492:1619":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:5998:8270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:5902:5774":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:2005:4251":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:13331:6932":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:23962:4485":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:23435:4866":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:4573:7146":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11985:6581":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:47115:4813":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:9004:47404":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:6896:8415":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13612:7005":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"9:1075:5487":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:9161:4724":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:24348:8448":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:15904:3114":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:52725:4869":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:1072:3332":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:7551:6190":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:10571:6012":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:49618:5112":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:13744:1626":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:24311:8446":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"16:2754:5655":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:5860:4620":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:4143:4598":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:10278:6236":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:5488:8209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:15895:3105":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:6130:5780":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:4416:7984":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4148:7900":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:4351:7140":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:51708:8586":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:46329:4839":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:7062:8881":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:5941:5776":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:10582:3250":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:5497:4440":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:8494:5316":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:46954:4944":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:11868:3354":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:5247:8095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:6114:8312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13037:6843":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:13029:6841":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:5425:4473":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:13342:4768":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:7739:55865":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:46903:3280":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:14379:4436":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:12700:6712":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:7207:6203":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:23291:4718":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:1558:7619":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:11842:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:8197:4727":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:48929:3879":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:10253:5984":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:15881:3094":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:10187:8795":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:9427:55860":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:32640:59560":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"16:7355:5734":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:13440:6959":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:49689:5116":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:13271:6914":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:6498:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:10039:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:10799:1669":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:1456:4545":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:9786:8786":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:9836:61553":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:47992:3829":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:3948:3294":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:152:53697":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:3960:5355":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:3463:4578":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:10973:3281":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:12157:6610":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:4485:3277":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:634:7602":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:7264:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:5412:5626":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:9587:61558":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"6:5547:8221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:4383:3267":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:3371:3291":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:47095:3281":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:14067:3296":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:11518:3335":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11256:6445":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:15192:4610":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"11:54:5539":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:11434:3284":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:4840:7155":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:5563:4444":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:3077:5964":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:7358:6190":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:4803:7154":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:10794:4566":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:14107:59639":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:5460:5629":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:3620:133":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:4161:4729":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"5:8406:3220":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:24953:3420":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:2813:5920":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:6026:5729":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:1460:4546":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:49597:5110":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:3475:4748":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:24440:39573":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:6980:5797":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:10166:6390":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:5166:664":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"5:1684:3829":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:3110:60218":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:12125:4575":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:53619:4908":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:15071:4536":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:1483:4549":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:2502:4862":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:24068:4435":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:1626:7663":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:9646:61552":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:3168:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:9517:3282":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:51671:8585":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:52425:4904":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:3987:7821":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:1447:4543":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"18:811:6091":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:49957:5133":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:10925:8817":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:10660:47594":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:681:6448":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"12:750:3332":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:4055:7854":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:3908:7136":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:6979:8431":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:25019:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:5455:8201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:11769:6540":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:3447:4737":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:10516:6392":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:24169:5172":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:13271:2876":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:6268:8395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:6723:4425":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:1663:3332":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:6949:5950":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:12348:6654":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10899:8812":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:14634:4475":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:15905:3115":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:13917:7105":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:10523:135":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:11457:6469":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:11474:6474":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:3491:4515":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:9267:8973":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:10147:6388":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:5923:5775":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:6135:8319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:10811:147":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:6057:8304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:49699:5117":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:10942:3278":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:618:7592":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:11890:8692":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"12:764:4540":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:2861:5902":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:3743:7134":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:46925:4941":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:4783:3267":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"17:13975:7115":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:47808:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:8673:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"9:927:45177":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:0:803":{"crate_id":6,"path":["libc"],"kind":"module"},"17:10127:6034":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:2862:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:3272:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:11432:3330":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:6075:5733":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:2123:3829":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:2266:6192":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:7208:5808":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6691:5794":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:8874:158":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:12170:6611":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:3518:4703":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:6954:8428":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:3181:232":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"12:2032:3332":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:52198:8593":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:1710:4542":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:5698:5643":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:10902:3308":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:14456:142":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:10993:3285":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:46675:5278":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:46253:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:2376:5398":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:6339:4480":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:4665:6193":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"17:11130:6441":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:14142:3413":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:46187:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:13463:6964":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:1152:6190":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:10093:6073":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4485:8015":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"12:1682:5563":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:11088:4464":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"9:603:9227":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:777:8855":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:1105:8875":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"12:777:3829":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:11589:5100":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:46667:5142":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:3484:4692":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:14801:6244":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:7470:3351":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:12130:6606":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:47043:4955":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:5217:5660":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:10136:8787":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"12:2280:4553":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:3442:4735":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:10703:4591":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:11944:3332":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:50748:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:15908:3118":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"12:2066:4511":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:10566:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"5:8279:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:3459:3293":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"12:856:4542":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"16:7247:5766":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:46655:5284":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:3462:4512":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13196:6898":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:2905:5903":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"9:776:5466":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"6:4373:7969":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:51356:8582":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:9579:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:1261:144":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:47064:4957":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"12:1703:5564":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:49939:5132":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:9653:6235":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:46916:4940":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:51530:4898":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:53333:4901":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:3676:4245":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:8632:4855":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:4135:7896":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:1088:4045":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:2909:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:46754:5015":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:844:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6504:5791":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"12:1203:5551":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:5738:4670":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:13352:6936":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:5982:8258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:11181:6444":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:10643:6395":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:50053:5137":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"11:0:3075":{"crate_id":11,"path":["adler"],"kind":"module"},"2:8636:4857":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:10598:8807":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"18:790:6089":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:24240:5174":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:51801:4899":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:50374:4786":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:5974:8253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:10648:4056":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11494:6484":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:7369:5735":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:4942:7158":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:50516:5151":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:6679:5942":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:4308:6190":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:9160:6051":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:3402:4510":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:51422:4897":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:11154:4660":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:52221:8594":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:12237:6621":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:3506:4697":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:15170:4465":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:10586:8806":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:6630:5938":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:4975:7159":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:8295:4496":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:672:40548":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:5948:6199":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"16:3478:5913":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:15906:3116":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:4281:4253":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5301:8122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:10198:8796":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:3177:233":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:4386:7974":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:2884:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:4351:3305":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"5:8420:5202":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"12:1103:4551":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:8449:3219":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:49765:5124":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:9655:4768":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13794:7069":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"12:162:5553":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:5149:8039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:13899:7099":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:10921:3306":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:12318:6635":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13785:7067":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:50011:5136":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:2911:4055":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13573:6993":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:12565:4054":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:10570:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:13073:5131":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:7090:5801":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"12:1784:6188":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:601:7584":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:12222:6618":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:9676:61554":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:13408:4776":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:8281:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:11264:4612":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10913:8816":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:12957:6782":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:10217:6448":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:0:1344":{"crate_id":1,"path":["std"],"kind":"module"},"5:3428:4511":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:12716:6714":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:47933:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"13:233:7437":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:0:493":{"crate_id":2,"path":["core"],"kind":"module"},"1:14886:58635":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:7422:1625":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:6908:8417":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:161:40219":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:8022:4811":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:5433:8194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:10986:3284":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:11071:4463":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"2:24513:5239":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:13257:6913":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:4392:7977":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:12067:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:5887:5651":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:4439:7143":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"9:27:5468":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:12383:6665":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"14:11:8851":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4440:7994":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:32792:59559":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"12:472:61544":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:52069:4872":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:2328:5382":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:11952:4494":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:610:1404":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:10554:5388":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:10801:6003":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:11671:6517":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:13755:7061":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:4716:7151":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:11196:4613":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:5390:8178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:10039:8792":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:7702:5743":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:4998:5042":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:23437:4718":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4081:7867":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:3382:3419":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:8453:3383":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:3155:5907":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:5869:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:5553:4443":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:1418:4542":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:5269:5051":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:3461:5914":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:12796:2608":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:9143:4483":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:11653:6508":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:6479:8299":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:49578:5108":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11530:6489":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:7891:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:3755:4568":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:32692:59563":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:10563:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:4381:7141":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:5396:5623":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:9439:55859":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:57973:8658":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:4321:7940":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:49657:5113":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:9948:8789":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:7599:2678":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:11022:4459":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"1:14960:8707":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:24986:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:13961:7112":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:56638:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"15:248:5572":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:6205:8370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:12077:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:4446:7997":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:47033:4954":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:7312:4253":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:52455:4907":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:12892:6731":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:9431:6382":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:49121:4854":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:49569:5107":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:11627:5101":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:6557:5792":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:294:8777":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:3058:4064":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:5567:4445":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:10846:4514":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4509:8022":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:53809:8648":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:10719:3294":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:47907:3661":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:23974:59059":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:3373:221":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:6219:4434":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:2396:5381":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:48194:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:8389:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:3743:6000":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:9033:47405":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11085:6053":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:2512:6059":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:3526:4707":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:51446:4889":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:50735:5161":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:24332:4992":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:47925:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:48026:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:50524:5153":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:3829:138":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:56664:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2135:4509":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:11894:55821":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"2:50573:5221":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:50561:4580":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"17:13323:6929":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:10558:8804":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:4008:8782":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:9131:47408":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:6159:5736":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:8249:5347":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:24:604":{"crate_id":2,"path":["core","env"],"kind":"macro"},"12:1881:146":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:739:8775":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:5910:5307":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:15898:3108":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"18:611:6100":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:3814:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:50097:4455":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:13817:7082":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:39108:3358":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"9:469:9217":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:1680:7705":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:15900:3110":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:3129:5916":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:48871:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:5498:5631":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:14437:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"5:5861:6190":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"12:880:4251":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:13404:6945":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:3221:5910":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:3106:8433":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:3381:6215":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:25151:5176":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:13522:6982":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:53832:8649":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"9:686:5417":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:11854:3353":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:6518:5748":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:0:3079":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:3370:3814":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:12228:4117":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:47302:8559":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:7121:5804":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:2130:4251":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:7484:1626":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:4242:7915":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10949:8819":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:5636:4664":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"6:6129:8318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:5278:4618":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"12:2419:3207":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:53756:8645":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:3407:5339":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"10:0:3074":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:13481:4572":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:6481:8301":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:997:1628":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:7753:4258":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:13247:6912":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:15253:4618":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6533:5933":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:13306:6924":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:7025:5663":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:8446:3382":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"0:287:2843":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs14"],"kind":"variant"},"6:6665:8402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:1606:7649":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"8:0:3072":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:51755:4911":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:3374:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:49839:5128":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4434:7993":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:7238:5752":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:3554:4251":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:9826:6034":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13472:6967":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:7539:1627":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:10801:143":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:607:8780":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:48826:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"16:4271:7138":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:4467:1622":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:11102:47411":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:12250:6622":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:10407:6057":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:47865:3829":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:14540:4248":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"14:189:8851":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:12053:3385":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:542:5666":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:533:7542":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:8287:5314":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:13859:3352":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:1113:11691":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:10534:4107":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:12496:6679":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:6342:5786":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:6229:8380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:14369:5162":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:47311:3305":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4332:7946":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:49759:5123":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:50220:4780":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:50692:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:7868:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:10304:6025":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:3376:224":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:12093:6601":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:5959:5662":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:13560:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:46297:3201":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:11385:3332":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:14630:4113":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:3841:4837":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11890:6556":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:3366:5918":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:6097:8307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:10576:3252":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:7200:5751":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:4067:7859":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:12195:5118":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"12:952:4548":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:2917:2962":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:6141:5781":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:2981:5915":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11640:6507":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:4012:7837":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:51999:4886":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:1551:7616":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:2654:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:12087:4506":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:24821:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:56612:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3825:3332":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4474:8009":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:5147:5044":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"12:432:5554":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:3576:2965":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:2326:604":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:46415:5022":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:48001:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:49587:5109":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:11201:4614":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:4402:7980":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:52379:4900":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:13016:6834":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:1146:11692":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"12:787:4544":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"14:216:45756":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:24887:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:612:7589":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:51631:4878":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:14665:3355":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:39144:5388":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:13377:6941":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:3165:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:48945:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:1576:7630":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:49356:5298":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:12585:6692":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:12143:6399":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:6243:8389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:7295:5739":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:5605:5635":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"9:900:7498":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:53657:4873":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:46631:5013":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:4140:4597":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:6089:5778":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:10580:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:48575:3246":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:51977:4883":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:14453:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"12:2052:4509":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:3070:3006":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:10572:3246":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:47024:4953":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:10963:3280":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:3611:2087":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:11710:5106":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:10527:4555":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:47084:4959":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:11554:5099":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:50765:4933":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:10930:3276":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:6060:5772":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:5759:4673":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:1537:7611":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:6717:5795":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13281:6915":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:46801:5203":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:8433:60039":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:13094:6878":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:10211:8797":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"18:637:6287":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:13539:6986":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:6717:4948":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11563:6496":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:8217:5354":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"9:157:5436":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:3174:136":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:6250:8392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:2619:5385":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10962:8820":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:10643:4054":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:7415:5753":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:50063:5138":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:5176:7160":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:15901:3111":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:46714:5141":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:11579:6497":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:10245:5083":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:3907:4841":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:47052:4956":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:6656:5940":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:10303:6238":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"18:704:6287":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:48362:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:12328:6213":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:10512:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:2914:4032":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:5204:8078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:2284:5342":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:52537:4892":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:2277:4758":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:571:7567":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:4098:7877":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:5298:3418":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11288:4433":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:7100:5802":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:9434:6232":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"6:4088:7870":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:0:3071":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:10416:4435":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:13369:6939":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:547:5640":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:50540:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:5078:3887":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:3199:5909":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:11168:6443":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:5214:5050":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6931:5949":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:10228:8895":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:8497:3384":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:6277:5784":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:13362:4773":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:15023:4527":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:22834:3805":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:4219:3301":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:4256:3296":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12417:6668":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:49807:5100":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:14912:8706":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:8195:2059":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:10034:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:23102:4714":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:7184:5951":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:3993:7824":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:49733:5205":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:21:676":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:12030:4501":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:15889:3101":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:11937:6571":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:3085:1618":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:1600:7647":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:10464:6031":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:56651:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2859:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:10435:5991":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:4287:7924":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:11341:3653":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"18:885:6097":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:10578:3253":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:4258:3297":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:11212:6052":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:13180:6895":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:56677:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4075:7864":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:11797:6550":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:15324:54394":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:4495:7145":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:593:7579":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"0:285:2841":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs12"],"kind":"variant"},"1:4036:3307":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:3853:4838":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:3972:7814":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:5152:5045":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:6190:5783":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"12:1162:5549":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:49679:5115":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:13129:6879":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:51500:4910":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:4036:6190":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:1518:4553":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:7741:5811":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:4157:6013":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:6671:8404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:6914:8418":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:1578:4551":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:8863:3390":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:24364:8451":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"12:2045:4251":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:6184:8356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:3364:215":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:1452:4544":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:46995:4951":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:3835:4835":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:8232:5346":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:50727:5160":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:13421:6952":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:5238:45827":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:10665:4058":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:5229:8083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:5745:5645":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:2263:4755":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"12:843:4541":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:11190:4612":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:6967:8429":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:50536:5149":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:14183:8868":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:24400:4988":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:6381:5746":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:7637:5809":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:51552:4902":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:3051:5963":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:48832:134":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:7139:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:7248:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:1748:7739":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:6080:8305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:50674:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:6099:5779":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:8226:3829":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:48582:3252":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:46692:4455":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:7782:5741":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"0:364:128":{"crate_id":0,"path":["cc","Error"],"kind":"struct"},"17:9240:5985":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:5513:4441":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:4532:8032":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:10718:8867":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:46735:5282":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:37928:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:15903:3113":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:52875:4893":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:3801:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:11922:6566":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"9:963:5484":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"18:661:6103":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:3029:5906":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:13859:7088":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:5260:8104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:6562:4253":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:53741:8644":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:53684:8639":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10610:8808":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"12:933:4546":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:7935:6203":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:8483:5315":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:3496:4516":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:11359:3320":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:12469:6675":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:4709:6195":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:5529:5275":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:7436:3349":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:24072:4719":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:47857:4540":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:46603:5010":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:774:6287":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:46721:5280":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:1634:7668":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:4208:7912":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:3960:7811":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:12543:6686":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:7782:6217":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"16:4411:7142":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:13953:7109":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:8954:6010":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:8929:47403":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:4903:7157":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:1055:5345":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:14931:4506":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:14359:4863":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:11031:47410":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:10443:3411":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:6925:8421":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:8187:3414":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"17:13507:6978":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:47976:3332":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:5541:8220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:48446:3381":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:4853:4809":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:10048:8793":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"18:694:6105":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12557:6687":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:3453:4732":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"7:85:45080":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:13774:7066":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"13:121:45722":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:13721:7049":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:6931:8422":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:13761:55858":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:15902:3112":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:4218:7913":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:5431:4474":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:8682:3440":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:4410:7983":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:12607:6703":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:5289:5732":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:47849:3332":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:49789:3284":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:12596:8887":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"17:11956:6576":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:6649:4428":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:12921:6751":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:1031:4452":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:4362:7961":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:22862:59061":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"9:692:5419":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:7936:3834":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:3432:4577":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"15:230:5571":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:11477:5097":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:10428:54396":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"17:1236:8781":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:5311:8129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:9716:61559":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:11409:2059":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:10775:8809":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:9206:47409":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:51376:8583":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:1701:4541":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:5034:5043":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:24461:39565":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:9558:6233":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"1:5505:4439":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:32626:4243":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:8610:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"12:940:4547":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:4160:7909":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:46963:4945":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:13607:3360":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:11905:55841":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:23228:4435":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:9796:61556":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:8308:3829":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:4146:4599":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:14429:4057":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:4198:7137":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:7159:4950":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:53535:4870":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:6943:8424":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:32632:5224":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"6:1727:7732":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:9883:61557":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:5151:4610":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:12758:6722":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:11409:4540":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:51601:4890":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:48278:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:11754:6534":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"12:2398:7442":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6286:5569":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:11516:5098":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:11836:3352":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:8376:3304":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:984:5344":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13293:6918":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:52023:4868":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:11305:6719":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:10695:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:50532:5148":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:3314:5653":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:10422:8798":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:8271:3829":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:48236:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:1729:4544":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:48068:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:4277:7917":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"14:0:3077":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:5488:3267":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:5582:8246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:3392:3816":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"12:979:4550":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:14061:3298":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:3920:7778":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:2391:4247":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"12:1238:5552":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:4372:4540":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:1387:4540":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:15388:5580":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:11034:4460":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:48568:3245":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:24415:8456":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:5668:5639":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"}},"external_crates":{"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":21}