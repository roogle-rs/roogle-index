{"root":"0:0:2470","crate_version":"1.0.79","includes_private":false,"index":{"0:246:308":{"id":"0:246:308","crate_id":0,"name":"args","span":{"filename":"src/lib.rs","begin":[3358,4],"end":[3360,5]},"visibility":"public","docs":"Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"OsString","id":"1:1982:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:231":{"id":"0:231","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3205,0],"end":[3209,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2588:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:232:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12133:26539":{"id":"2:12133:26539","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:696":{"id":"0:46:696","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[170,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"io::Error","id":"1:2892:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:26543":{"id":"2:12136:26543","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12040:4174":{"id":"2:12040:4174","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43308:3443","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:335":{"id":"0:335","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,9],"end":[92,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:336:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2540:1776":{"id":"2:2540:1776","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2514:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12116:25727":{"id":"2:12116:25727","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14680"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:289:612":{"id":"0:289:612","crate_id":0,"name":"eq","span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:34957":{"id":"2:12109:34957","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:356:128":{"id":"b:2:2247-0:356:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:3340"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12013":{"id":"2:12013","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12014:815","2:12015:1895","2:12016:34940","2:12017:34941","2:12019:34942","2:12022:2070","2:12023:34943","2:12024:314","2:12025:26643","2:12026:1873","2:12028:26640","2:12030:26641","2:12032:26642","2:12034:34944","2:12035:34945","2:12036:2513","2:12037:26665","2:12038:2789","2:12039:7931","2:12040:4174","2:12041:2546","2:12042:2531","2:12043:4167","2:12044:34946","2:12045:32359","2:12046:1884","2:12049:2054","2:12052:2055","2:12055:2081","2:12059:2514","2:12063:2364","2:12066:26673","2:12069:26675","2:12072:34947","2:12075:34948","2:12078:26677","2:12081:26679","2:12084:34949","2:12087:34950","2:12090:3353","2:12093:34951","2:12096:34952","2:12099:34953","2:12102:2483","2:12104:34954","2:12106:34955","2:12108:34956","2:12109:34957","2:12110:34958","2:12113:2516","2:12116:25727","2:12119:26681","2:12122:2596","2:12125:3234","2:12128:34959","2:12131:2180","2:12133:26539","2:12134:26540","2:12135:26542","2:12136:26543","2:12137:26544","2:12138:34960","2:12140:9386","2:12141:34961"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2247-0:296:1692":{"id":"b:2:2247-0:296:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:3340"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:275:3021":{"id":"0:275:3021","crate_id":0,"name":"Vs14","span":{"filename":"src/windows_registry.rs","begin":[87,4],"end":[87,8]},"visibility":"default","docs":"Visual Studio 14 (2015)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:3319-0:272:3017":{"id":"b:2:3319-0:272:3017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:199:2571":{"id":"0:199:2571","crate_id":0,"name":"try_get_ranlib","span":{"filename":"src/lib.rs","begin":[2742,4],"end":[2746,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nThis will return a result instead of panicing;\nsee [`get_ranlib()`] for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5408:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:338:670":{"id":"0:338:670","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[92,16],"end":[92,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2550:128":{"id":"2:2550:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:131:2141":{"id":"0:131:2141","crate_id":0,"name":"compile","span":{"filename":"src/lib.rs","begin":[1207,4],"end":[1211,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\n# Library name\n\nThe `output` string argument determines the file name for the compiled\nlibrary. The Rust compiler will create an assembly named \"lib\"+output+\".a\".\nMSVC will create a file named output+\".lib\".\n\nThe choice of `output` is close to arbitrary, but:\n\n- must be nonempty,\n- must not contain a path separator (`/`),\n- must be unique across all `compile` invocations made by the same build\n  script.\n\nIf your build script compiles a single source file, the base name of\nthat source file would usually be reasonable:\n\n```no_run\ncc::Build::new().file(\"blobstore.c\").compile(\"blobstore\");\n```\n\nCompiling multiple source files, some people use their crate's name, or\ntheir crate's name + \"-cc\".\n\nOtherwise, please use your imagination.\n\nFor backwards compatibility, if `output` starts with \"lib\" *and* ends\nwith \".a\", a second \"lib\" prefix and \".a\" suffix do not get added on,\nbut this usage is deprecated; please omit `lib` and `.a` in the argument\nthat you pass.\n\n# Panics\n\nPanics if `output` is not formatted correctly or if one of the underlying\ncompiler commands fails. It can also panic if it fails reading file names\nor creating directories.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:3799-0:363:1753":{"id":"a:2:8253:3799-0:363:1753","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3799","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2541-0:363:1753":{"id":"b:2:2541-0:363:1753","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2470":{"id":"0:0:2470","crate_id":0,"name":"cc","span":{"filename":"src/lib.rs","begin":[1,0],"end":[3712,1]},"visibility":"public","docs":"A library for build scripts to compile custom C code\n\nThis library is intended to be used as a `build-dependencies` entry in\n`Cargo.toml`:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n```\n\nThe purpose of this crate is to provide the utility functions necessary to\ncompile C code into a static archive which is then linked into a Rust crate.\nConfiguration is available through the `Build` struct.\n\nThis crate will automatically detect situations such as cross compilation or\nother environment variables set by Cargo and will build code appropriately.\n\nThe crate is not limited to C code, it can accept any source code that can\nbe passed to a C or C++ compiler. As such, assembly files with extensions\n`.s` (gcc/clang) and `.asm` (MSVC) can also be compiled.\n\n[`Build`]: struct.Build.html\n\n# Parallelism\n\nTo parallelize computation, enable the `parallel` feature for the crate.\n\n```toml\n[build-dependencies]\ncc = { version = \"1.0\", features = [\"parallel\"] }\n```\nTo specify the max number of concurrent compilation jobs, set the `NUM_JOBS`\nenvironment variable to the desired amount.\n\nCargo will also set this environment variable when executed with the `-jN` flag.\n\nIf `NUM_JOBS` is not set, the `RAYON_NUM_THREADS` environment variable can\nalso specify the build parallelism.\n\n# Examples\n\nUse the `Build` struct to compile `src/foo.c`:\n\n```no_run\nfn main() {\n    cc::Build::new()\n        .file(\"src/foo.c\")\n        .define(\"FOO\", Some(\"bar\"))\n        .include(\"src\")\n        .compile(\"foo\");\n}\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/cc/1.0\")]","#![allow(deprecated)]","#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:36:1687","0:296:1692","0:356:128","0:363:1753"],"is_stripped":false}}},"2:12041:2546":{"id":"2:12041:2546","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12042:2531"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43596:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:27796":{"id":"5:5443:27796","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12136:26543"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:1712":{"id":"0:112:1712","crate_id":0,"name":"ranlib","span":{"filename":"src/lib.rs","begin":[927,4],"end":[930,5]},"visibility":"public","docs":"Configures the tool used to index archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ranlib",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2505:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5202:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12108:34956":{"id":"2:12108:34956","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:681:4009":{"id":"5:681:4009","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12014:815":{"id":"2:12014:815","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11917:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12019:34942":{"id":"2:12019:34942","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12017:34941"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:34955":{"id":"2:12106:34955","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:272:3017":{"id":"a:2:2700:228-0:272:3017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12128:34959":{"id":"2:12128:34959","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14680"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[181,0],"end":[181,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","source","description","cause","provide"],"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:81:1700":{"id":"0:81:1700","crate_id":0,"name":"no_default_flags","span":{"filename":"src/lib.rs","begin":[608,4],"end":[611,5]},"visibility":"public","docs":"Disables the generation of default compiler flags. The default compiler\nflags may cause conflicts in some cross compiling scenarios.\n\nSetting the `CRATE_CC_NO_DEFAULTS` environment variable has the same\neffect as setting this to `true`. The presence of the environment\nvariable and the value of `no_default_flags` will be OR'd together.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["no_default_flags",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12032:26642":{"id":"2:12032:26642","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12131:2180":{"id":"2:12131:2180","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11676:127","`FromStr`":"2:11675:3055"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11675:3055","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11675:3055","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12046:1884":{"id":"2:12046:1884","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14680"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12017:34941":{"id":"2:12017:34941","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2552-0:363:1753":{"id":"b:2:2552-0:363:1753","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:62:943":{"id":"0:62:943","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[296,4],"end":[337,5]},"visibility":"public","docs":"Construct a new instance of a blank set of configuration.\n\nThis builder is finished with the [`compile`] function.\n\n[`compile`]: struct.Build.html#method.compile","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[290,0],"end":[3203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:943","0:63:766","0:65:1826","0:67:1832","0:71:1836","0:73:1840","0:74:1844","0:75:1851","0:77:1869","0:78:1900","0:79:1718","0:80:1719","0:81:1700","0:82:661","0:84:1701","0:86:1702","0:87:1705","0:88:1706","0:89:1720","0:90:1666","0:91:1721","0:92:1703","0:96:1704","0:100:1428","0:101:1707","0:102:1709","0:103:1991","0:104:528","0:105:1710","0:106:1708","0:108:441","0:110:1711","0:112:1712","0:114:1713","0:115:2023","0:116:1715","0:117:1716","0:118:1724","0:119:1717","0:123:2047","0:131:2141","0:135:2200","0:137:2209","0:138:2101","0:139:1879","0:194:2560","0:195:2561","0:198:2570","0:199:2571"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12016:34940":{"id":"2:12016:34940","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:34953":{"id":"2:12099:34953","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11715:14680","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::match_indices":"2:12096:34952"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43490:7913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1836":{"id":"0:71:1836","crate_id":0,"name":"object","span":{"filename":"src/lib.rs","begin":[406,4],"end":[409,5]},"visibility":"public","docs":"Add an arbitrary object file to link in","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["obj",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2505:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5202:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:1701":{"id":"0:84:1701","crate_id":0,"name":"files","span":{"filename":"src/lib.rs","begin":[620,4],"end":[629,5]},"visibility":"public","docs":"Add files which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7205:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:7205:152","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2505:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5202:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:2560":{"id":"0:194:2560","crate_id":0,"name":"get_archiver","span":{"filename":"src/lib.rs","begin":[2682,4],"end":[2687,5]},"visibility":"public","docs":"Get the archiver (ar) that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5441:4370"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5408:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:363:1753":{"id":"b:2:2537-0:363:1753","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:1776"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:277:3023":{"id":"0:277:3023","crate_id":0,"name":"Vs15","span":{"filename":"src/windows_registry.rs","begin":[89,4],"end":[89,8]},"visibility":"default","docs":"Visual Studio 15 (2017)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:89:1720":{"id":"0:89:1720","crate_id":0,"name":"warnings_into_errors","span":{"filename":"src/lib.rs","begin":[689,4],"end":[692,5]},"visibility":"public","docs":"Set warnings into errors flag.\n\nDisabled by default.\n\nWarning: turning warnings into errors only make sense\nif you are a developer of the crate using cc-rs.\nSome warnings only appear on some architecture or\nspecific version of the compiler. Any user of this crate,\nor any other crate depending on it, could fail during\ncompile time.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings_into_errors(true)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings_into_errors",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[175,0],"end":[179,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9150:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:48:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2547-0:363:1753":{"id":"b:2:2547-0:363:1753","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5686-0:356:128":{"id":"b:5:5686-0:356:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9150:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5684:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5688:1460"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8252:3800-0:363:1753":{"id":"a:2:8252:3800-0:363:1753","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:106:1708":{"id":"0:106:1708","crate_id":0,"name":"out_dir","span":{"filename":"src/lib.rs","begin":[897,4],"end":[900,5]},"visibility":"public","docs":"Configures the output directory where all object files and static\nlibraries will be located.\n\nThis option is automatically scraped from the `OUT_DIR` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["out_dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2505:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5202:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:34961":{"id":"2:12141:34961","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:34961"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43639:7805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:296:1692":{"id":"a:2:2700:228-0:296:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:677-0:272:3017":{"id":"b:5:677-0:272:3017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:4008","5:680:1742","5:681:4009"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2555:128":{"id":"2:2555:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31982:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:273:3019":{"id":"0:273:3019","crate_id":0,"name":"Vs12","span":{"filename":"src/windows_registry.rs","begin":[85,4],"end":[85,8]},"visibility":"default","docs":"Visual Studio 12 (2013)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:96:1704":{"id":"0:96:1704","crate_id":0,"name":"cpp_set_stdlib","span":{"filename":"src/lib.rs","begin":[807,4],"end":[815,5]},"visibility":"public","docs":"Force the C++ compiler to use the specified standard library.\n\nSetting this option will automatically set `cpp_link_stdlib` to the same\nvalue.\n\nThe default value of this option is always `None`.\n\nThis option has no effect when compiling for a Visual Studio based\ntarget.\n\nThis option sets the `-stdlib` flag, which is only supported by some\ncompilers (clang, icc) but not by others (gcc). The library will not\ndetect which compiler is used, as such it is the responsibility of the\ncaller to ensure that this option is only used in conjunction with a\ncompiler which supports the `-stdlib` flag.\n\nA value of `None` indicates that no specific C++ standard library should\nbe used, otherwise `-stdlib` is added to the compile invocation.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .cpp_set_stdlib(\"c++\")\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_set_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:356:128":{"id":"0:356:128","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[153,0],"end":[158,1]},"visibility":"public","docs":"Represents an internal error that occurred, with an explanation.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:8252:3800-0:356:128","a:2:8253:3799-0:356:128","a:2:2683:220-0:356:128","a:2:2740:3571-0:356:128","a:2:2700:228-0:356:128","b:2:2609-0:356:128","b:2:2247-0:356:128","b:2:3319-0:356:128","b:2:2552-0:356:128","b:2:2250-0:356:128","b:2:2541-0:356:128","b:2:2547-0:356:128","b:2:2537-0:356:128","b:5:5686-0:356:128","b:5:677-0:356:128","0:45","0:49","0:361","0:359","0:47"]}}},"5:5426:2286":{"id":"5:5426:2286","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12055:2081":{"id":"2:12055:2081","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41355:179","prim@char":"1:11917:418","self::pattern":"2:11715:14680"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12015:1895":{"id":"2:12015:1895","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:248:2593":{"id":"0:248:2593","crate_id":0,"name":"cc_env","span":{"filename":"src/lib.rs","begin":[3374,4],"end":[3388,5]},"visibility":"public","docs":"Returns the compiler command in format of CC environment variable.\nOr empty string if CC env was not present\n\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:1982:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:295:422":{"id":"0:295:422","crate_id":0,"name":"clone","span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12078:26677":{"id":"2:12078:26677","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14680","str::rsplitn":"2:12081:26679"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43426:7909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:680:1742":{"id":"5:680:1742","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,9],"end":[152,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:360:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12066:26673":{"id":"2:12066:26673","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14680"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11538:7543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:1718":{"id":"0:79:1718","crate_id":0,"name":"shared_flag","span":{"filename":"src/lib.rs","begin":[578,4],"end":[581,5]},"visibility":"public","docs":"Set the `-shared` flag.\n\nWhen enabled, the compiler will produce a shared object which can\nthen be linked with other objects to form an executable.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["shared_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:272:3017":{"id":"b:2:2547-0:272:3017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:272:3017":{"id":"0:272:3017","crate_id":0,"name":"VsVers","span":{"filename":"src/windows_registry.rs","begin":[83,0],"end":[101,1]},"visibility":"public","docs":"A version of Visual Studio","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:273:3019","0:275:3021","0:277:3023","0:279:3025","0:281:3027"],"impls":["a:2:8252:3800-0:272:3017","a:2:8253:3799-0:272:3017","a:2:2683:220-0:272:3017","a:2:2740:3571-0:272:3017","a:2:2700:228-0:272:3017","b:2:2247-0:272:3017","b:2:3319-0:272:3017","b:2:2552-0:272:3017","b:2:2250-0:272:3017","b:2:2541-0:272:3017","b:2:2547-0:272:3017","b:2:2537-0:272:3017","b:5:677-0:272:3017","0:288","0:291","0:290","0:287","0:293","0:294","0:285"]}}},"0:373:422":{"id":"0:373:422","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[190,9],"end":[190,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:34950":{"id":"2:12087:34950","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:1705":{"id":"0:87:1705","crate_id":0,"name":"cuda","span":{"filename":"src/lib.rs","begin":[648,4],"end":[655,5]},"visibility":"public","docs":"Set CUDA C++ support.\n\nEnabling CUDA will pass the detected C/C++ toolchain as an argument to\nthe CUDA compiler, NVCC. NVCC itself accepts some limited GNU-like args;\nany other arguments for the C/C++ toolchain will be redirected using\n\"-Xcompiler\" flags.\n\nIf enabled, this also implicitly enables C++ support.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cuda",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:34960":{"id":"2:12138:34960","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:34960"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43621:7806","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336:422":{"id":"0:336:422","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[92,9],"end":[92,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:1844":{"id":"0:74:1844","crate_id":0,"name":"ar_flag","span":{"filename":"src/lib.rs","begin":[437,4],"end":[440,5]},"visibility":"public","docs":"Add a flag to the invocation of the ar\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .file(\"src/bar.c\")\n    .ar_flag(\"/NODEFAULTLIB:libc.dll\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[190,9],"end":[190,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:373:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:108:441":{"id":"0:108:441","crate_id":0,"name":"compiler","span":{"filename":"src/lib.rs","begin":[907,4],"end":[910,5]},"visibility":"public","docs":"Configures the compiler to be used to produce output.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["compiler",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2505:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5202:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2552-0:356:128":{"id":"b:2:2552-0:356:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2250-0:296:1692":{"id":"b:2:2250-0:296:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:25639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12072:34947":{"id":"2:12072:34947","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11715:14680","str::split":"2:12063:2364","prim@char":"1:11917:418","`DoubleEndedIterator`":"2:7243:121","str::rsplit_terminator":"2:12075:34948"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43372:7906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:250:2792":{"id":"0:250:2792","crate_id":0,"name":"is_like_gnu","span":{"filename":"src/lib.rs","begin":[3405,4],"end":[3407,5]},"visibility":"public","docs":"Whether the tool is GNU Compiler Collection-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2683:220-0:272:3017":{"id":"a:2:2683:220-0:272:3017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:91:1721":{"id":"0:91:1721","crate_id":0,"name":"extra_warnings","span":{"filename":"src/lib.rs","begin":[733,4],"end":[736,5]},"visibility":"public","docs":"Set extra warnings flags.\n\nAdds some flags:\n- nothing for MSVC.\n- \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\n// Disables -Wextra, -Wall remains enabled:\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .extra_warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12049:2054":{"id":"2:12049:2054","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14680"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12042:2531":{"id":"2:12042:2531","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12041:2546"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43605:7919","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2694:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102:1709":{"id":"0:102:1709","crate_id":0,"name":"opt_level","span":{"filename":"src/lib.rs","begin":[857,4],"end":[860,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"primitive":"u32"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8252:3800-0:272:3017":{"id":"a:2:8252:3800-0:272:3017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2252:25639":{"id":"2:2252:25639","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:1719":{"id":"0:80:1719","crate_id":0,"name":"static_flag","span":{"filename":"src/lib.rs","begin":[597,4],"end":[600,5]},"visibility":"public","docs":"Set the `-static` flag.\n\nWhen enabled on systems that support dynamic linking, this prevents\nlinking with the shared libraries.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .static_flag(true)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:1706":{"id":"0:88:1706","crate_id":0,"name":"cudart","span":{"filename":"src/lib.rs","begin":[663,4],"end":[668,5]},"visibility":"public","docs":"Link CUDA run-time.\n\nThis option mimics the `--cudart` NVCC command-line option. Just like\nthe original it accepts `{none|shared|static}`, with default being\n`static`. The method has to be invoked after `.cuda(true)`, or not\nat all, if the default is right for the project.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cudart",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3321:1496":{"id":"2:3321:1496","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39303:7668","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5442:3464":{"id":"5:5442:3464","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:1879":{"id":"0:139:1879","crate_id":0,"name":"try_get_compiler","span":{"filename":"src/lib.rs","begin":[1500,4],"end":[1571,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis will return a result instead of panicing; see get_compiler() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12134:26540":{"id":"2:12134:26540","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39511:26552","Self::is_ascii":"2:12133:26539"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39511:26552","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110:1711":{"id":"0:110:1711","crate_id":0,"name":"archiver","span":{"filename":"src/lib.rs","begin":[917,4],"end":[920,5]},"visibility":"public","docs":"Configures the tool used to assemble archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["archiver",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2505:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5202:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5429:35612":{"id":"5:5429:35612","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:1710":{"id":"0:105:1710","crate_id":0,"name":"force_frame_pointer","span":{"filename":"src/lib.rs","begin":[887,4],"end":[890,5]},"visibility":"public","docs":"Configures whether the compiler will emit instructions to store\nframe pointers during codegen.\n\nThis option is automatically enabled when debug information is emitted.\nOtherwise the target platform compiler's default will be used.\nYou can use this option to force a specific setting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["force",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:1869":{"id":"0:77:1869","crate_id":0,"name":"is_flag_supported","span":{"filename":"src/lib.rs","begin":[491,4],"end":[547,5]},"visibility":"public","docs":"Run the compiler to test if it accepts the given flag.\n\nFor a convenience method for setting flags conditionally,\nsee `flag_if_supported()`.\n\nIt may return error if it's unable to run the compiler with a test file\n(e.g. the compiler is missing or a write to the `out_dir` failed).\n\nNote: Once computed, the result of this call is stored in the\n`known_flag_support` field. If `is_flag_supported(flag)`\nis called again, the result will be read from the hash table.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}},{"type":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:3571-0:356:128":{"id":"a:2:2740:3571-0:356:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:3571","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:677-0:296:1692":{"id":"b:5:677-0:296:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:4008","5:680:1742","5:681:4009"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2552-0:272:3017":{"id":"b:2:2552-0:272:3017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:104:528":{"id":"0:104:528","crate_id":0,"name":"debug","span":{"filename":"src/lib.rs","begin":[876,4],"end":[879,5]},"visibility":"public","docs":"Configures whether the compiler will emit debug information when\ngenerating object files.\n\nThis option is automatically scraped from the `DEBUG` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["debug",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287":{"id":"0:287","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2693:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12030:26641":{"id":"2:12030:26641","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:296:1692":{"id":"b:2:2547-0:296:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:48:670":{"id":"0:48:670","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[176,4],"end":[178,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12125:3234":{"id":"2:12125:3234","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14680"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252:2790":{"id":"0:252:2790","crate_id":0,"name":"is_like_msvc","span":{"filename":"src/lib.rs","begin":[3415,4],"end":[3420,5]},"visibility":"public","docs":"Whether the tool is MSVC-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:2047":{"id":"0:123:2047","crate_id":0,"name":"try_compile","span":{"filename":"src/lib.rs","begin":[1015,4],"end":[1168,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThis will return a result instead of panicing; see compile() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:2596":{"id":"2:12122:2596","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14680"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:363:1753":{"id":"0:363:1753","crate_id":0,"name":"Tool","span":{"filename":"src/lib.rs","begin":[191,0],"end":[200,1]},"visibility":"public","docs":"Configuration used to represent an invocation of a C compiler.\n\nThis can be used to figure out what compiler is in use, what the arguments\nto it are, and what the environment variables look like for the compiler.\nThis can be used to further configure other build systems (e.g. forward\nalong CC and/or CFLAGS) or the `to_command` method can be used to run the\ncompiler itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:233","a:2:8252:3800-0:363:1753","a:2:8253:3799-0:363:1753","a:2:2683:220-0:363:1753","a:2:2740:3571-0:363:1753","a:2:2700:228-0:363:1753","b:2:2247-0:363:1753","b:2:3319-0:363:1753","b:2:2552-0:363:1753","b:2:2250-0:363:1753","b:2:2541-0:363:1753","b:2:2547-0:363:1753","b:2:2537-0:363:1753","b:5:677-0:363:1753","0:374","0:372"]}}},"2:12024:314":{"id":"2:12024:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12025:26643","`u8`":"1:11934:1504"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5432:2877":{"id":"5:5432:2877","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12084:34949":{"id":"2:12084:34949","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:296:1692":{"id":"b:2:2537-0:296:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:1776"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:63:766":{"id":"0:63:766","crate_id":0,"name":"include","span":{"filename":"src/lib.rs","begin":[354,4],"end":[357,5]},"visibility":"public","docs":"Add a directory to the `-I` or include path for headers\n\n# Example\n\n```no_run\nuse std::path::Path;\n\nlet library_path = Path::new(\"/path/to/library\");\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .include(library_path)\n    .include(\"src\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2505:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5202:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:243:1882":{"id":"0:243:1882","crate_id":0,"name":"to_command","span":{"filename":"src/lib.rs","begin":[3324,4],"end":[3346,5]},"visibility":"public","docs":"Converts this compiler into a `Command` that's ready to be run.\n\nThis is useful for when the compiler needs to be executed and the\ncommand returned will already have the initial arguments and environment\nvariables configured.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5408:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:116:1715":{"id":"0:116:1715","crate_id":0,"name":"pic","span":{"filename":"src/lib.rs","begin":[962,4],"end":[965,5]},"visibility":"public","docs":"Configures whether the compiler will emit position independent code.\n\nThis option defaults to `false` for `windows-gnu` and bare metal targets and\nto `true` for all other targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pic",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5440:35613":{"id":"5:5440:35613","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2683:220-0:296:1692":{"id":"a:2:2683:220-0:296:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:245:1044":{"id":"0:245:1044","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[3352,4],"end":[3354,5]},"visibility":"public","docs":"Returns the path for this compiler.\n\nNote that this may not be a path to a file on the filesystem, e.g. \"cc\",\nbut rather something which will be resolved when a process is spawned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5202:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5425:35611":{"id":"5:5425:35611","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:3077","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:4400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:3077","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:4400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12075:34948":{"id":"2:12075:34948","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11715:14680","str::split":"2:12063:2364","prim@char":"1:11917:418","str::split_terminator":"2:12072:34947"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43390:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2249:3340":{"id":"2:2249:3340","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:3571-0:363:1753":{"id":"a:2:2740:3571-0:363:1753","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:3571","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:67:1832":{"id":"0:67:1832","crate_id":0,"name":"define","span":{"filename":"src/lib.rs","begin":[399,4],"end":[403,5]},"visibility":"public","docs":"Specify a `-D` variable with an optional value.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .define(\"FOO\", \"BAR\")\n    .define(\"BAZ\", None)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["val",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:296:1692":{"id":"b:2:3319-0:296:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3319-0:363:1753":{"id":"b:2:3319-0:363:1753","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12045:32359":{"id":"2:12045:32359","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43614:7920","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:679:4008":{"id":"5:679:4008","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12025:26643":{"id":"2:12025:26643","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11934:1504"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12037:26665":{"id":"2:12037:26665","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12036:2513"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:3799-0:272:3017":{"id":"a:2:8253:3799-0:272:3017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3799","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5441:35614":{"id":"5:5441:35614","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:3077","`String`":"5:7280:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:3077","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:4400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:356:128":{"id":"b:2:2541-0:356:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12140:9386":{"id":"2:12140:9386","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:9386"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43630:7797","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12119:26681":{"id":"2:12119:26681","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14680"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12036:2513":{"id":"2:12036:2513","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12037:26665"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:356:128":{"id":"b:2:2547-0:356:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:118:1724":{"id":"0:118:1724","crate_id":0,"name":"emit_rerun_if_env_changed","span":{"filename":"src/lib.rs","begin":[988,4],"end":[991,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo to detect environment\nchanges that should trigger a rebuild.\n\nThis has no effect if the `cargo_metadata` option is `false`.\n\nThis option defaults to `true`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["emit_rerun_if_env_changed",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41:2474":{"id":"0:41:2474","crate_id":0,"name":"find_tool","span":{"filename":"src/windows_registry.rs","begin":[43,0],"end":[45,1]},"visibility":"public","docs":"Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["_tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:281:3027":{"id":"0:281:3027","crate_id":0,"name":"Vs17","span":{"filename":"src/windows_registry.rs","begin":[93,4],"end":[93,8]},"visibility":"default","docs":"Visual Studio 17 (2022)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:233":{"id":"0:233","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3211,0],"end":[3421,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:243:1882","0:245:1044","0:246:308","0:247:609","0:248:2593","0:249:2816","0:250:2792","0:251:2793","0:252:2790"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:103:1991":{"id":"0:103:1991","crate_id":0,"name":"opt_level_str","span":{"filename":"src/lib.rs","begin":[866,4],"end":[869,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:2209":{"id":"0:137:2209","crate_id":0,"name":"expand","span":{"filename":"src/lib.rs","begin":[1465,4],"end":[1470,5]},"visibility":"public","docs":"Run the compiler, returning the macro-expanded version of the input files.\n\nThis is only relevant for C and C++ files.\n\n# Panics\nPanics if more than one file is present in the config, or if compiler\npath has an invalid file name.\n\n# Example\n```no_run\nlet out = cc::Build::new().file(\"src/foo.c\").expand();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6717:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:677-0:363:1753":{"id":"b:5:677-0:363:1753","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:4008","5:680:1742","5:681:4009"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12090:3353":{"id":"2:12090:3353","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11715:14680","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::matches":"2:12090:3353"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43526:7915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115:2023":{"id":"0:115:2023","crate_id":0,"name":"link_lib_modifier","span":{"filename":"src/lib.rs","begin":[953,4],"end":[956,5]},"visibility":"public","docs":"Adds a native library modifier that will be added to the\n`rustc-link-lib=static:MODIFIERS=LIBRARY_NAME` metadata line\nemitted for cargo if `cargo_metadata` is enabled.\nSee https://doc.rust-lang.org/rustc/command-line-arguments.html#-l-link-the-generated-crate-to-a-native-library\nfor the list of modifiers accepted by rustc.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["link_lib_modifier",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:3571-0:272:3017":{"id":"a:2:2740:3571-0:272:3017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:3571","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:75:1851":{"id":"0:75:1851","crate_id":0,"name":"asm_flag","span":{"filename":"src/lib.rs","begin":[456,4],"end":[459,5]},"visibility":"public","docs":"Add a flag that will only be used with assembly files.\n\nThe flag will be applied to input files with either a `.s` or\n`.asm` extension (case insensitive).\n\n# Example\n\n```no_run\ncc::Build::new()\n    .asm_flag(\"-Wa,-defsym,abc=1\")\n    .file(\"src/foo.S\")  // The asm flag will be applied here\n    .file(\"src/bar.c\")  // The asm flag will not be applied here\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101:1707":{"id":"0:101:1707","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[848,4],"end":[851,5]},"visibility":"public","docs":"Configures the host assumed by this configuration.\n\nThis option is automatically scraped from the `HOST` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .host(\"arm-linux-gnueabihf\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["host",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:356:128":{"id":"b:2:2250-0:356:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:25639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:36:1687":{"id":"0:36:1687","crate_id":0,"name":"windows_registry","span":{"filename":"src/windows_registry.rs","begin":[11,0],"end":[902,1]},"visibility":"public","docs":"A helper module to probe the Windows Registry when looking for\nwindows-specific tools.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:39:2081","0:41:2474","0:272:3017","0:42:3036"],"is_stripped":false}}},"2:12137:26544":{"id":"2:12137:26544","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114:1713":{"id":"0:114:1713","crate_id":0,"name":"cargo_metadata","span":{"filename":"src/lib.rs","begin":[943,4],"end":[946,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.\n\nThe emitted metadata is:\n\n - `rustc-link-lib=static=`*compiled lib*\n - `rustc-link-search=native=`*target folder*\n - When target is MSVC, the ATL-MFC libs are added via `rustc-link-search=native=`\n - When C++ is enabled, the C++ stdlib is added via `rustc-link-lib`\n - If `emit_rerun_if_env_changed` is not `false`, `rerun-if-env-changed=`*env*\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_metadata",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8252:3800-0:296:1692":{"id":"a:2:8252:3800-0:296:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2541-0:272:3017":{"id":"b:2:2541-0:272:3017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:73:1840":{"id":"0:73:1840","crate_id":0,"name":"flag","span":{"filename":"src/lib.rs","begin":[421,4],"end":[424,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"-ffunction-sections\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:3571-0:296:1692":{"id":"a:2:2740:3571-0:296:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:3571","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12052:2055":{"id":"2:12052:2055","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14680"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,16],"end":[152,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:362:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12022:2070":{"id":"2:12022:2070","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11282:2772"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:363:1753":{"id":"b:2:2250-0:363:1753","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:25639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:78:1900":{"id":"0:78:1900","crate_id":0,"name":"flag_if_supported","span":{"filename":"src/lib.rs","begin":[560,4],"end":[563,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler if it supports it\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag_if_supported(\"-Wlogical-op\") // only supported by GCC\n    .flag_if_supported(\"-Wunreachable-code\") // only supported by clang\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:2483":{"id":"2:12102:2483","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:232:60":{"id":"0:232:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[3206,4],"end":[3208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:1703":{"id":"0:92:1703","crate_id":0,"name":"cpp_link_stdlib","span":{"filename":"src/lib.rs","begin":[766,4],"end":[772,5]},"visibility":"public","docs":"Set the standard library to link against when compiling with C++\nsupport.\n\nSee [`get_cpp_link_stdlib`](cc::Build::get_cpp_link_stdlib) documentation\nfor the default value.\nIf the `CXXSTDLIB` environment variable is set, its value will\noverride the default value, but not the value explicitly set by calling\nthis function.\n\nA value of `None` indicates that no automatic linking should happen,\notherwise cargo will link against the specified library.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n- `c++_shared` or `c++_static` for Android\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .cpp_link_stdlib(\"stdc++\")\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_link_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:279:3025":{"id":"0:279:3025","crate_id":0,"name":"Vs16","span":{"filename":"src/windows_registry.rs","begin":[91,4],"end":[91,8]},"visibility":"default","docs":"Visual Studio 16 (2019)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2552-0:296:1692":{"id":"b:2:2552-0:296:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2609-0:356:128":{"id":"b:2:2609-0:356:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3373:14695","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2611:9054"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"0:198:2570":{"id":"0:198:2570","crate_id":0,"name":"get_ranlib","span":{"filename":"src/lib.rs","begin":[2731,4],"end":[2736,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5441:4370"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5408:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:363:1753":{"id":"a:2:2700:228-0:363:1753","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2250-0:272:3017":{"id":"b:2:2250-0:272:3017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:25639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:249:2816":{"id":"0:249:2816","crate_id":0,"name":"cflags_env","span":{"filename":"src/lib.rs","begin":[3393,4],"end":[3402,5]},"visibility":"public","docs":"Returns the compiler flags in format of CFLAGS environment variable.\nImportant here - this will not be CFLAGS from env, its internal gcc's flags to use as CFLAGS\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:1982:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:356:128":{"id":"b:2:3319-0:356:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5444:27797":{"id":"5:5444:27797","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12137:26544"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:2101":{"id":"0:138:2101","crate_id":0,"name":"get_compiler","span":{"filename":"src/lib.rs","begin":[1490,4],"end":[1495,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis function will return a `Tool` which represents the culmination\nof this configuration at a snapshot in time. The returned compiler can\nbe inspected (e.g. the path, arguments, environment) to forward along to\nother tools, or the `to_command` method can be used to invoke the\ncompiler itself.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5688:1460":{"id":"5:5688:1460","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375:670":{"id":"0:375:670","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[190,16],"end":[190,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12038:2789":{"id":"2:12038:2789","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43292:7900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2551:1483":{"id":"2:2551:1483","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:26542":{"id":"2:12135:26542","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:296:1692":{"id":"0:296:1692","crate_id":0,"name":"Build","span":{"filename":"src/lib.rs","begin":[93,0],"end":[132,1]},"visibility":"public","docs":"A builder for compilation of a native library.\n\nA `Build` is the main type of the `cc` crate and is used to control all the\nvarious configuration options and such of a compile. You'll find more\ndocumentation on each method itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:61","a:2:8252:3800-0:296:1692","a:2:8253:3799-0:296:1692","a:2:2683:220-0:296:1692","a:2:2740:3571-0:296:1692","a:2:2700:228-0:296:1692","b:2:2247-0:296:1692","b:2:3319-0:296:1692","b:2:2552-0:296:1692","b:2:2250-0:296:1692","b:2:2541-0:296:1692","b:2:2547-0:296:1692","b:2:2537-0:296:1692","b:5:677-0:296:1692","0:337","0:335","0:231"]}}},"2:12110:34958":{"id":"2:12110:34958","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14680"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11740:14677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2683:220-0:356:128":{"id":"a:2:2683:220-0:356:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12081:26679":{"id":"2:12081:26679","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11917:418","str::splitn":"2:12078:26677","self::pattern":"2:11715:14680"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43444:7910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12059:2514":{"id":"2:12059:2514","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41355:179","prim@char":"1:11917:418","self::pattern":"2:11715:14680"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2683:220-0:363:1753":{"id":"a:2:2683:220-0:363:1753","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12028:26640":{"id":"2:12028:26640","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41355:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:34951":{"id":"2:12093:34951","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11715:14680","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::matches":"2:12090:3353"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43544:7916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:356:128":{"id":"b:2:2537-0:356:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:1776"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:285":{"id":"0:285","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:286:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:362:670":{"id":"0:362:670","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[152,16],"end":[152,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:363:1753":{"id":"b:2:2247-0:363:1753","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:3340"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:39:2081":{"id":"0:39:2081","crate_id":0,"name":"find","span":{"filename":"src/windows_registry.rs","begin":[35,0],"end":[37,1]},"visibility":"public","docs":"Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.\n\nThe `target` argument is the target that the tool should work for (e.g.\ncompile or link for) and the `tool` argument is the tool to find (e.g.\n`cl.exe` or `link.exe`).\n\nThis function will return `None` if the tool could not be found, or it will\nreturn `Some(cmd)` which represents a command that's ready to execute the\ntool with the appropriate environment variables set.\n\nNote that this function always returns `None` for non-MSVC targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5408:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1826":{"id":"0:65:1826","crate_id":0,"name":"includes","span":{"filename":"src/lib.rs","begin":[377,4],"end":[386,5]},"visibility":"public","docs":"Add multiple directories to the `-I` include path.\n\n# Example\n\n```no_run\n# use std::path::Path;\n# let condition = true;\n#\nlet mut extra_dir = None;\nif condition {\n    extra_dir = Some(Path::new(\"/path/to\"));\n}\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .includes(extra_dir)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dirs",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7205:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:7205:152","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2505:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5202:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:1666":{"id":"0:90:1666","crate_id":0,"name":"warnings","span":{"filename":"src/lib.rs","begin":[710,4],"end":[714,5]},"visibility":"public","docs":"Set warnings flags.\n\nAdds some flags:\n- \"-Wall\" for MSVC.\n- \"-Wall\", \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:1702":{"id":"0:86:1702","crate_id":0,"name":"cpp","span":{"filename":"src/lib.rs","begin":[635,4],"end":[638,5]},"visibility":"public","docs":"Set C++ support.\n\nThe other `cpp_*` options will only become active if this is set to\n`true`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:3799-0:296:1692":{"id":"a:2:8253:3799-0:296:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3799","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2541-0:296:1692":{"id":"b:2:2541-0:296:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8252:3800-0:356:128":{"id":"a:2:8252:3800-0:356:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:82:661":{"id":"0:82:661","crate_id":0,"name":"file","span":{"filename":"src/lib.rs","begin":[614,4],"end":[617,5]},"visibility":"public","docs":"Add a file which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2505:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5202:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:100:1428":{"id":"0:100:1428","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[830,4],"end":[833,5]},"visibility":"public","docs":"Configures the target this configuration will be compiling for.\n\nThis option is automatically scraped from the `TARGET` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .target(\"aarch64-linux-android\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12039:7931":{"id":"2:12039:7931","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43298:7901","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12026:1873":{"id":"2:12026:1873","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41355:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12063:2364":{"id":"2:12063:2364","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11715:14680","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::split_whitespace":"2:12041:2546","str::rsplit":"2:12069:26675"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43322:3444","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:1717":{"id":"0:119:1717","crate_id":0,"name":"static_crt","span":{"filename":"src/lib.rs","begin":[996,4],"end":[999,5]},"visibility":"public","docs":"Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.\n\nThis option defaults to `false`, and affect only msvc targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_crt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12069:26675":{"id":"2:12069:26675","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11715:14680","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::split":"2:12063:2364"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43340:7544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135:2200":{"id":"0:135:2200","crate_id":0,"name":"try_expand","span":{"filename":"src/lib.rs","begin":[1426,4],"end":[1451,5]},"visibility":"public","docs":"This will return a result instead of panicing; see expand() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6717:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:293":{"id":"0:293","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,31],"end":[82,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5424":{"id":"5:5424","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5425:35611","5:5426:2286","5:5429:35612","5:5432:2877","5:5440:35613","5:5441:35614","5:5442:3464","5:5443:27796","5:5444:27797"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12113:2516":{"id":"2:12113:2516","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14680"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:677-0:356:128":{"id":"b:5:677-0:356:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:4008","5:680:1742","5:681:4009"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:251:2793":{"id":"0:251:2793","crate_id":0,"name":"is_like_clang","span":{"filename":"src/lib.rs","begin":[3410,4],"end":[3412,5]},"visibility":"public","docs":"Whether the tool is Clang-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12096:34952":{"id":"2:12096:34952","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11715:14680","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::rmatch_indices":"2:12099:34953"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43472:7912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:360:422":{"id":"0:360:422","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[152,9],"end":[152,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2543:696":{"id":"2:2543:696","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:356:128":{"id":"a:2:2700:228-0:356:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[169,0],"end":[173,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"1:2892:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:46:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:195:2561":{"id":"0:195:2561","crate_id":0,"name":"try_get_archiver","span":{"filename":"src/lib.rs","begin":[2693,4],"end":[2695,5]},"visibility":"public","docs":"Get the archiver that's in use for this configuration.\n\nThis will return a result instead of panicing;\nsee [`get_archiver()`] for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5408:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2611:9054":{"id":"2:2611:9054","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3385:8409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:247:609":{"id":"0:247:609","crate_id":0,"name":"env","span":{"filename":"src/lib.rs","begin":[3366,4],"end":[3368,5]},"visibility":"public","docs":"Returns the set of environment variables needed for this compiler to\noperate.\n\nThis is typically only used for MSVC compilers currently.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"tuple":[{"resolved_path":{"name":"OsString","id":"1:1982:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"OsString","id":"1:1982:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12034:34944":{"id":"2:12034:34944","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11923:1402","str::slice_mut_unchecked":"2:12035:34945","crate::ops::Index":"2:2980:4395"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12043:4167":{"id":"2:12043:4167","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43576:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:3036":{"id":"0:42:3036","crate_id":0,"name":"find_vs_version","span":{"filename":"src/windows_registry.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Find the most recent installed version of Visual Studio\n\nThis is used by the cmake crate to figure out the correct\ngenerator.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1716":{"id":"0:117:1716","crate_id":0,"name":"use_plt","span":{"filename":"src/lib.rs","begin":[977,4],"end":[980,5]},"visibility":"public","docs":"Configures whether the Procedure Linkage Table is used for indirect\ncalls into shared libraries.\n\nThe PLT is used to provide features like lazy binding, but introduces\na small performance loss due to extra pointer indirection. Setting\n`use_plt` to `false` can provide a small performance increase.\n\nNote that skipping the PLT requires a recent version of GCC/Clang.\n\nThis only applies to ELF targets. It has no effect on other platforms.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["use_plt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374":{"id":"0:374","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[190,16],"end":[190,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:363:1753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:375:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2537-0:272:3017":{"id":"b:2:2537-0:272:3017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:1776"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12023:34943":{"id":"2:12023:34943","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12035:34945":{"id":"2:12035:34945","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11923:1402","crate::ops::IndexMut":"2:2984:4396","str::slice_unchecked":"2:12034:34944"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:34954":{"id":"2:12104:34954","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,16],"end":[92,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:296:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:338:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12044:34946":{"id":"2:12044:34946","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43586:7917","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:272:3017":{"id":"b:2:2247-0:272:3017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:3570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:272:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:3340"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2556:1482":{"id":"2:2556:1482","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286:670":{"id":"0:286:670","crate_id":0,"name":"fmt","span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:3799-0:356:128":{"id":"a:2:8253:3799-0:356:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3799","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:356:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"1:1565:3964":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:12553:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:41327:7871":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:9512:8252":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:21342:9519":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:2348:4192":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:1519:6590":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:5050:7082":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:22402:3562":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:11941:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:1285:4230":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:4362:4732":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:7168:3380":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:1783:4258":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:40407:7838":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:22534:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:10670:5100":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:13433:5704":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:10029:28665":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:4455:6825":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:2957:35893":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:2811:14798":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:40658:3467":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:42872:7892":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:13777:5812":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:6704:7369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:7498:6205":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:5838:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:47640:8068":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:2984:4396":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:568:6561":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:13233:5653":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:39317:6198":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:11239:8137":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:4186:4014":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11770:5285":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:7462:7475":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:11083:4210":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:959:4228":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"11:1838:6415":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"9:481:20495":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:5742:3530":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13257:5658":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:9988:4216":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:2572:5875":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:45312:7970":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:4769:6938":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:4747:6927":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:3270:3458":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:2687:7513":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:41339:7872":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:3948:9416":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:2240:7509":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:1489:4222":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:2963:35894":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:6135:7279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:2767:6154":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:11422:8459":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:819:4716":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:4394:6795":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:9529:4764":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:42625:7885":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:4163:3426":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:2458:7510":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:8508:3486":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:9839:8268":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:2783:9509":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:40383:4878":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"0:272:3017":{"crate_id":0,"path":["cc","windows_registry","VsVers"],"kind":"enum"},"2:21453:34071":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:11891:5309":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13015:5598":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:13240:5655":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:10527:21673":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:682:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:13443:5707":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:11299:5177":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:4459:9444":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:10686:4203":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"11:1103:8392":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:8835:8107":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:7437:6200":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:875:4718":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:1915:7532":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:7076:3964":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:44312:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:7244:36500":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:11360:8457":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:11879:5307":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:11529:8147":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:3235:6418":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:8678:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11902:5310":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:554:6553":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:7065:6144":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"11:2060:4231":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:40042:14737":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:3191:3460":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:3272:3459":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:1594:6637":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4793:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:5709:3528":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:3703:8458":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:21955:7582":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:43630:7797":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11136:5140":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:32109:3953":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:10721:5105":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:3327:4220":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:1636:7526":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:4327:5924":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:2357:5866":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:8514:3487":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"18:521:25417":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:40297:7828":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:47613:8066":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:2138:7501":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"14:40:5174":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:12019:5039":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:4347:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:10448:3462":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:9057:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:4193:3426":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:9534:8254":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:4474:6833":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:12333:34457":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:4010:9421":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:45508:7978":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:1701:6707":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:45456:7976":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:4871:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:11532:5223":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:40367:7835":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:11928:644":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:9322:36508":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:3998:8410":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4625:6887":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:10731:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:5616:5951":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"11:1048:36486":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:2558:4767":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:41291:7870":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:5716:3529":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"11:736:4218":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10635:5095":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:4427:6813":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:9365:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:2743:3950":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"11:403:36481":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:8854:8108":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:4904:5940":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:21849:32386":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:5071:5945":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:2160:14816":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"0:281:3027":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs17"],"kind":"variant"},"16:2905:5889":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:47289:8060":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12158:5348":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:9488:8250":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:4853:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:8289:8486":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:5848:7161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:21962:7584":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:10092:8289":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:5966:7228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:2779:6158":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:6671:6085":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:3934:3426":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:7545:7484":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:8047:6265":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:1500:4223":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:20574:34067":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:11920:1053":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:12033:5332":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:10334:5016":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:4677:6891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:1924:4181":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:13659:5782":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:39296:8431":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:12894:5551":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:247:8227":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:6904:6120":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:242:8226":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:40432:7841":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:3638:9410":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:9853:8269":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:8683:4992":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:3962:9418":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:6211:4787":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:45955:7997":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:20879:9521":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:5067:7086":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:6774:7413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:20851:9527":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:23047:7590":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:2752:9508":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:618:4182":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:8176:3444":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:7013:4400":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"14:160:8385":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:40122:3388":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:2933:8237":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:43886:7937":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:4665:9443":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:4637:6888":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:6606:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:6400:6044":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:39264:3374":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13698:5791":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:43934:7946":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:44256:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:3799:4220":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:6662:6084":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:2826:6163":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:2931:20638":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:7539:7483":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:11401:8458":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:10580:5089":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4728:6916":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:6468:4710":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:11915:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:9145:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:40677:7848":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:12536:5425":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:779:4713":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:3158:26405":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:7528:7480":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"11:2130:20569":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:8867:9475":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:7837:6227":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:8090:6271":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:21124:9522":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:2219:3142":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:47827:8079":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:8936:8489":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:7077:21503":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:9876:4941":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:1732:14827":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:43298:7901":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:6743:7387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:45933:7996":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:9946:5029":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:39920:7798":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:40643:2146":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:42654:2155":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:2364:4196":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:6035:7256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:44248:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:4596:5931":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:11193:5150":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:11503:7914":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:44341:6426":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:2879:5888":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:653:15540":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:11921:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:8989:8496":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:13469:5713":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:8846:9301":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:5346:5948":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:9098:8241":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:44291:8445":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:7499:8515":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:9453:21577":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:41268:32377":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:40629:7844":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:42457:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:2046:8398":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:44329:7968":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"15:198:20594":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13678:5788":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:947:4226":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6201:8334":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:0:3257":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:917:4221":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:1910:16530":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:6920:3466":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:9822:8266":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:8142:8384":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:20587:34183":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:3580:3486":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:5874:15107":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:14:1744":{"crate_id":2,"path":["core","write"],"kind":"macro"},"0:356:128":{"crate_id":0,"path":["cc","Error"],"kind":"struct"},"6:5736:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:11037:21568":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:4510:5928":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:31982:3504":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:975:8230":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:0:1836":{"crate_id":17,"path":["object"],"kind":"module"},"17:487:8229":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:1470:4218":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:6617:7340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:10971:4806":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:9612:4767":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:45627:7983":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:4799:6954":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:44041:7950":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:10238:1679":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:11234:5159":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:40061:7813":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:41790:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4962:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4649:6889":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:2404:5868":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"11:311:6412":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:39123:7662":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:10478:8303":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:8170:3443":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:9566:8244":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:9907:5024":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:5462:1680":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:11923:1402":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:13385:5689":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:3266:8239":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:5386:4990":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:4488:6841":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:7556:4801":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:474:6505":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:6780:9512":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:579:6566":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:6218:8337":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:10516:5074":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:5471:3426":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:10960:4805":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:11497:8143":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:5594:5896":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:4916:7012":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:11197:3508":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:5000:5943":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:7971:1726":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:6890:5901":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:6307:5890":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:43100:7545":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:21797:7559":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:541:6547":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:45378:7973":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:13612:5764":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:7266:3575":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:3899:5922":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:7103:8111":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4549:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4327:6752":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10681:5101":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:9964:3486":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11969:5323":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"18:690:4884":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:40035:7809":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"0:363:1753":{"crate_id":0,"path":["cc","Tool"],"kind":"struct"},"16:7669:5908":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:8953:5000":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:4785:32518":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:12516:4777":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:7626:8380":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:41950:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:7711:6213":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:4605:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:4113:8412":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:10465:8302":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:11933:742":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"19:0:1035":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:43774:7933":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:3463:1675":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:8293:7344":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:8765:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:4517:6857":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6728:6098":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:5357:3495":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:20546:3941":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:39178:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:10977:4807":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:4045:14645":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:4392:3426":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:11337:4810":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:12178:5349":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:1978:8236":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:7837:4204":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:1662:6690":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:9148:36504":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:1254:4229":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:10428:8299":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:40236:7818":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:6561:3540":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:40685:7850":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:8111:3468":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:10741:3438":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:13121:5626":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:3233:14647":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:11282:2772":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:3348:3467":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:11391:5199":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:10000:5111":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:8163:3442":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:1716:6714":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"11:836:4227":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"9:174:9292":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:45424:7975":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:10416:8298":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:44073:7958":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:4703:6905":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:3373:14695":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:4148:9441":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:7585:7492":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:30264:32393":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:2378:5867":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:21872:7570":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4412:6807":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:5408:1679":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:7883:3454":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:43921:7942":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:3904:9413":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"18:531:4862":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:11935:1501":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:8753:4994":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:20770:9520":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:7243:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:20780:14816":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:3233:3463":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:9154:3403":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:8256:6283":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:5014:7060":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:46493:8021":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:39331:4015":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:32022:7658":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"11:1826:4219":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:43900:14692":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:2546:5874":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:5792:7135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"15:180:20593":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:20739:9523":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:10039:8283":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:41438:3796":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:2832:6164":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:1494:6580":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:2967:35896":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:6597:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:9628:8257":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:20919:9528":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:42417:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:8104:3466":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:43175:7549":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:44117:7962":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:2773:14794":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:5079:7091":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:8072:6268":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:2594:5876":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:9826:8267":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:21910:32383":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:44057:7954":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:5104:5946":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10026:8281":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:12550:5428":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:6893:9039":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:13219:5650":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:11502:5219":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:5779:5967":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:8132:3439":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:40155:3402":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:4400:5925":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:12360:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:41162:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:43201:7550":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:10303:8293":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:12224:5373":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:12307:5389":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:13865:5834":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:9886:8272":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:10876:26221":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:6124:4793":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"16:6022:21498":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:46681:8025":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:922:4222":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:10721:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"0:275:3021":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs14"],"kind":"variant"},"17:13211:5647":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:4279:8461":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:43605:7919":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:6588:7328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"11:749:4219":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:8788:4995":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:47491:8063":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:41489:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:4758:670":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:46177:8004":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:7608:7498":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:2616:5877":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:8909:3443":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:9917:5025":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:8718:4993":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:8777:3501":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:21926:32392":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:7164:14775":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:47429:8062":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:12293:5387":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:7875:8475":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:4445:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11924:5317":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:7030:7518":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:5708:5960":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:6390:6043":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:10491:8304":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:3193:3461":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:1594:6418":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:13376:5688":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:420:4948":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:9108:36506":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:2220:36000":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"18:80:25405":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:55:6255":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:39303:7668":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:46257:8005":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:7694:4233":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:4340:6762":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:7317:36497":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:5889:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12046:5333":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:7624:3559":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"11:695:4223":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:11573:5233":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:10354:5071":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:21:683":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:10095:8419":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"11:97:6408":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:1099:35905":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:43706:14691":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:4601:7359":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:7121:3964":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:9032:8114":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:12923:5562":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:7256:3385":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:6179:8319":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:1135:35903":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:4233:3486":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:6867:7455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11459:5209":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:6710:7371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:4409:3560":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13879:5837":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:42642:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:2850:14804":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6007:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:11174:4808":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:9596:5013":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:1583:6416":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:3719:3456":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:7557:6207":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:8829:3964":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:11422:5203":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:7827:4207":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:7820:4203":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:43757:7932":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:10649:5096":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:11484:5211":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4878:1005":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:10807:8425":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:3385:8409":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:2391:1671":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:4847:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:6647:7362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:4841:6971":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:1919:21606":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:5919:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:12385:8428":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:39993:7805":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:13721:5804":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:10289:8423":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"7:0:1548":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:8823:4996":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:44053:7953":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:4704:9431":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:12318:5390":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:1461:4217":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:45711:7986":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:7042:6142":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:42435:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:361:3568":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:4780:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:13499:5719":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:7213:3386":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:2838:14801":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:2544:3453":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:7803:6223":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:10440:8300":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11544:5224":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"18:624:36512":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:7201:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:41497:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:41830:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:8360:21556":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:10589:5090":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:43954:7948":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:6575:3541":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:1512:6588":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:42380:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:3593:4216":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:9973:5031":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:1505:6585":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:1423:4216":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:13082:5617":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:11930:744":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:13812:5825":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:45646:7984":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:10555:5081":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:13066:5614":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:11922:1372":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:7645:3556":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:2956:4008":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:45787:7992":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:1708:6710":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:2033:4229":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:573:6563":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"18:707:4886":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:1535:6598":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:4983:7050":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:4760:4785":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:22501:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:4531:9461":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:1755:7529":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:9413:3416":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:8490:21560":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:7815:4206":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:47575:8065":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:46076:8001":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:9734:8265":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13453:5710":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4753:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:22270:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:10275:8422":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:8366:3483":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:6819:7437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"14:0:3255":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:10676:8120":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:13564:5763":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:1672:6696":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:8359:8417":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:6819:6112":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:13135:5630":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:40315:7830":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:4818:5937":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:3083:3469":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:4480:5927":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:2167:7503":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:9641:8258":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"14:187:20587":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:7591:3489":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:4037:5923":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:6156:8466":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:1746:7527":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:6854:6116":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:2764:5883":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:4031:4710":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:11272:8140":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:40214:3441":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:43444:7910":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:1695:6706":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:10505:8305":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:10247:7909":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:45526:7979":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:11254:8470":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:4018:9423":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:42408:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:44049:7952":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:2162:14817":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:11355:5192":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:5305:5947":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10104:5033":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:7509:5905":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:481:4855":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:41556:3964":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"11:2194:6423":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:13516:5726":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:47367:8061":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:4135:9440":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:7891:3456":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:13292:5664":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:4367:6785":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:43728:7923":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:2862:5887":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:44061:7955":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:10010:4268":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:5402:4991":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:4587:9418":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:6254:6028":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:30234:7593":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:10864:1680":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:10855:6484":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"14:221:6360":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:10681:8122":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:9228:36502":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:2967:20639":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:30428:32376":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:12059:5335":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:44069:7957":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:8521:21561":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"11:1027:20574":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:13411:5699":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:43210:8443":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:21781:7558":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:43472:7912":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:40652:7846":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:5797:5971":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:7598:7496":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"10:44:6428":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:22237:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:8858:4997":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:3030:5912":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:1511:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:7335:36498":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:11011:5131":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:9410:4206":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:9380:21575":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13803:5821":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:30194:4392":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"11:986:4230":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:775:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:2668:5879":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:1680:6697":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:2830:5886":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:39971:7803":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:41248:7863":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:5522:2841":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"11:1611:4704":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:47671:8071":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:7366:21504":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"0:0:2470":{"crate_id":0,"path":["cc"],"kind":"module"},"17:13639:5776":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:22435:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:4597:7355":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:46647:8024":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4739:6923":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:20606:34188":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:480:4779":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:2855:4784":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:9670:8262":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:21889:32402":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:547:6550":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:4073:4216":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:4715:6912":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:8899:9476":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13651:5779":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:4335:4015":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:12113:5343":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:8256:21542":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:3488:1672":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:8443:21559":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:5858:3526":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:3406:1674":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:3152:31390":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:10261:7910":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:5817:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:6506:6057":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:7029:6139":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:119:15187":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:1689:6703":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:2980:4395":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:4832:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:13344:5680":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:10015:8280":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:42112:3403":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:7867:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:6868:6118":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:7042:4219":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:7293:6181":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:20604:34185":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:8180:21508":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:9796:5023":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:1630:6667":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"18:671:8225":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:4199:8460":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:1785:4259":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:11735:14678":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4419:6811":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:39076:14649":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:12915:5561":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:11224:8136":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:355:3567":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:4482:6838":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:7697:5899":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:10923:5127":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:1820:4398":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:3734:8398":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:9156:3412":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"18:113:25407":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:11932:746":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:3168:14713":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:7294:7474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:4567:6883":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:1408:3486":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:4325:4755":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12345:5393":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"11:332:4700":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11258:5173":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:4462:6828":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"15:219:9279":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:21571:9517":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:9409:21576":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:8253:3799":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:1439:3964":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:4684:6893":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:4872:5939":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:4969:5942":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:9617:8256":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:7529:5906":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:3196:14646":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:5693:5957":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:41429:3964":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:11918:1520":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:9933:5027":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:1947:8233":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:8416:2155":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:2481:1673":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:30798:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:40636:7845":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:1499:6582":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:6670:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:10452:8301":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:5787:3538":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:11888:9392":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:5986:7236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:21126:7553":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:44065:7956":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:46831:8026":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"18:755:4898":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12372:5397":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:41540:3486":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:6719:7375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"11:817:4226":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:43372:7906":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:11715:14680":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:5589:7536":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:9138:8242":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:45587:7981":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11163:5146":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:32018:8430":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"11:2168:6419":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:2212:4190":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:11032:3501":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:7850:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:13367:5685":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:22336:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:11060:5098":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10283:5066":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:10897:5126":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:273:3077":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:41413:3486":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:45857:7994":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"9:0:3251":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"11:0:3253":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:12085:5338":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:45979:7998":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:4586:6884":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:46617:8023":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:9110:8116":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:3647:3964":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:42352:7876":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:2808:5885":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:42857:7891":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:1666:1091":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"16:154:4695":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:6488:6049":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:8883:9474":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:40446:7842":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4400:6798":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:6293:6031":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:8673:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:9120:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"11:2201:3380":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:30003:9411":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:40185:7549":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:7294:7523":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:9038:36507":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:46381:8019":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:7706:4275":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:6014:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:11937:1503":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:1787:8232":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:21976:7585":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:4119:9438":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:11866:8518":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:1764:1669":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"2:43340:7544":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:44354:7969":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"11:667:4222":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13763:5810":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:2524:5873":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:6132:6021":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:7271:7462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:5881:7174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:11446:5207":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:3585:3144":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:506:6521":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:3872:5921":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:2128:3547":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:9627:4772":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:10569:5085":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:3956:9417":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:47697:8073":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:8310:21555":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:7016:6136":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"18:590:4868":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:13316:5672":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:11268:8426":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:40418:3442":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:12098:5340":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:40358:7834":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12433:5405":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:7743:5897":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:11942:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:12449:5409":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:9748:5016":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:8170:6276":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:936:4225":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:39981:7804":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:9312:8245":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:7504:7476":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:11478:8142":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:307:1454":{"crate_id":1,"path":["std","thread"],"kind":"module"},"16:2470:5871":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:8997:8111":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:6236:8345":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:8120:3438":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"13:226:6407":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:40274:7824":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:10052:8285":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:4845:5938":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:494:6516":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:926:4223":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:12980:5597":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:4706:9432":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:40326:7831":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"11:119:4698":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:1544:6604":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:7052:4721":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:3378:3426":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"11:2180:6421":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:12608:4399":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:6795:7427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4495:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:4624:5932":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:1577:6415":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:6544:5898":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:867:3964":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:5847:5979":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:13791:5819":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:11675:3055":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:10660:5098":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:7196:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:6558:6061":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"9:234:2155":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5954:7223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:6786:4751":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:10079:8501":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:4786:6949":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:9523:8253":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"18:636:4880":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:6361:6040":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:8283:21554":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:12959:5592":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:8439:3484":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:7467:6201":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:4534:6865":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"0:277:3023":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs15"],"kind":"variant"},"6:4505:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:43188:8442":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:4568:5930":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:1034:8231":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:953:4227":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:9424:5006":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:2959:7506":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:43544:7916":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:1895:4180":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:2928:3573":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:7269:4737":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:43280:7899":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:6432:3539":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:1479:4221":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:2187:1670":{"crate_id":1,"path":["std","fs"],"kind":"module"},"1:3231:3462":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:6990:6135":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:532:6541":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:44096:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:6061:20611":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:6677:14777":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:8947:3551":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:9068:36505":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:4861:6980":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"11:760:4220":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:30250:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:12259:5384":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:2962:14648":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:6793:6111":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:9443:8247":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"11:1818:3486":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:46411:8020":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:40028:7808":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13159:5632":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:7022:3964":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:45486:7977":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:4425:4732":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:1844:4272":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:10270:8291":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:5531:7534":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:10255:28662":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:8548:21562":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:11628:5252":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:4663:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4972:7044":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:21864:7569":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:562:6558":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:47788:8078":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:7168:14774":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:10402:8294":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:8813:3486":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:6460:5893":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:7449:8372":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:22600:7589":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:2426:5869":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:875:4217":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:6129:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:3996:9419":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:41421:4216":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:10386:4804":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:1561:3486":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:47037:8058":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"14:202:14693":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:7516:7478":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:40283:7825":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:40001:7797":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:4764:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"18:96:25406":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:0:3249":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:638:8449":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"10:0:3252":{"crate_id":10,"path":["adler"],"kind":"module"},"16:4789:5936":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:42672:7890":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:43596:7918":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:40335:7832":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"13:0:3248":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:8525:3488":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:6321:8348":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:5976:5851":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:3749:5918":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:45402:7974":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13399:5696":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:11941:1131":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:40075:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:1589:6635":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13744:5805":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:41353:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:11266:8139":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:9866:8270":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:11490:26183":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:40348:7833":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:43292:7900":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:42664:7889":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:11410:5200":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:6629:4408":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"11:2049:4230":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:8954:25736":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:8237:8091":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13101:5618":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:7598:14773":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:3668:4710":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:6564:7311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:11940:1558":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:4877:9469":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:41710:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:42617:3419":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:10743:8307":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:45332:7971":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:13461:5711":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:39941:32398":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:6351:21499":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:4010:8411":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:11220:5158":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"18:0:3258":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:3180:34925":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"0:41:2474":{"crate_id":0,"path":["cc","windows_registry","find_tool"],"kind":"function"},"16:6876:5900":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:1062:4230":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:35:4401":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:4258:8413":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:43220:7551":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:13419:5702":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:11800:5294":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:3201:6417":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:6316:4710":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:21098:9515":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:482:6510":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:21837:7567":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:7537:4799":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:585:9385":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"11:644:4216":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:2468:4208":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:4001:4219":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:12592:5432":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:7478:5904":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:5899:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:9158:3413":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"0:279:3025":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs16"],"kind":"variant"},"1:8183:3440":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:1732:6719":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4290:6725":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:43526:7915":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"9:502:6487":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:626:8395":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"11:793:4221":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:5876:7173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:9265:8244":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"11:723:4217":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:9298:8418":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:9218:5016":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:8984:8495":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:8195:8484":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:40092:32389":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:5998:21497":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:9577:5011":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:41471:3797":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"9:421:20498":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"0:296:1692":{"crate_id":0,"path":["cc","Build"],"kind":"struct"},"2:46571:8022":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"11:1121:4232":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:2694:5880":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:40265:7822":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:10626:5094":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:9478:8249":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:40306:7829":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5828:7148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:12522:5424":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:6376:5892":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:4823:6962":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:8195:21544":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"11:1012:4231":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:21014:7553":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:11861:5306":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"0:39:2081":{"crate_id":0,"path":["cc","windows_registry","find"],"kind":"function"},"16:5811:5972":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:5993:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"9:445:20496":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:1768:609":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:13033:5603":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:8214:6198":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:9959:5030":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:41548:4216":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12138:5345":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"11:1845:6416":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:7259:3796":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:3139:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:3805:8459":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:43576:3440":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:10316:5069":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:11931:745":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:4599:7357":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:488:6513":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:5571:5894":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:12388:5399":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:5057:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:8254:3798":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"18:507:4857":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:1574:6623":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"11:968:4229":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:8651:4990":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:2910:3445":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:1669:4710":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:6520:6059":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:8263:8482":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:6644:8467":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:11339:5188":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:30322:32373":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:45356:7972":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:12236:5375":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:40245:7819":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:6919:36495":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11993:5324":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:7757:6215":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:2032:3456":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:11372:5194":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:43138:8441":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:4097:30209":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:40255:7821":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:7510:7477":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:204:4708":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:1008:4710":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:2691:3946":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:6943:21502":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:7726:8430":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:6021:7251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:5630:8310":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:4817:6961":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"7:32:20483":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:13169:5633":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:5963:5992":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4991:7052":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:2855:14805":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"11:285:6409":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:5804:7139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:6327:6033":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:11934:1504":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:6980:3521":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:526:6538":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:44238:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:5862:7172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:10894:3503":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:2742:5882":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:12607:5436":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:6155:7293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:1270:4231":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:12311:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:6508:3536":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:5978:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"11:399:36480":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:6624:7344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:1831:4220":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:8249:9442":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:7599:4208":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:1080:4232":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:5933:4787":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:13041:5604":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:10857:21567":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:1602:6642":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:2925:3572":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:20752:9524":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"16:5724:5961":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"18:644:4857":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"0:273:3019":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs12"],"kind":"variant"},"2:40165:3401":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:21988:9412":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:13249:5656":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:5383:3426":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:8977:8494":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:43614:7920":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:6588:3969":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:22303:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:6396:3532":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:4523:6860":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:39929:7799":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:43109:7546":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:6027:7254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:6032:4789":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:24:609":{"crate_id":2,"path":["core","env"],"kind":"macro"},"18:599:36514":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:43822:7935":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"14:31:8385":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:46123:8002":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:13356:5681":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"11:630:3486":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:643:9388":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:8498:3485":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:1637:6671":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:13145:5631":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:7227:32389":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"8:0:3250":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:6804:7430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:676:9389":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:12331:5392":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:4555:6874":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:3209:6415":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:39338:7669":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:39957:7802":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:538:4865":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:40397:7837":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:39914:7797":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:7249:7461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:12510:5423":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:386:8228":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"11:1858:6418":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:535:5849":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:13625:5770":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:3225:5915":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"18:699:4885":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"11:1068:8391":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:43322:3444":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:4:1018":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"11:1538:8394":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:8841:33309":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:1568:6621":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:5043:7079":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:5013:8463":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:41404:1828":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:43230:8444":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"9:325:6464":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:47631:8067":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:5032:5944":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:46001:7999":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:7205:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:3700:8457":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:7688:9391":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:1299:4232":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:49633:9532":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:3481:3435":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:20889:14816":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:10451:3458":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:9469:8248":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:13053:5609":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:11883:9303":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:4263:8414":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:911:4220":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:11740:14677":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:22567:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:2705:3561":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:11813:5296":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:1556:6613":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:6771:14769":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:39154:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:9062:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:4615:6886":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13426:5703":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13477:5714":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4694:6900":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:8805:3503":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:9150:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:10206:8421":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:2469:14741":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"12:0:3254":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:9683:8263":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:6717:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:8931:4999":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"7:79:20490":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:12358:5394":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:501:3547":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:8025:6264":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:40227:7816":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:43743:7929":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:7277:7464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:7377:4402":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"13:110:36487":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:41870:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:40080:3387":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:3567:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:13506:5721":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:43049:8439":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:11252:14872":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13821:5827":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:4954:7033":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"11:365:4702":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:1846:4273":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:43390:7907":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:9178:8243":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:9127:8498":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:4388:6793":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:5281:14667":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:8200:9408":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:11282:5174":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:4389:4016":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:13324:5673":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:47660:8070":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:6840:7449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4722:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:12461:5410":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:5277:14666":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:4144:7533":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:9350:36503":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:1589:6417":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:4757:5935":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:11464:7908":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:11064:7959":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:13857:5831":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:25857:7591":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:10885:5125":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:7092:7519":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:9895:8275":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:5044:8463":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10761:21565":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:2720:5881":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:10377:5072":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:7594:9396":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:9986:5032":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:7635:6211":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"11:2186:36479":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:21000:9518":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:10798:21566":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:4763:6935":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:9545:4985":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:9403:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:3446:5917":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:5525:3499":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:1071:4231":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:2786:5884":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:4605:14730":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:8244:8092":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:892:3486":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:7543:5907":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:42133:3413":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:41565:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:9110:1675":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:6392:2146":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:1773:4220":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:4783:9428":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:4948:7032":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:6717:6097":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:12799:5468":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:45609:7982":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:10657:8509":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:1371:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:11615:5248":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:11832:5301":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4314:6742":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:4941:3426":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6243:36499":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"18:515:4860":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:2580:3446":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:1543:3426":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:7961:8476":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:3142:8238":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:7810:4205":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:0:820":{"crate_id":6,"path":["libc"],"kind":"module"},"1:8315:8094":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:46154:8003":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:6575:21500":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:1048:4229":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:4907:7006":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:5233:4710":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:7285:32009":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:45664:7985":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:8791:3502":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4937:7027":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:11786:14685":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:530:3552":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:5920:5988":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:8076:3470":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:7600:3569":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:9557:5016":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:2762:6157":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:5024:7065":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:12563:5429":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:6935:4797":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:6355:8467":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:11938:1500":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:3640:3145":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:8759:3500":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:11929:747":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:10967:5129":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:5073:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:3513:4219":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:9696:5009":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:7966:8477":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:9806:4208":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:6724:32324":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:10598:5129":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:46335:8018":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11721:5260":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:41219:9409":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:8979:36510":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:258:4710":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4379:6788":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:11899:28427":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:7214:3576":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:123:15188":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:8573:21563":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:10056:7543":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:11191:8133":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"9:352:20511":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:4006:9420":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:4886:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:8255:8485":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:3181:33459":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:20589:34187":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:4542:6870":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:21093:4208":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:11056:30220":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:1115:35888":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:11653:5256":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:2502:5872":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:7574:7491":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:42876:7893":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:2757:9510":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:5798:7138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:20559:34067":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:9011:26196":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:11101:8132":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:9498:5009":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:7563:7487":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:21347:9529":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:40205:8433":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"18:574:4857":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:5990:7537":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:1520:8397":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:5948:3426":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:41185:7854":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4468:6830":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:6270:4219":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:41910:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:10712:21675":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:5886:5982":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:21117:4208":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:3078:4397":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:2319:5858":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10691:21674":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:41990:3527":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:1821:4268":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:3934:9415":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:47750:8076":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:7767:21506":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:39138:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12835:5499":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:5557:5891":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:2748:3952":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:42126:3412":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:43490:7913":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:11585:5236":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:8922:3531":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:42633:3418":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:2215:4168":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"18:652:4857":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:7113:3964":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:6108:4777":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:7683:5909":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10125:5035":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:5835:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:7519:6206":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:6474:5910":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:554:1681":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:21569:4208":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"18:736:25415":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:9772:5021":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:5643:5955":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:12298:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:4926:3788":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:7243:3384":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:7588:8379":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:41480:4188":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:10080:8288":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:4380:4756":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:10068:8287":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:2821:14800":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:11120:8115":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:41590:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:43149:7894":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"9:52:9282":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:4351:8462":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:3300:5916":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:13265:5660":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:6442:6048":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:43911:7938":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:3898:9414":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:8189:8482":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"18:614:36513":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"11:805:4225":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:21441:7555":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:11069:21569":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:13667:5783":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:41202:7856":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:45903:7995":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:44077:7959":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:42119:3404":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:10445:3460":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:2337:5860":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:12505:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:7522:7479":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:39242:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:2366:4197":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:7280:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:12483:5421":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:39220:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:857:4216":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:9816:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:4932:5941":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:7488:5134":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:4445:5926":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:21728:7557":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"9:388:20497":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:500:6518":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:7043:30206":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:42392:6242":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:2740:3571":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:39037:14712":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:7673:9390":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:11936:1502":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:11319:5187":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:681:4881":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:3155:26404":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:4303:6734":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:3424:3434":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:5367:20610":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:3162:14714":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:4702:5933":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:8598:21564":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:11720:8417":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:8109:6274":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:10133:8420":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"18:719:4890":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:44129:14912":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:6389:3964":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11434:5204":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:9028:8240":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:2921:2183":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:10142:21648":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:10167:3506":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"18:564:4867":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:13689:5789":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:3815:5920":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:3175:6416":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:5377:3496":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:9408:3415":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:5527:4406":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:5393:3497":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:11109:5139":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:20948:9514":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:2737:3948":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:11844:5303":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:11427:7903":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13309:5671":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:11044:3502":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:5593:4788":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:10823:4962":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:9906:7867":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:7699:2069":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:30228:4393":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:20992:4208":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:4540:5929":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10989:5079":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:43308:3443":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"11:844:4228":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:6535:4697":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:39511:26552":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:3141:14806":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:10735:5108":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:10491:3556":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:12282:5385":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:7551:7485":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:2350:4193":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:8129:8381":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12419:5404":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:12622:5098":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:9595:4766":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:5741:21496":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:47651:8069":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:7635:33307":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:43586:7917":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:22468:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:13194:5642":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:635:8447":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:6600:4406":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:47712:8074":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:11487:7911":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:7360:4220":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:6696:21501":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:1572:4220":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"15:0:3256":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:6572:7316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12770:5448":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:20778:33115":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:9213:4272":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:10851:4276":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:45557:7980":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:47765:8077":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"18:609:8220":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:5062:3526":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:2799:14797":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:2376:3185":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:4702:9429":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:47735:8075":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:40108:7814":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"18:491:4856":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:12646:5446":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:9373:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:5586:4787":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:10751:30222":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11717:4814":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:9152:3404":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"5:6619:4407":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:20932:4208":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:10257:8290":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10936:5128":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:8156:5911":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12126:5344":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:5007:7057":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:5944:8312":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:41630:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:3168:3486":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:2842:14802":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:42362:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:5684:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:6865:4796":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:2787:9511":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:4928:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:7084:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12902:5554":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:4662:9470":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:47179:8059":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:11785:5289":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:11924:1486":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:43118:8440":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:7411:5996":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:2620:3455":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"11:798:4224":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"11:1852:6417":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:8271:8093":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:8941:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:3315:3450":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:2448:5870":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:9721:8264":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:8420:21558":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:3063:4901":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:44299:7965":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:6066:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:6431:6047":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:6849:7452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:6833:7446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:40016:14736":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:12634:5439":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:9164:3411":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:5754:4219":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:6767:6110":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:8821:8488":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:4811:798":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:41304:8091":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:1648:6679":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:9275:36509":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:9415:4803":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"11:1517:8393":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:6505:3535":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:595:6576":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:8348:3792":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:8252:3800":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:4894:6996":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:5418:5949":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:5343:1678":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:2816:14799":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:11538:7543":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:11729:4886":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"11:2174:6420":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4435:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:41670:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:2791:14796":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:39324:8432":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"5:7180:3381":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:11556:5225":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:43639:7805":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:4845:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:13332:5674":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11821:5298":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:9149:30225":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:12072:5336":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:1568:4219":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:9653:8259":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:12576:5430":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:2795:14795":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:8456:1676":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:10343:3500":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:45757:7991":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"10:36:6427":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:5677:21495":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:844:3486":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:30826:3941":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:7859:21507":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:4373:6786":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:2931:3574":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:0:1394":{"crate_id":1,"path":["std"],"kind":"module"},"1:11939:792":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:43128:7548":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6336:6034":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6164:6026":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:5655:5895":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"11:657:3964":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:6170:7304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:10774:8424":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:11641:5253":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:5774:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:12403:5403":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:1931:655":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:10545:5079":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:43849:7936":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:43426:7909":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:2298:20612":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:40667:4762":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:7321:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:4728:5934":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:22369:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:10699:8127":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:3472:31666":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:44045:7951":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:4809:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"11:1501:20575":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:901:4219":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:6935:8349":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:7557:7486":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:10013:3444":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:6725:7376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"14:7:8385":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:2642:5878":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:2804:6159":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:10615:5093":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:7596:21505":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:6137:9606":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:7722:4276":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:11522:8147":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:3214:34926":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:9091:4210":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:43621:7806":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:46025:8000":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"18:582:3941":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:2690:3570":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:6076:7267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:766:25416":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:13488:5718":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:587:6571":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:8389:21557":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"14:215:6358":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:11917:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:13842:5830":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"0:36:1687":{"crate_id":0,"path":["cc","windows_registry"],"kind":"module"},"17:10705:5104":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:3782:5919":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"11:1822:3964":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:5766:7120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:40009:7806":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:4437:9443":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:9067:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:47537:8064":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:20994:9516":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:8667:4991":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:7488:6204":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:47686:8072":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:6761:4748":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:43266:7896":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:9072:8115":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:2846:14803":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:7062:34923":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:4868:9468":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:41750:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:9162:3410":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:12006:5327":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:4127:9439":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:673:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:20814:9526":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"14:165:20580":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:10840:5123":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:6981:8350":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:62:15133":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:9340:8246":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:13181:5636":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:13024:5602":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:3047:20640":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11946:5318":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:4436:4017":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:10168:7544":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:11520:5220":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:11090:5136":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12496:5422":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:7619:3557":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:39198:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:562:5134":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:8632:21543":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:4943:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"5:7305:8408":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:11471:5210":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:11916:940":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:21675:7556":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"18:727:4893":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"0:42:3036":{"crate_id":0,"path":["cc","windows_registry","find_vs_version"],"kind":"function"},"1:10711:4207":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:930:4224":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:888:4218":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:1526:6593":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:12194:5354":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:9109:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:8153:3441":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:9188:36501":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:9160:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:11927:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"18:660:8221":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:21813:7563":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:7572:36496":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:6687:7364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:11600:5242":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:45809:7993":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:6043:7259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}