{"root":"0:0:2652","crate_version":"1.0.83","includes_private":false,"index":{"2:12436:31882":{"id":"2:12436:31882","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43818:9967","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5792:1564":{"id":"5:5792:1564","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:1778":{"id":"0:107:1778","crate_id":0,"name":"warnings","span":{"filename":"src/lib.rs","begin":[784,4],"end":[788,5]},"visibility":"public","docs":"Set warnings flags.\n\nAdds some flags:\n- \"-Wall\" for MSVC.\n- \"-Wall\", \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:1949":{"id":"0:88:1949","crate_id":0,"name":"flag","span":{"filename":"src/lib.rs","begin":[425,4],"end":[428,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"-ffunction-sections\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8606:4091-0:311:3278":{"id":"a:2:8606:4091-0:311:3278","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8606:4091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:93:2009":{"id":"0:93:2009","crate_id":0,"name":"flag_if_supported","span":{"filename":"src/lib.rs","begin":[566,4],"end":[569,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler if it supports it\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag_if_supported(\"-Wlogical-op\") // only supported by GCC\n    .flag_if_supported(\"-Wunreachable-code\") // only supported by clang\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3412-0:311:3278":{"id":"b:2:3412-0:311:3278","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:3856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3414:1602"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2571-0:333:1806":{"id":"b:2:2571-0:333:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2573:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12426:33614":{"id":"2:12426:33614","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12073:1505","crate::ops::IndexMut":"2:3077:9881","str::slice_unchecked":"2:12425:33613"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2582-0:311:3278":{"id":"b:2:2582-0:311:3278","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2585:133","2:2586:1587"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12466:33617":{"id":"2:12466:33617","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12106:9966","str::split":"2:12454:2546","prim@char":"1:12067:449","str::split_terminator":"2:12463:33616"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43594:9989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:9961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12457:27042":{"id":"2:12457:27042","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12067:449","self::pattern":"2:12106:9966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11922:9969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12405:871":{"id":"2:12405:871","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12067:449"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:413:717":{"id":"0:413:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[193,16],"end":[193,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12490:33620":{"id":"2:12490:33620","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12106:9966","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:449","str::match_indices":"2:12487:33619"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43694:9983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:9961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266:1104":{"id":"0:266:1104","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[3562,4],"end":[3564,5]},"visibility":"public","docs":"Returns the path for this compiler.\n\nNote that this may not be a path to a file on the filesystem, e.g. \"cc\",\nbut rather something which will be resolved when a process is spawned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:2005":{"id":"5:683:2005","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518:2466":{"id":"5:5518:2466","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7487:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2325:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:326:659"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12495:33621":{"id":"2:12495:33621","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:1825":{"id":"0:129:1825","crate_id":0,"name":"ranlib","span":{"filename":"src/lib.rs","begin":[999,4],"end":[1002,5]},"visibility":"public","docs":"Configures the tool used to index archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ranlib",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:2375":{"id":"0:153:2375","crate_id":0,"name":"try_expand","span":{"filename":"src/lib.rs","begin":[1562,4],"end":[1585,5]},"visibility":"public","docs":"This will return a result instead of panicing; see expand() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41709:231","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6912:268","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[178,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9536:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5535:28331":{"id":"5:5535:28331","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12527:28187"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12419:27010":{"id":"2:12419:27010","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2833:3857-0:394:133":{"id":"a:2:2833:3857-0:394:133","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2833:3857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:411:453":{"id":"0:411:453","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[193,9],"end":[193,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:322":{"id":"0:322","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:323:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12414:33612":{"id":"2:12414:33612","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:34285","5:5518:2466","5:5521:34286","5:5524:3080","5:5532:34287","5:5533:34288","5:5534:3750","5:5535:28331","5:5536:28332"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12434:9723":{"id":"2:12434:9723","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43780:3727","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12499:33623":{"id":"2:12499:33623","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12513:2772":{"id":"2:12513:2772","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12067:449","self::pattern":"2:12106:9966"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:9961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:268:656":{"id":"0:268:656","crate_id":0,"name":"env","span":{"filename":"src/lib.rs","begin":[3576,4],"end":[3578,5]},"visibility":"public","docs":"Returns the set of environment variables needed for this compiler to\noperate.\n\nThis is typically only used for MSVC compilers currently.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"tuple":[{"resolved_path":{"name":"OsString","id":"1:1983:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"OsString","id":"1:1983:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330":{"id":"0:330","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,31],"end":[82,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2788:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"1:2929:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:743"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:136:1829":{"id":"0:136:1829","crate_id":0,"name":"static_crt","span":{"filename":"src/lib.rs","begin":[1068,4],"end":[1071,5]},"visibility":"public","docs":"Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.\n\nThis option defaults to `false`, and affect only msvc targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_crt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:1953":{"id":"0:89:1953","crate_id":0,"name":"ar_flag","span":{"filename":"src/lib.rs","begin":[441,4],"end":[444,5]},"visibility":"public","docs":"Add a flag to the invocation of the ar\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .file(\"src/bar.c\")\n    .ar_flag(\"/NODEFAULTLIB:libc.dll\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:267:334":{"id":"0:267:334","crate_id":0,"name":"args","span":{"filename":"src/lib.rs","begin":[3568,4],"end":[3570,5]},"visibility":"public","docs":"Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"OsString","id":"1:1983:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1816":{"id":"0:102:1816","crate_id":0,"name":"cpp","span":{"filename":"src/lib.rs","begin":[676,4],"end":[679,5]},"visibility":"public","docs":"Set C++ support.\n\nThe other `cpp_*` options will only become active if this is set to\n`true`.\n\nThe name of the C++ standard library to link is decided by:\n1. If [cpp_link_stdlib](Build::cpp_link_stdlib) is set, use its value.\n2. Else if the `CXXSTDLIB` environment variable is set, use its value.\n3. Else the default is `libc++` for OS X and BSDs, `libc++_shared` for Android,\n`None` for MSVC and `libstdc++` for anything else.","links":{"Build::cpp_link_stdlib":"0:109:1817"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:2168":{"id":"0:132:2168","crate_id":0,"name":"link_lib_modifier","span":{"filename":"src/lib.rs","begin":[1025,4],"end":[1028,5]},"visibility":"public","docs":"Adds a native library modifier that will be added to the\n`rustc-link-lib=static:MODIFIERS=LIBRARY_NAME` metadata line\nemitted for cargo if `cargo_metadata` is enabled.\nSee https://doc.rust-lang.org/rustc/command-line-arguments.html#-l-link-the-generated-crate-to-a-native-library\nfor the list of modifiers accepted by rustc.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["link_lib_modifier",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12427:2694":{"id":"2:12427:2694","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12428:27034"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2567-0:333:1806":{"id":"b:2:2567-0:333:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2570:1854"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:376:717":{"id":"0:376:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[94,16],"end":[94,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2261-0:394:133":{"id":"b:2:2261-0:394:133","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:3856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:1780"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:253:60":{"id":"0:253:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[3410,4],"end":[3412,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12454:2546":{"id":"2:12454:2546","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12106:9966","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:449","str::split_whitespace":"2:12432:2720","str::rsplit":"2:12460:27044"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43526:3731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374:453":{"id":"0:374:453","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:3080":{"id":"5:5524:3080","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7487:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:1832":{"id":"0:106:1832","crate_id":0,"name":"warnings_into_errors","span":{"filename":"src/lib.rs","begin":[763,4],"end":[766,5]},"visibility":"public","docs":"Set warnings into errors flag.\n\nDisabled by default.\n\nWarning: turning warnings into errors only make sense\nif you are a developer of the crate using cc-rs.\nSome warnings only appear on some architecture or\nspecific version of the compiler. Any user of this crate,\nor any other crate depending on it, could fail during\ncompile time.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings_into_errors(true)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings_into_errors",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12525:28184":{"id":"2:12525:28184","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39520:26992","Self::is_ascii":"2:12524:28183"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39520:26992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2776:242-0:311:3278":{"id":"a:2:2776:242-0:311:3278","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12507:3073":{"id":"2:12507:3073","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12067:449","self::pattern":"2:12106:9966"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12527:28187":{"id":"2:12527:28187","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12532:33628":{"id":"2:12532:33628","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4571:33628"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43843:9979","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12501:33625":{"id":"2:12501:33625","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12067:449","self::pattern":"2:12106:9966"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12131:9959","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:3010":{"id":"0:270:3010","crate_id":0,"name":"cflags_env","span":{"filename":"src/lib.rs","begin":[3603,4],"end":[3612,5]},"visibility":"public","docs":"Returns the compiler flags in format of CFLAGS environment variable.\nImportant here - this will not be CFLAGS from env, its internal gcc's flags to use as CFLAGS\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:1983:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8606:4091-0:401:1865":{"id":"a:2:8606:4091-0:401:1865","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8606:4091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:109:1817":{"id":"0:109:1817","crate_id":0,"name":"cpp_link_stdlib","span":{"filename":"src/lib.rs","begin":[838,4],"end":[844,5]},"visibility":"public","docs":"Set the standard library to link against when compiling with C++\nsupport.\n\nIf the `CXXSTDLIB` environment variable is set, its value will\noverride the default value, but not the value explicitly set by calling\nthis function.\n\nA value of `None` indicates that no automatic linking should happen,\notherwise cargo will link against the specified library.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n- `c++_shared` or `c++_static` for Android\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .cpp_link_stdlib(\"stdc++\")\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_link_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:1107":{"id":"0:133:1107","crate_id":0,"name":"pic","span":{"filename":"src/lib.rs","begin":[1034,4],"end":[1037,5]},"visibility":"public","docs":"Configures whether the compiler will emit position independent code.\n\nThis option defaults to `false` for `windows-gnu` and bare metal targets and\nto `true` for all other targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pic",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12516:3493":{"id":"2:12516:3493","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12067:449","self::pattern":"2:12106:9966"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:473":{"id":"0:125:473","crate_id":0,"name":"compiler","span":{"filename":"src/lib.rs","begin":[979,4],"end":[982,5]},"visibility":"public","docs":"Configures the compiler to be used to produce output.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["compiler",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12497:33622":{"id":"2:12497:33622","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1824":{"id":"0:127:1824","crate_id":0,"name":"archiver","span":{"filename":"src/lib.rs","begin":[989,4],"end":[992,5]},"visibility":"public","docs":"Configures the tool used to assemble archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["archiver",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2571-0:401:1865":{"id":"b:2:2571-0:401:1865","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2573:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12493:2962":{"id":"2:12493:2962","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:2734":{"id":"0:208:2734","crate_id":0,"name":"try_get_archiver","span":{"filename":"src/lib.rs","begin":[2855,4],"end":[2857,5]},"visibility":"public","docs":"Get the archiver that's in use for this configuration.\n\nThis will return a result instead of panicing;\nsee [`get_archiver()`] for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41709:231","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5474:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12522:2354":{"id":"2:12522:2354","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12067:132","`FromStr`":"2:12066:3312"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12066:3312","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12066:3312","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12481:3607":{"id":"2:12481:3607","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12106:9966","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:449","str::rmatches":"2:12484:33618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43730:9984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2264-0:394:133":{"id":"b:2:2264-0:394:133","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:3856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2266:26355"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:155:2384":{"id":"0:155:2384","crate_id":0,"name":"expand","span":{"filename":"src/lib.rs","begin":[1599,4],"end":[1604,5]},"visibility":"public","docs":"Run the compiler, returning the macro-expanded version of the input files.\n\nThis is only relevant for C and C++ files.\n\n# Panics\nPanics if more than one file is present in the config, or if compiler\npath has an invalid file name.\n\n# Example\n```no_run\nlet out = cc::Build::new().file(\"src/foo.c\").expand();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6912:268","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2264-0:311:3278":{"id":"b:2:2264-0:311:3278","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:3856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2266:26355"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:207:2733":{"id":"0:207:2733","crate_id":0,"name":"get_archiver","span":{"filename":"src/lib.rs","begin":[2844,4],"end":[2849,5]},"visibility":"public","docs":"Get the archiver (ar) that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5507:9953"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5474:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[184,0],"end":[184,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","description","type_id","source","provide"],"trait":{"name":"Error","id":"2:2629:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8606:4091-0:333:1806":{"id":"a:2:8606:4091-0:333:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8606:4091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2833:3857-0:333:1806":{"id":"a:2:2833:3857-0:333:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2833:3857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12463:33616":{"id":"2:12463:33616","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12106:9966","str::split":"2:12454:2546","prim@char":"1:12067:449","`DoubleEndedIterator`":"2:7518:126","str::rsplit_terminator":"2:12466:33617"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43576:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12423:27012":{"id":"2:12423:27012","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12435:33615":{"id":"2:12435:33615","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43790:9981","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12446:2231":{"id":"2:12446:2231","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41566:196","prim@char":"1:12067:449","self::pattern":"2:12106:9966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12408:33610":{"id":"2:12408:33610","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:2656":{"id":"0:57:2656","crate_id":0,"name":"find_tool","span":{"filename":"src/windows_registry.rs","begin":[43,0],"end":[45,1]},"visibility":"public","docs":"Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["_tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3412-0:333:1806":{"id":"b:2:3412-0:333:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:3856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3414:1602"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[155,9],"end":[155,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:398:453"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:312:3280":{"id":"0:312:3280","crate_id":0,"name":"Vs12","span":{"filename":"src/windows_registry.rs","begin":[86,4],"end":[86,8]},"visibility":"default","docs":"Visual Studio 12 (2013)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:97:1814":{"id":"0:97:1814","crate_id":0,"name":"no_default_flags","span":{"filename":"src/lib.rs","begin":[643,4],"end":[646,5]},"visibility":"public","docs":"Disables the generation of default compiler flags. The default compiler\nflags may cause conflicts in some cross compiling scenarios.\n\nSetting the `CRATE_CC_NO_DEFAULTS` environment variable has the same\neffect as setting this to `true`. The presence of the environment\nvariable and the value of `no_default_flags` will be OR'd together.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["no_default_flags",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:2984":{"id":"0:273:2984","crate_id":0,"name":"is_like_msvc","span":{"filename":"src/lib.rs","begin":[3625,4],"end":[3630,5]},"visibility":"public","docs":"Whether the tool is MSVC-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12433:2950":{"id":"2:12433:2950","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12432:2720"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43809:9968","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12524:28183":{"id":"2:12524:28183","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2586:1587":{"id":"2:2586:1587","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12460:27044":{"id":"2:12460:27044","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12106:9966","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:449","str::split":"2:12454:2546"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43544:9986","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:9961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135:1836":{"id":"0:135:1836","crate_id":0,"name":"emit_rerun_if_env_changed","span":{"filename":"src/lib.rs","begin":[1060,4],"end":[1063,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo to detect environment\nchanges that should trigger a rebuild.\n\nThis has no effect if the `cargo_metadata` option is `false`.\n\nThis option defaults to `true`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["emit_rerun_if_env_changed",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:2769":{"id":"0:269:2769","crate_id":0,"name":"cc_env","span":{"filename":"src/lib.rs","begin":[3584,4],"end":[3598,5]},"visibility":"public","docs":"Returns the compiler command in format of CC environment variable.\nOr empty string if CC env was not present\n\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:1983:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:401:1865":{"id":"0:401:1865","crate_id":0,"name":"Tool","span":{"filename":"src/lib.rs","begin":[194,0],"end":[203,1]},"visibility":"public","docs":"Configuration used to represent an invocation of a C compiler.\n\nThis can be used to figure out what compiler is in use, what the arguments\nto it are, and what the environment variables look like for the compiler.\nThis can be used to further configure other build systems (e.g. forward\nalong CC and/or CFLAGS) or the `to_command` method can be used to run the\ncompiler itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:254","a:2:2793:252-0:401:1865","a:2:2833:3857-0:401:1865","a:2:8606:4091-0:401:1865","a:2:2776:242-0:401:1865","a:2:8607:4090-0:401:1865","b:2:2264-0:401:1865","b:2:2571-0:401:1865","b:2:2261-0:401:1865","b:2:2567-0:401:1865","b:2:2577-0:401:1865","b:2:3412-0:401:1865","b:2:2582-0:401:1865","b:5:680-0:401:1865","0:412","0:410"]}}},"2:12475:27050":{"id":"2:12475:27050","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12416:340":{"id":"2:12416:340","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12084:1611"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:2192":{"id":"0:140:2192","crate_id":0,"name":"try_compile","span":{"filename":"src/lib.rs","begin":[1086,4],"end":[1249,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThis will return a result instead of panicing; see compile() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41709:231","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2833:3857-0:401:1865":{"id":"a:2:2833:3857-0:401:1865","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2833:3857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12413:2217":{"id":"2:12413:2217","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11666:2960"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:327":{"id":"0:327","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2787:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2567-0:401:1865":{"id":"b:2:2567-0:401:1865","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2570:1854"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12500:33624":{"id":"2:12500:33624","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12526:28186":{"id":"2:12526:28186","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:328":{"id":"0:328","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:326:659":{"id":"0:326:659","crate_id":0,"name":"eq","span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:570":{"id":"0:121:570","crate_id":0,"name":"debug","span":{"filename":"src/lib.rs","begin":[948,4],"end":[951,5]},"visibility":"public","docs":"Configures whether the compiler will emit debug information when\ngenerating object files.\n\nThis option is automatically scraped from the `DEBUG` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["debug",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12415:341":{"id":"2:12415:341","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12416:340","`u8`":"1:12084:1611"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5790-0:394:133":{"id":"b:5:5790-0:394:133","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9536:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:3856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5788:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5792:1564"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5534:3750":{"id":"5:5534:3750","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7487:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:743":{"id":"0:62:743","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[173,4],"end":[175,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"io::Error","id":"1:2929:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314:3282":{"id":"0:314:3282","crate_id":0,"name":"Vs14","span":{"filename":"src/windows_registry.rs","begin":[88,4],"end":[88,8]},"visibility":"default","docs":"Visual Studio 14 (2015)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:83:1941":{"id":"0:83:1941","crate_id":0,"name":"define","span":{"filename":"src/lib.rs","begin":[403,4],"end":[407,5]},"visibility":"public","docs":"Specify a `-D` variable with an optional value.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .define(\"FOO\", \"BAR\")\n    .define(\"BAZ\", None)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["val",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3414:1602":{"id":"2:3414:1602","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39333:14028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:1978":{"id":"0:92:1978","crate_id":0,"name":"is_flag_supported","span":{"filename":"src/lib.rs","begin":[495,4],"end":[553,5]},"visibility":"public","docs":"Run the compiler to test if it accepts the given flag.\n\nFor a convenience method for setting flags conditionally,\nsee `flag_if_supported()`.\n\nIt may return error if it's unable to run the compiler with a test file\n(e.g. the compiler is missing or a write to the `out_dir` failed).\n\nNote: Once computed, the result of this call is stored in the\n`known_flag_support` field. If `is_flag_supported(flag)`\nis called again, the result will be read from the hash table.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41709:231","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}},{"type":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:453"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:394:133":{"id":"0:394:133","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[156,0],"end":[161,1]},"visibility":"public","docs":"Represents an internal error that occurred, with an explanation.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2793:252-0:394:133","a:2:2833:3857-0:394:133","a:2:8606:4091-0:394:133","a:2:2776:242-0:394:133","a:2:8607:4090-0:394:133","b:2:2264-0:394:133","b:2:2571-0:394:133","b:2:2261-0:394:133","b:2:2567-0:394:133","b:2:2577-0:394:133","b:2:3412-0:394:133","b:2:2582-0:394:133","b:5:5790-0:394:133","b:5:680-0:394:133","0:399","0:61","0:63","0:65","0:397"]}}},"2:12421:27011":{"id":"2:12421:27011","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:1960":{"id":"0:90:1960","crate_id":0,"name":"asm_flag","span":{"filename":"src/lib.rs","begin":[460,4],"end":[463,5]},"visibility":"public","docs":"Add a flag that will only be used with assembly files.\n\nThe flag will be applied to input files with either a `.s` or\n`.asm` extension (case insensitive).\n\n# Example\n\n```no_run\ncc::Build::new()\n    .asm_flag(\"-Wa,-defsym,abc=1\")\n    .file(\"src/foo.S\")  // The asm flag will be applied here\n    .file(\"src/bar.c\")  // The asm flag will not be applied here\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12528:28188":{"id":"2:12528:28188","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:34285":{"id":"5:5517:34285","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3334","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:3334","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2577-0:333:1806":{"id":"b:2:2577-0:333:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2547:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2580:133","2:2581:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:81:1936":{"id":"0:81:1936","crate_id":0,"name":"includes","span":{"filename":"src/lib.rs","begin":[381,4],"end":[390,5]},"visibility":"public","docs":"Add multiple directories to the `-I` include path.\n\n# Example\n\n```no_run\n# use std::path::Path;\n# let condition = true;\n#\nlet mut extra_dir = None;\nif condition {\n    extra_dir = Some(Path::new(\"/path/to\"));\n}\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .includes(extra_dir)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dirs",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:7480:160","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12450:2695":{"id":"2:12450:2695","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41566:196","prim@char":"1:12067:449","self::pattern":"2:12106:9966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:9961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:784":{"id":"0:118:784","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[920,4],"end":[923,5]},"visibility":"public","docs":"Configures the host assumed by this configuration.\n\nThis option is automatically scraped from the `HOST` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .host(\"arm-linux-gnueabihf\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["host",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2577-0:401:1865":{"id":"b:2:2577-0:401:1865","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2547:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2580:133","2:2581:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:119:1822":{"id":"0:119:1822","crate_id":0,"name":"opt_level","span":{"filename":"src/lib.rs","begin":[929,4],"end":[932,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"primitive":"u32"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2571-0:394:133":{"id":"b:2:2571-0:394:133","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2573:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2585:133":{"id":"2:2585:133","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31991:3790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:95:1830":{"id":"0:95:1830","crate_id":0,"name":"shared_flag","span":{"filename":"src/lib.rs","begin":[613,4],"end":[616,5]},"visibility":"public","docs":"Set the `-shared` flag.\n\nWhen enabled, the compiler will produce a shared object which can\nthen be linked with other objects to form an executable.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["shared_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12417:1982":{"id":"2:12417:1982","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2573:743":{"id":"2:2573:743","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:332:453":{"id":"0:332:453","crate_id":0,"name":"clone","span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[293,0],"end":[3407,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:1001","0:79:816","0:81:1936","0:83:1941","0:86:1945","0:88:1949","0:89:1953","0:90:1960","0:92:1978","0:93:2009","0:94:2021","0:95:1830","0:96:1831","0:97:1814","0:98:708","0:100:1815","0:102:1816","0:103:1819","0:104:1820","0:105:1497","0:106:1832","0:107:1778","0:108:1833","0:109:1817","0:113:1818","0:117:1531","0:118:784","0:119:1822","0:120:2136","0:121:570","0:122:1823","0:123:1821","0:125:473","0:127:1824","0:129:1825","0:131:1826","0:132:2168","0:133:1107","0:134:1828","0:135:1836","0:136:1829","0:140:2192","0:149:2290","0:153:2375","0:155:2384","0:156:2250","0:157:1987","0:207:2733","0:208:2734","0:211:2743","0:212:2744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12425:33613":{"id":"2:12425:33613","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12073:1505","str::slice_mut_unchecked":"2:12426:33614","crate::ops::Index":"2:3073:9880"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2582-0:394:133":{"id":"b:2:2582-0:394:133","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2585:133","2:2586:1587"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12504:2697":{"id":"2:12504:2697","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12067:449","self::pattern":"2:12106:9966"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12407:33609":{"id":"2:12407:33609","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:1820":{"id":"0:104:1820","crate_id":0,"name":"cudart","span":{"filename":"src/lib.rs","begin":[706,4],"end":[711,5]},"visibility":"public","docs":"Link CUDA run-time.\n\nThis option mimics the `--cudart` NVCC command-line option. Just like\nthe original it accepts `{none|shared|static}`, with default being\n`static`. The method has to be invoked after `.cuda(true)`, or not\nat all, if the default is right for the project.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cudart",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2793:252-0:333:1806":{"id":"a:2:2793:252-0:333:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:324":{"id":"0:324","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2786:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12406:2003":{"id":"2:12406:2003","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2021":{"id":"0:94:2021","crate_id":0,"name":"try_flags_from_environment","span":{"filename":"src/lib.rs","begin":[594,4],"end":[598,5]},"visibility":"public","docs":"Add flags from the specified environment variable.\n\nNormally the `cc` crate will consult with the standard set of environment\nvariables (such as `CFLAGS` and `CXXFLAGS`) to construct the compiler invocation. Use of\nthis method provides additional levers for the end user to use when configuring the build\nprocess.\n\nJust like the standard variables, this method will search for an environment variable with\nappropriate target prefixes, when appropriate.\n\n# Examples\n\nThis method is particularly beneficial in introducing the ability to specify crate-specific\nflags.\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .try_flags_from_environment(concat!(env!(\"CARGO_PKG_NAME\"), \"_CFLAGS\"))\n    .expect(\"the environment variable must be specified and UTF-8\")\n    .compile(\"foo\");\n```\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["environ_key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41709:231","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:331":{"id":"0:331","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:332:453"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:311:3278":{"id":"0:311:3278","crate_id":0,"name":"VsVers","span":{"filename":"src/windows_registry.rs","begin":[84,0],"end":[95,1]},"visibility":"public","docs":"A version of Visual Studio","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:312:3280","0:314:3282","0:316:3284","0:318:3286","0:320:3288"],"impls":["a:2:2793:252-0:311:3278","a:2:2833:3857-0:311:3278","a:2:8606:4091-0:311:3278","a:2:2776:242-0:311:3278","a:2:8607:4090-0:311:3278","b:2:2264-0:311:3278","b:2:2571-0:311:3278","b:2:2261-0:311:3278","b:2:2567-0:311:3278","b:2:2577-0:311:3278","b:2:3412-0:311:3278","b:2:2582-0:311:3278","b:5:680-0:311:3278","0:327","0:328","0:322","0:331","0:324","0:330","0:325"]}}},"2:12404":{"id":"2:12404","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12405:871","2:12406:2003","2:12407:33609","2:12408:33610","2:12410:33611","2:12413:2217","2:12414:33612","2:12415:341","2:12416:340","2:12417:1982","2:12419:27010","2:12421:27011","2:12423:27012","2:12425:33613","2:12426:33614","2:12427:2694","2:12428:27034","2:12429:2983","2:12430:14270","2:12431:9729","2:12432:2720","2:12433:2950","2:12434:9723","2:12435:33615","2:12436:31882","2:12437:1992","2:12440:2199","2:12443:2200","2:12446:2231","2:12450:2695","2:12454:2546","2:12457:27042","2:12460:27044","2:12463:33616","2:12466:33617","2:12469:27046","2:12472:27048","2:12475:27050","2:12478:27051","2:12481:3607","2:12484:33618","2:12487:33619","2:12490:33620","2:12493:2962","2:12495:33621","2:12497:33622","2:12499:33623","2:12500:33624","2:12501:33625","2:12504:2697","2:12507:3073","2:12510:2768","2:12513:2772","2:12516:3493","2:12519:33626","2:12522:2354","2:12524:28183","2:12525:28184","2:12526:28186","2:12527:28187","2:12528:28188","2:12529:33627","2:12531:15336","2:12532:33628"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12443:2200":{"id":"2:12443:2200","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12067:449","self::pattern":"2:12106:9966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:9961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:412":{"id":"0:412","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[193,16],"end":[193,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:413:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2833:3857-0:311:3278":{"id":"a:2:2833:3857-0:311:3278","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2833:3857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12428:27034":{"id":"2:12428:27034","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12427:2694"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:1826":{"id":"0:131:1826","crate_id":0,"name":"cargo_metadata","span":{"filename":"src/lib.rs","begin":[1015,4],"end":[1018,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.\n\nThe emitted metadata is:\n\n - `rustc-link-lib=static=`*compiled lib*\n - `rustc-link-search=native=`*target folder*\n - When target is MSVC, the ATL-MFC libs are added via `rustc-link-search=native=`\n - When C++ is enabled, the C++ stdlib is added via `rustc-link-lib`\n - If `emit_rerun_if_env_changed` is not `false`, `rerun-if-env-changed=`*env*\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_metadata",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2570:1854":{"id":"2:2570:1854","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2544:138"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:34288":{"id":"5:5533:34288","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:3334","`String`":"5:7487:248"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3334","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:717":{"id":"0:64:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[179,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12469:27046":{"id":"2:12469:27046","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12067:449","self::pattern":"2:12106:9966","str::rsplitn":"2:12472:27048"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43630:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2266:26355":{"id":"2:2266:26355","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12484:33618":{"id":"2:12484:33618","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12106:9966","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:449","str::matches":"2:12481:3607"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43748:9985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:9961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:318:3286":{"id":"0:318:3286","crate_id":0,"name":"Vs16","span":{"filename":"src/windows_registry.rs","begin":[92,4],"end":[92,8]},"visibility":"default","docs":"Visual Studio 16 (2019)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2582-0:401:1865":{"id":"b:2:2582-0:401:1865","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2585:133","2:2586:1587"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:58:3292":{"id":"0:58:3292","crate_id":0,"name":"find_vs_version","span":{"filename":"src/windows_registry.rs","begin":[102,0],"end":[104,1]},"visibility":"public","docs":"Find the most recent installed version of Visual Studio\n\nThis is used by the cmake crate to figure out the correct\ngenerator.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41709:231","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"String","id":"5:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2261-0:401:1865":{"id":"b:2:2261-0:401:1865","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:3856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:1780"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3412-0:401:1865":{"id":"b:2:3412-0:401:1865","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:3856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3414:1602"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:680-0:333:1806":{"id":"b:5:680-0:333:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2932","5:683:2005","5:684:9578"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5536:28332":{"id":"5:5536:28332","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12528:28188"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2577-0:394:133":{"id":"b:2:2577-0:394:133","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2547:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2580:133","2:2581:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8607:4090-0:394:133":{"id":"a:2:8607:4090-0:394:133","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8607:4090","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:400:717":{"id":"0:400:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[155,16],"end":[155,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:1833":{"id":"0:108:1833","crate_id":0,"name":"extra_warnings","span":{"filename":"src/lib.rs","begin":[807,4],"end":[810,5]},"visibility":"public","docs":"Set extra warnings flags.\n\nAdds some flags:\n- nothing for MSVC.\n- \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\n// Disables -Wextra, -Wall remains enabled:\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .extra_warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,16],"end":[94,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:376:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:272:2987":{"id":"0:272:2987","crate_id":0,"name":"is_like_clang","span":{"filename":"src/lib.rs","begin":[3620,4],"end":[3622,5]},"visibility":"public","docs":"Whether the tool is Clang-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2776:242-0:401:1865":{"id":"a:2:2776:242-0:401:1865","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:398:453":{"id":"0:398:453","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[155,9],"end":[155,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3409,0],"end":[3413,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:253:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:680-0:394:133":{"id":"b:5:680-0:394:133","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2932","5:683:2005","5:684:9578"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12510:2768":{"id":"2:12510:2768","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12067:449","self::pattern":"2:12106:9966"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:9961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:682:2932":{"id":"5:682:2932","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:156:2250":{"id":"0:156:2250","crate_id":0,"name":"get_compiler","span":{"filename":"src/lib.rs","begin":[1624,4],"end":[1629,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis function will return a `Tool` which represents the culmination\nof this configuration at a snapshot in time. The returned compiler can\nbe inspected (e.g. the path, arguments, environment) to forward along to\nother tools, or the `to_command` method can be used to invoke the\ncompiler itself.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3412-0:394:133":{"id":"b:2:3412-0:394:133","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:3856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3414:1602"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2263:1780":{"id":"2:2263:1780","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:1823":{"id":"0:122:1823","crate_id":0,"name":"force_frame_pointer","span":{"filename":"src/lib.rs","begin":[959,4],"end":[962,5]},"visibility":"public","docs":"Configures whether the compiler will emit instructions to store\nframe pointers during codegen.\n\nThis option is automatically enabled when debug information is emitted.\nOtherwise the target platform compiler's default will be used.\nYou can use this option to force a specific setting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["force",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2582-0:333:1806":{"id":"b:2:2582-0:333:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2585:133","2:2586:1587"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3415,0],"end":[3631,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:1990","0:266:1104","0:267:334","0:268:656","0:269:2769","0:270:3010","0:271:2986","0:272:2987","0:273:2984"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:316:3284":{"id":"0:316:3284","crate_id":0,"name":"Vs15","span":{"filename":"src/windows_registry.rs","begin":[90,4],"end":[90,8]},"visibility":"default","docs":"Visual Studio 15 (2017)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:2793:252-0:394:133":{"id":"a:2:2793:252-0:394:133","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12472:27048":{"id":"2:12472:27048","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12067:449","str::splitn":"2:12469:27046","self::pattern":"2:12106:9966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43648:9987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:9961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12431:9729":{"id":"2:12431:9729","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43512:3730","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:816":{"id":"0:79:816","crate_id":0,"name":"include","span":{"filename":"src/lib.rs","begin":[358,4],"end":[361,5]},"visibility":"public","docs":"Add a directory to the `-I` or include path for headers\n\n# Example\n\n```no_run\nuse std::path::Path;\n\nlet library_path = Path::new(\"/path/to/library\");\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .include(library_path)\n    .include(\"src\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12432:2720":{"id":"2:12432:2720","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12433:2950"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43800:9970","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2793:252-0:401:1865":{"id":"a:2:2793:252-0:401:1865","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:100:1815":{"id":"0:100:1815","crate_id":0,"name":"files","span":{"filename":"src/lib.rs","begin":[655,4],"end":[664,5]},"visibility":"public","docs":"Add files which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:7480:160","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2264-0:333:1806":{"id":"b:2:2264-0:333:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:3856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2266:26355"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2261-0:311:3278":{"id":"b:2:2261-0:311:3278","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:3856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:1780"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:55:2231":{"id":"0:55:2231","crate_id":0,"name":"find","span":{"filename":"src/windows_registry.rs","begin":[35,0],"end":[37,1]},"visibility":"public","docs":"Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.\n\nThe `target` argument is the target that the tool should work for (e.g.\ncompile or link for) and the `tool` argument is the tool to find (e.g.\n`cl.exe` or `link.exe`).\n\nThis function will return `None` if the tool could not be found, or it will\nreturn `Some(cmd)` which represents a command that's ready to execute the\ntool with the appropriate environment variables set.\n\nNote that this function always returns `None` for non-MSVC targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::process::Command","id":"1:5474:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320:3288":{"id":"0:320:3288","crate_id":0,"name":"Vs17","span":{"filename":"src/windows_registry.rs","begin":[94,4],"end":[94,8]},"visibility":"default","docs":"Visual Studio 17 (2022)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:105:1497":{"id":"0:105:1497","crate_id":0,"name":"std","span":{"filename":"src/lib.rs","begin":[739,4],"end":[742,5]},"visibility":"public","docs":"Specify the C or C++ language standard version.\n\nThese values are common to modern versions of GCC, Clang and MSVC:\n- `c11` for ISO/IEC 9899:2011\n- `c17` for ISO/IEC 9899:2018\n- `c++14` for ISO/IEC 14882:2014\n- `c++17` for ISO/IEC 14882:2017\n- `c++20` for ISO/IEC 14882:2020\n\nOther values have less broad support, e.g. MSVC does not support `c++11`\n(`c++14` is the minimum), `c89` (omit the flag instead) or `c99`.\n\nFor compiling C++ code, you should also set `.cpp(true)`.\n\nThe default is that no standard flag is passed to the compiler, so the\nlanguage version will be the compiler's default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/modern.cpp\")\n    .cpp(true)\n    .std(\"c++17\")\n    .compile(\"modern\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["std",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2571-0:311:3278":{"id":"b:2:2571-0:311:3278","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2573:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:78:1001":{"id":"0:78:1001","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[299,4],"end":[341,5]},"visibility":"public","docs":"Construct a new instance of a blank set of configuration.\n\nThis builder is finished with the [`compile`] function.\n\n[`compile`]: struct.Build.html#method.compile","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:1987":{"id":"0:157:1987","crate_id":0,"name":"try_get_compiler","span":{"filename":"src/lib.rs","begin":[1634,4],"end":[1714,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis will return a result instead of panicing; see get_compiler() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41709:231","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8607:4090-0:333:1806":{"id":"a:2:8607:4090-0:333:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8607:4090","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:117:1531":{"id":"0:117:1531","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[902,4],"end":[905,5]},"visibility":"public","docs":"Configures the target this configuration will be compiling for.\n\nThis option is automatically scraped from the `TARGET` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .target(\"aarch64-linux-android\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12429:2983":{"id":"2:12429:2983","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12067:449"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43496:9973","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:9578":{"id":"5:684:9578","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12519:33626":{"id":"2:12519:33626","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12067:449","self::pattern":"2:12106:9966"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:9961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8607:4090-0:401:1865":{"id":"a:2:8607:4090-0:401:1865","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8607:4090","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:98:708":{"id":"0:98:708","crate_id":0,"name":"file","span":{"filename":"src/lib.rs","begin":[649,4],"end":[652,5]},"visibility":"public","docs":"Add a file which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2264-0:401:1865":{"id":"b:2:2264-0:401:1865","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:3856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2266:26355"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[155,16],"end":[155,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:400:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2652":{"id":"0:0:2652","crate_id":0,"name":"cc","span":{"filename":"src/lib.rs","begin":[1,0],"end":[4024,1]},"visibility":"public","docs":"A library for build scripts to compile custom C code\n\nThis library is intended to be used as a `build-dependencies` entry in\n`Cargo.toml`:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n```\n\nThe purpose of this crate is to provide the utility functions necessary to\ncompile C code into a static archive which is then linked into a Rust crate.\nConfiguration is available through the `Build` struct.\n\nThis crate will automatically detect situations such as cross compilation or\nother environment variables set by Cargo and will build code appropriately.\n\nThe crate is not limited to C code, it can accept any source code that can\nbe passed to a C or C++ compiler. As such, assembly files with extensions\n`.s` (gcc/clang) and `.asm` (MSVC) can also be compiled.\n\n[`Build`]: struct.Build.html\n\n# Parallelism\n\nTo parallelize computation, enable the `parallel` feature for the crate.\n\n```toml\n[build-dependencies]\ncc = { version = \"1.0\", features = [\"parallel\"] }\n```\nTo specify the max number of concurrent compilation jobs, set the `NUM_JOBS`\nenvironment variable to the desired amount.\n\nCargo will also set this environment variable when executed with the `-jN` flag.\n\n# Examples\n\nUse the `Build` struct to compile `src/foo.c`:\n\n```no_run\nfn main() {\n    cc::Build::new()\n        .file(\"src/foo.c\")\n        .define(\"FOO\", Some(\"bar\"))\n        .include(\"src\")\n        .compile(\"foo\");\n}\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/cc/1.0\")]","#![allow(deprecated)]","#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:52:1801","0:333:1806","0:394:133","0:401:1865"],"is_stripped":false}}},"0:333:1806":{"id":"0:333:1806","crate_id":0,"name":"Build","span":{"filename":"src/lib.rs","begin":[95,0],"end":[135,1]},"visibility":"public","docs":"A builder for compilation of a native library.\n\nA `Build` is the main type of the `cc` crate and is used to control all the\nvarious configuration options and such of a compile. You'll find more\ndocumentation on each method itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:77","a:2:2793:252-0:333:1806","a:2:2833:3857-0:333:1806","a:2:8606:4091-0:333:1806","a:2:2776:242-0:333:1806","a:2:8607:4090-0:333:1806","b:2:2264-0:333:1806","b:2:2571-0:333:1806","b:2:2261-0:333:1806","b:2:2567-0:333:1806","b:2:2577-0:333:1806","b:2:3412-0:333:1806","b:2:2582-0:333:1806","b:5:680-0:333:1806","0:373","0:252","0:375"]}}},"2:2580:133":{"id":"2:2580:133","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12478:27051":{"id":"2:12478:27051","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:9961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12529:33627":{"id":"2:12529:33627","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4573:33627"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43825:9977","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323:717":{"id":"0:323:717","crate_id":0,"name":"fmt","span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:34287":{"id":"5:5532:34287","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7487:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8607:4090-0:311:3278":{"id":"a:2:8607:4090-0:311:3278","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8607:4090","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12531:15336":{"id":"2:12531:15336","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4574:15336"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43834:9978","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2261-0:333:1806":{"id":"b:2:2261-0:333:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:3856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:1780"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2567-0:394:133":{"id":"b:2:2567-0:394:133","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2570:1854"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:86:1945":{"id":"0:86:1945","crate_id":0,"name":"object","span":{"filename":"src/lib.rs","begin":[410,4],"end":[413,5]},"visibility":"public","docs":"Add an arbitrary object file to link in","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["obj",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:311:3278":{"id":"b:5:680-0:311:3278","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2932","5:683:2005","5:684:9578"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:113:1818":{"id":"0:113:1818","crate_id":0,"name":"cpp_set_stdlib","span":{"filename":"src/lib.rs","begin":[879,4],"end":[887,5]},"visibility":"public","docs":"Force the C++ compiler to use the specified standard library.\n\nSetting this option will automatically set `cpp_link_stdlib` to the same\nvalue.\n\nThe default value of this option is always `None`.\n\nThis option has no effect when compiling for a Visual Studio based\ntarget.\n\nThis option sets the `-stdlib` flag, which is only supported by some\ncompilers (clang, icc) but not by others (gcc). The library will not\ndetect which compiler is used, as such it is the responsibility of the\ncaller to ensure that this option is only used in conjunction with a\ncompiler which supports the `-stdlib` flag.\n\nA value of `None` indicates that no specific C++ standard library should\nbe used, otherwise `-stdlib` is added to the compile invocation.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .cpp_set_stdlib(\"c++\")\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_set_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8606:4091-0:394:133":{"id":"a:2:8606:4091-0:394:133","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8606:4091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12437:1992":{"id":"2:12437:1992","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12067:449","self::pattern":"2:12106:9966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:1828":{"id":"0:134:1828","crate_id":0,"name":"use_plt","span":{"filename":"src/lib.rs","begin":[1049,4],"end":[1052,5]},"visibility":"public","docs":"Configures whether the Procedure Linkage Table is used for indirect\ncalls into shared libraries.\n\nThe PLT is used to provide features like lazy binding, but introduces\na small performance loss due to extra pointer indirection. Setting\n`use_plt` to `false` can provide a small performance increase.\n\nNote that skipping the PLT requires a recent version of GCC/Clang.\n\nThis only applies to ELF targets. It has no effect on other platforms.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["use_plt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2776:242-0:333:1806":{"id":"a:2:2776:242-0:333:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:212:2744":{"id":"0:212:2744","crate_id":0,"name":"try_get_ranlib","span":{"filename":"src/lib.rs","begin":[2906,4],"end":[2912,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nThis will return a result instead of panicing;\nsee [`get_ranlib()`] for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41709:231","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5474:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2567-0:311:3278":{"id":"b:2:2567-0:311:3278","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2570:1854"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:271:2986":{"id":"0:271:2986","crate_id":0,"name":"is_like_gnu","span":{"filename":"src/lib.rs","begin":[3615,4],"end":[3617,5]},"visibility":"public","docs":"Whether the tool is GNU Compiler Collection-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12410:33611":{"id":"2:12410:33611","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12408:33610"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:401:1865":{"id":"b:5:680-0:401:1865","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2932","5:683:2005","5:684:9578"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2581:1589":{"id":"2:2581:1589","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:1801":{"id":"0:52:1801","crate_id":0,"name":"windows_registry","span":{"filename":"src/windows_registry.rs","begin":[11,0],"end":[896,1]},"visibility":"public","docs":"A helper module to probe the Windows Registry when looking for\nwindows-specific tools.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:55:2231","0:57:2656","0:311:3278","0:58:3292"],"is_stripped":false}}},"0:123:1821":{"id":"0:123:1821","crate_id":0,"name":"out_dir","span":{"filename":"src/lib.rs","begin":[969,4],"end":[972,5]},"visibility":"public","docs":"Configures the output directory where all object files and static\nlibraries will be located.\n\nThis option is automatically scraped from the `OUT_DIR` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["out_dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2535:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5268:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2776:242-0:394:133":{"id":"a:2:2776:242-0:394:133","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:120:2136":{"id":"0:120:2136","crate_id":0,"name":"opt_level_str","span":{"filename":"src/lib.rs","begin":[938,4],"end":[941,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:264:1990":{"id":"0:264:1990","crate_id":0,"name":"to_command","span":{"filename":"src/lib.rs","begin":[3534,4],"end":[3556,5]},"visibility":"public","docs":"Converts this compiler into a `Command` that's ready to be run.\n\nThis is useful for when the compiler needs to be executed and the\ncommand returned will already have the initial arguments and environment\nvariables configured.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5474:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12487:33619":{"id":"2:12487:33619","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12106:9966","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:449","str::rmatch_indices":"2:12490:33620"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43676:9982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2577-0:311:3278":{"id":"b:2:2577-0:311:3278","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2547:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2580:133","2:2581:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:103:1819":{"id":"0:103:1819","crate_id":0,"name":"cuda","span":{"filename":"src/lib.rs","begin":[691,4],"end":[698,5]},"visibility":"public","docs":"Set CUDA C++ support.\n\nEnabling CUDA will invoke the CUDA compiler, NVCC. While NVCC accepts\nthe most common compiler flags, e.g. `-std=c++17`, some project-specific\nflags might have to be prefixed with \"-Xcompiler\" flag, for example as\n`.flag(\"-Xcompiler\").flag(\"-fpermissive\")`. See the documentation for\n`nvcc`, the CUDA compiler driver, at https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/\nfor more information.\n\nIf enabled, this also implicitly enables C++ support.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cuda",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12440:2199":{"id":"2:12440:2199","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12067:449","self::pattern":"2:12106:9966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:34286":{"id":"5:5521:34286","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7487:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:9960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[193,9],"end":[193,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:411:453"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2793:252-0:311:3278":{"id":"a:2:2793:252-0:311:3278","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:211:2743":{"id":"0:211:2743","crate_id":0,"name":"get_ranlib","span":{"filename":"src/lib.rs","begin":[2895,4],"end":[2900,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5507:9953"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5474:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149:2290":{"id":"0:149:2290","crate_id":0,"name":"compile","span":{"filename":"src/lib.rs","begin":[1288,4],"end":[1292,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\n# Library name\n\nThe `output` string argument determines the file name for the compiled\nlibrary. The Rust compiler will create an assembly named \"lib\"+output+\".a\".\nMSVC will create a file named output+\".lib\".\n\nThe choice of `output` is close to arbitrary, but:\n\n- must be nonempty,\n- must not contain a path separator (`/`),\n- must be unique across all `compile` invocations made by the same build\n  script.\n\nIf your build script compiles a single source file, the base name of\nthat source file would usually be reasonable:\n\n```no_run\ncc::Build::new().file(\"blobstore.c\").compile(\"blobstore\");\n```\n\nCompiling multiple source files, some people use their crate's name, or\ntheir crate's name + \"-cc\".\n\nOtherwise, please use your imagination.\n\nFor backwards compatibility, if `output` starts with \"lib\" *and* ends\nwith \".a\", a second \"lib\" prefix and \".a\" suffix do not get added on,\nbut this usage is deprecated; please omit `lib` and `.a` in the argument\nthat you pass.\n\n# Panics\n\nPanics if `output` is not formatted correctly or if one of the underlying\ncompiler commands fails. It can also panic if it fails reading file names\nor creating directories.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12430:14270":{"id":"2:12430:14270","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12067:449"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43502:9972","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:1831":{"id":"0:96:1831","crate_id":0,"name":"static_flag","span":{"filename":"src/lib.rs","begin":[632,4],"end":[635,5]},"visibility":"public","docs":"Set the `-static` flag.\n\nWhen enabled on systems that support dynamic linking, this prevents\nlinking with the shared libraries.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .static_flag(true)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:10340:12352":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:4826:3854":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:45564:14309":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:40544:3729":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:7624:9522":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"20:4520:7901":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:12751:209":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:10366:14583":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:22738:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:853:9762":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:11407:22363":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:13298:12737":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"20:1509:5527":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:5121:13232":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:47958:14411":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:6687:13369":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"20:5402:8518":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:12106:9966":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:3201:29433":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:4195:15380":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:9531:116":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:2171:20681":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:3244:258":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:22295:31803":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"20:6382:8957":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:7310:9333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11886:12492":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:43502:9972":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"20:4705:7923":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:507:4643":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:4641:13218":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:4806:13222":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:7953:3740":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"20:0:876":{"crate_id":20,"path":["libc"],"kind":"module"},"16:5905:13268":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:2850:9864":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4922:13818":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:6981:11280":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:4066:15370":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:10929:12404":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:119:4314":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:4461:7873":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:3171:216":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:727:149":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"20:5509:8527":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:8337:14799":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:4745:7901":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:11048:14614":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"20:4628:7915":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:6171:211":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:14076:12988":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:46779:14357":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:4655:7893":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13981:12959":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:12776:14748":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:10860:3690":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:8895:14804":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:41543:14227":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"20:4509:7900":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:4770:3223":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:5814:8519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:45716:14315":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:7434:31824":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:3600:3402":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6425:13329":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:10012:12345":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:41488:14225":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:3514:1788":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:5994:20968":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:7450:3641":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:40290:14181":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:2394:3443":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:3023:3732":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:5443:3782":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:22936:184":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:2644:13165":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"20:4226:7872":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:45835:14320":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:22771:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:42596:13521":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:574:4651":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:9536:125":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:43313:13910":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"20:5617:8534":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:10292:12345":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:12172:12515":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:10627:9988":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"0:312:3280":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs12"],"kind":"variant"},"2:22166:13923":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:2548:13161":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"20:1641:5540":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:4978:7920":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:8440:3768":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:4288:14736":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:685:115":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:3330:9766":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:2644:3741":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:45734:14316":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:2384:3678":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:4436:3837":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:10440:14590":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:40365:14190":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:3532:3692":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:13838:12922":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:9998:12300":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:12711:12627":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:11244:12466":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:3797:13205":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:2574:13162":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:6633:8951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"11:703:9768":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:364:3844":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:43825:9977":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:44090:14276":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:40262:14177":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"20:591:4652":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"17:14460:13107":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:4663:12068":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:10036:12331":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:4339:14781":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:4411:14782":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:5435:13235":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"14:202:20586":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"3:234:231":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:43496:9973":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:12698:12625":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:2551:261":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:8181:13198":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:12016:14826":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:21458:3694":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:8318:14428":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:9564:14559":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:2776:242":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:2876:3628":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:755:12216":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:3073:9880":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:12208:12520":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:11951:12496":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:10800:14459":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:8851:3787":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:2450:13157":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:5403:12310":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:10186:12342":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:12658:12619":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:3010:122":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"15:327:15220":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:30203:10015":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:9755:152":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:10726:14608":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:10278:14582":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12778:12636":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:14126:12999":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:45965:14327":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:21707:15431":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:6171:8572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:7587:10021":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:6206:13905":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"20:6441:8961":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:40313:14185":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"18:719:12208":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:2150:22420":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"14:221:13640":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:7907:3685":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:1568:9766":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:14118:12997":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:2943:9878":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:3289:9890":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:8716:9960":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13259:12727":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:11295:12432":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"20:1516:5528":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:1578:5535":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:5634:13237":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:12154:12514":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"11:2461:13700":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:7406:29779":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"18:531:12183":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:6968:22300":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"20:6327:8954":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:9445:14557":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:9790:3704":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4721:7898":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:7582:13486":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:20903:32494":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:5661:13241":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"11:860:9773":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:5752:8472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"15:288:21387":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:10978:9822":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"9:486:21282":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:3915:13208":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:7443:20657":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:7518:126":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:4259:14780":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:6037:8536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"11:2303:14717":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:10548:9986":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"9:357:21298":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:14536:13123":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:1557:3772":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"20:7183:9522":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:46889:14360":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:2925:9874":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:47039:14361":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:3195:28682":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:918:9768":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:8794:22355":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:10193:11090":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:2472:13158":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:10097:14574":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:40243:14174":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:22837:185":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:10534:12360":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:9711:34987":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"20:5438:8522":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11788:12477":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"3:0:474":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:6663:5493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:638:14767":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"0:0:2652":{"crate_id":0,"path":["cc"],"kind":"module"},"5:1426:9762":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:10616:3834":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:39184:215":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:1473:9764":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:4074:9762":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:8227:3728":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:6640:4428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:10393:3731":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:10641:9987":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4900:13802":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:39106:9889":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:9505:134":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:5660:11318":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:2880:9868":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:22357:15362":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6844:13397":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:8607:4090":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"20:6448:8962":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:46163:14333":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:39978:14162":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:3032:13199":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:5322:13233":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:23416:241":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:2277:108":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:10196:244":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:21359:15426":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:13723:12900":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11389:14627":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"20:1523:5529":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:41352:15359":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:2618:121":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:32045:9584":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"20:1598:5537":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:8257:3727":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:11381:12443":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:1895:9744":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:9911:11295":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"20:1736:5550":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:46589:14354":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:9660:34983":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:44053:14275":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:5897:8525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:2190:1783":{"crate_id":1,"path":["std","fs"],"kind":"module"},"16:5798:13253":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:5509:3715":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:7025:20652":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:12066:998":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:21482:3694":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:12484:12595":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:1752:13895":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:47575:14396":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:6741:8955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:475:4638":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:9912:14565":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:1523:14720":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"11:2074:9776":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:9051:22341":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:2161:633":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:8713:22353":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:646:15338":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:5079:14783":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:43576:9990":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:2970:34583":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"14:31:14705":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:2939:9877":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:9390:134":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:8422:4083":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13611:12882":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:12086:12506":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:7538:13863":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:1718:5549":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:44245:14287":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:7375:3637":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:0:3517":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:42821:3708":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"13:0:3507":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:2894:10795":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:9487:231":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"20:5588:8531":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:30259:69":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:9752:14562":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"20:4634:7916":{"crate_id":20,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:43253:14759":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"11:389:11236":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:7566:14823":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:2406:13155":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:10850:124":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:3077:9881":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:45817:14319":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:5816:13257":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:42116:88":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:1760:1782":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"14:165:21368":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:2170:13871":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:1570:5534":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:7660:13490":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:13826:12919":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:9977:11297":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:1761:11092":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:1817:9814":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:43748:9985":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:596:4654":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:7670:3845":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"11:298:13689":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:1682:5544":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:41632:9762":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:44249:14288":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:6217:11291":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:11272:12430":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:4934:15392":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:4667:12072":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:1482:9767":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:4056:15369":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:40568:14198":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:43424:13915":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:21926:3694":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"20:6847:4595":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:6865:8962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"9:52:15223":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:4194:3715":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:6458:3811":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:6703:5469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12513:12599":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:9051:14808":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:6893:13403":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"11:992:9775":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:42837:3707":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:40087:3645":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:47859:14404":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:8205:22306":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:7487:248":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11872:12491":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:1257:9775":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:2855:9861":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:42621:69":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:2178:14550":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:11086:14620":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8588:3773":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:8839:203":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:4849:3849":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"11:2058:9775":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:8134:13552":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:6580:4557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:4441:7871":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:3142:98":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:13244:12723":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"0:401:1865":{"crate_id":0,"path":["cc","Tool"],"kind":"struct"},"1:5336:125":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:20875:32279":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:10285:3792":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:6622:8950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:6279:13315":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:9242:12316":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:884:9764":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:1764:656":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:11405:14789":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:4653:15368":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:14090:12990":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:12702:159":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:1672:1154":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:11187:14745":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"20:644:4682":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:10383:14585":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:6560:11231":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:13693:12894":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"20:4216:7871":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:7299:13887":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:1374:97":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"20:4734:7927":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:1931:702":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:2223:3400":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:11006:28979":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:43076:14247":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:7436:13281":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:5612:13183":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:4519:15384":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:4829:7912":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:43630:9988":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:1521:5529":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:39347:14029":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:6485:13180":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"20:5745:7772":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:9058:14809":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:43800:9970":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"11:666:3772":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:4859:7916":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:2933:21433":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:1429:151":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:3523:29486":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:6415:13328":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:8608:4089":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:3255:9885":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"11:829:9771":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:3234:9883":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:41958:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"20:506:4641":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"17:13162:12714":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:4433:7870":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:840:3772":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"20:4208:7870":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:7489:3862":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:5049:13852":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:1102:34879":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:5569:13899":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:20905:32492":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"20:518:4643":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"16:7128:14445":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:11572:14779":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:5588:13181":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"20:6333:8955":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:7828:13502":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:14434:13098":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:3232:13144":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:10903:14610":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:7694:3836":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:42316:3660":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:14156:13005":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:922:9769":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4540:7883":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:12120:9962":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:12078:691":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:14163:13007":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"20:5472:8501":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:9010:14805":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:1514:215":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:4068:20554":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:9277:12317":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:5423:3781":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:4164:3715":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:43544:9986":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:7722:13186":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:9488:1788":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:10359:109":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:12576:12610":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:3594:9762":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:21357:3694":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:7689:2309":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"20:4236:7873":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:46385:14340":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:7249:9765":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:40129:3646":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:5864:8500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:2330:130":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"20:4574:7908":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:42829:14240":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:3581:3772":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:1442:9533":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"20:1548:5532":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:5017:13229":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:9312:9818":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"0:316:3284":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs15"],"kind":"variant"},"1:3125:3755":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:6030:8535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:47387:14394":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:41692:9757":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:11710:12434":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:41709:231":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"11:817:9767":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"0:55:2231":{"crate_id":0,"path":["cc","windows_registry","find"],"kind":"function"},"0:320:3288":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs17"],"kind":"variant"},"17:12452:12588":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:22324:13946":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:10133:14816":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:4344:13210":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"20:6351:8956":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:40272:14178":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:6059:11984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:14316:13068":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"20:4336:7886":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:9086:12311":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:46543:14353":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:14013:12967":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"20:4095:7860":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:14308:13065":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:12225:12528":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:7544:13485":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:7520:8049":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"11:324:13692":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"11:1010:9776":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:4022:15368":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:44464:212":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:10139:22392":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:4352:11284":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:1411:3772":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"11:2368:9765":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:44277:14295":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:3698:15360":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:11991:12498":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"11:122:11232":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:8513:3770":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4631:7891":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:44265:14292":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"20:4249:7875":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:2461:13878":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:7283:9533":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:39326:9884":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:11000:12409":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:2788:113":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:9021:3829":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:5994:8531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12074:12505":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:6145:8571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:2596:13163":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"20:4108:7861":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:7532:8051":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"20:4722:7925":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"20:4323:7884":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"20:4484:7897":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"18:481:12176":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:9823:22373":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:39921:9978":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:3038:3858":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:1703:5547":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:5942:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"20:4712:7924":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"20:4622:7914":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:43405:13914":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:1585:13697":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:47973:14412":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:13113:12701":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:22:730":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:10420:12262":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:6974:31872":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:10672:14601":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:13758:12904":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:13739:12903":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:3568:177":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:5781:3808":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"14:0:3514":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:39208:217":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:40042:14166":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:13286:12730":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:46619:14355":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:10561:12362":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"14:7:14705":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:2784:4219":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"9:426:21285":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:10805:3684":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:2035:3742":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:5474:109":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:5851:8523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:7571:9766":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:40754:14200":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:4008:15366":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:47905:14408":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:7291:215":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"20:4642:7917":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:7102:22301":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"14:187:21375":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"11:483:149":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:7501:13891":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:1710:5548":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4425:7869":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"18:671:14542":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:40000:9979":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"20:1885:5689":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:9028:28793":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:44125:14281":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:7476:11268":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:47245:14393":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:3760:14777":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:12934:12677":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:6465:9765":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4320:7860":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:44269:14293":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:9455:34988":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:7360:34978":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:5808:8518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:2380:13154":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:12671:12377":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:10588:12364":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"20:5676:8539":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:12071:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:14478:13113":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:782:11245":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:6638:3820":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:563:4649":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"11:1092:14711":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10520:12359":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:10511:11329":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:11348:3794":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11761:12476":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"20:4330:7885":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:47497:14395":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12621:12615":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:42556:14231":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:5743:13247":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"12:0:3513":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:41760:9762":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"9:450:21283":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:6174:11308":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:12810:12640":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:3519:9765":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:41524:14226":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:47821:14401":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:2904:9869":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:0:530":{"crate_id":2,"path":["core"],"kind":"module"},"20:4243:7874":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:4853:7915":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:49859:15441":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:32027:14750":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:7269:34874":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:5135:3805":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:6318:13318":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"11:2487:13704":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"11:423:34959":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"20:5445:8523":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:7474:14692":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:2604:3733":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:7561:8054":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:12073:1505":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"20:7102:8049":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:41624:3772":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:11351:12439":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:13148:12713":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:5727:13246":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"10:44:13709":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:10776:11003":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:9233:14453":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:1596:5537":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:434:12269":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:7694:13195":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12876:12665":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:5013:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:5774:3807":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:43961:14271":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:11269:156":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"1:9141:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:41640:9533":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:3041:3859":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"13:226:13687":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:45854:14321":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:4799:7908":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:41465:31816":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:6624:3819":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:13890:12939":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6456:13332":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:7743:15341":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:12196:12519":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:123:4315":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:25818:271":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:4494:7878":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:8250:3731":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:10570:3746":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:44507:14302":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:2173:20682":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:6212:13904":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"18:96:26318":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:7555:8053":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:8978:22361":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:47894:14407":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:6352:13320":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:9201:14812":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:3315:3745":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:7544:8052":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:4690:7895":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:1826:183":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"11:1051:21362":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:22206:13931":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:14269:13050":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:21106:32067":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:40082:104":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:10698:14605":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:7287:9331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:44026:14274":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:11934:12494":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:6346:14668":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:12072:1473":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:542:4646":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:9184:14449":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13215:12720":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10112:14575":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:841:9772":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:12084:1611":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:10430:14589":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:6186:8573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:8953:22360":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"20:4567:7907":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:2526:13160":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:2670:13166":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:3655:3403":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:5844:8522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"20:5486:8524":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"11:731:9769":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:11261:12429":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:44158:9992":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:40802:14203":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:42661:75":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"20:1634:5539":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:149:11229":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:1514:5528":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:4451:7872":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:6017:22295":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:39250:219":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:40234:14172":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:42612:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:10227:14580":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12750:12632":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:3475:3691":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:6839:15422":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:8323:15382":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:8311:14427":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:12090:1667":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:40192:13913":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:1674:5543":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"20:5564:8529":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:48035:14414":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:9063:14810":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:7935:15347":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:43694:9983":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:1635:632":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:6726:8953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:527:4644":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:6499:13197":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"20:4670:7920":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:39333:14028":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:4548:7884":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:6222:14786":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:39228:220":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"20:5529:8528":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:1855:9766":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:504:14546":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:10468:12353":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:357:11234":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:44520:175":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:9546:211":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:21227:15433":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"20:5637:8537":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:2305:21432":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:3654:9533":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:2049:14721":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:42337:3669":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:2690:13881":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:10916:14611":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:1507:5527":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:9896:22375":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"18:574:12178":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"20:4534:7903":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:5892:8524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:501:4642":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"20:5686:8540":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12293:12548":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:6156:13308":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:6002:8532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:7613:14699":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10575:12363":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:7512:14731":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:12473:12592":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:41682:4088":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:21491:13917":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:22606:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:12531:12600":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:6663:11242":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:932:9771":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:2832:13173":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:22870:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:3234:3746":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12830:12641":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:12068:1627":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:6568:3814":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:8926:22359":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:4157:31565":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:8031:10797":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:580:4652":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:4416:9585":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:44261:14291":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10084:14573":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:11082:11331":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:5459:3783":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:7796:14750":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:40768:2295":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:41841:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"18:507:12178":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:12077:689":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:8294:133":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:3949:3715":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"18:521:26329":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:2361:199":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:7015:13420":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:4792:7907":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:20920:32490":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:11687:22366":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:7053:11322":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:6277:11318":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:5970:8529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:21313:15424":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:2498:3694":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:4400:7710":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:5982:8530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"11:1869:13696":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:10436:9969":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:8941:2319":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:14420:13096":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:2216:3670":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:11213:14296":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"5:3217:34875":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:10830:3688":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:10478:12354":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:40777:14202":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:4:1078":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:2744:13169":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11281:12431":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:2907:13176":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:39927:14157":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:1734:5550":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:13274:12434":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:11325:11333":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:13451:12759":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:3763:14778":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:7606:11324":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:12790:12637":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:10991:1792":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:11023:12410":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:6912:268":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:9106:14448":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:14083:12989":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:10616:12366":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:1672:11242":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"18:681:12200":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:11358:22488":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:1986:201":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:2914:9871":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"11:101:13688":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:6835:8960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:46284:14337":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:9207:12315":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:0:3516":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:39067:9892":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:6720:8952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:8239:13477":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:955:9774":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:43526:3731":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"11:1541:14713":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"20:4544:7904":{"crate_id":20,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:43676:9982":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:4719:13219":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:1546:5532":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"20:5458:8500":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:11250:14468":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"20:1539:5531":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:7897:3688":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:2788:13171":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"20:1684:5544":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:2888:9865":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:6696:13370":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"8:0:3509":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:4884:1064":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:10646:12448":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:7937:124":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"11:2260:9776":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"20:5624:8535":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:913:9767":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:7391:22302":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4753:7902":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:1011:11242":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"14:215:13638":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:12970:12682":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:7259:11253":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:41752:3772":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:11910:12493":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:3735:14721":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:11179:3787":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"20:5653:11984":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"20:4406:7891":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:5853:3817":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"0:57:2656":{"crate_id":0,"path":["cc","windows_registry","find_tool"],"kind":"function"},"20:4503:7899":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:2582:11298":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"20:6225:8951":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"20:1572:5534":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"20:494:4639":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:9223:30103":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:12184:12518":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:13632:12887":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:9972:14570":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4683:3848":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:46825:14358":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"20:5603:8533":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:32031:13477":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:2670:9749":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:9747:148":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:4208:15381":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:536:13135":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:4497:13213":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"9:330:13746":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:7976:32037":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"20:6295:5469":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:2872:9862":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:21816:32282":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:6243:14657":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:3401:3753":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:40374:14191":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:4943:13833":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"7:31:21270":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"20:1720:5549":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:9550:3667":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:7579:8056":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:39520:26992":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:4643:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:2931:9875":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:7920:135":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:11647:14478":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:11162:12412":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:4862:13224":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11124:14623":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:47868:14405":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:4406:7867":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"20:4681:7921":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:42868:14244":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:0:876":{"crate_id":6,"path":["libc"],"kind":"module"},"1:10869:28972":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:21463:15425":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:11342:14469":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:2284:21406":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10980:12345":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:4053:13209":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:44300:127":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"20:4315:7883":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:12111:9960":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:10135:14815":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:43648:9987":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:11652:14746":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"20:4660:7919":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"20:5631:8536":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"20:6180:5465":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:44499:14765":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:4497:15383":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:4417:13211":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:4772:3853":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:8389:3852":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:9488:34984":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:9650:12345":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:42639:133":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:11228:20576":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"20:7108:8050":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:5599:3785":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"20:4065:7857":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"20:6892:9333":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"0:311:3278":{"crate_id":0,"path":["cc","windows_registry","VsVers"],"kind":"enum"},"5:3238:13698":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"20:4367:7888":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:4348:269":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:5878:8501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:22279:31820":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:7782:13494":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"20:4169:7866":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:8345:14429":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:9328:3730":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:3539:1785":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:1781:9805":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:14134:13000":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:4774:13221":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"0:318:3286":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs16"],"kind":"variant"},"17:12098:12509":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:6385:180":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:22258:31814":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:14469:13111":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:6467:13333":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:3410:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:11661:12468":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:4529:7882":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:6325:225":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:30835:4214":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"20:6312:8952":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"20:4181:7867":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12543:12602":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:39168:218":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4333:7861":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10126:12335":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:3958:15364":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:6098:11313":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:47839:14402":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:2214:134":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:43910:20584":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:10878:28981":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:2909:9870":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:8686:22352":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:44138:9991":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:3994:15365":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:9790:34985":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:21241:20681":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"20:4269:7878":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:7669:3694":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:8572:3771":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:2892:9867":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:4731:15383":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:3232:14554":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12007:12499":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:6824:10027":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:4934:13827":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"20:4263:7877":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:6811:8958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:8909:14442":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:42876:14245":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"18:590:12189":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"20:6466:8963":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"20:6403:8958":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:10949:14613":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:3429:3715":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:21365:15428":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13897:12941":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:5528:1792":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:22044:13920":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:4309:7859":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:10962:12407":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:6545:13344":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:1549:3715":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"18:599:34991":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:43434:14764":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"20:580:4650":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"2:45872:14322":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:897:9765":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:10494:12356":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:2219:3671":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:11851:11339":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"20:6412:8959":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:10750:12371":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:7284:4087":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:40252:14175":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"15:394:21397":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:2897:9872":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:558:1793":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:7476:139":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"20:1712:5548":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:14522:13120":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:41777:200":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13135:12712":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"20:4689:7922":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:6883:8963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:40554:14197":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"11:1842:3772":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:13802:12917":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:2141:13869":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"0:52:1801":{"crate_id":0,"path":["cc","windows_registry"],"kind":"module"},"1:8274:15358":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:8195:13554":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:1044:9775":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:4045:106":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:4468:7874":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:7526:8050":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"20:1530:5530":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:1273:9777":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"11:2334:9762":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:7590:8057":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:12944:147":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:42323:3661":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:10685:14603":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4775:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:42584:114":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:555:4648":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:41649:4087":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:5696:22293":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:8895:22358":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:534:3830":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:1492:9768":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:62:4248":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:3261:9887":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:4078:15372":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:10586:14741":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:10628:12369":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:47920:14409":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:10573:3748":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:8833:3786":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:2962:13874":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:8237:3729":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:11098:14621":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:39294:3631":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"20:4465:7895":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:40404:14193":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:9223:15242":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:47996:14413":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6790:8957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:3565:14556":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:7463:3642":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:4805:7909":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:261:14544":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"18:491:12177":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:40008:9978":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:2830:4221":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:8865:3788":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:9607:14560":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:7439:20658":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"20:486:4638":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"16:4527:13214":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:9867:12326":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:4426:11263":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:895:3772":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"20:4444:7894":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"20:4348:7887":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:11654:14478":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:11971:12497":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:3964:15363":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:9945:12329":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:8281:13561":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"20:5739:8571":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:822:11248":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"18:582:4214":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:4986:13228":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:13228:12721":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:20890:32279":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:7792:22304":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:22150:13922":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:9506:137":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:4407:11285":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4867:13786":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:14401:13091":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:7792:9822":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12422:12580":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13989:12960":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:11640:30134":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:20862:4214":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:12083:792":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:4296:7858":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:8183:3754":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:1076:9778":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:21280:15429":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"20:6869:9331":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:5765:8572":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"11:2165:13699":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:5905:8526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:11423:14475":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:12999:10018":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:14001:12966":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:11390:14472":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:9886:14564":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:6386:13325":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:7939:20656":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12598:12611":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:14068:12985":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:6569:13185":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:11586:12465":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:11628:14477":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:1537:5531":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"18:699:12204":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:8530:1789":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:30807:200":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:5369:9964":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:4728:15394":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:3830:13206":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:40035:14165":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:6759:8956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:13792:12916":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:4557:13215":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:2547:262":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:21108:20681":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:13922:12946":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:45919:14323":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:12074:1592":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:256:14543":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"20:6318:8953":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:13024:12689":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:4801:418":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:47637:14397":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"11:785:9765":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:13040:12691":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:10840:135":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:11226:12427":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:44537:14305":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:2366:3673":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:7513:13483":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"11:1850:9765":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"20:7137:8054":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:45795:14318":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"11:1072:34964":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:1650:5541":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:6190:11317":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:7768:13184":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:22969:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:5421:3715":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:2258:101":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:12043:12501":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"20:4590:7910":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:22218:31804":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:0:312":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:5631:10025":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:1138:34880":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:10818:14463":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:40068:14170":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:7601:13865":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:6583:13346":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:13906:12942":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12123:12512":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12024:12500":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"18:660:14538":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:3274:32273":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:8367:4428":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"20:1666:5542":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:7462:13479":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"20:6205:8949":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:1184:14548":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4815:7910":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:8263:14799":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:6051:8538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"18:727:12211":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:10661:14600":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:13816:12918":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:8072:13544":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12305:12551":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:5963:14632":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13575:12852":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:9131:181":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:9512:3687":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:22097:13921":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:13202:12719":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"11:772:9764":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12062:12502":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:3457:1787":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:7890:3684":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:113:26319":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:2787:249":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:6809:9538":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:2786:250":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:10547:12361":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:5648:14630":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:45520:14307":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:0:1497":{"crate_id":1,"path":["std"],"kind":"module"},"16:6204:14639":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:1779:9804":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:12082:796":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:5782:8516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:1118:34582":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:13876:12936":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10214:14579":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:4889:13225":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:344:34956":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:3313:3744":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:22233:13933":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"20:4396:7890":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:10009:14222":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10714:14607":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:12091:1214":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:2793:252":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:32052:14019":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:2919:9873":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:9071:14445":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"20:5376:8516":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"11:1846:9533":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:43730:9984":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:40390:12197":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:44281:14296":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:6571:3815":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:14296:13062":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:1983:202":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"20:5347:8472":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:4394:7866":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"20:5491:8525":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:14173:13012":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:4848:852":{"crate_id":2,"path":["core","iter"],"kind":"module"},"20:4496:7898":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:9350:12319":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"20:7160:8057":{"crate_id":20,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:3034:2358":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"20:1606:5538":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:2012:14549":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:11367:12440":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:5056:13855":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:9085:28989":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:46065:14330":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"20:4298:7881":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:9172:12314":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:15:1856":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:10738:14609":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12237:12531":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:31991:3790":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:43304:13909":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:6332:15515":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"20:4475:7896":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:12111:12511":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:11375:14471":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"18:652:12178":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:7523:13484":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:7945:14794":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:4137:14734":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:44115:14277":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:10114:9814":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:0:1945":{"crate_id":17,"path":["object"],"kind":"module"},"2:39936:14158":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"20:1705:5547":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"20:544:4645":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"6:5020:7924":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:7318:13460":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:39988:14163":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:2884:9866":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:9137:12313":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:14514:13117":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"0:333:1806":{"crate_id":0,"path":["cc","Build"],"kind":"struct"},"5:4985:3715":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:44446:224":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:6494:3818":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:4033:14733":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:43353:14249":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:41997:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:2722:13168":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:8490:3769":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:10456:14595":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:7715:3834":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:7555:12307":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:1642:13894":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:13422:12739":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:5790:8517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"11:796:9766":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"13:110:34965":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:14100:12993":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"11:2351:9533":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:4669:7894":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:6910:20660":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:2368:3674":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:22804:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"20:1652:5541":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"18:766:26328":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"20:4071:7858":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:9542:3668":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:11071:11330":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:12888:12667":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:13055:12695":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:9701:14561":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:43809:9968":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:11811:14254":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:5268:207":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:21928:15427":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:7764:9779":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:2359:13153":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:3198:29432":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"11:1876:13697":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:8599:3774":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:7067:13427":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"19:0:1095":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:6015:225":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:13554:12845":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:569:4650":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:9517:11328":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:39153:9882":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:12997:12685":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:21804:13919":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"11:2394:9766":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:11448:22364":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:8848:22357":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:4021:14732":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:45610:14311":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13676:12892":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:10368:9762":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"18:609:14537":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:1058:9776":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:11488:11335":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:40099:31824":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:10795:14457":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:5973:3805":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:1579:13696":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:6849:8961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:4070:15371":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"20:6196:4515":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5085:7927":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:7621:22303":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:8879:3789":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:7237:13886":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:41919:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:11193:3788":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:4002:9765":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10788:22462":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:11639:12417":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:43484:9976":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:1067:9777":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:8594:22342":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:926:9770":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"20:6427:8960":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:644:12178":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:2629:133":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:2992:9888":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:12737:12630":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:5384:22292":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:1496:5525":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:5373:9965":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:10771:12373":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:7328:9533":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:2959:2932":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"9:177:15233":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:12983:12684":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:7573:13864":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:1776:9766":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:13966:12957":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:4501:7879":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"20:5576:8530":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:5866:13265":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:43342:14761":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:8903:9533":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4892:13797":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:6686:5466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:14145:13004":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"20:6255:5493":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:43061:14246":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:46017:14329":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:4187:15379":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"20:6232:4428":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:43594:9989":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:8659:22340":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:8765:22354":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:4846:222":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:6082:8539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"20:4561:7906":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:7480:160":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"11:1687:151":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"20:1498:5525":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:2929:133":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"20:7143:8055":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4592:7888":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:9218:32034":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:8825:22356":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:14024:12971":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:6929:13405":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"11:759:9763":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:39964:14161":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:6189:13313":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"20:5645:8538":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:40212:14752":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:22639:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:12911:12676":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:6600:22298":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:6092:8540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:2881:13175":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:6531:13342":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:40023:20619":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:41381:14218":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:43392:14762":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:9921:14566":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:943:9772":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2948:9879":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:12373:12555":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"20:1699:5546":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4488:7877":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:4838:7913":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:41318:14209":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"10:36:13708":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"11:2085:9777":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:10397:14586":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:9531:34982":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:41295:165":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:7269:34977":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:5627:13900":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:46111:14331":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:2864:13174":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:12049:28987":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:6792:13395":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:907:9766":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"20:4160:7865":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:6735:8954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:3326:9891":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"20:4276:7879":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:43818:9967":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:11024:3789":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:4989:7921":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:6028:13901":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:6513:13334":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:12088:1607":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:6376:22297":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:5574:13178":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:41802:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:7195:3752":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:6584:9533":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:2845:3627":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:5049:13230":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:25:656":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:2838:110":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"18:614:34992":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:9015:111":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:949:9773":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"20:7131:8053":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"20:4148:7863":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"20:4458:3848":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13085:12697":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:41615:168":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:46465:14341":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:4363:11263":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"20:5780:8573":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:2367:206":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"11:2479:34955":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:5935:8528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4759:7903":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13710:12895":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:46362:14339":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:40172:3658":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:2428:13156":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:12126:9961":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:3171:3772":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:12437:12584":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:8154:14701":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:8174:3752":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:11417:14474":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:10165:22393":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:20922:32495":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"20:130:4314":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"5:676:255":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:1697:5546":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:32038:14751":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:6361:13321":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:6924:11321":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:2927:231":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"5:3212:13695":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:9780:14563":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:9136:239":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:7503:13191":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"18:624:34990":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:7229:9533":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:40414:14194":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:7554:13193":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"20:4175:7710":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11137:14624":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:14346:13075":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:9617:34981":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"18:548:148":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:1288:9776":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"11:1635:11238":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:3315:13202":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:4913:13812":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:6879:13401":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:44549:13707":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:2798:3838":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"20:1560:5533":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:538:12186":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:5820:8520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:43470:9980":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:3461:13203":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:11173:22486":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:35:10020":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:8194:3690":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:2766:13170":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:46701:14356":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4480:7876":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4728:7899":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:12685:12624":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:10669:14743":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:14448:13105":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:7403:105":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:43834:9978":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"20:7173:9521":{"crate_id":20,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:11887:14259":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:3183:34870":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:11074:14619":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:9574:34986":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:3669:11242":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:7255:3800":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:6956:11277":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:2382:3677":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:7677:215":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:7862:13506":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:11636:20740":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:6915:13188":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:2696:13167":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:629:14718":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"20:4613:7913":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:6613:8949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"9:237:3769":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5915:8527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"20:1693:5545":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:43322:14760":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:6043:8537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:13174:12715":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:8244:3730":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"20:6278:5466":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:9852:22374":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:6261:14665":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"9:0:3510":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"18:636:12199":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:46209:14335":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:8582:3772":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:42075:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:2538:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:14378:13090":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:6511:11242":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:10982:10737":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:11666:2960":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:2860:9860":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:308:1557":{"crate_id":1,"path":["std","thread"],"kind":"module"},"6:4523:7881":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"11:1525:21363":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:641:14769":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:10410:14587":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:4418:7868":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:4462:13212":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:45694:14314":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:5419:12311":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:416:179":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:42330:3668":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"20:7060:9493":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4786:7906":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"20:574:4649":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"1:7880:3686":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:30273:31806":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:582:12307":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:10475:14739":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:12554:12603":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:5363:13234":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:4373:7863":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:6721:22299":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:12689:143":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:8606:4091":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:2209:14553":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:778:99":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:5760:22294":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:1924:9745":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"20:607:4654":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"6:7567:8055":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:9003:22362":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:11742:12473":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:5833:8521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:21379:13917":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:2544:138":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:9994:11298":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:30437:31809":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:10240:12329":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:13101:12700":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:7776:9821":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:7387:3638":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:2841:4225":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"11:680:9762":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:6820:8959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"20:7149:8056":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:10513:14740":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:6083:21405":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:6960:14669":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:1558:5533":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:9959:14569":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:13868:12933":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11551:14778":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:47879:14406":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:21056:3694":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"11:693:9533":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:5409:1791":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:4474:7875":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:1576:5535":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:3720:3742":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:6098:3715":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:2131:3825":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:2501:1786":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"18:707:9962":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:2960:34581":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4734:7900":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11393:133":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:22903:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:6588:5465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:8329:14802":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:4283:14735":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:47848:14403":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"20:585:4651":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"2:11848:14257":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:5858:9765":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:11490:12460":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:7420:3643":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:4585:13216":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:12079:797":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:7011:14975":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:6901:13187":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:8115:13549":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:3065:12219":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:45540:14308":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:2255:100":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"20:61:4248":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"2:40304:14184":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:2535:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"11:868:9774":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:8996:3810":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:43843:9979":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"18:80:26317":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:12945:12679":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:4759:717":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:4211:9583":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:4877:13792":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:4362:9584":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"11:2467:13701":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:261:11242":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:11205:28977":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:22672:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"15:0:3515":{"crate_id":15,"path":["addr2line"],"kind":"module"},"20:5414:8520":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:878:11250":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"18:564:12188":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:42858:3769":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:8298:3222":{"crate_id":1,"path":["std","os","raw","c_int"],"kind":"type_alias"},"2:46331:14338":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:12177:20578":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:2866:9863":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:3049:21435":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:5156:208":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:14110:12996":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"20:4193:7868":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"20:4121:7862":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:3249:140":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:6795:10025":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:41880:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:9544:3669":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"7:78:21277":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:3274:3748":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:39272:221":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:1503:9769":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"11:2494:3637":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:3044:3860":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:12038:15343":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:5325:11242":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:2325:205":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"20:4304:7882":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4511:7880":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10637:12370":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:45995:14328":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:3441:14555":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:42846:152":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:11922:9969":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:14056:12982":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:43947:14268":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:12907:11308":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:3865:14779":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:7932:3775":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:4573:7887":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"20:6172:4557":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:46855:14359":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:588:4653":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:1691:5545":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:4640:20613":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:5808:3809":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:495:4641":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11201:12419":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:1840:9818":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:4179:15378":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12724:12628":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:30237:10016":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"20:4200:7869":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:10186:3694":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"20:4084:7859":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:4921:13226":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:11316:12436":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:11337:22487":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:3888:13207":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:43332:13912":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"20:538:4644":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:40162:3659":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:5982:13277":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:12086:1609":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:10009:11303":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"20:134:4315":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:22182:13927":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:654:4682":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:13667:12888":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:1664:5542":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:2833:3857":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:10576:3744":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"11:1562:14714":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:2339:13147":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:7625:11326":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:13010:12686":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:12089:846":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:4555:7885":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:1036:9777":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:4279:226":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:7293:9332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:40342:14188":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:12765:12635":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:47699:14398":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:8269:14801":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:43790:9981":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4997:7922":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:9372:12320":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:7571:3861":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:11535:12462":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:40761:14201":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11151:14625":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:40322:14186":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:44257:14290":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:7614:9521":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:4835:13223":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:1912:5689":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:12070:1115":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:45632:14312":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:21094:15432":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:32139:4226":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:14324:13069":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"0:58:3292":{"crate_id":0,"path":["cc","windows_registry","find_vs_version"],"kind":"function"},"4:0:3508":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:43080:14248":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:7884:22305":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:2836:4223":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:11306:12434":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:3204:13697":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:4613:13217":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"20:5427:8521":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"11:1127:14712":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:1639:5540":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:7627:173":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:43379:13913":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5063:7919":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:1561:9533":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:47783:14400":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:358:3843":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:11111:14622":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:42036:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4379:7864":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:14499:13116":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:5999:11318":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:8050:13543":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:8957:15396":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:11235:12428":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:44104:20585":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11327:12437":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"10:0:3511":{"crate_id":10,"path":["adler"],"kind":"module"},"2:21194:15438":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:5788:256":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4847:7914":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:9985:14571":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:9031:82":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:42155:95":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:21489:15434":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"20:5499:8526":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:14335:13074":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:12131:9959":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:40016:9977":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:13188:12716":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"11:2317:3772":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:13546:12842":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"11:0:3512":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:4234:3772":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4709:7897":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13949:12950":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5079:7926":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:4769:7904":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:12087:1610":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:4745:13220":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:11845:12484":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:10344:3772":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:2243:13877":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:11719:22367":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:12085:1608":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:8036:10798":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"20:512:4642":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"2:40281:14180":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:6041:22296":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:12332:116":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:13487:12790":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:40333:14187":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:9933:14567":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"20:4528:7902":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:44456:232":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:9146:156":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:8041:1838":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"20:4154:7864":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:47943:14410":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:7320:9533":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:2969:21434":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"11:822:9770":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"20:6214:8950":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:9795:3705":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:4700:7896":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:41768:9533":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:6023:8534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:4768:3850":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:22331:13948":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:1842:9819":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:4346:7862":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:10376:29849":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:4992:4079":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:7708:13196":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:45765:14317":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"20:4286:7880":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:46233:14336":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:9165:3700":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:10265:14581":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:40115:3644":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:9538:3661":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:5995:13137":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:3764:13204":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:533:4645":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:9540:3660":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:12896:111":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:1528:5530":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:11154:14744":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:3800:9766":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:7651:14700":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:8097:13546":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:43780:3727":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:12252:12537":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"20:4580:7909":{"crate_id":20,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12136:12513":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:5939:13274":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"20:500:4640":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"16:6268:34979":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:46141:14332":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:7736:13492":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:6226:14654":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:29988:15361":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"14:40:12494":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:2966:34585":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:7758:15342":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:5673:13182":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:6332:13177":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"20:599:4653":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"5:7220:10019":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:863:9533":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"9:393:21284":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"20:7120:8052":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:2935:9876":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:3236:3747":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:6753:13383":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:1590:13698":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11547:12463":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"20:4418:7892":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"20:1503:5526":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12267:12543":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"20:4650:7918":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:40221:3728":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:622:9746":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:4463:9586":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:21150:15437":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:7006:14670":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:8973:15397":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"20:4430:7893":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:41701:210":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:10655:14742":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:2541:157":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:5088:13231":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:22345:13949":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"7:0:1657":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:44273:14294":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:489:4640":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:6151:7772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:10468:3786":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"20:4550:7905":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:7492:13480":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:1632:5539":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11191:12417":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:22241:13934":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:1604:5538":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:9548:3666":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:12092:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:11871:14258":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:4168:13898":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:5596:3035":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"20:4255:7876":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"20:4386:7889":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:12280:12547":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:483:4639":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:9521:14558":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"20:566:4648":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"17:13685:12893":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:4949:13227":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:5667:14421":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:12065:400":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:47745:14399":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"20:1593:5536":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"18:515:12181":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:3358:3737":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:6856:13860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"11:2473:13702":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"11:2238:9775":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:5073:7925":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:1573:13695":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:5653:225":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:14282:13056":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:1302:9778":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:4968:7918":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:6814:10026":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:14221:13049":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:400:14545":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:43414:14763":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"20:4728:7926":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:4823:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:8363:14803":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:4943:15393":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:8928:14443":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:4393:3715":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:9036:89":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:8146:3689":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:13567:12851":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:45664:14313":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6401:13179":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:21297:3694":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:1075:14547":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:7090:13429":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:14355:13077":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:2409:1784":{"crate_id":1,"path":["std","io"],"kind":"module"},"11:427:34960":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:11088:11332":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:10447:13699":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"20:559:4647":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12846:12646":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4611:7889":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"14:160:14705":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:8887:3772":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"20:4604:7912":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:2321:13145":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"20:1676:5543":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:5030:13838":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:41335:14211":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"20:5596:8532":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:1738:20691":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:45586:14310":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:7041:13421":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"0:314:3282":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs14"],"kind":"variant"},"0:394:133":{"crate_id":0,"path":["cc","Error"],"kind":"struct"},"11:1862:13695":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:4665:12070":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:11215:12423":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:6604:4515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:1464:9763":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:46187:14334":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:10507:12358":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"11:1145:9778":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:7162:31566":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"5:4032:11242":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"20:7114:8051":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"11:2286:9777":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:1591:5536":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11473:12283":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:6009:8533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"9:507:13768":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:4954:7857":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:2810:13172":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:11507:22365":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:2499:20624":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:6818:13396":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:10370:14584":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:13851:12928":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12465:12590":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:42194:3806":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:7568:13194":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:8206:3693":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"11:1882:13698":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11617:12466":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:12033:15244":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:207:11241":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11815:12480":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:5712:13243":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:41564:198":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:7478:9493":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:44562:14306":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:7597:34974":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:589:15335":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:505:3825":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:13914:12944":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:10316:12350":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:12496:12596":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:21058:15430":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:871:9763":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:1564:9765":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:11511:14777":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:22705:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:6944:34975":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11573:12464":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:8167:14704":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"20:553:4646":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"2:40783:3753":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:2504:13159":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:12959:12681":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:44253:14289":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9102:12312":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:30243:13954":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10197:14576":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:2568:2313":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12645:12616":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:3276:3749":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:21712:15439":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:276:3334":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4949:13836":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:4385:7865":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"18:690:12203":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:6454:2295":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:2783:3856":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:40810:14205":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:12067:449":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:7769:2216":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:1501:5526":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13071:12696":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:2223:34949":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:12066:3312":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"11:2423:21358":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:4561:7886":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:7342:34980":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4960:7917":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:41501:14427":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:40792:11293":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:483:11310":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"15:306:21388":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:12081:795":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:6742:13382":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:43978:14272":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"20:5408:8519":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:3178:13696":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:30331:31825":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:13973:12958":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:43932:14262":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:44337:20779":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:4016:15367":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"20:4598:7911":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:14033:12974":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:40049:20620":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:14042:12975":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:12724:32148":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:7961:3742":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:39948:31813":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:7885:3687":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:9762:34989":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:11232:3700":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:43512:3730":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11062:14618":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:7534:13192":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:4621:7890":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:4597:15389":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:4822:33235":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"20:6875:9332":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:12080:794":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:7265:4595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"20:5384:8517":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:5830:13258":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:1923:13897":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:10603:12365":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:7054:13424":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:40355:14189":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:44325:14299":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:5110:14783":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:6672:238":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:42566:69":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:10023:14561":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:13778:12912":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:9070:12310":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:2618:13164":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10059:12333":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"18:736:26327":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:548:4647":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}