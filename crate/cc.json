{"root":"0:0:2406","crate_version":"1.0.78","includes_private":false,"index":{"2:11448:60787":{"id":"2:11448:60787","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4457:60787"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50319:5231","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7720:3760-0:261:2924":{"id":"a:2:7720:3760-0:261:2924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7720:3760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2579:9275":{"id":"2:2579:9275","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3374:4560","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2654:215-0:351:1692":{"id":"a:2:2654:215-0:351:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2654:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5094:61420":{"id":"5:5094:61420","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2984","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6725:4388","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2984","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6725:4388","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3313-0:285:1632":{"id":"b:2:3313-0:285:1632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:3530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3311:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3315:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:39:2017":{"id":"0:39:2017","crate_id":0,"name":"find","span":{"filename":"src/windows_registry.rs","begin":[35,0],"end":[37,1]},"visibility":"public","docs":"Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.\n\nThe `target` argument is the target that the tool should work for (e.g.\ncompile or link for) and the `tool` argument is the tool to find (e.g.\n`cl.exe` or `link.exe`).\n\nThis function will return `None` if the tool could not be found, or it will\nreturn `Some(cmd)` which represents a command that's ready to execute the\ntool with the appropriate environment variables set.\n\nNote that this function always returns `None` for non-MSVC targets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["tool",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Command","id":"1:5707:1619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11331:60769":{"id":"2:11331:60769","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:46:669":{"id":"0:46:669","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[169,4],"end":[171,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:2903:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:360":{"id":"0:360","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,9],"end":[189,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2243:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:361:410"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2654:215-0:285:1632":{"id":"a:2:2654:215-0:285:1632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2654:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11322:785":{"id":"2:11322:785","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12374:3180"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2523:126":{"id":"2:2523:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39279:3449","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:235:301":{"id":"0:235:301","crate_id":0,"name":"args","span":{"filename":"src/lib.rs","begin":[3214,4],"end":[3216,5]},"visibility":"public","docs":"Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11442:55796":{"id":"2:11442:55796","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2520-0:344:126":{"id":"b:2:2520-0:344:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2523:126","2:2524:1423"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:91:1660":{"id":"0:91:1660","crate_id":0,"name":"extra_warnings","span":{"filename":"src/lib.rs","begin":[731,4],"end":[734,5]},"visibility":"public","docs":"Set extra warnings flags.\n\nAdds some flags:\n- nothing for MSVC.\n- \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\n// Disables -Wextra, -Wall remains enabled:\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .extra_warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["warnings",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:222":{"id":"0:222","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3067,0],"end":[3277,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:232:1821","0:234:1005","0:235:301","0:236:593","0:237:2510","0:238:2732","0:239:2708","0:240:2709","0:241:2706"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2515-0:285:1632":{"id":"b:2:2515-0:285:1632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2485:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2518:126","2:2519:1424"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:73:1779":{"id":"0:73:1779","crate_id":0,"name":"flag","span":{"filename":"src/lib.rs","begin":[419,4],"end":[422,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"-ffunction-sections\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7720:3760-0:344:126":{"id":"a:2:7720:3760-0:344:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7720:3760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:350:651":{"id":"0:350:651","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[151,16],"end":[151,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8538:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8527:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2505-0:344:126":{"id":"b:2:2505-0:344:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2508:1715"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5101:2795":{"id":"5:5101:2795","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6980:219"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:221:59":{"id":"0:221:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[3062,4],"end":[3064,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:671-0:285:1632":{"id":"b:5:671-0:285:1632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2243:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:667:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:673:3977","5:674:1681","5:675:3978"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:136:2038":{"id":"0:136:2038","crate_id":0,"name":"get_compiler","span":{"filename":"src/lib.rs","begin":[1477,4],"end":[1482,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis function will return a `Tool` which represents the culmination\nof this configuration at a snapshot in time. The returned compiler can\nbe inspected (e.g. the path, arguments, environment) to forward along to\nother tools, or the `to_command` method can be used to invoke the\ncompiler itself.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:268:2932":{"id":"0:268:2932","crate_id":0,"name":"Vs16","span":{"filename":"src/windows_registry.rs","begin":[91,4],"end":[91,8]},"visibility":"default","docs":"Visual Studio 16 (2019)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:11336:54699":{"id":"2:11336:54699","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48036:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102:1649":{"id":"0:102:1649","crate_id":0,"name":"opt_level","span":{"filename":"src/lib.rs","begin":[855,4],"end":[858,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["opt_level",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11395:60776":{"id":"2:11395:60776","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:4995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11392:60775":{"id":"2:11392:60775","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:363:651":{"id":"0:363:651","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[189,16],"end":[189,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8538:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8527:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2509-0:261:2924":{"id":"b:2:2509-0:261:2924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2511:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:106:1648":{"id":"0:106:1648","crate_id":0,"name":"out_dir","span":{"filename":"src/lib.rs","begin":[895,4],"end":[898,5]},"visibility":"public","docs":"Configures the output directory where all object files and static\nlibraries will be located.\n\nThis option is automatically scraped from the `OUT_DIR` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["out_dir",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2473:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5504:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2231:54550":{"id":"2:2231:54550","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:89:1659":{"id":"0:89:1659","crate_id":0,"name":"warnings_into_errors","span":{"filename":"src/lib.rs","begin":[687,4],"end":[690,5]},"visibility":"public","docs":"Set warnings into errors flag.\n\nDisabled by default.\n\nWarning: turning warnings into errors only make sense\nif you are a developer of the crate using cc-rs.\nSome warnings only appear on some architecture or\nspecific version of the compiler. Any user of this crate,\nor any other crate depending on it, could fail during\ncompile time.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings_into_errors(true)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["warnings_into_errors",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5112:55921":{"id":"5:5112:55921","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11443:55797"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11333:54702":{"id":"2:11333:54702","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12391:3194"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[174,0],"end":[178,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8583:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:48:651"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:81:1640":{"id":"0:81:1640","crate_id":0,"name":"no_default_flags","span":{"filename":"src/lib.rs","begin":[606,4],"end":[609,5]},"visibility":"public","docs":"Disables the generation of default compiler flags. The default compiler\nflags may cause conflicts in some cross compiling scenarios.\n\nSetting the `CRATE_CC_NO_DEFAULTS` environment variable has the same\neffect as setting this to `true`. The presence of the environment\nvariable and the value of `no_default_flags` will be OR'd together.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["no_default_flags",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:135:2146":{"id":"0:135:2146","crate_id":0,"name":"expand","span":{"filename":"src/lib.rs","begin":[1452,4],"end":[1457,5]},"visibility":"public","docs":"Run the compiler, returning the macro-expanded version of the input files.\n\nThis is only relevant for C and C++ files.\n\n# Panics\nPanics if more than one file is present in the config, or if compiler\npath has an invalid file name.\n\n# Example\n```no_run\nlet out = cc::Build::new().file(\"src/foo.c\").expand();\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6407:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5113:55922":{"id":"5:5113:55922","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11444:55798"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2718:3531-0:261:2924":{"id":"a:2:2718:3531-0:261:2924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2718:3531","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:236:593":{"id":"0:236:593","crate_id":0,"name":"env","span":{"filename":"src/lib.rs","begin":[3222,4],"end":[3224,5]},"visibility":"public","docs":"Returns the set of environment variables needed for this compiler to\noperate.\n\nThis is typically only used for MSVC compilers currently.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:92:1643":{"id":"0:92:1643","crate_id":0,"name":"cpp_link_stdlib","span":{"filename":"src/lib.rs","begin":[764,4],"end":[770,5]},"visibility":"public","docs":"Set the standard library to link against when compiling with C++\nsupport.\n\nSee [`get_cpp_link_stdlib`](cc::Build::get_cpp_link_stdlib) documentation\nfor the default value.\nIf the `CXXSTDLIB` environment variable is set, its value will\noverride the default value, but not the value explicitly set by calling\nthis function.\n\nA value of `None` indicates that no automatic linking should happen,\notherwise cargo will link against the specified library.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n- `c++_shared` or `c++_static` for Android\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .cpp_link_stdlib(\"stdc++\")\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cpp_link_stdlib",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78:1837":{"id":"0:78:1837","crate_id":0,"name":"flag_if_supported","span":{"filename":"src/lib.rs","begin":[558,4],"end":[561,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler if it supports it\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag_if_supported(\"-Wlogical-op\") // only supported by GCC\n    .flag_if_supported(\"-Wunreachable-code\") // only supported by clang\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63:737":{"id":"0:63:737","crate_id":0,"name":"include","span":{"filename":"src/lib.rs","begin":[352,4],"end":[355,5]},"visibility":"public","docs":"Add a directory to the `-I` or include path for headers\n\n# Example\n\n```no_run\nuse std::path::Path;\n\nlet library_path = Path::new(\"/path/to/library\");\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .include(library_path)\n    .include(\"src\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dir",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2473:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5504:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110:1651":{"id":"0:110:1651","crate_id":0,"name":"archiver","span":{"filename":"src/lib.rs","begin":[915,4],"end":[918,5]},"visibility":"public","docs":"Configures the tool used to assemble archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["archiver",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2473:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5504:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77:1808":{"id":"0:77:1808","crate_id":0,"name":"is_flag_supported","span":{"filename":"src/lib.rs","begin":[489,4],"end":[545,5]},"visibility":"public","docs":"Run the compiler to test if it accepts the given flag.\n\nFor a convenience method for setting flags conditionally,\nsee `flag_if_supported()`.\n\nIt may return error if it's unable to run the compiler with a test file\n(e.g. the compiler is missing or a write to the `out_dir` failed).\n\nNote: Once computed, the result of this call is stored in the\n`known_flag_support` field. If `is_flag_supported(flag)`\nis called again, the result will be read from the hash table.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11417:60783":{"id":"2:11417:60783","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2229-0:261:2924":{"id":"b:2:2229-0:261:2924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:3530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2223:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2231:54550"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11398:3261":{"id":"2:11398:3261","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11023:4991","str::matches":"2:11398:3261","`DoubleEndedIterator`":"2:7063:119","prim@char":"1:12374:3180"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50206:5224","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2229-0:344:126":{"id":"b:2:2229-0:344:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:3530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2223:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2231:54550"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:67:1771":{"id":"0:67:1771","crate_id":0,"name":"define","span":{"filename":"src/lib.rs","begin":[397,4],"end":[401,5]},"visibility":"public","docs":"Specify a `-D` variable with an optional value.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .define(\"FOO\", \"BAR\")\n    .define(\"BAZ\", None)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["var",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["val",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11327:60768":{"id":"2:11327:60768","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:11325:60767"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:2406":{"id":"0:0:2406","crate_id":0,"name":"cc","span":{"filename":"src/lib.rs","begin":[1,0],"end":[3568,1]},"visibility":"public","docs":"A library for build scripts to compile custom C code\n\nThis library is intended to be used as a `build-dependencies` entry in\n`Cargo.toml`:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n```\n\nThe purpose of this crate is to provide the utility functions necessary to\ncompile C code into a static archive which is then linked into a Rust crate.\nConfiguration is available through the `Build` struct.\n\nThis crate will automatically detect situations such as cross compilation or\nother environment variables set by Cargo and will build code appropriately.\n\nThe crate is not limited to C code, it can accept any source code that can\nbe passed to a C or C++ compiler. As such, assembly files with extensions\n`.s` (gcc/clang) and `.asm` (MSVC) can also be compiled.\n\n[`Build`]: struct.Build.html\n\n# Parallelism\n\nTo parallelize computation, enable the `parallel` feature for the crate.\n\n```toml\n[build-dependencies]\ncc = { version = \"1.0\", features = [\"parallel\"] }\n```\nTo specify the max number of concurrent compilation jobs, set the `NUM_JOBS`\nenvironment variable to the desired amount.\n\nCargo will also set this environment variable when executed with the `-jN` flag.\n\nIf `NUM_JOBS` is not set, the `RAYON_NUM_THREADS` environment variable can\nalso specify the build parallelism.\n\n# Examples\n\nUse the `Build` struct to compile `src/foo.c`:\n\n```no_run\nfn main() {\n    cc::Build::new()\n        .file(\"src/foo.c\")\n        .define(\"FOO\", Some(\"bar\"))\n        .include(\"src\")\n        .compile(\"foo\");\n}\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/cc/1.0\")]","#![allow(deprecated)]","#![deny(missing_docs)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:36:1627","0:285:1632","0:344:126","0:351:1692"],"is_stripped":false}},"0:239:2708":{"id":"0:239:2708","crate_id":0,"name":"is_like_gnu","span":{"filename":"src/lib.rs","begin":[3261,4],"end":[3263,5]},"visibility":"public","docs":"Whether the tool is GNU Compiler Collection-like.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5110:61423":{"id":"5:5110:61423","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2984","`String`":"5:6980:219"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2984","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6725:4388","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:42:2943":{"id":"0:42:2943","crate_id":0,"name":"find_vs_version","span":{"filename":"src/windows_registry.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Find the most recent installed version of Visual Studio\n\nThis is used by the cmake crate to figure out the correct\ngenerator.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2505-0:351:1692":{"id":"b:2:2505-0:351:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2508:1715"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:285:1632":{"id":"0:285:1632","crate_id":0,"name":"Build","span":{"filename":"src/lib.rs","begin":[93,0],"end":[131,1]},"visibility":"public","docs":"A builder for compilation of a native library.\n\nA `Build` is the main type of the `cc` crate and is used to control all the\nvarious configuration options and such of a compile. You'll find more\ndocumentation on each method itself.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:61","a:2:2654:215-0:285:1632","a:2:2668:223-0:285:1632","a:2:7720:3760-0:285:1632","a:2:7719:3761-0:285:1632","a:2:2718:3531-0:285:1632","b:2:2509-0:285:1632","b:2:2520-0:285:1632","b:2:2515-0:285:1632","b:2:2505-0:285:1632","b:2:2226-0:285:1632","b:2:3313-0:285:1632","b:2:2229-0:285:1632","b:5:671-0:285:1632","0:323","0:325","0:220"]}},"5:675:3978":{"id":"5:675:3978","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11407:60779":{"id":"2:11407:60779","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"2:11404:60778","`DoubleEndedIterator`":"2:7063:119","self::pattern":"2:11023:4991","prim@char":"1:12374:3180"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50170:5222","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:4995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2524:1423":{"id":"2:2524:1423","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:129:2078":{"id":"0:129:2078","crate_id":0,"name":"compile","span":{"filename":"src/lib.rs","begin":[1194,4],"end":[1198,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\n# Library name\n\nThe `output` string argument determines the file name for the compiled\nlibrary. The Rust compiler will create an assembly named \"lib\"+output+\".a\".\nMSVC will create a file named output+\".lib\".\n\nThe choice of `output` is close to arbitrary, but:\n\n- must be nonempty,\n- must not contain a path separator (`/`),\n- must be unique across all `compile` invocations made by the same build\n  script.\n\nIf your build script compiles a single source file, the base name of\nthat source file would usually be reasonable:\n\n```no_run\ncc::Build::new().file(\"blobstore.c\").compile(\"blobstore\");\n```\n\nCompiling multiple source files, some people use their crate's name, or\ntheir crate's name + \"-cc\".\n\nOtherwise, please use your imagination.\n\nFor backwards compatibility, if `output` starts with \"lib\" *and* ends\nwith \".a\", a second \"lib\" prefix and \".a\" suffix do not get added on,\nbut this usage is deprecated; please omit `lib` and `.a` in the argument\nthat you pass.\n\n# Panics\n\nPanics if `output` is not formatted correctly or if one of the underlying\ncompiler commands fails. It can also panic if it fails reading file names\nor creating directories.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11383:60774":{"id":"2:11383:60774","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11023:4991","prim@char":"1:12374:3180","str::split":"2:11371:2301","str::split_terminator":"2:11380:60773"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50070:5218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:4995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:36:1627":{"id":"0:36:1627","crate_id":0,"name":"windows_registry","span":{"filename":"src/windows_registry.rs","begin":[11,0],"end":[900,1]},"visibility":"public","docs":"A helper module to probe the Windows Registry when looking for\nwindows-specific tools.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:39:2017","0:41:2410","0:261:2924","0:42:2943"],"is_stripped":false}},"a:2:2668:223-0:351:1692":{"id":"a:2:2668:223-0:351:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2668:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:96:1644":{"id":"0:96:1644","crate_id":0,"name":"cpp_set_stdlib","span":{"filename":"src/lib.rs","begin":[805,4],"end":[813,5]},"visibility":"public","docs":"Force the C++ compiler to use the specified standard library.\n\nSetting this option will automatically set `cpp_link_stdlib` to the same\nvalue.\n\nThe default value of this option is always `None`.\n\nThis option has no effect when compiling for a Visual Studio based\ntarget.\n\nThis option sets the `-stdlib` flag, which is only supported by some\ncompilers (clang, icc) but not by others (gcc). The library will not\ndetect which compiler is used, as such it is the responsibility of the\ncaller to ensure that this option is only used in conjunction with a\ncompiler which supports the `-stdlib` flag.\n\nA value of `None` indicates that no specific C++ standard library should\nbe used, otherwise `-stdlib` is added to the compile invocation.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .cpp_set_stdlib(\"c++\")\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cpp_set_stdlib",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2515-0:344:126":{"id":"b:2:2515-0:344:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2485:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2518:126","2:2519:1424"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:103:1928":{"id":"0:103:1928","crate_id":0,"name":"opt_level_str","span":{"filename":"src/lib.rs","begin":[864,4],"end":[867,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["opt_level",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2520-0:285:1632":{"id":"b:2:2520-0:285:1632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2523:126","2:2524:1423"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:90:1606":{"id":"0:90:1606","crate_id":0,"name":"warnings","span":{"filename":"src/lib.rs","begin":[708,4],"end":[712,5]},"visibility":"public","docs":"Set warnings flags.\n\nAdds some flags:\n- \"-Wall\" for MSVC.\n- \"-Wall\", \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["warnings",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11345:54723":{"id":"2:11345:54723","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:11344:2449"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:324:410":{"id":"0:324:410","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[92,9],"end":[92,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2668:223-0:344:126":{"id":"a:2:2668:223-0:344:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2668:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:348:410":{"id":"0:348:410","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[151,9],"end":[151,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:80:1658":{"id":"0:80:1658","crate_id":0,"name":"static_flag","span":{"filename":"src/lib.rs","begin":[595,4],"end":[598,5]},"visibility":"public","docs":"Set the `-static` flag.\n\nWhen enabled on systems that support dynamic linking, this prevents\nlinking with the shared libraries.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .static_flag(true)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["static_flag",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,31],"end":[82,35]},"visibility":{"restricted":{"parent":"0:36:1627","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2666:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:84:1641":{"id":"0:84:1641","crate_id":0,"name":"files","span":{"filename":"src/lib.rs","begin":[618,4],"end":[627,5]},"visibility":"public","docs":"Add files which will be compiled","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["p",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7026:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:7026:147","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2473:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5504:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11357:1990":{"id":"2:11357:1990","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12374:3180","self::pattern":"2:11023:4991"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:261:2924":{"id":"0:261:2924","crate_id":0,"name":"VsVers","span":{"filename":"src/windows_registry.rs","begin":[83,0],"end":[101,1]},"visibility":"public","docs":"A version of Visual Studio","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:262:2926","0:264:2928","0:266:2930","0:268:2932","0:270:2934"],"impls":["a:2:2654:215-0:261:2924","a:2:2668:223-0:261:2924","a:2:7720:3760-0:261:2924","a:2:7719:3761-0:261:2924","a:2:2718:3531-0:261:2924","b:2:2509-0:261:2924","b:2:2520-0:261:2924","b:2:2515-0:261:2924","b:2:2505-0:261:2924","b:2:2226-0:261:2924","b:2:3313-0:261:2924","b:2:2229-0:261:2924","b:5:671-0:261:2924","0:274","0:276","0:277","0:279","0:280","0:282","0:283"]}},"a:2:7719:3761-0:351:1692":{"id":"a:2:7719:3761-0:351:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7719:3761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:276":{"id":"0:276","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":{"restricted":{"parent":"0:36:1627","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2664:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:65:1765":{"id":"0:65:1765","crate_id":0,"name":"includes","span":{"filename":"src/lib.rs","begin":[375,4],"end":[384,5]},"visibility":"public","docs":"Add multiple directories to the `-I` include path.\n\n# Example\n\n```no_run\n# use std::path::Path;\n# let condition = true;\n#\nlet mut extra_dir = None;\nif condition {\n    extra_dir = Some(Path::new(\"/path/to\"));\n}\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .includes(extra_dir)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dirs",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7026:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:7026:147","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2473:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5504:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:277":{"id":"0:277","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":{"restricted":{"parent":"0:36:1627","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2273:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:278:596"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:113:1959":{"id":"0:113:1959","crate_id":0,"name":"link_lib_modifier","span":{"filename":"src/lib.rs","begin":[940,4],"end":[943,5]},"visibility":"public","docs":"Adds a native library modifier that will be added to the\n`rustc-link-lib=static:MODIFIERS=LIBRARY_NAME` metadata line\nemitted for cargo if `cargo_metadata` is enabled.\nSee https://doc.rust-lang.org/rustc/command-line-arguments.html#-l-link-the-generated-crate-to-a-native-library\nfor the list of modifiers accepted by rustc.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["link_lib_modifier",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3315:1437":{"id":"2:3315:1437","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46507:4562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:347":{"id":"0:347","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[151,9],"end":[151,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2243:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:348:410"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2226-0:261:2924":{"id":"b:2:2226-0:261:2924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:3530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2220:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2228:3247"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11374:54731":{"id":"2:11374:54731","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12374:3180","self::pattern":"2:11023:4991"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10847:4814","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:105:1650":{"id":"0:105:1650","crate_id":0,"name":"force_frame_pointer","span":{"filename":"src/lib.rs","begin":[885,4],"end":[888,5]},"visibility":"public","docs":"Configures whether the compiler will emit instructions to store\nframe pointers during codegen.\n\nThis option is automatically enabled when debug information is emitted.\nOtherwise the target platform compiler's default will be used.\nYou can use this option to force a specific setting.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["force",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:112:1652":{"id":"0:112:1652","crate_id":0,"name":"cargo_metadata","span":{"filename":"src/lib.rs","begin":[930,4],"end":[933,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.\n\nThe emitted metadata is:\n\n - `rustc-link-lib=static=`*compiled lib*\n - `rustc-link-search=native=`*target folder*\n - When target is MSVC, the ATL-MFC libs are added via `rustc-link-search=native=`\n - When C++ is enabled, the C++ stdlib is added via `rustc-link-lib`\n - If `emit_rerun_if_env_changed` is not `false`, `rerun-if-env-changed=`*env*\n","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cargo_metadata",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11352:60772":{"id":"2:11352:60772","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50266:5226","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2229-0:351:1692":{"id":"b:2:2229-0:351:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:3530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2223:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2231:54550"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:137:1818":{"id":"0:137:1818","crate_id":0,"name":"try_get_compiler","span":{"filename":"src/lib.rs","begin":[1487,4],"end":[1558,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis will return a result instead of panicing; see get_compiler() for the complete description.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:673:3977":{"id":"5:673:3977","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"2:11340:54701":{"id":"2:11340:54701","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2226-0:351:1692":{"id":"b:2:2226-0:351:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:3530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2220:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2228:3247"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11427:54739":{"id":"2:11427:54739","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11023:4991","prim@char":"1:12374:3180"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:4995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11424:54568":{"id":"2:11424:54568","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11023:4991","prim@char":"1:12374:3180"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11330:2006":{"id":"2:11330:2006","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10591:2688"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11377:54733":{"id":"2:11377:54733","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"2:11371:2301","`DoubleEndedIterator`":"2:7063:119","prim@char":"1:12374:3180","self::pattern":"2:11023:4991"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50020:4808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:4995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11353:59990":{"id":"2:11353:59990","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50294:5229","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:114:1654":{"id":"0:114:1654","crate_id":0,"name":"pic","span":{"filename":"src/lib.rs","begin":[949,4],"end":[952,5]},"visibility":"public","docs":"Configures whether the compiler will emit position independent code.\n\nThis option defaults to `false` for `windows-gnu` and bare metal targets and\nto `true` for all other targets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["pic",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:266:2930":{"id":"0:266:2930","crate_id":0,"name":"Vs15","span":{"filename":"src/windows_registry.rs","begin":[89,4],"end":[89,8]},"visibility":"default","docs":"Visual Studio 15 (2017)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:270:2934":{"id":"0:270:2934","crate_id":0,"name":"Vs17","span":{"filename":"src/windows_registry.rs","begin":[93,4],"end":[93,8]},"visibility":"default","docs":"Visual Studio 17 (2022)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[289,0],"end":[3059,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:912","0:63:737","0:65:1765","0:67:1771","0:71:1775","0:73:1779","0:74:1783","0:75:1790","0:77:1808","0:78:1837","0:79:1657","0:80:1658","0:81:1640","0:82:642","0:84:1641","0:86:1642","0:87:1645","0:88:1646","0:89:1659","0:90:1606","0:91:1660","0:92:1643","0:96:1644","0:100:1371","0:101:1647","0:102:1649","0:103:1928","0:104:514","0:105:1650","0:106:1648","0:108:429","0:110:1651","0:112:1652","0:113:1959","0:114:1654","0:115:1655","0:116:1663","0:117:1656","0:121:1983","0:129:2078","0:133:2137","0:135:2146","0:136:2038","0:137:1818"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:115:1655":{"id":"0:115:1655","crate_id":0,"name":"use_plt","span":{"filename":"src/lib.rs","begin":[964,4],"end":[967,5]},"visibility":"public","docs":"Configures whether the Procedure Linkage Table is used for indirect\ncalls into shared libraries.\n\nThe PLT is used to provide features like lazy binding, but introduces\na small performance loss due to extra pointer indirection. Setting\n`use_plt` to `false` can provide a small performance increase.\n\nNote that skipping the PLT requires a recent version of GCC/Clang.\n\nThis only applies to ELF targets. It has no effect on other platforms.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["use_plt",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11401:60777":{"id":"2:11401:60777","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:12374:3180","str::matches":"2:11398:3261","`DoubleEndedIterator`":"2:7063:119","self::pattern":"2:11023:4991"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50224:5225","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:4995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11367:2450":{"id":"2:11367:2450","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48036:174","self::pattern":"2:11023:4991","prim@char":"1:12374:3180"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:4995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5111:3393":{"id":"5:5111:3393","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6980:219"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11360:1991":{"id":"2:11360:1991","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12374:3180","self::pattern":"2:11023:4991"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:4995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:674:1681":{"id":"5:674:1681","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11386:54735":{"id":"2:11386:54735","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12374:3180","self::pattern":"2:11023:4991","str::rsplitn":"2:11389:54737"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50106:4812","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11433:3141":{"id":"2:11433:3141","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11023:4991","prim@char":"1:12374:3180"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7719:3761-0:285:1632":{"id":"a:2:7719:3761-0:285:1632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7719:3761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11389:54737":{"id":"2:11389:54737","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"2:11386:54735","self::pattern":"2:11023:4991","prim@char":"1:12374:3180"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50124:4810","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:4995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11347:5022":{"id":"2:11347:5022","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12374:3180"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49978:5213","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3313-0:344:126":{"id":"b:2:3313-0:344:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:3530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3311:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3315:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:671-0:351:1692":{"id":"b:5:671-0:351:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2243:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:667:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:673:3977","5:674:1681","5:675:3978"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2515-0:351:1692":{"id":"b:2:2515-0:351:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2485:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2518:126","2:2519:1424"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11321":{"id":"2:11321","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10586:1349","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11322:785","2:11323:1832","2:11324:60766","2:11325:60767","2:11327:60768","2:11330:2006","2:11331:60769","2:11332:307","2:11333:54702","2:11334:1812","2:11336:54699","2:11338:54700","2:11340:54701","2:11342:60770","2:11343:60771","2:11344:2449","2:11345:54723","2:11346:2705","2:11347:5022","2:11348:3321","2:11349:2482","2:11350:2467","2:11351:4149","2:11352:60772","2:11353:59990","2:11354:1823","2:11357:1990","2:11360:1991","2:11363:2017","2:11367:2450","2:11371:2301","2:11374:54731","2:11377:54733","2:11380:60773","2:11383:60774","2:11386:54735","2:11389:54737","2:11392:60775","2:11395:60776","2:11398:3261","2:11401:60777","2:11404:60778","2:11407:60779","2:11410:2419","2:11412:60780","2:11414:60781","2:11416:60782","2:11417:60783","2:11418:60784","2:11421:2452","2:11424:54568","2:11427:54739","2:11430:2513","2:11433:3141","2:11436:60785","2:11439:2117","2:11441:5407","2:11442:55796","2:11443:55797","2:11444:55798","2:11445:60786","2:11447:4572","2:11448:60787"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7720:3760-0:351:1692":{"id":"a:2:7720:3760-0:351:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7720:3760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:234:1005":{"id":"0:234:1005","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[3208,4],"end":[3210,5]},"visibility":"public","docs":"Returns the path for this compiler.\n\nNote that this may not be a path to a file on the filesystem, e.g. \"cc\",\nbut rather something which will be resolved when a process is spawned.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5504:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11371:2301":{"id":"2:11371:2301","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:7063:119","str::rsplit":"2:11377:54733","self::pattern":"2:11023:4991","str::split_whitespace":"2:11349:2482","prim@char":"1:12374:3180"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50002:3373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[168,0],"end":[172,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2903:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:46:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:238:2732":{"id":"0:238:2732","crate_id":0,"name":"cflags_env","span":{"filename":"src/lib.rs","begin":[3249,4],"end":[3258,5]},"visibility":"public","docs":"Returns the compiler flags in format of CFLAGS environment variable.\nImportant here - this will not be CFLAGS from env, its internal gcc's flags to use as CFLAGS\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:323":{"id":"0:323","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,9],"end":[92,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2243:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:324:410"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11421:2452":{"id":"2:11421:2452","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11023:4991","prim@char":"1:12374:3180"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104:514":{"id":"0:104:514","crate_id":0,"name":"debug","span":{"filename":"src/lib.rs","begin":[874,4],"end":[877,5]},"visibility":"public","docs":"Configures whether the compiler will emit debug information when\ngenerating object files.\n\nThis option is automatically scraped from the `DEBUG` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["debug",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11350:2467":{"id":"2:11350:2467","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11349:2482"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50285:5228","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11430:2513":{"id":"2:11430:2513","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11023:4991","prim@char":"1:12374:3180"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:4995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5093":{"id":"5:5093","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5004:1349","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5094:61420","5:5095:2223","5:5098:61421","5:5101:2795","5:5109:61422","5:5110:61423","5:5111:3393","5:5112:55921","5:5113:55922"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11380:60773":{"id":"2:11380:60773","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"2:11371:2301","prim@char":"1:12374:3180","self::pattern":"2:11023:4991","str::rsplit_terminator":"2:11383:60774","`DoubleEndedIterator`":"2:7063:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50052:5217","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,0],"end":[180,35]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","type_id","source","description","provide"],"trait":{"name":"Error","id":"2:2570:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:48:651":{"id":"0:48:651","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[175,4],"end":[177,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8538:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8527:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7720:3760-0:285:1632":{"id":"a:2:7720:3760-0:285:1632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7720:3760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:344:126":{"id":"0:344:126","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[152,0],"end":[157,1]},"visibility":"public","docs":"Represents an internal error that occurred, with an explanation.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2654:215-0:344:126","a:2:2668:223-0:344:126","a:2:7720:3760-0:344:126","a:2:7719:3761-0:344:126","a:2:2718:3531-0:344:126","b:2:2509-0:344:126","b:2:2577-0:344:126","b:2:2520-0:344:126","b:2:2515-0:344:126","b:2:2505-0:344:126","b:2:2226-0:344:126","b:2:3313-0:344:126","b:2:2229-0:344:126","b:5:671-0:344:126","b:5:5362-0:344:126","0:347","0:349","0:45","0:47","0:49"]}},"0:88:1646":{"id":"0:88:1646","crate_id":0,"name":"cudart","span":{"filename":"src/lib.rs","begin":[661,4],"end":[666,5]},"visibility":"public","docs":"Link CUDA run-time.\n\nThis option mimics the `--cudart` NVCC command-line option. Just like\nthe original it accepts `{none|shared|static}`, with default being\n`static`. The method has to be invoked after `.cuda(true)`, or not\nat all, if the default is right for the project.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cudart",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2509-0:344:126":{"id":"b:2:2509-0:344:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2511:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2718:3531-0:351:1692":{"id":"a:2:2718:3531-0:351:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2718:3531","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11334:1812":{"id":"2:11334:1812","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48036:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11344:2449":{"id":"2:11344:2449","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:11345:54723"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:349":{"id":"0:349","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[151,16],"end":[151,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8578:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:350:651"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5098:61421":{"id":"5:5098:61421","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6980:219"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5362-0:344:126":{"id":"b:5:5362-0:344:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8583:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:3530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5360:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5364:1403"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:86:1642":{"id":"0:86:1642","crate_id":0,"name":"cpp","span":{"filename":"src/lib.rs","begin":[633,4],"end":[636,5]},"visibility":"public","docs":"Set C++ support.\n\nThe other `cpp_*` options will only become active if this is set to\n`true`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cpp",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11338:54700":{"id":"2:11338:54700","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11404:60778":{"id":"2:11404:60778","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11023:4991","prim@char":"1:12374:3180","`DoubleEndedIterator`":"2:7063:119","str::rmatch_indices":"2:11407:60779"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50152:5221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:133:2137":{"id":"0:133:2137","crate_id":0,"name":"try_expand","span":{"filename":"src/lib.rs","begin":[1413,4],"end":[1438,5]},"visibility":"public","docs":"This will return a result instead of panicing; see expand() for the complete description.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6407:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11410:2419":{"id":"2:11410:2419","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:41:2410":{"id":"0:41:2410","crate_id":0,"name":"find_tool","span":{"filename":"src/windows_registry.rs","begin":[43,0],"end":[45,1]},"visibility":"public","docs":"Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["_target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["_tool",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:117:1656":{"id":"0:117:1656","crate_id":0,"name":"static_crt","span":{"filename":"src/lib.rs","begin":[983,4],"end":[986,5]},"visibility":"public","docs":"Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.\n\nThis option defaults to `false`, and affect only msvc targets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["static_crt",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:237:2510":{"id":"0:237:2510","crate_id":0,"name":"cc_env","span":{"filename":"src/lib.rs","begin":[3230,4],"end":[3244,5]},"visibility":"public","docs":"Returns the compiler command in format of CC environment variable.\nOr empty string if CC env was not present\n\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79:1657":{"id":"0:79:1657","crate_id":0,"name":"shared_flag","span":{"filename":"src/lib.rs","begin":[576,4],"end":[579,5]},"visibility":"public","docs":"Set the `-shared` flag.\n\nWhen enabled, the compiler will produce a shared object which can\nthen be linked with other objects to form an executable.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["shared_flag",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2718:3531-0:344:126":{"id":"a:2:2718:3531-0:344:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2718:3531","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11346:2705":{"id":"2:11346:2705","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12374:3180"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49972:5212","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11354:1823":{"id":"2:11354:1823","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12374:3180","self::pattern":"2:11023:4991"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2519:1424":{"id":"2:2519:1424","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:240:2709":{"id":"0:240:2709","crate_id":0,"name":"is_like_clang","span":{"filename":"src/lib.rs","begin":[3266,4],"end":[3268,5]},"visibility":"public","docs":"Whether the tool is Clang-like.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:671-0:261:2924":{"id":"b:5:671-0:261:2924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2243:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:667:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:673:3977","5:674:1681","5:675:3978"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11436:60785":{"id":"2:11436:60785","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12374:3180","self::pattern":"2:11023:4991"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:4995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:671-0:344:126":{"id":"b:5:671-0:344:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2243:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:667:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:673:3977","5:674:1681","5:675:3978"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2654:215-0:261:2924":{"id":"a:2:2654:215-0:261:2924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2654:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:116:1663":{"id":"0:116:1663","crate_id":0,"name":"emit_rerun_if_env_changed","span":{"filename":"src/lib.rs","begin":[975,4],"end":[978,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo to detect environment\nchanges that should trigger a rebuild.\n\nThis has no effect if the `cargo_metadata` option is `false`.\n\nThis option defaults to `true`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["emit_rerun_if_env_changed",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11444:55798":{"id":"2:11444:55798","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:241:2706":{"id":"0:241:2706","crate_id":0,"name":"is_like_msvc","span":{"filename":"src/lib.rs","begin":[3271,4],"end":[3276,5]},"visibility":"public","docs":"Whether the tool is MSVC-like.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:101:1647":{"id":"0:101:1647","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[846,4],"end":[849,5]},"visibility":"public","docs":"Configures the host assumed by this configuration.\n\nThis option is automatically scraped from the `HOST` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .host(\"arm-linux-gnueabihf\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["host",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11342:60770":{"id":"2:11342:60770","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"2:11343:60771","crate::ops::Index":"2:2979:4383","`str`":"1:12380:3185"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:62:912":{"id":"0:62:912","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[295,4],"end":[335,5]},"visibility":"public","docs":"Construct a new instance of a blank set of configuration.\n\nThis builder is finished with the [`compile`] function.\n\n[`compile`]: struct.Build.html#method.compile","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11323:1832":{"id":"2:11323:1832","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2505-0:285:1632":{"id":"b:2:2505-0:285:1632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2508:1715"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:264:2928":{"id":"0:264:2928","crate_id":0,"name":"Vs14","span":{"filename":"src/windows_registry.rs","begin":[87,4],"end":[87,8]},"visibility":"default","docs":"Visual Studio 14 (2015)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"b:2:2520-0:261:2924":{"id":"b:2:2520-0:261:2924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2523:126","2:2524:1423"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3313-0:261:2924":{"id":"b:2:3313-0:261:2924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:3530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3311:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3315:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:278:596":{"id":"0:278:596","crate_id":0,"name":"eq","span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7719:3761-0:261:2924":{"id":"a:2:7719:3761-0:261:2924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7719:3761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:220":{"id":"0:220","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3061,0],"end":[3065,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2556:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:221:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:87:1645":{"id":"0:87:1645","crate_id":0,"name":"cuda","span":{"filename":"src/lib.rs","begin":[646,4],"end":[653,5]},"visibility":"public","docs":"Set CUDA C++ support.\n\nEnabling CUDA will pass the detected C/C++ toolchain as an argument to\nthe CUDA compiler, NVCC. NVCC itself accepts some limited GNU-like args;\nany other arguments for the C/C++ toolchain will be redirected using\n\"-Xcompiler\" flags.\n\nIf enabled, this also implicitly enables C++ support.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cuda",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11332:307":{"id":"2:11332:307","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11333:54702","`u8`":"1:12391:3194"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:326:651":{"id":"0:326:651","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[92,16],"end":[92,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8538:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8527:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5109:61422":{"id":"5:5109:61422","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:6980:219"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5095:2223":{"id":"5:5095:2223","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6980:219"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2505-0:261:2924":{"id":"b:2:2505-0:261:2924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2508:1715"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":{"restricted":{"parent":"0:36:1627","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2665:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11418:60784":{"id":"2:11418:60784","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11023:4991","prim@char":"1:12374:3180"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11048:4990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5364:1403":{"id":"5:5364:1403","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74:1783":{"id":"0:74:1783","crate_id":0,"name":"ar_flag","span":{"filename":"src/lib.rs","begin":[435,4],"end":[438,5]},"visibility":"public","docs":"Add a flag to the invocation of the ar\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .file(\"src/bar.c\")\n    .ar_flag(\"/NODEFAULTLIB:libc.dll\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:71:1775":{"id":"0:71:1775","crate_id":0,"name":"object","span":{"filename":"src/lib.rs","begin":[404,4],"end":[407,5]},"visibility":"public","docs":"Add an arbitrary object file to link in","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["obj",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2473:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5504:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11343:60771":{"id":"2:11343:60771","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"2:11342:60770","crate::ops::IndexMut":"2:2983:4384","`str`":"1:12380:3185"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2515-0:261:2924":{"id":"b:2:2515-0:261:2924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2485:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2518:126","2:2519:1424"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2718:3531-0:285:1632":{"id":"a:2:2718:3531-0:285:1632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2718:3531","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11416:60782":{"id":"2:11416:60782","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11439:2117":{"id":"2:11439:2117","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:10985:125","`FromStr`":"2:10984:2962"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10984:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10984:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2508:1715":{"id":"2:2508:1715","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2482:131"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2577-0:344:126":{"id":"b:2:2577-0:344:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2570:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:3530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3362:4561","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2579:9275"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"2:2228:3247":{"id":"2:2228:3247","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2226-0:285:1632":{"id":"b:2:2226-0:285:1632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:3530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2220:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2228:3247"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7719:3761-0:344:126":{"id":"a:2:7719:3761-0:344:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7719:3761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11324:60766":{"id":"2:11324:60766","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:121:1983":{"id":"0:121:1983","crate_id":0,"name":"try_compile","span":{"filename":"src/lib.rs","begin":[1002,4],"end":[1155,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThis will return a result instead of panicing; see compile() for the complete description.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3313-0:351:1692":{"id":"b:2:3313-0:351:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:3530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3311:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3315:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:82:642":{"id":"0:82:642","crate_id":0,"name":"file","span":{"filename":"src/lib.rs","begin":[612,4],"end":[615,5]},"visibility":"public","docs":"Add a file which will be compiled","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["p",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2473:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5504:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2511:669":{"id":"2:2511:669","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11412:60780":{"id":"2:11412:60780","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2668:223-0:285:1632":{"id":"a:2:2668:223-0:285:1632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2668:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:284:410":{"id":"0:284:410","crate_id":0,"name":"clone","span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:361:410":{"id":"0:361:410","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[189,9],"end":[189,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11441:5407":{"id":"2:11441:5407","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11363:2017":{"id":"2:11363:2017","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:12374:3180","self::pattern":"2:11023:4991","`None`":"2:48036:174"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:4992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:55797":{"id":"2:11443:55797","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:232:1821":{"id":"0:232:1821","crate_id":0,"name":"to_command","span":{"filename":"src/lib.rs","begin":[3180,4],"end":[3202,5]},"visibility":"public","docs":"Converts this compiler into a `Command` that's ready to be run.\n\nThis is useful for when the compiler needs to be executed and the\ncommand returned will already have the initial arguments and environment\nvariables configured.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"1:5707:1619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11325:60767":{"id":"2:11325:60767","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:362":{"id":"0:362","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,16],"end":[189,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8578:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:363:651"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2509-0:285:1632":{"id":"b:2:2509-0:285:1632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2511:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:108:429":{"id":"0:108:429","crate_id":0,"name":"compiler","span":{"filename":"src/lib.rs","begin":[905,4],"end":[908,5]},"visibility":"public","docs":"Configures the compiler to be used to produce output.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["compiler",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2473:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5504:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:280":{"id":"0:280","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":{"restricted":{"parent":"0:36:1627","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2278:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11351:4149":{"id":"2:11351:4149","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50256:3374","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":{"restricted":{"parent":"0:36:1627","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8578:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:275:651"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2654:215-0:344:126":{"id":"a:2:2654:215-0:344:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2654:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11447:4572":{"id":"2:11447:4572","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4460:4572"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50310:4573","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11445:60786":{"id":"2:11445:60786","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4459:60786"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50301:5230","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2518:126":{"id":"2:2518:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"2:11414:60781":{"id":"2:11414:60781","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:100:1371":{"id":"0:100:1371","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[828,4],"end":[831,5]},"visibility":"public","docs":"Configures the target this configuration will be compiling for.\n\nThis option is automatically scraped from the `TARGET` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .target(\"aarch64-linux-android\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,16],"end":[92,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8578:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:326:651"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2509-0:351:1692":{"id":"b:2:2509-0:351:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2511:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2229-0:285:1632":{"id":"b:2:2229-0:285:1632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:3530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2223:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2231:54550"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11349:2482":{"id":"2:11349:2482","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11350:2467"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50276:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11348:3321":{"id":"2:11348:3321","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49988:3371","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:75:1790":{"id":"0:75:1790","crate_id":0,"name":"asm_flag","span":{"filename":"src/lib.rs","begin":[454,4],"end":[457,5]},"visibility":"public","docs":"Add a flag that will only be used with assembly files.\n\nThe flag will be applied to input files with either a `.s` or\n`.asm` extension (case insensitive).\n\n# Example\n\n```no_run\ncc::Build::new()\n    .asm_flag(\"-Wa,-defsym,abc=1\")\n    .file(\"src/foo.S\")  // The asm flag will be applied here\n    .file(\"src/bar.c\")  // The asm flag will not be applied here\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flag",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Build","id":"0:285:1632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:283":{"id":"0:283","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":{"restricted":{"parent":"0:36:1627","path":"::windows_registry"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2243:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:284:410"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2226-0:344:126":{"id":"b:2:2226-0:344:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:3530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2220:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:344:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2228:3247"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:351:1692":{"id":"0:351:1692","crate_id":0,"name":"Tool","span":{"filename":"src/lib.rs","begin":[190,0],"end":[199,1]},"visibility":"public","docs":"Configuration used to represent an invocation of a C compiler.\n\nThis can be used to figure out what compiler is in use, what the arguments\nto it are, and what the environment variables look like for the compiler.\nThis can be used to further configure other build systems (e.g. forward\nalong CC and/or CFLAGS) or the `to_command` method can be used to run the\ncompiler itself.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:222","a:2:2654:215-0:351:1692","a:2:2668:223-0:351:1692","a:2:7720:3760-0:351:1692","a:2:7719:3761-0:351:1692","a:2:2718:3531-0:351:1692","b:2:2509-0:351:1692","b:2:2520-0:351:1692","b:2:2515-0:351:1692","b:2:2505-0:351:1692","b:2:2226-0:351:1692","b:2:3313-0:351:1692","b:2:2229-0:351:1692","b:5:671-0:351:1692","0:360","0:362"]}},"0:275:651":{"id":"0:275:651","crate_id":0,"name":"fmt","span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8538:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8527:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2668:223-0:261:2924":{"id":"a:2:2668:223-0:261:2924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2668:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VsVers","id":"0:261:2924","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2520-0:351:1692":{"id":"b:2:2520-0:351:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2489:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Tool","id":"0:351:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2523:126","2:2524:1423"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:262:2926":{"id":"0:262:2926","crate_id":0,"name":"Vs12","span":{"filename":"src/windows_registry.rs","begin":[85,4],"end":[85,8]},"visibility":"default","docs":"Visual Studio 12 (2013)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}}},"paths":{"2:46802:5078":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:5927:5840":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"18:671:6281":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:12392:3195":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:5741:8454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:4115:4865":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:4078:5157":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:4376:7362":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:1903:48069":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:47536:6401":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:3374:4560":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:7410:3430":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:9339:6245":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13039:7167":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:53660:5119":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:8410:3369":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:9546:54564":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:50733:5245":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:2903:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:21:661":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:10561:5401":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:3158:4849":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:1632:4676":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:11570:4190":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:3590:7351":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:10257:9093":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:46468:3282":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:10854:6191":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:10121:6172":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:7850:5783":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:51998:8843":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"12:2190:62198":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:10875:6174":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"12:1518:5679":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:10506:6633":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:900:4195":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:5964:4198":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:48499:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"12:1840:4198":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4737:8253":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13082:7179":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:451:3519":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:50805:5322":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:3393:3051":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:11163:8955":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:2489:231":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:608:7824":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:12398:3201":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:4267:8073":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:5210:6568":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:8225:1665":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4126:7990":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:46956:5302":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2705:3918":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:6713:5789":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:9751:6195":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"0:42:2943":{"crate_id":0,"path":["cc","windows_registry","find_vs_version"],"kind":"function"},"1:11860:4857":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:9578:4813":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:9061:6154":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:50793:4628":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:11485:6782":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:1826:4240":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:2226:1610":{"crate_id":1,"path":["std","fs"],"kind":"module"},"2:11956:4387":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:13031:7166":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:5595:8377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:6083:3933":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:8583:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:11744:9157":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:9446:9077":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"18:614:62221":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:562:6652":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:8575:4900":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:3152:4847":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:10490:6632":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"12:777:5658":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:46382:194":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:1505:7830":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"12:1681:141":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:20028:60644":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:9844:6254":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:49870:4787":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:6087:5791":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:11048:4990":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:4183:202":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:2983:4384":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:967:9061":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11536:6795":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:1500:7828":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:2576:3382":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:6313:6407":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:49831:4788":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:3254:7349":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:9897:9083":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:11639:59958":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:1105:4209":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:11762:8975":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:7847:3521":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:47191:4758":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:5315:9153":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:21725:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:9307:3444":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:4322:4574":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:20030:60647":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:9930:6586":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:54159:8907":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:3149:228":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:2816:6054":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:13184:7207":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:12638:7057":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:50070:5218":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:6816:3933":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:1887:41734":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10403:6130":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:11639:6814":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:12395:3198":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:50749:5239":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"9:111:5563":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"16:7803:5875":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4257:8070":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:21315:59487":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:49946:5305":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:8902:1616":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:11873:6843":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:9477:3506":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:47029:3317":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:4318:3993":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:11659:6426":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:50404:4996":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"12:2198:7671":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:53408:5131":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:8339:47985":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:1678:7944":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:2253:4150":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:539:7786":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:4214:4682":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:6555:5068":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:47275:4765":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:8623:4643":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:620:9126":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:8855:3345":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:12550:6994":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:1021:6248":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:10845:6231":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:7430:193":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:6998:8671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:12384:3187":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:13478:7303":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:4605:8196":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:1864:4251":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:2273:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:2921:5751":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:29314:5335":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12756:7099":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11149:6703":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:10663:3451":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:52548:8852":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:2397:4182":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:4288:7359":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:1415:4202":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:3557:7350":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:6928:5302":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8433:3373":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:4510:7365":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:52864:5110":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:50906:200":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:13059:7174":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:2835:4706":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:48537:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:5684:8433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4200:8041":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:52782:5125":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:12164:6904":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:11743:59959":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:9283:9073":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:11519:3444":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:4348:7361":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:4016:239":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:12388:3191":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:7237:8679":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11500:6786":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:5443:8294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:9791:6583":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:6509:8628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:3995:4596":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:4475:8138":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:10796:5220":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:2654:215":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:1738:7966":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"12:60:62200":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"12:669:4201":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:6602:4719":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:6682:5787":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"12:2069:4209":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:48152:3758":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:50562:5006":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:7366:5790":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:4611:8199":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:2437:4558":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:2622:6060":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:49857:4742":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:4432:7364":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:4139:8000":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"12:1044:5666":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:6450:5686":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:9738:6197":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:9700:6193":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:4740:7373":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:2788:4621":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:4335:8108":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:50498:5004":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:457:3520":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:9471:4598":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:5835:8475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:3723:4198":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:8486:4646":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:2665:220":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:3249:6180":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:11217:6718":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11951:6870":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:9778:6196":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:29623:5295":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:11909:6849":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:51727:5127":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:9488:6108":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:6780:3482":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:1636:572":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:5642:5831":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:5503:5826":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:7321:5775":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:11343:6751":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:242:9057":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:4540:8162":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11161:6706":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:5693:3442":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:7461:5777":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:2762:6053":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:47316:4756":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:12008:6882":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:8143:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:53550:5099":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:2984:6057":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:7249:8681":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:1426:193":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:661:4163":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:4534:8159":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:1967:4162":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:8954:3423":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:47019:3318":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:49098:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"0:36:1627":{"crate_id":0,"path":["cc","windows_registry"],"kind":"module"},"6:5841:8476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:1760:5342":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:51703:8841":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:1919:4597":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:9250:9070":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:3707:7354":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11853:6840":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:47509:2083":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:2970:4676":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:4317:8099":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:48034:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:10075:9085":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:12176:6905":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:574:3508":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:6391:5252":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:4329:8105":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10532:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:6451:6393":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:12073:6889":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4690:970":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:9295:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:9909:6584":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:8881:62212":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:4711:769":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:11014:6676":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"12:320:5672":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:11351:1620":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:20325:4979":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:12379:3184":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:2831:4704":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:11734:6590":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:12964:7150":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"12:1859:4675":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:131:40428":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"15:175:5688":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:10942:3391":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:8368:3397":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:5681:5832":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:52706:5118":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:50124:4810":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:4192:5159":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:1359:3933":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:7243:8680":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:4726:8247":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:1771:6145":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:10736:5216":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:7220:8675":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:8368:6129":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7907:5877":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12307:6927":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:3230:3392":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:4338:3512":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:6957:3300":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:3960:4927":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:3753:6382":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4280:8078":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:6975:8660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:49310:3349":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:6721:5859":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:2473:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:6430:8574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:3608:3933":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:29551:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:501:7761":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:545:7789":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:46586:5058":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:12390:3193":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:49557:5405":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:39319:4559":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:990:4205":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:6725:4388":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:5194:6567":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:6124:5815":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:50610:5309":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:5176:4636":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:6030:5844":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:7140:154":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:4629:8205":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:47130:4747":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:11681:3453":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:5154:6030":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:592:7814":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"12:822:4204":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:20235:4589":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:954:4199":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"16:6794:6080":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:3345:3396":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:4653:7370":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"18:609:9055":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:5007:4588":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:5510:8337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:1562:7861":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:8328:3399":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:8389:3367":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:49892:4807":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:771:5444":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:8526:6210":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:1701:7954":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:46507:4562":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:5749:8456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:11368:6755":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:6707:3486":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:5974:5841":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:2662:3916":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:4816:8290":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:11594:6804":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:9316:3373":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:2718:6051":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:48237:3933":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:7226:8676":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:6158:6382":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:47224:4761":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:9658:9078":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:11828:6838":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:21253:8715":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:1887:4256":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:11606:6806":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:2924:3532":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:4616:3356":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:13158:7201":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:3001:6056":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:20007:60642":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:4761:8260":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:6441:5853":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:2466:5472":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:5504:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:2291:6070":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:8064:4171":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:10921:6654":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:8215:4825":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:21351:5340":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:8129:4841":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:11168:8957":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:2780:4617":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:7144:5864":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13594:7330":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:5062:4595":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:6751:3395":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:4423:4905":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:2358:6045":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:6545:8647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:50052:5217":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:6855:5861":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:8137:47983":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13354:7270":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:8510:6568":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:5771:5836":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:48347:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:49782:4797":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:52017:5085":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"0:266:2930":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs15"],"kind":"variant"},"1:9335:3446":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:9831:6253":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:10625:6134":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:4890:6382":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:47286:3370":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11661:6815":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:54136:8906":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:9764:6582":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"12:985:4208":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:5885:4658":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11893:6844":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:9627:6150":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:8047:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:1695:7951":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:5498:8333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:10434:6627":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:8991:62214":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:8578:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:1643:5145":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:1680:4199":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:4417:8133":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:4683:8230":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:47265:4764":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:5533:3473":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:7943:4212":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:5644:1618":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:46869:5386":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:12046:6887":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:0:482":{"crate_id":2,"path":["core"],"kind":"module"},"16:2424:6042":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"14:187:46295":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:10773:5219":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:10374:6206":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:13203:7212":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:46402:197":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:48613:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:5658:3440":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:1811:593":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:1943:5437":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:10939:3389":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:11381:3446":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:2479:145":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:6944:3299":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:13413:7284":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:4286:8081":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:1643:7919":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"12:861:4207":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:12972:7152":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12909:7137":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:10682:6235":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:10721:6651":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:9906:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:153:5755":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:3166:4985":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:54011:8897":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:12781:7109":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:9820:6251":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:3459:1615":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:3550:6382":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:487:9060":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:3484:1612":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:19975:60559":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:12291:6925":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:7992:5811":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:2039:5469":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:49347:2092":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:4737:3473":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"9:622:5547":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:10321:6261":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:50224:5225":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:11748:6827":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:9293:6247":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:21890:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:11774:6830":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:4904:8554":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:7535:5770":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12251:6920":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:56991:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9475:6105":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:4179:8033":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:2596:6100":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:10182:6620":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:2332:6063":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:11436:6757":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4300:8089":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:49076:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:9108:9067":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:7374:5874":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:49791:4796":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:5720:8448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:20247:4981":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:7417:4718":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4496:8139":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:3228:3391":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:6795:5438":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"12:2205:3288":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:12381:3186":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:48794:3336":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"9:382:5500":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:8361:3395":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:4706:8240":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:4252:4576":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:11125:6699":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:8145:3385":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:3155:4848":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:9567:8954":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:305:1397":{"crate_id":1,"path":["std","thread"],"kind":"module"},"17:12211:6917":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:7095:6039":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:2908:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6654:5773":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"12:1534:5680":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:960:4200":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:12391:3194":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:11675:8968":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:39315:5476":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"18:652:6471":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:7335:5788":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:8862:2092":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"9:188:5571":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:49883:4804":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:1737:5343":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:7960:4246":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:5472:5824":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:4115:7982":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:21989:5271":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:4626:7369":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:8162:6177":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:10476:48246":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:10949:6658":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:8110:47979":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:5616:60106":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:9429:4664":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:10159:6619":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8812:3411":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:46527:5811":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"16:3623:7352":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:8446:150":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"5:2949:5434":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:2784:4619":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:5892:4659":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11787:6831":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:1626:4675":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:564:6296":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6308:5850":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:10207:9086":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:4521:199":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:5861:8490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5554:8359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4489:4878":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:5772:8462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:11778:6428":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:6571:5856":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:6500:8625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:12373:3179":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"9:592:5546":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"6:1518:7836":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:47070:4740":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:2732:61650":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:2424:1611":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:4967:4687":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:50959:5250":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:8796:6133":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:11186:8962":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:4902:8552":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:4208:4683":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:3972:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:6048:5757":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:2896:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:52180:5124":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:52228:5109":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13459:7298":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:9436:4815":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:1216:4209":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:11515:6791":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:1637:4677":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:513:7766":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:2696:6050":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:53946:5126":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:8532:8932":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"17:12674:7087":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:8685:4641":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:5201:4394":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:9519:9165":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"15:0:3163":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:51683:8840":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:5536:5828":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:51879:5120":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:507:7764":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12948:7147":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:12387:3190":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:13007:7158":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"18:624:62219":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:8761:4668":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:10508:4251":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"0:268:2932":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs16"],"kind":"variant"},"6:1636:7915":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:11729:8972":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:4224:8055":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:9947:48174":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:6007:3475":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:38123:3906":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:3096:4199":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:49800:4800":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:20687:4982":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:9564:4810":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:53202:5111":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:4231:8059":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6037:6044":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:3468:56316":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"0:270:2934":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs17"],"kind":"variant"},"17:9458:6115":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:47079:3369":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:4361:3994":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:6012:5843":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:5621:3356":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:5739:5834":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"11:44:5656":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:54121:8905":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"18:481:6291":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:412:6428":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:50310:4573":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:5707:1619":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:6768:5860":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:9712:6580":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:46885:5230":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:12216:6429":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:53738:5103":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:4187:5158":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:9452:3478":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12695:7092":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:4310:4580":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:996:4206":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:5504:8336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4449:8136":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:10088:6617":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:12375:3181":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:1751:8697":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:1962:6192":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:8069:4172":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:2252:6029":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11199:6710":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12060:6888":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:6407:238":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:9291:4195":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:3004:4677":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"12:762:4199":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:52942:5098":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:5438:5822":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4621:8202":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:4655:4876":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:48385:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:50285:5228":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:2867:4828":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:4307:8092":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:5692:8434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"18:80:54385":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:10528:6227":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:1552:3356":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:7858:56691":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:11173:4174":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:1672:1052":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:20409:16979":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:6219:5848":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:56978:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:11691:9139":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:1584:6382":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:46534:9144":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:5392:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:5699:8435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:56926:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2750:4603":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:7279:8687":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"12:444:139":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:11528:6793":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:8311:5198":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12485:6943":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:12021:5697":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:7266:5869":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:10752:6130":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:0:3164":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:50753:5320":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:9873:9081":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:2755:4605":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:7489:5747":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10360:6262":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:12378:3183":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:52082:5129":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:52350:5086":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:12394:3197":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:12874:7127":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:3339:3423":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:5896:6393":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:11551:5320":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:560:7798":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:6294:5795":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:9165:62206":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:2661:3530":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:52396:5090":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"9:676:5593":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:52494:8850":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"12:815:4203":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13436:7297":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:2485:232":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:2668:223":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:8074:4174":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:8441:6232":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:9422:9075":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"12:0:3161":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:49318:8830":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:8850:3344":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:2482:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:5011:4592":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"18:96:54386":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:4777:7374":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"18:719:6285":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:5878:201":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:4565:7367":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:4367:8122":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:3375:3356":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:46906:5389":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:11043:4995":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:48178:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:5660:8421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:48170:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:8418:6176":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:2383:4179":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:20196:5134":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:13492:7305":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:12955:7149":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:0:1775":{"crate_id":17,"path":["object"],"kind":"module"},"7:0:1488":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:50206:5224":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:10583:6131":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:7298:58875":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"18:515:6293":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:7166:8672":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:4912:7378":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:8475:6109":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"12:1866:4676":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:48085:1767":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:4583:4875":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:11761:6828":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:20437:4979":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:6981:8662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:8494:6567":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:4294:8086":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:20856:60557":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:6646:6078":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:6329:8541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:4185:8034":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:56965:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6545:5785":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:5582:8371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:1938:4161":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:4461:8137":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:3680:7353":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:10394:6208":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:1067:5468":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:2814:4680":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:46774:5075":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:49365:8835":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:10894:6173":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11106:6698":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:46342:195":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"12:1852:4674":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:4503:4867":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:8944:3422":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:50737:5243":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:1889:4257":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"9:920:5504":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:51897:8842":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:54022:8898":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:10750:56366":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:49335:142":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:2731:3920":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:9118:62209":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:2930:3534":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:52158:5121":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:4559:8172":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:7190:6416":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:944:4198":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:11023:4991":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:7868:5782":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:8148:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:48423:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:4680:7371":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:2273:6028":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:48161:4166":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:135:40429":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:1348:4195":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:6881:5862":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13100:7183":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:2718:3531":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:47233:4762":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:46846:5385":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:8692:4904":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:56952:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8648:4861":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:1511:7833":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:14:1683":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:9274:9072":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:1049:5467":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:36:4389":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:859:3423":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:7086:3535":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:10062:9084":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:10527:56365":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:2937:3423":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:13279:7257":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:6375:8560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:3592:4648":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"0:262:2926":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs12"],"kind":"variant"},"2:49960:4780":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:2944:4675":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6495:5685":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:9382:6577":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12265:6923":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:4970:4685":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:51749:5115":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:50587:5008":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:46899:5388":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:4644:8209":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:3420:3364":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:9328:6244":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11137:6702":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:9267:3423":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:7980:5476":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:1600:7885":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:20404:4589":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"14:40:6673":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:50924:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:48780:3327":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:12377:3182":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:2772:4613":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:21226:4938":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:2920:2120":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:1807:1609":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"17:12926:7142":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:12225:6918":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"9:505:5495":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:3352:4195":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:20428:4589":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:4361:8120":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:39328:3919":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:4976:6389":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:12386:3189":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:10187:6402":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"6:1595:7883":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:54057:8901":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:7307:5873":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:1002:4207":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:12349:6934":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:49031:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"16:7413:5808":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:487:7753":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:2885:6061":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:47200:4759":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:9656:4626":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:10608:6132":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:51980:5100":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:49134:3983":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:5346:9153":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6506:5855":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:50997:4822":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:3191:4988":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:6293:8525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"15:214:5693":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"0:41:2410":{"crate_id":0,"path":["cc","windows_registry","find_tool"],"kind":"function"},"6:5480:8320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:5167:4733":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:12980:7154":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:4597:7368":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:12514:6963":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:8711:4859":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:9885:9082":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:12340:9502":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12816:7113":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:6985:4755":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:7189:5758":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:47527:3396":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:2476:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:4264:3992":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:12850:7125":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:2726:3977":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:7922:11973":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:48773:3326":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:1933:3501":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"0:261:2924":{"crate_id":0,"path":["cc","windows_registry","VsVers"],"kind":"enum"},"2:54198:8908":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:6807:6081":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:8034:5748":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:50745:5238":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:918:4196":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:5360:227":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"18:660:6280":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:49064:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:1525:7838":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:11247:6722":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:12860:7126":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:5810:17191":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:6919:9155":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:7063:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"18:521:6290":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:7948:5780":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:6409:8567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:2244:5473":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:50433:5002":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:5672:8426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:5782:8464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4804:8285":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13231:7220":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:9350:6246":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:7537:56599":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:4659:8216":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:6508:4741":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"12:1029:4210":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:5959:6024":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:11458:6424":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11974:6879":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:678:9147":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:8703:4870":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:6302:8531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:5379:5819":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:6836:3487":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:13527:7318":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:47557:8822":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:12361:6941":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:50772:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:11054:6687":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:9433:9076":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:58300:8916":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:4427:8134":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:5372:4750":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:11721:6823":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:47250:4763":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"13:220:7664":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:12739:7097":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:495:7758":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:21344:8728":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:8121:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:46944:3302":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:22388:5047":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:276:2984":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:9671:6117":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:11028:4992":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:8801:138":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:11235:6719":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:2666:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"12:853:4206":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:5572:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:4745:8255":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:1654:7927":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:6149:5816":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:8971:3426":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:7074:4390":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:21299:59488":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"14:165:46289":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:12730:7093":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:10221:9090":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:939:6382":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:8611:4642":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:11037:4994":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:10733:1619":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:50725:5242":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:13366:7273":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:48094:3423":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:11174:6708":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:8871:9063":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:586:7811":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:46765:8802":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:46446:198":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:3328:158":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:420:5735":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:51773:5107":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"10:0:3159":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:2674:6049":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:2142:573":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:5592:6018":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:6474:5854":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:11997:6880":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"18:0:3165":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:13404:7282":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"18:690:6283":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"11:0:3160":{"crate_id":11,"path":["adler"],"kind":"module"},"1:11531:3445":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:6897:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:13091:7182":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:4906:8556":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:12374:3180":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"18:699:6284":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:1580:7871":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:2478:6046":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:8503:4689":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:10520:6636":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:2456:6069":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:8717:4879":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:20222:5149":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:19962:3906":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:2927:3533":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:50294:5229":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:12380:3185":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:4314:4581":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:2513:1613":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:7976:4252":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:6230:5849":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:54031:8899":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:7022:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:7289:8689":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:5856:5839":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:49150:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:774:139":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:4575:8180":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:11464:6425":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:6134:6407":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"17:8941:9064":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:339:160":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"12:2178:7668":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:0:790":{"crate_id":6,"path":["libc"],"kind":"module"},"6:4354:8118":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:11152:4688":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:719:11977":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:50525:5005":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:48119:3757":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:8774:6127":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:51827:5128":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:11198:4175":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:21758:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:6811:3468":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:9359:3933":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13114:7190":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"12:353:5671":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"18:507:6471":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:52752:5122":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:4879:7377":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:49810:4798":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:9351:4657":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:2833:6026":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:46892:5387":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"0:285:1632":{"crate_id":0,"path":["cc","Build"],"kind":"struct"},"17:8666:6571":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:4300:4579":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:49988:3371":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:2570:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:1301:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:2740:6052":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:4716:8246":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"12:738:4197":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:12393:3196":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:8794:3750":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:10077:4802":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:29565:5294":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:21377:5284":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:6884:212":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:7719:3761":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13141:7197":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:6422:3938":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:3900:3356":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:50721:5240":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:11288:6732":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:9471:4808":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:49972:5212":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:10497:48247":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:7735:6652":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:9613:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:9362:6154":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:4318:7360":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:62:40362":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:9223:48031":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:21857:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:2315:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:686:11976":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"19:0:996":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:973:4203":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:11543:56925":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:6980:219":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:2610:3376":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"0:0:2406":{"crate_id":0,"path":["cc"],"kind":"module"},"5:3419:6382":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:9532:5862":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:4938:4781":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:4102:7973":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:12134:6899":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:11844:5252":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"8:0:3157":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:8981:9065":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:46939:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"11:36:7674":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"9:709:2092":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:12397:3200":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:1550:7852":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:50170:5222":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:8631:6570":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:50630:5310":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:9637:4190":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:11618:33834":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:10838:3443":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:2916:6168":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:6597:5857":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"9:649:5548":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:11338:4252":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:6759:5786":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:11708:6820":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:3125:9062":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:8393:6114":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:2859:6027":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:49978:5213":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:10984:2962":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:8595:3333":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:4428:651":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:3311:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:9719:4256":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:7937:11975":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:21170:4943":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:4664:3316":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:50967:5251":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:7276:5870":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:12399:3202":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:3531:4199":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"16:3448:3052":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:8527:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:49013:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:50597:5009":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:9110:4589":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:13168:7204":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:9553:6154":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"12:2080:4210":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:6679:3479":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:5488:5825":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:20844:4726":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:5424:4198":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:54002:8896":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:6322:8537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:11094:4998":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:736:6287":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:8597:3334":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"12:1120:5669":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:10139:6154":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:6572:8653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:4431:4906":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:7350:6087":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:11998:3911":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"2:49912:4806":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:1604:3423":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11559:6800":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:6538:8644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"12:393:62201":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:6479:8611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:8593:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"12:274:7665":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:6319:4396":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:2819:4698":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:11447:6423":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"12:725:4196":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:21692:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:1385:4197":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:3017:6488":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"9:896:5507":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:8596:6569":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:13340:7264":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:6799:60531":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:2309:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:47049:4742":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:2650:3384":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:113:54387":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:4551:8168":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:7148:9260":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12630:7056":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"12:1845:4199":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:11977:8977":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:5472:8318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:4712:7372":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:6354:5852":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"14:215:7617":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"18:707:4994":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:2586:6405":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:10847:4814":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:6494:4658":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:7746:9179":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4810:8287":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:11900:4858":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:48787:3335":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:8822:62213":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:6476:6399":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:10670:6234":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11259:6723":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"9:586:5544":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:9193:62215":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:3845:7355":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:6632:5858":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:13126:7193":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:4685:60015":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:48110:3933":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:6697:6076":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:9401:6579":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:1707:4871":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:2500:6058":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:2804:4678":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:2409:3092":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:12103:6894":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:8104:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:10404:4872":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10245:9092":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:13327:7258":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:2736:61654":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:6881:3289":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:7521:5769":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:12033:6885":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:46241:4567":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:13024:7165":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:2776:4615":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:628:4570":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:8589:3335":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:13374:7276":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:11249:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:7545:5796":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:10283:9095":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:667:226":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:2243:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:52326:5104":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:7894:3507":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:7208:8673":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:12356:54559":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:11714:8971":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:46786:5076":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:21261:8716":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:21626:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:8911:62207":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:9371:9067":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:5225:3749":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:10466:6630":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:676:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:6822:3933":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"12:659:3933":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:10420:6263":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:6749:4198":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:11363:54563":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:2843:4710":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:24:593":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:47110:4745":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:1338:3423":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:5733:8452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:9509:4809":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:10296:9096":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:5876:8501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:52372:5089":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:4768:8263":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:2961:5034":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"5:6765:61762":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:11666:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:6668:5774":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:11034:6686":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:1123:4211":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:9601:6144":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4274:8076":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:21202:8710":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:6262:5778":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:9805:6250":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:47171:4757":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:8220:4826":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:11921:4865":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:600:7819":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:57004:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9681:6524":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:48461:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:7026:147":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:6542:201":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:4253:7358":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:6269:8508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:4840:7376":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:20952:4980":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:3179:7348":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:5606:5830":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:7953:2005":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"14:202:5443":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:9031:62211":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:4309:5165":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:6740:5446":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:2792:4623":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:9524:9166":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:7214:8674":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:54068:8902":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13214:7213":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:21923:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4506:8146":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"12:98:5670":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:5678:3441":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:10577:5403":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:9398:4801":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:47162:4749":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:5824:3448":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:4565:8174":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:910:3933":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"12:697:4202":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:598:1621":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:4244:4575":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:11547:6798":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:6164:5767":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:12148:6900":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:53862:5088":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:50576:5007":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:20284:4727":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:52628:5130":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:0:280":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:7035:3536":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12087:6892":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:9021:9066":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:4031:6384":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:11218:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:6230:201":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:4239:8061":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:50916:206":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:8585:3327":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"5:6309:4395":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:10973:6672":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:3312:3379":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:46500:4987":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:5175:46362":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:2029:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"12:1555:5681":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:8591:3336":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:8552:4899":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"17:1931:6141":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:4266:4578":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:2797:4693":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"12:1832:3423":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:3160:4738":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:8960:3425":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:4404:7363":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:7055:4724":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13506:7312":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:5113:7379":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:29529:5147":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:969:4202":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:10796:6228":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:9608:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:46925:5080":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:9343:3423":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:5402:5820":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:9359:4814":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:11228:3365":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:8241:6233":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11813:6835":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:8739:8541":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:2311:5750":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:8212:6229":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:50717:5237":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"6:5605:8384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:4515:8151":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"18:727:6286":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:47546:8820":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:7934:5779":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:7002:5441":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:6448:8585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:20692:16997":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:13393:7281":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:11617:6807":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:7887:5784":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"12:1085:5668":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:9384:4661":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:21278:59482":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:0:1341":{"crate_id":1,"path":["std"],"kind":"module"},"17:10445:6231":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"18:574:6471":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:38106:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:3076:4385":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:2809:4679":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:8538:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:4208:7357":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:7868:3496":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:7803:6419":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:4051:5156":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12609:7046":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:3267:3387":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:21186:8707":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:11841:6839":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:46358:193":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:13580:7327":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:6953:8659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:2399:4183":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:46826:5391":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:10774:6128":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:9489:54558":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:2664:221":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:4797:8282":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:1668:7938":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12617:7049":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:2548:6048":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:1714:7957":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:9631:6140":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:4665:8219":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:4592:8191":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4247:8064":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4778:8268":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:247:9058":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:9071:62210":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:5587:8372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10108:6171":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:9539:6142":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:21365:5285":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12198:6916":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:13382:7277":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:48221:3423":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:7057:4199":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:6276:5794":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:5625:8400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:9183:9069":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:53908:5106":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11070:6691":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13148:7198":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:53052:5087":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:20276:4589":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:646:40759":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"12:300:5673":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:50729:5241":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:2556:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:5574:5829":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:8731:9138":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:4401:4903":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"18:548:138":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:2673:3513":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"12:810:4200":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:9365:4660":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:6178:5846":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:4764:4729":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:50319:5231":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:47139:4748":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:2825:4701":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:3474:5452":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:2250:4173":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:4118:3991":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"9:863:5505":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:5523:8338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:6290:4394":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:6248:5768":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:11837:4647":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:9155:9068":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:5713:8446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:20950:4589":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:5837:4753":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:1435:5465":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:29489:4380":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:7615:5781":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:12278:6924":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"9:0:3158":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:21149:8705":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"16:7113:6040":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:7215:5865":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:4536:7366":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:5226:7380":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:48651:3474":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"12:387:62199":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:50106:4812":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:2019:61759":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"18:636:6482":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:8272:6236":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:21238:4939":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:9597:162":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"18:599:62222":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:11300:6735":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4398:8132":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:931:4197":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:21824:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:8528:1615":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:2901:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:5821:2759":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:4206:8043":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:3154:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:12345:11978":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:3228:4989":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:965:4201":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:50256:3374":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:50020:4808":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:1825:4386":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:4635:8206":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:8588:4641":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"16:7022:6036":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:1394:4200":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:2436:4589":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:9550:4812":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:12396:3199":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:6675:2083":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"18:755:6288":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:567:7801":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:8137:3383":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"9:956:5503":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:2026:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:7447:5776":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:10708:6230":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:8587:3326":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"12:1003:4209":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:8701:6572":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:53018:5105":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:3139:5297":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8469:4645":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:4990:6391":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:4:980":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:13134:7196":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:4439:4908":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:47180:4752":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:9303:6152":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"12:834:4205":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10984:3507":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:4012:4857":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:6040:3477":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:2766:4610":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10546:47986":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:8081:4175":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:9618:4625":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:5727:8449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"12:1872:4677":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:545:3501":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:6214:4658":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:3462:3385":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"9:977:5508":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"12:632:3423":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:5549:5409":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"7:32:45556":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:1620:4674":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:50002:3373":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:9913:4172":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:12896:7131":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:11315:6741":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:50980:156":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6101:5765":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:2978:4674":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12748:7098":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:5817:5838":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:5365:5766":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12768:7104":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:10350:6128":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:10455:6264":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:386:9059":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:3948:4926":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:52128:5117":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:6554:8650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:9691:6194":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:4892:4578":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:2848:4713":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:7413:4716":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:9857:6179":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:7071:5863":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:1114:4210":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:7825:5876":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:10110:4803":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:10945:3387":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:2256:3049":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:50450:5003":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:6392:8562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:1476:141":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:11588:8967":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:6188:5847":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:49731:5211":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:7958:5812":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:11800:6833":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:1091:4208":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"12:751:4198":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"18:582:3906":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:1608:3933":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:8697:4907":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:58279:8915":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"12:2184:7669":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:8951:62208":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:7846:4589":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:13518:7314":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:581:7809":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:2909:3375":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11939:6868":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:53800:5123":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:47101:4744":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:5995:5842":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:13557:7323":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:48309:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11087:6693":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:554:7795":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12118:6898":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:9501:6152":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:12836:7121":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4191:8036":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"9:19:5595":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:2979:4383":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:4673:8224":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:21096:5269":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:519:7769":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:4581:8183":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11576:6803":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:6277:8513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:10577:4829":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"18:644:6471":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:47301:4766":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"13:108:62204":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:2220:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"15:193:5689":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:54083:8903":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:2402:6064":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:1686:7945":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:3951:4639":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:3900:3423":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"3:223:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:13536:7320":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:6323:5771":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"0:264:2928":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs14"],"kind":"variant"},"6:4527:8158":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"7:79:45563":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:3794:4195":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:12028:5697":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:3477:3366":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:5568:8370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:46816:5390":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:10881:6422":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:11330:6747":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:6787:193":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13176:7205":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:1615:4199":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:46424:196":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13221:7215":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:12884:7128":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:29523:4381":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:8427:3371":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:6869:3288":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:1611:4198":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:52035:8844":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:6757:5447":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"12:2053:4208":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:10332:6268":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"18:681:6282":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:4934:4783":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:47502:8817":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:12022:6884":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"14:7:9122":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:50266:5226":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:13192:7208":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:49357:8834":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"12:119:5674":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:2728:8691":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:11901:137":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:0:3156":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:9512:9164":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:7475:5772":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:8561:6190":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:2278:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:2380:6041":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:4742:4685":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:6439:9154":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:9592:4811":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:842:5445":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:6139:5845":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:4260:4577":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:56569:5257":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:7266:8686":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:39279:3449":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:47214:4760":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:46838:5231":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:52447:8849":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:7784:6417":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:50419:4999":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"18:538:6295":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:8643:4860":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:7245:5867":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:6783:3483":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:11271:6724":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:2727:61651":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:4254:5164":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13071:7175":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:50301:5230":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:10822:47987":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:51795:5095":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"14:0:3162":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:3402:1614":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:21956:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:6638:9155":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:4653:8215":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:2839:4708":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:11834:4598":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:4135:7356":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:9413:4663":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:3362:4561":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:3176:4986":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:11238:56927":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"9:33:5596":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:7227:5866":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:4094:6384":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:766:6289":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"0:351:1692":{"crate_id":0,"path":["cc","Tool"],"kind":"struct"},"1:11756:8974":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:11684:6819":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:49037:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:52274:5097":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:48575:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:8055:6126":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:29729:5296":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:2760:4607":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:1230:4211":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:8581:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:52304:5101":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:48229:4195":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:2248:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:3190:3389":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:7720:3760":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:12337:6231":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:6076:3485":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"12:1138:4211":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:6407:6414":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"0:39:2017":{"crate_id":0,"path":["cc","windows_registry","find"],"kind":"function"},"1:6602:161":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:10997:6673":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:4015:4858":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:20278:4725":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"13:0:3155":{"crate_id":13,"path":["std_detect"],"kind":"module"},"12:646:4195":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:1404:4201":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:2784:6055":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:9466:9161":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:5761:1620":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:19990:60559":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:56939:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8420:3370":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:1828:4241":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:9644:6139":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10233:9091":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:11356:6752":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:3192:3390":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:7920:5878":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:46541:3992":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:49902:4805":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:8752:3371":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:6779:3933":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:4096:7972":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:575:7806":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:54106:8904":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:2648:6059":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:13572:7324":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:4598:8194":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:9918:6421":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:52525:8851":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:4437:8135":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:5085:4587":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:4152:8010":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:52988:5102":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:11208:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:1608:7890":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:10642:6237":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:7581:5793":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:6311:8532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:51958:5096":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:21791:3514":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:9722:6581":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:4212:8046":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:21043:5267":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:9526:6143":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:11186:6709":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:6914:3301":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:979:4204":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:46972:5303":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:2570:6099":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:6734:3933":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"0:344:126":{"crate_id":0,"path":["cc","Error"],"kind":"struct"},"1:12385:3188":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:3084:3398":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"5:1033:61896":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:8815:142":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:8637:4859":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:7297:5872":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:46759:4573":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:5793:5837":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"14:160:9122":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:50382:4993":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:9577:6146":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:12797:7112":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:4698:8235":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:4808:7375":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:46280:5035":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:887:3423":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:50152:5221":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:8377:3365":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:6974:8695":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:2223:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:6989:4754":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"14:221:7619":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"18:590:6473":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:12322:6931":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"14:31:9122":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:11875:200":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"16:2526:6047":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:12372:3178":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:6850:3488":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:1574:7869":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:50741:5244":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:53984:5091":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:1722:7961":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:5715:5833":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:12934:7145":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:8306:5197":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:681:9149":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:1971:5470":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"12:1628:6380":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:48102:4195":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:524:6020":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:12237:6919":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:8735:4686":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:6524:8635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:11342:4684":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:7637:5764":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:9397:4662":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:6337:5851":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:21659:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:7256:5868":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:5449:4751":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:7721:3759":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:13047:7168":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:20159:4976":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"9:800:7725":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:7255:8682":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:6415:8569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:1376:4196":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"12:1065:5667":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:5450:5823":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"9:827:5502":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:11995:8978":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:5758:5835":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:10812:5223":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:4522:5382":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:6010:6382":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:2745:4600":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:8295:47984":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:10310:9097":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:49561:4789":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:1541:7846":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:49046:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:51009:4820":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:49326:3348":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:3269:3388":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:8091:4176":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:9317:6243":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:20435:5083":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:11607:4625":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:48246:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:47518:8818":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:2381:4178":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"18:491:6470":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:5009:4594":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:8885:3421":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:49820:4799":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:5513:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:4061:3356":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:4836:4690":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:8814:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:10591:2688":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:4452:4909":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:215:5432":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:47148:8813":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:9120:217":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:5519:5827":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:1201:4210":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:5424:5821":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:47120:4746":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:46327:5032":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:46863:4573":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:6843:6083":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:7404:5792":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:6352:8559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:531:6294":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:5534:8346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:524:6403":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:5541:8350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:8440:3374":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:6424:8573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4346:8113":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:1185:4208":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:47092:4743":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:12389:3192":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:7037:3757":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"12:1836:3933":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:6820:7452":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:6014:3476":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:4379:8131":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:7824:4992":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:6991:5440":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:9321:3445":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:50276:5227":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:25198:5072":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:7287:5871":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:10270:9094":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:2983:5435":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:9289:3443":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:10385:6207":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:20009:60646":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:11605:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:1532:7841":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:6115:5763":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:9263:9071":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:51857:5116":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:51928:5108":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:7873:3505":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:48271:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:54042:8900":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"}},"external_crates":{"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}