{"root":"0:0:2584","crate_version":"1.0.83","includes_private":false,"index":{"0:411:431":{"id":"0:411:431","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[193,9],"end":[193,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2755:223-0:394:128":{"id":"a:2:2755:223-0:394:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12246:320":{"id":"2:12246:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12247:319","`u8`":"1:12050:1544"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12256:33106":{"id":"2:12256:33106","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12039:1441","str::slice_mut_unchecked":"2:12257:33107","crate::ops::Index":"2:3052:9800"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2253-0:401:1796":{"id":"b:2:2253-0:401:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:3785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:1710"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12247:319":{"id":"2:12247:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12050:1544"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:1753":{"id":"0:119:1753","crate_id":0,"name":"opt_level","span":{"filename":"src/lib.rs","begin":[929,4],"end":[932,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"primitive":"u32"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12355:26048":{"id":"2:12355:26048","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12250:27944":{"id":"2:12250:27944","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41757:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8472:4013-0:394:128":{"id":"a:2:8472:4013-0:394:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:4013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12360:33122":{"id":"2:12360:33122","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4523:33122"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44015:9898","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12341:2700":{"id":"2:12341:2700","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:9887"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:9882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:1065":{"id":"0:133:1065","crate_id":0,"name":"pic","span":{"filename":"src/lib.rs","begin":[1034,4],"end":[1037,5]},"visibility":"public","docs":"Configures whether the compiler will emit position independent code.\n\nThis option defaults to `false` for `windows-gnu` and bare metal targets and\nto `true` for all other targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pic",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12331:33119":{"id":"2:12331:33119","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12309:33112":{"id":"2:12309:33112","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:9882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2317:190","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:326:627"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:212:2676":{"id":"0:212:2676","crate_id":0,"name":"try_get_ranlib","span":{"filename":"src/lib.rs","begin":[2906,4],"end":[2912,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nThis will return a result instead of panicing;\nsee [`get_ranlib()`] for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5448:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:711":{"id":"0:62:711","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[173,4],"end":[175,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"io::Error","id":"1:2923:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[178,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9371:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12260:2915":{"id":"2:12260:2915","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12033:427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43686:9894","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12321:33115":{"id":"2:12321:33115","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11937:9887","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::match_indices":"2:12318:33114"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43884:9904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:9882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:322":{"id":"0:322","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9366:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:323:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:398:431":{"id":"0:398:431","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[155,9],"end":[155,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314:3213":{"id":"0:314:3213","crate_id":0,"name":"Vs14","span":{"filename":"src/windows_registry.rs","begin":[88,4],"end":[88,8]},"visibility":"default","docs":"Visual Studio 14 (2015)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"5:684:9497":{"id":"5:684:9497","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1761":{"id":"0:95:1761","crate_id":0,"name":"shared_flag","span":{"filename":"src/lib.rs","begin":[613,4],"end":[616,5]},"visibility":"public","docs":"Set the `-shared` flag.\n\nWhen enabled, the compiler will produce a shared object which can\nthen be linked with other objects to form an executable.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["shared_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:401:1796":{"id":"0:401:1796","crate_id":0,"name":"Tool","span":{"filename":"src/lib.rs","begin":[194,0],"end":[203,1]},"visibility":"public","docs":"Configuration used to represent an invocation of a C compiler.\n\nThis can be used to figure out what compiler is in use, what the arguments\nto it are, and what the environment variables look like for the compiler.\nThis can be used to further configure other build systems (e.g. forward\nalong CC and/or CFLAGS) or the `to_command` method can be used to run the\ncompiler itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:254","a:2:8472:4013-0:401:1796","a:2:2755:223-0:401:1796","a:2:2812:3786-0:401:1796","a:2:8471:4014-0:401:1796","a:2:2772:231-0:401:1796","b:2:2253-0:401:1796","b:2:2561-0:401:1796","b:2:2256-0:401:1796","b:2:3391-0:401:1796","b:2:2550-0:401:1796","b:2:2546-0:401:1796","b:2:2556-0:401:1796","b:5:680-0:401:1796","0:410","0:412"]}}},"b:2:2253-0:333:1737":{"id":"b:2:2253-0:333:1737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:3785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:1710"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:140:2124":{"id":"0:140:2124","crate_id":0,"name":"try_compile","span":{"filename":"src/lib.rs","begin":[1086,4],"end":[1249,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThis will return a result instead of panicing; see compile() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2561-0:394:128":{"id":"b:2:2561-0:394:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2556-0:333:1737":{"id":"b:2:2556-0:333:1737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:273:2916":{"id":"0:273:2916","crate_id":0,"name":"is_like_msvc","span":{"filename":"src/lib.rs","begin":[3625,4],"end":[3630,5]},"visibility":"public","docs":"Whether the tool is MSVC-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:33779","5:5511:2398","5:5514:33780","5:5517:3012","5:5525:33781","5:5526:33782","5:5527:3680","5:5528:26050","5:5529:26051"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:153:2307":{"id":"0:153:2307","crate_id":0,"name":"try_expand","span":{"filename":"src/lib.rs","begin":[1562,4],"end":[1585,5]},"visibility":"public","docs":"This will return a result instead of panicing; see expand() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6886:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330":{"id":"0:330","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,31],"end":[82,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2767:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12267:31308":{"id":"2:12267:31308","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44008:9888","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2256-0:394:128":{"id":"b:2:2256-0:394:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:3785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:25655"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12262:9650":{"id":"2:12262:9650","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43702:3660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"1:2923:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:711"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:55:2163":{"id":"0:55:2163","crate_id":0,"name":"find","span":{"filename":"src/windows_registry.rs","begin":[35,0],"end":[37,1]},"visibility":"public","docs":"Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.\n\nThe `target` argument is the target that the tool should work for (e.g.\ncompile or link for) and the `tool` argument is the tool to find (e.g.\n`cl.exe` or `link.exe`).\n\nThis function will return `None` if the tool could not be found, or it will\nreturn `Some(cmd)` which represents a command that's ready to execute the\ntool with the appropriate environment variables set.\n\nNote that this function always returns `None` for non-MSVC targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::process::Command","id":"1:5448:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3391-0:401:1796":{"id":"b:2:3391-0:401:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:3785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2556-0:311:3209":{"id":"b:2:2556-0:311:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12291:27977":{"id":"2:12291:27977","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11937:9887","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::split":"2:12285:2478"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43734:9907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:9882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:1732":{"id":"0:52:1732","crate_id":0,"name":"windows_registry","span":{"filename":"src/windows_registry.rs","begin":[11,0],"end":[896,1]},"visibility":"public","docs":"A helper module to probe the Windows Registry when looking for\nwindows-specific tools.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:55:2163","0:57:2588","0:311:3209","0:58:3223"],"is_stripped":false}}},"0:149:2222":{"id":"0:149:2222","crate_id":0,"name":"compile","span":{"filename":"src/lib.rs","begin":[1288,4],"end":[1292,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\n# Library name\n\nThe `output` string argument determines the file name for the compiled\nlibrary. The Rust compiler will create an assembly named \"lib\"+output+\".a\".\nMSVC will create a file named output+\".lib\".\n\nThe choice of `output` is close to arbitrary, but:\n\n- must be nonempty,\n- must not contain a path separator (`/`),\n- must be unique across all `compile` invocations made by the same build\n  script.\n\nIf your build script compiles a single source file, the base name of\nthat source file would usually be reasonable:\n\n```no_run\ncc::Build::new().file(\"blobstore.c\").compile(\"blobstore\");\n```\n\nCompiling multiple source files, some people use their crate's name, or\ntheir crate's name + \"-cc\".\n\nOtherwise, please use your imagination.\n\nFor backwards compatibility, if `output` starts with \"lib\" *and* ends\nwith \".a\", a second \"lib\" prefix and \".a\" suffix do not get added on,\nbut this usage is deprecated; please omit `lib` and `.a` in the argument\nthat you pass.\n\n# Panics\n\nPanics if `output` is not formatted correctly or if one of the underlying\ncompiler commands fails. It can also panic if it fails reading file names\nor creating directories.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:401:1796":{"id":"b:5:680-0:401:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2864","5:683:1937","5:684:9497"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2755:223-0:311:3209":{"id":"a:2:2755:223-0:311:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:100:1746":{"id":"0:100:1746","crate_id":0,"name":"files","span":{"filename":"src/lib.rs","begin":[655,4],"end":[664,5]},"visibility":"public","docs":"Add files which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7350:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:7350:152","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2514:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:1749":{"id":"0:113:1749","crate_id":0,"name":"cpp_set_stdlib","span":{"filename":"src/lib.rs","begin":[879,4],"end":[887,5]},"visibility":"public","docs":"Force the C++ compiler to use the specified standard library.\n\nSetting this option will automatically set `cpp_link_stdlib` to the same\nvalue.\n\nThe default value of this option is always `None`.\n\nThis option has no effect when compiling for a Visual Studio based\ntarget.\n\nThis option sets the `-stdlib` flag, which is only supported by some\ncompilers (clang, icc) but not by others (gcc). The library will not\ndetect which compiler is used, as such it is the responsibility of the\ncaller to ensure that this option is only used in conjunction with a\ncompiler which supports the `-stdlib` flag.\n\nA value of `None` indicates that no specific C++ standard library should\nbe used, otherwise `-stdlib` is added to the compile invocation.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .cpp_set_stdlib(\"c++\")\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_set_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2812:3786-0:333:1737":{"id":"a:2:2812:3786-0:333:1737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:3786","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:96:1762":{"id":"0:96:1762","crate_id":0,"name":"static_flag","span":{"filename":"src/lib.rs","begin":[632,4],"end":[635,5]},"visibility":"public","docs":"Set the `-static` flag.\n\nWhen enabled on systems that support dynamic linking, this prevents\nlinking with the shared libraries.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .static_flag(true)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3391-0:333:1737":{"id":"b:2:3391-0:333:1737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:3785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:117:1467":{"id":"0:117:1467","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[902,4],"end":[905,5]},"visibility":"public","docs":"Configures the target this configuration will be compiling for.\n\nThis option is automatically scraped from the `TARGET` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .target(\"aarch64-linux-android\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12318:33114":{"id":"2:12318:33114","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11937:9887","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::rmatch_indices":"2:12321:33115"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43866:9903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2772:231-0:311:3209":{"id":"a:2:2772:231-0:311:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:83:1873":{"id":"0:83:1873","crate_id":0,"name":"define","span":{"filename":"src/lib.rs","begin":[403,4],"end":[407,5]},"visibility":"public","docs":"Specify a `-D` variable with an optional value.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .define(\"FOO\", \"BAR\")\n    .define(\"BAZ\", None)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["val",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:1877":{"id":"0:86:1877","crate_id":0,"name":"object","span":{"filename":"src/lib.rs","begin":[410,4],"end":[413,5]},"visibility":"public","docs":"Add an arbitrary object file to link in","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["obj",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2514:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253:60":{"id":"0:253:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[3410,4],"end":[3412,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:3680":{"id":"5:5527:3680","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:1760":{"id":"0:136:1760","crate_id":0,"name":"static_crt","span":{"filename":"src/lib.rs","begin":[1068,4],"end":[1071,5]},"visibility":"public","docs":"Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.\n\nThis option defaults to `false`, and affect only msvc targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_crt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12297:33110":{"id":"2:12297:33110","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11937:9887","str::split":"2:12285:2478","prim@char":"1:12033:427","str::split_terminator":"2:12294:33109"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43784:9910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:9882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1745":{"id":"0:97:1745","crate_id":0,"name":"no_default_flags","span":{"filename":"src/lib.rs","begin":[643,4],"end":[646,5]},"visibility":"public","docs":"Disables the generation of default compiler flags. The default compiler\nflags may cause conflicts in some cross compiling scenarios.\n\nSetting the `CRATE_CC_NO_DEFAULTS` environment variable has the same\neffect as setting this to `true`. The presence of the environment\nvariable and the value of `no_default_flags` will be OR'd together.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["no_default_flags",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8472:4013-0:401:1796":{"id":"a:2:8472:4013-0:401:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:4013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12258:2626":{"id":"2:12258:2626","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12259:27967"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:540":{"id":"0:121:540","crate_id":0,"name":"debug","span":{"filename":"src/lib.rs","begin":[948,4],"end":[951,5]},"visibility":"public","docs":"Configures whether the compiler will emit debug information when\ngenerating object files.\n\nThis option is automatically scraped from the `DEBUG` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["debug",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2316":{"id":"0:155:2316","crate_id":0,"name":"expand","span":{"filename":"src/lib.rs","begin":[1599,4],"end":[1604,5]},"visibility":"public","docs":"Run the compiler, returning the macro-expanded version of the input files.\n\nThis is only relevant for C and C++ files.\n\n# Panics\nPanics if more than one file is present in the config, or if compiler\npath has an invalid file name.\n\n# Example\n```no_run\nlet out = cc::Build::new().file(\"src/foo.c\").expand();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6886:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:318:3217":{"id":"0:318:3217","crate_id":0,"name":"Vs16","span":{"filename":"src/windows_registry.rs","begin":[92,4],"end":[92,8]},"visibility":"default","docs":"Visual Studio 16 (2019)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:106:1763":{"id":"0:106:1763","crate_id":0,"name":"warnings_into_errors","span":{"filename":"src/lib.rs","begin":[763,4],"end":[766,5]},"visibility":"public","docs":"Set warnings into errors flag.\n\nDisabled by default.\n\nWarning: turning warnings into errors only make sense\nif you are a developer of the crate using cc-rs.\nSome warnings only appear on some architecture or\nspecific version of the compiler. Any user of this crate,\nor any other crate depending on it, could fail during\ncompile time.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings_into_errors(true)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings_into_errors",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:1759":{"id":"0:134:1759","crate_id":0,"name":"use_plt","span":{"filename":"src/lib.rs","begin":[1049,4],"end":[1052,5]},"visibility":"public","docs":"Configures whether the Procedure Linkage Table is used for indirect\ncalls into shared libraries.\n\nThe PLT is used to provide features like lazy binding, but introduces\na small performance loss due to extra pointer indirection. Setting\n`use_plt` to `false` can provide a small performance increase.\n\nNote that skipping the PLT requires a recent version of GCC/Clang.\n\nThis only applies to ELF targets. It has no effect on other platforms.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["use_plt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:1756":{"id":"0:129:1756","crate_id":0,"name":"ranlib","span":{"filename":"src/lib.rs","begin":[999,4],"end":[1002,5]},"visibility":"public","docs":"Configures the tool used to index archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ranlib",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2514:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12274:2132":{"id":"2:12274:2132","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:9887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:9882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12285:2478":{"id":"2:12285:2478","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11937:9887","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::split_whitespace":"2:12263:2652","str::rsplit":"2:12291:27977"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43716:3661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12326:33116":{"id":"2:12326:33116","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12356:29077":{"id":"2:12356:29077","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39786:27891","Self::is_ascii":"2:12355:26048"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39786:27891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:2182":{"id":"0:156:2182","crate_id":0,"name":"get_compiler","span":{"filename":"src/lib.rs","begin":[1624,4],"end":[1629,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis function will return a `Tool` which represents the culmination\nof this configuration at a snapshot in time. The returned compiler can\nbe inspected (e.g. the path, arguments, environment) to forward along to\nother tools, or the `to_command` method can be used to invoke the\ncompiler itself.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:267:313":{"id":"0:267:313","crate_id":0,"name":"args","span":{"filename":"src/lib.rs","begin":[3568,4],"end":[3570,5]},"visibility":"public","docs":"Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"OsString","id":"1:1980:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2256-0:401:1796":{"id":"b:2:2256-0:401:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:3785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:25655"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12306:33111":{"id":"2:12306:33111","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:26050":{"id":"5:5528:26050","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12358:26053"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:33781":{"id":"5:5525:33781","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:782":{"id":"0:79:782","crate_id":0,"name":"include","span":{"filename":"src/lib.rs","begin":[358,4],"end":[361,5]},"visibility":"public","docs":"Add a directory to the `-I` or include path for headers\n\n# Example\n\n```no_run\nuse std::path::Path;\n\nlet library_path = Path::new(\"/path/to/library\");\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .include(library_path)\n    .include(\"src\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2514:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12245:33105":{"id":"2:12245:33105","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2556-0:394:128":{"id":"b:2:2556-0:394:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5773:1499":{"id":"5:5773:1499","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:2588":{"id":"0:57:2588","crate_id":0,"name":"find_tool","span":{"filename":"src/windows_registry.rs","begin":[43,0],"end":[45,1]},"visibility":"public","docs":"Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["_tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:1750":{"id":"0:103:1750","crate_id":0,"name":"cuda","span":{"filename":"src/lib.rs","begin":[691,4],"end":[698,5]},"visibility":"public","docs":"Set CUDA C++ support.\n\nEnabling CUDA will invoke the CUDA compiler, NVCC. While NVCC accepts\nthe most common compiler flags, e.g. `-std=c++17`, some project-specific\nflags might have to be prefixed with \"-Xcompiler\" flag, for example as\n`.flag(\"-Xcompiler\").flag(\"-fpermissive\")`. See the documentation for\n`nvcc`, the CUDA compiler driver, at https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/\nfor more information.\n\nIf enabled, this also implicitly enables C++ support.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cuda",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:1881":{"id":"0:88:1881","crate_id":0,"name":"flag","span":{"filename":"src/lib.rs","begin":[425,4],"end":[428,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"-ffunction-sections\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12347:3424":{"id":"2:12347:3424","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:9887"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:1751":{"id":"0:104:1751","crate_id":0,"name":"cudart","span":{"filename":"src/lib.rs","begin":[706,4],"end":[711,5]},"visibility":"public","docs":"Link CUDA run-time.\n\nThis option mimics the `--cudart` NVCC command-line option. Just like\nthe original it accepts `{none|shared|static}`, with default being\n`static`. The method has to be invoked after `.cuda(true)`, or not\nat all, if the default is right for the project.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cudart",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[184,0],"end":[184,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","cause","type_id","provide","source"],"trait":{"name":"Error","id":"2:2608:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2546-0:394:128":{"id":"b:2:2546-0:394:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:1785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2253-0:394:128":{"id":"b:2:2253-0:394:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:3785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:1710"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2772:231-0:333:1737":{"id":"a:2:2772:231-0:333:1737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12241:33104":{"id":"2:12241:33104","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12239:33103"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2258:25655":{"id":"2:2258:25655","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12363:33123":{"id":"2:12363:33123","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4521:33123"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44033:9900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:1748":{"id":"0:109:1748","crate_id":0,"name":"cpp_link_stdlib","span":{"filename":"src/lib.rs","begin":[838,4],"end":[844,5]},"visibility":"public","docs":"Set the standard library to link against when compiling with C++\nsupport.\n\nIf the `CXXSTDLIB` environment variable is set, its value will\noverride the default value, but not the value explicitly set by calling\nthis function.\n\nA value of `None` indicates that no automatic linking should happen,\notherwise cargo will link against the specified library.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n- `c++_shared` or `c++_static` for Android\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .cpp_link_stdlib(\"stdc++\")\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_link_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:1953":{"id":"0:94:1953","crate_id":0,"name":"try_flags_from_environment","span":{"filename":"src/lib.rs","begin":[594,4],"end":[598,5]},"visibility":"public","docs":"Add flags from the specified environment variable.\n\nNormally the `cc` crate will consult with the standard set of environment\nvariables (such as `CFLAGS` and `CXXFLAGS`) to construct the compiler invocation. Use of\nthis method provides additional levers for the end user to use when configuring the build\nprocess.\n\nJust like the standard variables, this method will search for an environment variable with\nappropriate target prefixes, when appropriate.\n\n# Examples\n\nThis method is particularly beneficial in introducing the ability to specify crate-specific\nflags.\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .try_flags_from_environment(concat!(env!(\"CARGO_PKG_NAME\"), \"_CFLAGS\"))\n    .expect(\"the environment variable must be specified and UTF-8\")\n    .compile(\"foo\");\n```\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["environ_key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:1757":{"id":"0:131:1757","crate_id":0,"name":"cargo_metadata","span":{"filename":"src/lib.rs","begin":[1015,4],"end":[1018,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.\n\nThe emitted metadata is:\n\n - `rustc-link-lib=static=`*compiled lib*\n - `rustc-link-search=native=`*target folder*\n - When target is MSVC, the ATL-MFC libs are added via `rustc-link-search=native=`\n - When C++ is enabled, the C++ stdlib is added via `rustc-link-lib`\n - If `emit_rerun_if_env_changed` is not `false`, `rerun-if-env-changed=`*env*\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_metadata",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:394:128":{"id":"b:5:680-0:394:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2864","5:683:1937","5:684:9497"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12344:2704":{"id":"2:12344:2704","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:9887"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:9882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[155,9],"end":[155,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:398:431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2556-0:401:1796":{"id":"b:2:2556-0:401:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2552:711":{"id":"2:2552:711","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12277:2163":{"id":"2:12277:2163","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41757:181","prim@char":"1:12033:427","self::pattern":"2:11937:9887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:33782":{"id":"5:5526:33782","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:3265","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3265","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:9941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2256-0:311:3209":{"id":"b:2:2256-0:311:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:3785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:25655"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12300:27979":{"id":"2:12300:27979","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:9887","str::rsplitn":"2:12303:27981"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43820:9909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12288:27975":{"id":"2:12288:27975","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:9887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11753:9890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12244:2149":{"id":"2:12244:2149","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11497:2892"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:3012":{"id":"5:5517:3012","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320:3219":{"id":"0:320:3219","crate_id":0,"name":"Vs17","span":{"filename":"src/windows_registry.rs","begin":[94,4],"end":[94,8]},"visibility":"default","docs":"Visual Studio 17 (2022)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:93:1941":{"id":"0:93:1941","crate_id":0,"name":"flag_if_supported","span":{"filename":"src/lib.rs","begin":[566,4],"end":[569,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler if it supports it\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag_if_supported(\"-Wlogical-op\") // only supported by GCC\n    .flag_if_supported(\"-Wunreachable-code\") // only supported by clang\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:2942":{"id":"0:270:2942","crate_id":0,"name":"cflags_env","span":{"filename":"src/lib.rs","begin":[3603,4],"end":[3612,5]},"visibility":"public","docs":"Returns the compiler flags in format of CFLAGS environment variable.\nImportant here - this will not be CFLAGS from env, its internal gcc's flags to use as CFLAGS\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:1980:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2584":{"id":"0:0:2584","crate_id":0,"name":"cc","span":{"filename":"src/lib.rs","begin":[1,0],"end":[4024,1]},"visibility":"public","docs":"A library for build scripts to compile custom C code\n\nThis library is intended to be used as a `build-dependencies` entry in\n`Cargo.toml`:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n```\n\nThe purpose of this crate is to provide the utility functions necessary to\ncompile C code into a static archive which is then linked into a Rust crate.\nConfiguration is available through the `Build` struct.\n\nThis crate will automatically detect situations such as cross compilation or\nother environment variables set by Cargo and will build code appropriately.\n\nThe crate is not limited to C code, it can accept any source code that can\nbe passed to a C or C++ compiler. As such, assembly files with extensions\n`.s` (gcc/clang) and `.asm` (MSVC) can also be compiled.\n\n[`Build`]: struct.Build.html\n\n# Parallelism\n\nTo parallelize computation, enable the `parallel` feature for the crate.\n\n```toml\n[build-dependencies]\ncc = { version = \"1.0\", features = [\"parallel\"] }\n```\nTo specify the max number of concurrent compilation jobs, set the `NUM_JOBS`\nenvironment variable to the desired amount.\n\nCargo will also set this environment variable when executed with the `-jN` flag.\n\n# Examples\n\nUse the `Build` struct to compile `src/foo.c`:\n\n```no_run\nfn main() {\n    cc::Build::new()\n        .file(\"src/foo.c\")\n        .define(\"FOO\", Some(\"bar\"))\n        .include(\"src\")\n        .compile(\"foo\");\n}\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/cc/1.0\")]","#![allow(deprecated)]","#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:52:1732","0:333:1737","0:394:128","0:401:1796"],"is_stripped":false}}},"0:312:3211":{"id":"0:312:3211","crate_id":0,"name":"Vs12","span":{"filename":"src/windows_registry.rs","begin":[86,4],"end":[86,8]},"visibility":"default","docs":"Visual Studio 12 (2013)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12350:33121":{"id":"2:12350:33121","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:9887"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:9882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:327":{"id":"0:327","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2766:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12294:33109":{"id":"2:12294:33109","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11937:9887","str::split":"2:12285:2478","prim@char":"1:12033:427","`DoubleEndedIterator`":"2:7388:121","str::rsplit_terminator":"2:12297:33110"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43766:9911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374:431":{"id":"0:374:431","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:750":{"id":"0:118:750","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[920,4],"end":[923,5]},"visibility":"public","docs":"Configures the host assumed by this configuration.\n\nThis option is automatically scraped from the `HOST` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .host(\"arm-linux-gnueabihf\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["host",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:332:431":{"id":"0:332:431","crate_id":0,"name":"clone","span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2550-0:311:3209":{"id":"b:2:2550-0:311:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12303:27981":{"id":"2:12303:27981","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12033:427","str::splitn":"2:12300:27979","self::pattern":"2:11937:9887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43838:9908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:9882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:328":{"id":"0:328","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2322:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:376:685":{"id":"0:376:685","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[94,16],"end":[94,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:1892":{"id":"0:90:1892","crate_id":0,"name":"asm_flag","span":{"filename":"src/lib.rs","begin":[460,4],"end":[463,5]},"visibility":"public","docs":"Add a flag that will only be used with assembly files.\n\nThe flag will be applied to input files with either a `.s` or\n`.asm` extension (case insensitive).\n\n# Example\n\n```no_run\ncc::Build::new()\n    .asm_flag(\"-Wa,-defsym,abc=1\")\n    .file(\"src/foo.S\")  // The asm flag will be applied here\n    .file(\"src/bar.c\")  // The asm flag will not be applied here\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3391-0:394:128":{"id":"b:2:3391-0:394:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:3785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12338:3005":{"id":"2:12338:3005","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:9887"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:120:2068":{"id":"0:120:2068","crate_id":0,"name":"opt_level_str","span":{"filename":"src/lib.rs","begin":[938,4],"end":[941,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:316:3215":{"id":"0:316:3215","crate_id":0,"name":"Vs15","span":{"filename":"src/windows_registry.rs","begin":[90,4],"end":[90,8]},"visibility":"default","docs":"Visual Studio 15 (2017)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:105:1433":{"id":"0:105:1433","crate_id":0,"name":"std","span":{"filename":"src/lib.rs","begin":[739,4],"end":[742,5]},"visibility":"public","docs":"Specify the C or C++ language standard version.\n\nThese values are common to modern versions of GCC, Clang and MSVC:\n- `c11` for ISO/IEC 9899:2011\n- `c17` for ISO/IEC 9899:2018\n- `c++14` for ISO/IEC 14882:2014\n- `c++17` for ISO/IEC 14882:2017\n- `c++20` for ISO/IEC 14882:2020\n\nOther values have less broad support, e.g. MSVC does not support `c++11`\n(`c++14` is the minimum), `c89` (omit the flag instead) or `c99`.\n\nFor compiling C++ code, you should also set `.cpp(true)`.\n\nThe default is that no standard flag is passed to the compiler, so the\nlanguage version will be the compiler's default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/modern.cpp\")\n    .cpp(true)\n    .std(\"c++17\")\n    .compile(\"modern\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["std",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:1708":{"id":"0:107:1708","crate_id":0,"name":"warnings","span":{"filename":"src/lib.rs","begin":[784,4],"end":[788,5]},"visibility":"public","docs":"Set warnings flags.\n\nAdds some flags:\n- \"-Wall\" for MSVC.\n- \"-Wall\", \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12261:13331":{"id":"2:12261:13331","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12033:427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43692:9893","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12315:33113":{"id":"2:12315:33113","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11937:9887","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::matches":"2:12312:3540"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43938:9906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:9882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:2675":{"id":"0:211:2675","crate_id":0,"name":"get_ranlib","span":{"filename":"src/lib.rs","begin":[2895,4],"end":[2900,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5481:9874"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5448:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:2918":{"id":"0:271:2918","crate_id":0,"name":"is_like_gnu","span":{"filename":"src/lib.rs","begin":[3615,4],"end":[3617,5]},"visibility":"public","docs":"Whether the tool is GNU Compiler Collection-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2812:3786-0:311:3209":{"id":"a:2:2812:3786-0:311:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:3786","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2550-0:333:1737":{"id":"b:2:2550-0:333:1737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:272:2919":{"id":"0:272:2919","crate_id":0,"name":"is_like_clang","span":{"filename":"src/lib.rs","begin":[3620,4],"end":[3622,5]},"visibility":"public","docs":"Whether the tool is Clang-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:2100":{"id":"0:132:2100","crate_id":0,"name":"link_lib_modifier","span":{"filename":"src/lib.rs","begin":[1025,4],"end":[1028,5]},"visibility":"public","docs":"Adds a native library modifier that will be added to the\n`rustc-link-lib=static:MODIFIERS=LIBRARY_NAME` metadata line\nemitted for cargo if `cargo_metadata` is enabled.\nSee https://doc.rust-lang.org/rustc/command-line-arguments.html#-l-link-the-generated-crate-to-a-native-library\nfor the list of modifiers accepted by rustc.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["link_lib_modifier",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12362:14652":{"id":"2:12362:14652","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4524:14652"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44024:9899","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2546-0:333:1737":{"id":"b:2:2546-0:333:1737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:1785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12357:26052":{"id":"2:12357:26052","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12268:1924":{"id":"2:12268:1924","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:9887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:1764":{"id":"0:108:1764","crate_id":0,"name":"extra_warnings","span":{"filename":"src/lib.rs","begin":[807,4],"end":[810,5]},"visibility":"public","docs":"Set extra warnings flags.\n\nAdds some flags:\n- nothing for MSVC.\n- \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\n// Disables -Wextra, -Wall remains enabled:\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .extra_warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[293,0],"end":[3407,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:960","0:79:782","0:81:1867","0:83:1873","0:86:1877","0:88:1881","0:89:1885","0:90:1892","0:92:1910","0:93:1941","0:94:1953","0:95:1761","0:96:1762","0:97:1745","0:98:676","0:100:1746","0:102:1747","0:103:1750","0:104:1751","0:105:1433","0:106:1763","0:107:1708","0:108:1764","0:109:1748","0:113:1749","0:117:1467","0:118:750","0:119:1753","0:120:2068","0:121:540","0:122:1754","0:123:1752","0:125:451","0:127:1755","0:129:1756","0:131:1757","0:132:2100","0:133:1065","0:134:1759","0:135:1767","0:136:1760","0:140:2124","0:149:2222","0:153:2307","0:155:2316","0:156:2182","0:157:1919","0:207:2665","0:208:2666","0:211:2675","0:212:2676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12281:2627":{"id":"2:12281:2627","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41757:181","prim@char":"1:12033:427","self::pattern":"2:11937:9887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:9882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:682:2864":{"id":"5:682:2864","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:2:2550-0:394:128":{"id":"b:2:2550-0:394:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:157:1919":{"id":"0:157:1919","crate_id":0,"name":"try_get_compiler","span":{"filename":"src/lib.rs","begin":[1634,4],"end":[1714,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis will return a result instead of panicing; see get_compiler() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12264:2882":{"id":"2:12264:2882","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12263:2652"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43999:9889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:1752":{"id":"0:123:1752","crate_id":0,"name":"out_dir","span":{"filename":"src/lib.rs","begin":[969,4],"end":[972,5]},"visibility":"public","docs":"Configures the output directory where all object files and static\nlibraries will be located.\n\nThis option is automatically scraped from the `OUT_DIR` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["out_dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2514:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3393:1535":{"id":"2:3393:1535","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39599:13088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:311:3209":{"id":"b:5:680-0:311:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2864","5:683:1937","5:684:9497"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:326:627":{"id":"0:326:627","crate_id":0,"name":"eq","span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324":{"id":"0:324","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2765:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:683:1937":{"id":"5:683:1937","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8472:4013-0:311:3209":{"id":"a:2:8472:4013-0:311:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:4013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12236:832":{"id":"2:12236:832","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12033:427"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12235":{"id":"2:12235","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12236:832","2:12237:1935","2:12238:33102","2:12239:33103","2:12241:33104","2:12244:2149","2:12245:33105","2:12246:320","2:12247:319","2:12248:1914","2:12250:27944","2:12252:27945","2:12254:27946","2:12256:33106","2:12257:33107","2:12258:2626","2:12259:27967","2:12260:2915","2:12261:13331","2:12262:9650","2:12263:2652","2:12264:2882","2:12265:9644","2:12266:33108","2:12267:31308","2:12268:1924","2:12271:2131","2:12274:2132","2:12277:2163","2:12281:2627","2:12285:2478","2:12288:27975","2:12291:27977","2:12294:33109","2:12297:33110","2:12300:27979","2:12303:27981","2:12306:33111","2:12309:33112","2:12312:3540","2:12315:33113","2:12318:33114","2:12321:33115","2:12324:2894","2:12326:33116","2:12328:33117","2:12330:33118","2:12331:33119","2:12332:33120","2:12335:2629","2:12338:3005","2:12341:2700","2:12344:2704","2:12347:3424","2:12350:33121","2:12353:2286","2:12355:26048","2:12356:29077","2:12357:26052","2:12358:26053","2:12359:26054","2:12360:33122","2:12362:14652","2:12363:33123"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:331":{"id":"0:331","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:332:431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:400:685":{"id":"0:400:685","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[155,16],"end":[155,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:412":{"id":"0:412","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[193,16],"end":[193,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9366:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:413:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2560:1522":{"id":"2:2560:1522","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2253-0:311:3209":{"id":"b:2:2253-0:311:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:3785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:1710"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8471:4014-0:311:3209":{"id":"a:2:8471:4014-0:311:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12238:33102":{"id":"2:12238:33102","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12359:26054":{"id":"2:12359:26054","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:394:128":{"id":"0:394:128","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[156,0],"end":[161,1]},"visibility":"public","docs":"Represents an internal error that occurred, with an explanation.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:8472:4013-0:394:128","a:2:2755:223-0:394:128","a:2:2812:3786-0:394:128","a:2:8471:4014-0:394:128","a:2:2772:231-0:394:128","b:2:2253-0:394:128","b:2:2561-0:394:128","b:2:2256-0:394:128","b:2:3391-0:394:128","b:2:2550-0:394:128","b:2:2546-0:394:128","b:2:2556-0:394:128","b:5:5771-0:394:128","b:5:680-0:394:128","0:399","0:61","0:63","0:65","0:397"]}}},"0:78:960":{"id":"0:78:960","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[299,4],"end":[341,5]},"visibility":"public","docs":"Construct a new instance of a blank set of configuration.\n\nThis builder is finished with the [`compile`] function.\n\n[`compile`]: struct.Build.html#method.compile","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:685":{"id":"0:64:685","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[179,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12263:2652":{"id":"2:12263:2652","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12264:2882"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43990:9891","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12248:1914":{"id":"2:12248:1914","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41757:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8471:4014-0:394:128":{"id":"a:2:8471:4014-0:394:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5529:26051":{"id":"5:5529:26051","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12359:26054"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:311:3209":{"id":"0:311:3209","crate_id":0,"name":"VsVers","span":{"filename":"src/windows_registry.rs","begin":[84,0],"end":[95,1]},"visibility":"public","docs":"A version of Visual Studio","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:312:3211","0:314:3213","0:316:3215","0:318:3217","0:320:3219"],"impls":["a:2:8472:4013-0:311:3209","a:2:2755:223-0:311:3209","a:2:2812:3786-0:311:3209","a:2:8471:4014-0:311:3209","a:2:2772:231-0:311:3209","b:2:2253-0:311:3209","b:2:2561-0:311:3209","b:2:2256-0:311:3209","b:2:3391-0:311:3209","b:2:2550-0:311:3209","b:2:2546-0:311:3209","b:2:2556-0:311:3209","b:5:680-0:311:3209","0:325","0:324","0:327","0:331","0:330","0:322","0:328"]}}},"b:2:2546-0:401:1796":{"id":"b:2:2546-0:401:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:1785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:208:2666":{"id":"0:208:2666","crate_id":0,"name":"try_get_archiver","span":{"filename":"src/lib.rs","begin":[2855,4],"end":[2857,5]},"visibility":"public","docs":"Get the archiver that's in use for this configuration.\n\nThis will return a result instead of panicing;\nsee [`get_archiver()`] for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5448:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135:1767":{"id":"0:135:1767","crate_id":0,"name":"emit_rerun_if_env_changed","span":{"filename":"src/lib.rs","begin":[1060,4],"end":[1063,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo to detect environment\nchanges that should trigger a rebuild.\n\nThis has no effect if the `cargo_metadata` option is `false`.\n\nThis option defaults to `true`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["emit_rerun_if_env_changed",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8472:4013-0:333:1737":{"id":"a:2:8472:4013-0:333:1737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:4013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,16],"end":[94,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9366:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:376:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2561-0:401:1796":{"id":"b:2:2561-0:401:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5510:33779":{"id":"5:5510:33779","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3265","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:9941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:3265","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:9941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:1867":{"id":"0:81:1867","crate_id":0,"name":"includes","span":{"filename":"src/lib.rs","begin":[381,4],"end":[390,5]},"visibility":"public","docs":"Add multiple directories to the `-I` include path.\n\n# Example\n\n```no_run\n# use std::path::Path;\n# let condition = true;\n#\nlet mut extra_dir = None;\nif condition {\n    extra_dir = Some(Path::new(\"/path/to\"));\n}\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .includes(extra_dir)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dirs",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7350:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:7350:152","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2514:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:333:1737":{"id":"0:333:1737","crate_id":0,"name":"Build","span":{"filename":"src/lib.rs","begin":[95,0],"end":[135,1]},"visibility":"public","docs":"A builder for compilation of a native library.\n\nA `Build` is the main type of the `cc` crate and is used to control all the\nvarious configuration options and such of a compile. You'll find more\ndocumentation on each method itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:77","a:2:8472:4013-0:333:1737","a:2:2755:223-0:333:1737","a:2:2812:3786-0:333:1737","a:2:8471:4014-0:333:1737","a:2:2772:231-0:333:1737","b:2:2253-0:333:1737","b:2:2561-0:333:1737","b:2:2256-0:333:1737","b:2:3391-0:333:1737","b:2:2550-0:333:1737","b:2:2546-0:333:1737","b:2:2556-0:333:1737","b:5:680-0:333:1737","0:252","0:373","0:375"]}}},"0:89:1885":{"id":"0:89:1885","crate_id":0,"name":"ar_flag","span":{"filename":"src/lib.rs","begin":[441,4],"end":[444,5]},"visibility":"public","docs":"Add a flag to the invocation of the ar\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .file(\"src/bar.c\")\n    .ar_flag(\"/NODEFAULTLIB:libc.dll\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3409,0],"end":[3413,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2597:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:253:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12257:33107":{"id":"2:12257:33107","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12039:1441","crate::ops::IndexMut":"2:3056:9801","str::slice_unchecked":"2:12256:33106"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2755:223-0:333:1737":{"id":"a:2:2755:223-0:333:1737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:125:451":{"id":"0:125:451","crate_id":0,"name":"compiler","span":{"filename":"src/lib.rs","begin":[979,4],"end":[982,5]},"visibility":"public","docs":"Configures the compiler to be used to produce output.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["compiler",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2514:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:264:1922":{"id":"0:264:1922","crate_id":0,"name":"to_command","span":{"filename":"src/lib.rs","begin":[3534,4],"end":[3556,5]},"visibility":"public","docs":"Converts this compiler into a `Command` that's ready to be run.\n\nThis is useful for when the compiler needs to be executed and the\ncommand returned will already have the initial arguments and environment\nvariables configured.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5448:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2561-0:311:3209":{"id":"b:2:2561-0:311:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3391-0:311:3209":{"id":"b:2:3391-0:311:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:3785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:323:685":{"id":"0:323:685","crate_id":0,"name":"fmt","span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:1910":{"id":"0:92:1910","crate_id":0,"name":"is_flag_supported","span":{"filename":"src/lib.rs","begin":[495,4],"end":[553,5]},"visibility":"public","docs":"Run the compiler to test if it accepts the given flag.\n\nFor a convenience method for setting flags conditionally,\nsee `flag_if_supported()`.\n\nIt may return error if it's unable to run the compiler with a test file\n(e.g. the compiler is missing or a write to the `out_dir` failed).\n\nNote: Once computed, the result of this call is stored in the\n`known_flag_support` field. If `is_flag_supported(flag)`\nis called again, the result will be read from the hash table.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}},{"type":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2561-0:333:1737":{"id":"b:2:2561-0:333:1737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:266:1062":{"id":"0:266:1062","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[3562,4],"end":[3564,5]},"visibility":"public","docs":"Returns the path for this compiler.\n\nNote that this may not be a path to a file on the filesystem, e.g. \"cc\",\nbut rather something which will be resolved when a process is spawned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5242:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:1754":{"id":"0:122:1754","crate_id":0,"name":"force_frame_pointer","span":{"filename":"src/lib.rs","begin":[959,4],"end":[962,5]},"visibility":"public","docs":"Configures whether the compiler will emit instructions to store\nframe pointers during codegen.\n\nThis option is automatically enabled when debug information is emitted.\nOtherwise the target platform compiler's default will be used.\nYou can use this option to force a specific setting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["force",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12312:3540":{"id":"2:12312:3540","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11937:9887","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::rmatches":"2:12315:33113"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43920:9905","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:2701":{"id":"0:269:2701","crate_id":0,"name":"cc_env","span":{"filename":"src/lib.rs","begin":[3584,4],"end":[3598,5]},"visibility":"public","docs":"Returns the compiler command in format of CC environment variable.\nOr empty string if CC env was not present\n\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:1980:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2755:223-0:401:1796":{"id":"a:2:2755:223-0:401:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12353:2286":{"id":"2:12353:2286","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11898:127","`FromStr`":"2:11897:3243"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11897:3243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11897:3243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3415,0],"end":[3631,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:1922","0:266:1062","0:267:313","0:268:624","0:269:2701","0:270:2942","0:271:2918","0:272:2919","0:273:2916"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102:1747":{"id":"0:102:1747","crate_id":0,"name":"cpp","span":{"filename":"src/lib.rs","begin":[676,4],"end":[679,5]},"visibility":"public","docs":"Set C++ support.\n\nThe other `cpp_*` options will only become active if this is set to\n`true`.\n\nThe name of the C++ standard library to link is decided by:\n1. If [cpp_link_stdlib](Build::cpp_link_stdlib) is set, use its value.\n2. Else if the `CXXSTDLIB` environment variable is set, use its value.\n3. Else the default is `libc++` for OS X and BSDs, `libc++_shared` for Android,\n`None` for MSVC and `libstdc++` for anything else.","links":{"Build::cpp_link_stdlib":"0:109:1748"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2549:1785":{"id":"2:2549:1785","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2523:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12328:33117":{"id":"2:12328:33117","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12358:26053":{"id":"2:12358:26053","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:413:685":{"id":"0:413:685","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[193,16],"end":[193,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2546-0:311:3209":{"id":"b:2:2546-0:311:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:1785"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2256-0:333:1737":{"id":"b:2:2256-0:333:1737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:3785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:25655"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2812:3786-0:401:1796":{"id":"a:2:2812:3786-0:401:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:3786","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:98:676":{"id":"0:98:676","crate_id":0,"name":"file","span":{"filename":"src/lib.rs","begin":[649,4],"end":[652,5]},"visibility":"public","docs":"Add a file which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2514:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[155,16],"end":[155,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9366:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:400:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12259:27967":{"id":"2:12259:27967","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12258:2626"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:3223":{"id":"0:58:3223","crate_id":0,"name":"find_vs_version","span":{"filename":"src/windows_registry.rs","begin":[102,0],"end":[104,1]},"visibility":"public","docs":"Find the most recent installed version of Visual Studio\n\nThis is used by the cmake crate to figure out the correct\ngenerator.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"VsVers","id":"0:311:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12252:27945":{"id":"2:12252:27945","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12330:33118":{"id":"2:12330:33118","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:2398":{"id":"5:5511:2398","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12332:33120":{"id":"2:12332:33120","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:9887"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11962:9880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:333:1737":{"id":"b:5:680-0:333:1737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2864","5:683:1937","5:684:9497"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12254:27946":{"id":"2:12254:27946","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12324:2894":{"id":"2:12324:2894","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:33780":{"id":"5:5514:33780","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2564:128":{"id":"2:2564:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32257:3720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:2565:1521":{"id":"2:2565:1521","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1755":{"id":"0:127:1755","crate_id":0,"name":"archiver","span":{"filename":"src/lib.rs","begin":[989,4],"end":[992,5]},"visibility":"public","docs":"Configures the tool used to assemble archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["archiver",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2514:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5242:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2772:231-0:394:128":{"id":"a:2:2772:231-0:394:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2559:128":{"id":"2:2559:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"a:2:2772:231-0:401:1796":{"id":"a:2:2772:231-0:401:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5771-0:394:128":{"id":"b:5:5771-0:394:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9371:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:3785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5769:235","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5773:1499"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2255:1710":{"id":"2:2255:1710","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2812:3786-0:394:128":{"id":"a:2:2812:3786-0:394:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:3786","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12271:2131":{"id":"2:12271:2131","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:9887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:2665":{"id":"0:207:2665","crate_id":0,"name":"get_archiver","span":{"filename":"src/lib.rs","begin":[2844,4],"end":[2849,5]},"visibility":"public","docs":"Get the archiver (ar) that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5481:9874"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5448:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12237:1935":{"id":"2:12237:1935","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8471:4014-0:333:1737":{"id":"a:2:8471:4014-0:333:1737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12266:33108":{"id":"2:12266:33108","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43980:9902","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12239:33103":{"id":"2:12239:33103","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2550-0:401:1796":{"id":"b:2:2550-0:401:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12335:2629":{"id":"2:12335:2629","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:9887"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[193,9],"end":[193,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:411:431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12265:9644":{"id":"2:12265:9644","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43970:3657","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:268:624":{"id":"0:268:624","crate_id":0,"name":"env","span":{"filename":"src/lib.rs","begin":[3576,4],"end":[3578,5]},"visibility":"public","docs":"Returns the set of environment variables needed for this compiler to\noperate.\n\nThis is typically only used for MSVC compilers currently.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"tuple":[{"resolved_path":{"name":"OsString","id":"1:1980:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"OsString","id":"1:1980:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8471:4014-0:401:1796":{"id":"a:2:8471:4014-0:401:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"6:7505:7968":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:9711:34459":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:8860:3702":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:9079:13508":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:2933:20733":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:13040:11747":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:5877:8443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:7318:12516":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:40812:3659":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:45726:13369":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:5785:3739":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:6569:12241":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:12555:31253":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:43674:9897":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:6589:4434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:13632:11943":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:11497:2892":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:22546:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"20:538:4563":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"11:1845:12752":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:6821:19974":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"20:5402:8437":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:3743:13837":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:7462:12535":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:6565:4476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:10165:13879":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:8195:12610":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:9206:13514":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:12645:11672":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:4949:7776":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4963:7837":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:5457:3648":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:10348:13800":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"20:6172:4476":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:7261:12943":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:39372:9810":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"20:4121:7781":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:9242:11372":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:11198:3633":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:8291:13488":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:5830:3747":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:895:3702":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:13685:11949":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:2772:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:7492:12536":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:10829:3623":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"11:2194:12759":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:11371:13848":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:43716:3661":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:32405:4145":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:3228:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:5994:8452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:42786:12577":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:2496:1716":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:40268:9900":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:13897:11997":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:8969:3740":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:8097:12602":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:41030:13261":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:21014:19995":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"20:5408:8438":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:21219:14740":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:7342:34447":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:43980:9902":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:6431:2227":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:2918:9797":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:2893:9791":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:5712:12299":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:7863:3617":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:40633:13250":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"20:4598:7830":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:3888:12263":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:14110:12052":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:13758:11960":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:1257:9695":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:7546:7973":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:13024:11745":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:2670:12222":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:1273:9697":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:11272:11486":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:5900:8446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:2910:9795":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:1756:12953":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:9607:13622":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:0:837":{"crate_id":6,"path":["libc"],"kind":"module"},"2:21618:14755":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:8930:14712":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:4469:7794":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:915:9688":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"11:97:12744":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"8:0:3440":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"11:2033:9695":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:12039:1441":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:2353:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:5987:8451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:4426:10311":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:11407:21663":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:1500:5445":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12888:11723":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:41706:13487":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:11467:20055":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:6346:13731":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:13422:11795":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:3996:14683":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:8340:4347":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:6154:12965":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"14:165:20668":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:6944:34444":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:44523:20094":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:10646:11504":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:14173:12068":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:3720:3672":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:2461:12934":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"20:4520:7820":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:43938:9906":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:42384:3736":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:9852:21674":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:10903:13673":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:14420:12152":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:10960:1723":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"20:1509:5446":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:7134:27576":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:13914:12000":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"20:553:4565":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"11:1012:9697":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:3974:14681":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:7884:21605":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:494:4560":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11910:11549":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:7708:12252":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10214:13641":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:10533:3676":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:43838:9908":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:7870:3621":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:3800:9686":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:5397:3711":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:7802:3705":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"20:4705:7842":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:47573:13455":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:12775:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"20:599:4572":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"1:8806:3716":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:7182:9941":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:7642:3627":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:12008:19894":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:1747:12951":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:23323:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:46021:13381":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:5954:3735":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:6386:12381":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:4702:14710":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"11:0:3443":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:40601:13247":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:2520:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:41650:13279":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:12046:760":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:3304:3675":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:9381:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:21397:12977":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:6558:9452":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:1075:13609":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:1690:5464":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:46887:13417":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:2380:12210":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:6485:12236":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"20:134:4234":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:3223:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:4986:12284":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"20:574:4568":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"16:8072:12600":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:3418:3648":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:12045:763":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:481:10359":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:11661:11524":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:1570:12751":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:44632:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"10:44:12764":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"20:1516:5447":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:5780:8492":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:14469:12167":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:7382:3575":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:9051:21641":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:7805:14663":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:5963:13695":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"20:4208:7789":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:7517:7970":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:44511:13360":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:3265:3679":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:541:4565":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:5435:12291":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:21613:14747":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:5621:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:8545:3701":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:44439:13349":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:7295:9252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:6306:14831":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"20:4148:7782":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:40826:13257":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:41023:13260":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"11:736:9684":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:46058:13383":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:2907:12232":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:5635:10365":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:6401:12235":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:9207:11371":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:10447:13655":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:13922:12002":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"20:1503:5445":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13148:11769":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:3187:30784":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:7742:2148":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:6916:19966":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:7660:12546":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:8147:3682":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:48182:13474":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"20:7160:7976":{"crate_id":20,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:500:4561":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"20:4336:7805":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:7191:9452":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:4719:12275":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:2305:20732":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:47041:13420":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:40383:3576":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:30525:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"20:1666:5461":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11124:13686":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:1638:5459":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:11054:10384":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:3600:3333":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:7425:3574":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:21395:14750":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:2767:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"20:5458:8419":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"20:494:4558":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:12055:808":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:11951:9883":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:5502:1723":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:1506:5446":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:22645:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:9119:13509":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:7388:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"11:365:10282":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:5648:13693":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:1673:5462":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:46805:13416":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:2186:34433":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:7221:10301":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:44100:19900":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"20:6441:8880":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:4050:14687":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"20:1593:5455":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6818:12452":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:5976:10364":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:44748:13367":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:44305:13338":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11151:13688":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:13876:11992":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:4729:7819":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:22264:14678":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:62:4167":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:11244:11522":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:7910:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:8561:3703":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:3065:11275":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"20:6278:5385":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:2888:9790":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"20:1578:5454":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12154:11570":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:1776:9686":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:44243:13336":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:7463:12947":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:261:13606":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:6160:12964":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:7586:12921":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:5836:8442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:10165:21693":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"20:4604:7831":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:6499:12253":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:40581:13245":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:7597:34445":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:13228:11777":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:7474:13791":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:9625:3637":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:12554:11659":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:8824:3717":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:10579:3763":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:9829:10347":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:7580:10376":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:3938:14680":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:12044:659":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4917:12874":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:2168:19996":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:10383:13647":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"20:7183:9441":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:7858:3620":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:1631:5458":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:6017:21595":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:4823:3778":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:8336:13864":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:2970:32902":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:10031:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"20:5347:8391":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:207:10288":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:8167:3623":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"10:0:3442":{"crate_id":10,"path":["adler"],"kind":"module"},"1:643:14654":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:11358:21788":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:8004:13854":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:2243:12933":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:6545:12400":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:3183:34389":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:11710:11490":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4456:7792":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"14:215:12694":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:285:12745":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:8302:13863":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:8009:13855":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:1557:5452":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:4639:11125":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"18:515:11237":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:46327:13393":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:7211:9685":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:10431:3716":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:8472:4013":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:40303:13225":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:3003:3789":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"14:187:20675":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"18:507:11234":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:7545:9943":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:12051:1541":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:48129:13471":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:11817:10391":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"11:723:9683":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:8838:3718":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:2595:3663":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:3735:13781":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:7809:19970":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4395:7629":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:46040:13382":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:14001:12022":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:22843:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:2755:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:6376:21597":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:635:13826":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"20:1523:5448":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:5068:7844":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"20:1598:5456":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:7474:13755":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:1590:5455":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6261:13728":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:6625:4347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"20:4304:7801":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:8825:21656":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:44735:12762":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:6775:8876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"11:1121:9698":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"11:399:34432":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:7582:12542":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:11971:11553":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:8239:12533":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:1928:670":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"0:320:3219":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs17"],"kind":"variant"},"6:4848:7834":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:4074:9682":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:4921:12282":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"20:7137:7973":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:5310:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:8901:13503":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"11:1068:13774":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:43614:12975":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:9385:3600":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:356:3772":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:44216:13335":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:149:10275":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:10340:11408":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:10949:13676":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:12038:1411":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:6648:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:6171:8492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:32293:13810":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"20:4444:7813":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:5979:8450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:41899:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:6318:12374":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:7769:13810":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:6243:13720":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:4239:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:10972:26189":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"18:96:25618":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:35:9942":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:3052:9800":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:3232:12200":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:7438:10316":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:9780:13625":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"14:221:12696":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:4304:7778":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:1892:9666":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:1980:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:4497:12269":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:10383:9907":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13101:11756":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"20:5588:8450":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"7:32:20570":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:3390:3683":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:30469:9936":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:9886:13626":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:2922:9798":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:2824:3559":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:14335:12130":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:5322:12289":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:8983:13866":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:43766:9911":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:8765:21654":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:12280:11603":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:21012:31351":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:3845:13838":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:11753:9890":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:9455:34452":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:21100:14754":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:22148:12994":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:12056:1599":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:22513:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:2817:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"20:6875:9251":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:14316:12124":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:9933:13629":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:4587:7807":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"20:5384:8436":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:7125:3730":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"18:599:34463":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4716:7817":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11617:11522":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:6467:12389":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:42851:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:4315:7779":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4606:7808":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:11483:13806":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:536:12191":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:7350:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:261:10290":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4740:7820":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:11351:11495":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"20:4465:7814":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5767:8435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:2635:3671":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:46775:13415":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:4446:7791":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:4506:7799":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:7412:3573":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:4164:3648":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:3204:12753":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"11:749:9685":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:894:9685":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:7688:3763":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:9024:13870":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"20:4154:7783":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:474:4557":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"20:4574:7827":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"20:4670:7839":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:2428:12212":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:44685:13824":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"18:660:13600":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:4363:10311":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"20:6382:8876":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13244:11779":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:4007:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:6439:9685":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"20:4348:7806":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:40310:13226":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:555:1724":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:45850:13374":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:10474:10381":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:2923:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:44315:13342":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:13546:11898":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:43990:9891":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"20:4650:7837":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:10588:11420":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:7599:9440":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:46965:13418":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:1821:9939":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:44348:9913":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:20826:32835":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:10370:13646":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"20:4628:7834":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:44008:9888":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:8271:3153":{"crate_id":1,"path":["std","os","raw","c_int"],"kind":"type_alias"},"2:43595:12974":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:4585:12272":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"20:5686:8459":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:43784:9910":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:6156:8491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:13778:11968":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"20:5745:7691":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:5905:12324":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:43686:9894":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:1184:13610":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:10197:13638":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:11539:13838":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"20:6214:8869":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:5015:7843":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:43503:12970":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"20:4175:7629":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:9379:3602":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:47761:13457":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:5982:12333":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:595:4573":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:562:4568":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:9157:13510":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:8179:3626":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:6008:8453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:2696:12223":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:40232:13221":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:2284:20706":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10534:11416":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:39333:9813":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:5417:3712":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:817:9692":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:4966:4002":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:2820:4144":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"5:2035:3672":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:8914:2251":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:8848:21657":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"20:6333:8874":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:43692:9893":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:6955:10329":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:526:4563":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:7716:14657":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:11383:13535":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:4463:7793":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:12724:11684":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:41950:9682":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:4745:12276":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:6583:12402":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:4550:7804":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"20:5472:8420":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:919:9689":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:6769:9947":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:48025:13463":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"20:4712:7843":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"20:4622:7833":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:11621:13539":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:1011:10290":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:8318:13489":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"9:52:14548":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"18:609:13599":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:4058:14688":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:13693:11950":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:3983:13792":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"11:1831:9686":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:12945:11735":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:11934:11550":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:9746:10344":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:12983:11740":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:10637:11426":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:41891:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:9790:34455":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:506:4562":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:5564:2967":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:10326:1722":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:2526:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:1473:9684":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12267:11599":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:40216:31601":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"4:0:3439":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:3498:9685":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:10738:13672":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:12036:1073":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:2574:12218":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:12086:11562":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"20:1548:5451":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:5448:1722":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:7503:12247":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:837:3702":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:10343:26219":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:10520:11415":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:2722:12224":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:2391:3374":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:5242:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:5362:9885":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"11:667:9688":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:43011:3641":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:44706:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:10490:13802":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:6841:12916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:13085:11753":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:4401:7786":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:40246:13222":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"20:4236:7792":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:6726:8874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:44693:13363":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:12830:11697":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:22186:31575":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:4053:12265":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:2596:12219":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:4496:7798":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:1545:5451":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:11281:11487":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:11226:11483":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:1426:9682":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:14145:12060":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:2049:13781":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:12765:11691":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:10603:11421":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:32257:3720":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:6361:12377":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:8686:21652":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:3315:12258":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:12473:11648":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:11173:21786":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13113:11757":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"20:4550:7824":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:3389:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:41741:13288":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:9479:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:42746:13292":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:14076:12044":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:11607:30986":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:6901:12243":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:2012:13611":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:4764:7823":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:6805:8878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:42226:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12252:11593":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:1649:5460":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:32318:13079":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:41755:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:4944:12892":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:7828:12558":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:3669:10290":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:10819:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:12778:11692":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:7782:12550":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"0:312:3211":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs12"],"kind":"variant"},"17:10112:13637":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"20:4722:7844":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4754:7822":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:14:1787":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:2993:2290":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:40658:11253":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:10462:9909":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:6968:21600":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:44447:13351":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:3034:9809":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:4794:7827":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"20:4475:7815":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:1761:624":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:48221:13475":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12452:11644":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:881:9684":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:6067:8458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"11:2168:12755":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:30279:14677":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:4949:12283":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:1565:9686":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"20:4255:7795":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:3114:3685":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:11845:11540":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:2477:3627":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:12437:11640":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:0:1433":{"crate_id":1,"path":["std"],"kind":"module"},"2:22140:12993":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:50027:14757":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"20:4108:7780":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:2526:12216":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:4862:12280":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13259:11783":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"20:5438:8441":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:41037:2227":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:11337:21787":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"14:160:13768":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"20:5596:8451":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:1520:5448":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:2269:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:2863:9786":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"20:607:4573":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"16:7391:21602":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:2982:3662":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10929:11460":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:40682:13254":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:40530:13237":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:22810:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:8926:21659":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:20781:32724":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:11023:11466":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:7313:19971":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:12048:762":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:10240:11385":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:40502:13232":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:46203:13390":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:44642:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"18:755:11272":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:8167:13767":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:4243:13795":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:13816:11974":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"20:5676:8458":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:12074:11561":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:6687:12425":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:10685:13666":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:48091:13469":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:13174:11771":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:43058:13305":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:40642:13251":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:9921:13628":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:41958:9452":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:10255:3722":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:13739:11959":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:4627:14684":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"20:5486:8443":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"9:486:20582":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:6598:8868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:10440:13652":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:5084:13842":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2530:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"9:426:20585":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:43970:3657":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:44463:13355":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"20:4458:3777":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:21147:19995":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:10536:3678":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:41071:13264":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:39450:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:13906:11998":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:6618:8870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:5383:1721":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:4774:12277":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"20:7102:7968":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:42187:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:12053:1543":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"20:5445:8442":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"11:2130:20657":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:11942:9881":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:5798:12309":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:308:1493":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:3521:3625":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:8988:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:11702:13319":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:7102:21601":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:10774:3617":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:2322:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:10186:11398":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:4477:14699":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:6614:3750":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:11179:13357":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:11216:13529":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:12810:11696":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:4030:19870":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:4319:13840":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:7309:19972":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"20:5529:8447":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:5044:12908":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12621:11671":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:13611:11938":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"20:6427:8879":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"20:4634:7835":{"crate_id":20,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:9867:11382":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"0:58:3223":{"crate_id":0,"path":["cc","windows_registry","find_vs_version"],"kind":"function"},"6:1527:5449":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:7346:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:5955:8448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"20:580:4569":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"11:403:34427":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:10769:13520":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:5366:9886":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:40284:9898":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:1776:9724":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:4413:7787":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:4641:12274":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:3263:3678":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:3678:14676":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:14324:12125":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"20:518:4562":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"2:1733:20006":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:488:4559":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:7067:12483":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:43443:13818":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:45902:13376":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:9003:21662":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"20:5576:8449":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:3150:9803":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:14269:12106":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:1575:5454":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:13567:11907":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:4917:14709":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:7599:10378":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:2178:13612":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:4475:7795":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:1102:32905":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"20:6255:5412":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:11306:11490":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:9377:3601":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"10:36:12763":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:4391:13841":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:6929:12461":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:41967:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:14346:12131":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6742:12438":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:4291:7777":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:40430:3591":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:10456:13658":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:2359:12209":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:9058:26191":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:1663:5461":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:256:13605":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:5830:12314":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:123:4234":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:2864:12230":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:4938:12889":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"20:5617:8453":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:41564:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:43036:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"9:330:12801":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:40489:3658":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:6705:8871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:11201:11475":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:8247:14674":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:20768:4133":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:6075:10366":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"18:481:11232":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:4365:10334":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:8181:12254":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:4800:7828":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:0:3447":{"crate_id":16,"path":["gimli"],"kind":"module"},"20:1634:5458":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:2867:9785":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:14401:12147":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:2997:3787":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:2472:12214":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:5612:9947":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"11:630:3702":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:2209:13615":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:4380:7784":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:2809:4140":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:1554:3702":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11295:11488":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:12533:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:9174:13874":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"20:5564:8448":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:39538:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:14536:12179":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:10278:13644":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13966:12013":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:10494:11412":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:8210:3659":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:41882:9677":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"20:566:4567":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"17:11316:11492":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:4973:7839":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:8242:13862":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:12305:11607":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:4818:7830":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:3988:14682":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:48080:13468":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"0:318:3217":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs16"],"kind":"variant"},"1:12034:1560":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:13055:11751":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:3217:34390":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:43734:9907":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:3190:30785":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:9972:13632":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:4:1035":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12997:11741":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:42774:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"18:564:11244":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:5995:12193":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"20:4544:7823":{"crate_id":20,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:400:13607":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:5793:8437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:6226:13717":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:644:11234":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:7749:9741":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"20:5509:8446":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"20:1684:5463":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:44280:13337":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:42527:3602":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5737:8391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"20:4534:7822":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:44490:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:11815:11536":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:44015:9898":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:7554:12249":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:12057:1159":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:2921:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:2559:2245":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:14434:12154":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:5775:8436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:41079:13266":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:4421:9505":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:6165:10340":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"20:1572:5453":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:4695:7815":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13826:11975":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:7667:3765":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:3830:12262":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:7349:3570":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:6036:8457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:14090:12046":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:6199:13845":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:2216:3604":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:12052:1542":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:2962:12930":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:2365:3607":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:8154:13764":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:44137:13329":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:5975:20283":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"20:6327:8873":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:8014:1769":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13487:11846":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:3995:13793":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:9650:11401":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6425:12385":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:2765:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"11:1838:12751":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:40558:13241":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"20:4430:7812":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:1495:5444":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:44168:13333":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"18:707:9883":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:2548:12217":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"18:736:25627":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:3032:12255":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:653:4601":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"11:1048:34434":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:1464:9683":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:6960:13732":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7015:12476":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:11535:11518":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:9445:13619":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"20:4226:7791":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:4393:3648":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:10628:11425":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:11389:13690":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:20962:3627":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:5939:12330":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:5017:12285":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:7651:13763":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:14156:12061":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:6079:3648":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:2211:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:8895:21658":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:7552:7974":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4518:7800":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:22057:12982":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:21951:12980":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:4770:7824":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:9331:1718":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:40317:19935":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:9701:13623":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:8050:12599":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:4032:10290":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:11518:13837":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"11:1826:9685":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:5818:8440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4842:7833":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"20:7060:9412":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:5976:12961":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:9762:34454":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:4248:13796":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:12830:9940":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:573:4570":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:5080:7846":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:7694:12251":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:7609:9441":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:7290:9452":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:21722:32722":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"20:1539:5450":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:7284:4010":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:1503:9689":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:2815:4142":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:9486:3620":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:4175:14696":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:46151:13388":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"11:1852:12753":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:43866:9903":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"20:7149:7975":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:22579:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:42802:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:2150:21720":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:4159:14694":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:5384:21592":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"20:5624:8454":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"20:7108:7969":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:2777:3767":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:40256:13223":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:9959:13631":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:8659:21640":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:7934:3672":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:2573:10347":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:2812:3786":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:4046:14686":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:14118:12053":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:3212:12751":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"18:538:11242":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:6600:3749":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:5829:8441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:7765:9742":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:6167:10370":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"20:6225:8870":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:11957:9882":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4908:12868":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"11:2201:3569":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:4234:3702":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:6798:9949":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:10989:13804":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:6744:8875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:12911:11732":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"20:5603:8452":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:3268:9811":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:14068:12041":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:7918:13853":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:22252:13009":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12698:11681":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"18:574:11234":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:4167:14695":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"20:4249:7794":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11872:11547":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:48065:13467":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12237:11587":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:43270:13309":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:44455:13353":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"20:6403:8877":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:10478:11410":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"20:1720:5468":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:946:9693":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:5890:8445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:12040:1525":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:5628:10364":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:7731:14658":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:9350:11375":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"20:1676:5462":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:952:9694":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:532:4564":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:4613:12273":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"20:4642:7836":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:5433:3713":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:41831:9452":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:2220:3331":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:43532:13820":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"20:4269:7797":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:40195:13217":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:4344:12266":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"20:4681:7840":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:5419:11367":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:10397:13648":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"18:531:11239":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11381:11499":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"11:836:9693":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:10179:3702":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:40610:13248":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:12184:11574":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:2851:9782":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:46470:13398":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4543:7803":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"20:1736:5469":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:7523:12919":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:2223:34003":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:8362:3781":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:10947:9742":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"18:80:25617":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4616:7809":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:22125:31582":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"20:6892:9252":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"20:6448:8881":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:40623:13249":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:9896:21675":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:39613:13089":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:1442:9452":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:40511:13234":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:11367:11496":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:10504:13803":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:4002:9685":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:4394:3766":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:6711:8872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:44471:13357":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:2250:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:9844:10352":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"13:110:34435":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:39474:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:10539:3674":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:7513:12539":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12711:11683":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"20:6312:8871":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:910:9687":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:11086:13683":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:4800:3783":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:9985:13633":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:7199:12942":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"18:719:11264":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:40549:13240":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:45981:13379":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:2762:3785":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:8876:9452":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"20:4065:7776":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:41815:3702":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:10292:11401":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:4489:7797":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:638:13828":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:8555:3702":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:6688:5388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"20:4169:7785":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"0:52:1732":{"crate_id":0,"path":["cc","windows_registry"],"kind":"module"},"6:4955:7836":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4436:7790":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:11037:10382":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4748:7821":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:14126:12055":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:9630:3638":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13286:11786":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"20:6466:8882":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12846:11702":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13890:11995":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:7534:12248":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:10787:13524":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:6815:14738":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:6485:10290":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:11159:3718":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"11:695:9689":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:7463:9412":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11473:11339":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:8134:12608":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:14460:12163":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"20:6412:8878":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:1637:12950":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:10468:11409":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:2450:12213":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:8473:4012":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:1911:5608":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:2317:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:9196:30114":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:41942:3702":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:31073:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:7768:12240":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7054:12480":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:4742:3779":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"20:4263:7796":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:2156:601":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12111:11567":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:4239:13839":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:2213:3603":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:44294:19901":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:568:4569":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:21834:14743":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:10420:11318":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:9945:11385":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:4483:7796":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:2517:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:12737:11686":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11137:13687":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:5816:12313":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"20:4567:7826":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10916:13674":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:10990:3719":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:4787:7826":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:11215:11479":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:11235:13509":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"15:394:20697":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:1702:5466":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:45818:13373":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:11048:10383":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:690:11259":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"14:40:11550":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:9330:212":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:3056:9801":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:22777:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:6720:8873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:48159:13473":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"9:393:20584":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:40460:12973":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:5760:21594":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:2406:1714":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:2478:19939":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:3225:3677":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:2845:9783":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:14163:12063":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:652:11234":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:12136:11569":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:7128:13505":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:12959:11737":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:7846:32860":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"11:1517:13776":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:4992:7841":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:22678:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:3305:9812":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6189:12369":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:8894:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"20:61:4167":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"2:41823:9682":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:11687:21666":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:12037:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:13676:11948":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:11291:10385":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:44033:9900":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:1073:9698":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:11327:11493":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:5517:12958":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"20:7131:7972":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:3240:9808":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:46297:13392":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:4568:7806":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6352:12376":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:362:3773":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:12496:11652":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:2690:12937":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:1288:9696":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:1561:9685":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6513:12390":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:11477:13836":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:860:9452":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"20:4734:7846":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:10421:13801":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:45772:13371":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:8713:21653":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:6893:12459":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:7792:21604":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4685:7814":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:12576:11666":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:5130:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:1558:9452":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:12015:26194":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:8115:12605":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:7544:12541":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:1630:600":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:46349:13394":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:26133:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:5008:7842":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"20:5765:8491":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:21186:14745":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"20:6869:9250":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:11022:13805":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:10547:11417":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:40397:3578":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:3655:3334":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:11261:11485":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:13851:11984":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:5673:12238":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:9564:13621":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:14514:12173":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:10980:11401":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:42811:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"20:1641:5459":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:4824:7831":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:9031:13871":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:4895:12858":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:10105:13878":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:12465:11646":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:9341:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:2839:9780":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"20:4216:7790":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:7436:12337":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:11999:14569":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:3238:12754":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:4796:814":{"crate_id":2,"path":["core","iter"],"kind":"module"},"20:506:4560":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"2:41046:13262":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:1733:5469":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:2381:3611":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:3797:12261":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:8794:21655":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6531:12398":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:42756:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:6844:12453":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"7:0:1589":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:1576:12752":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:7245:9452":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:43494:12969":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:4650:7812":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:8868:13865":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:8156:3684":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"12:0:3444":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"20:6318:8872":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:41061:10342":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:4524:7801":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12484:11651":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4887:12853":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:3049:20735":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:3919:3648":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:20796:32724":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:9036:13872":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"20:4418:7811":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:9172:11370":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:7272:9250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:6204:13702":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:6362:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:45706:13368":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:41840:4010":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:47931:13460":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:4036:14685":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:8223:3661":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7736:12548":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:2363:3606":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:13162:11770":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:14355:12133":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"11:332:10280":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"20:6205:8868":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:5049:12286":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:2766:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:6732:9457":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:7511:7969":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:4908:14708":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:2247:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:6796:8877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:22004:12981":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:9104:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:8852:3719":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:5751:3737":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:11719:21667":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"20:6351:8875":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:13989:12016":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:2834:9781":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:9137:11369":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:7250:4514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:10228:3661":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:21364:3627":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:1513:5447":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:32311:9503":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:40520:13235":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:4557:12271":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:6151:10357":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:40840:13258":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:12033:427":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:11111:13685":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:5369:3648":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:6600:21598":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:22238:13008":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:47431:13454":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"13:0:3438":{"crate_id":13,"path":["std_detect"],"kind":"module"},"20:4484:7816":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:6560:10277":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:9531:34451":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"18:699:11260":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:10771:11429":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:10809:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:11614:13539":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:9109:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:8594:21642":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:13949:12006":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:5363:12290":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:12054:1540":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:12172:11571":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"14:31:13768":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"18:614:34466":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:6879:12457":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"20:7114:7970":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"20:4071:7777":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:3464:3624":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:9912:13627":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:9752:13624":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:5799:8438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:2914:9796":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:30509:13014":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:13710:11951":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11098:13684":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:2788:12227":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"11:119:10278":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:42031:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:7359:3791":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:14522:12176":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:2871:9787":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"15:288:20687":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:46729:13414":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"20:486:4557":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"1:8994:3758":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:48106:13470":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:6788:9948":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:11547:11519":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:47225:13422":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"20:1705:5466":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:43604:13822":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:3347:3667":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"20:4243:7793":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:44024:9899":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:6834:8880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"15:0:3446":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:10838:29870":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:9067:14567":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13838:11978":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"20:5631:8455":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"20:591:4571":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"18:681:11256":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:2886:10363":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:1302:9698":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:2131:3754":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"11:657:9452":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:5743:12303":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:7041:12477":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:6279:12371":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:14013:12023":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:12582:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"11:1858:12754":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"20:5414:8439":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:21133:14749":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:4626:7810":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11951:11552":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:43702:3660":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:9521:13620":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:5074:7845":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:3223:3676":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:10788:21762":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:10764:13518":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:6648:5412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:10698:13668":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:8395:4006":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:5727:12302":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"20:1652:5460":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:48054:13466":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:8230:3657":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:8486:3700":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"11:1103:13775":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:11448:21664":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:11897:3243":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:6850:8881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:7564:7975":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"20:6180:5384":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"20:5645:8457":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:3253:31566":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:2960:32903":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4723:7818":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:5805:8439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:12047:761":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:868:9683":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:46373:13395":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:10430:13651":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:2898:9793":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:42513:3593":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"20:6232:4347":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:43512:13819":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:9812:10346":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:47683:13456":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:7529:7971":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:21000:14748":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:44723:13366":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10084:13635":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:1055:9696":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"20:7143:7974":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:30597:31603":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:43019:13301":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:12123:11568":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:10476:9908":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:2966:32897":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:4002:14684":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:6136:7691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:9982:13283":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10265:13643":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:40367:31589":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4571:14705":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:6254:10364":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:41806:1869":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:4188:14697":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"20:4181:7786":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:2166:19995":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:22231:13006":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:12293:11604":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:7662:2241":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:32304:13811":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:11742:11529":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:3632:9452":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"11:1538:13777":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:14100:12049":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"11:2060:9697":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:4590:19928":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:9373:3593":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"20:6196:4434":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:43999:9889":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:6435:3741":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:47969:13461":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:6721:21599":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:1696:5465":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:2859:9788":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:13868:11989":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:30503:9937":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:24:624":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:22744:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:39494:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:1492:9688":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"11:2049:9696":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:45880:13375":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:8200:3658":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:2608:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:11991:11554":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:8572:3704":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11507:21665":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:12032:957":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:5839:9685":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:2855:3560":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"20:4689:7841":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:48034:13464":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10616:11422":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:5849:8419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:0:1877":{"crate_id":17,"path":["object"],"kind":"module"},"2:10310:13799":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:21285:12977":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:3528:1715":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"18:727:11267":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:14033:12030":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:13554:11901":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:7613:13762":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:4417:12267":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:45920:13377":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:4420:7788":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6456:12388":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"18:766:25628":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"13:226:12743":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:4320:9503":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"14:202:19902":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:6156:12364":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"0:311:3209":{"crate_id":0,"path":["cc","windows_registry","VsVers"],"kind":"enum"},"5:1482:9687":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:13451:11815":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:46419:13397":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"20:4561:7825":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"20:1498:5444":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:12738:10357":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:12520:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:582:11363":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:2744:12225":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:6869:31450":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4929:12883":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:2883:9789":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:434:11325":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:21832:3627":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"11:798:9690":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:1041:9695":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"9:177:14558":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:42306:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:12043:657":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:14042:12031":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:10271:9890":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"20:1699:5465":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:923:9690":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:11761:11532":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"11:968:9695":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"20:559:4566":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"2:10203:9682":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"19:0:1053":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:7231:34000":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:11308:13530":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:6083:20705":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:14448:12161":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:41693:13286":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:2321:12201":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:5634:12293":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:42109:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:11074:13682":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:6930:10326":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"14:0:3445":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:4759:685":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:3740:13836":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"20:4509:7819":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:9998:11356":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:3178:12752":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:22089:12987":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:12196:11575":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:12876:11721":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:21056:14753":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:41587:13270":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:6302:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:22612:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:4428:7789":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:12607:13808":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:6900:10373":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:42506:3592":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"20:5637:8456":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"20:500:4559":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"17:13802:11973":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:12934:11733":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:1569:5453":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"20:4160:7784":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:48144:13472":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"11:760:9686":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"18:671:13604":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:11573:11520":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:1814:9734":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:4705:14699":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:7575:7976":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:11171:29871":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:4137:27579":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:13973:12014":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:7862:12562":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:6607:8869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4368:7782":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:5696:21593":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:6671:5385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:32297:12533":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:13135:11768":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"18:491:11233":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:6820:8879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:8463:3699":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"20:5653:11039":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"20:7120:7971":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:40336:13230":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"20:0:837":{"crate_id":20,"path":["libc"],"kind":"module"},"17:9660:34456":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:14282:12112":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:22711:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"20:1560:5452":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:43624:13823":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:44435:13348":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:13981:12015":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"0:401:1796":{"crate_id":0,"path":["cc","Tool"],"kind":"struct"},"6:6028:8456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"11:1027:20662":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:11639:11473":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:10714:13670":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:14296:12118":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:12671:11433":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:2379:3610":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:4833:7832":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"20:4286:7799":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:47885:13459":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:48045:13465":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:9286:9738":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:3000:3788":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:7441:3790":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:20809:32833":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:14134:12056":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:7643:3774":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:4985:3648":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:12163:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:14024:12027":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:587:4572":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:11145:3717":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:11886:11548":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:2359:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:3171:3702":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"20:4367:7807":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"20:4396:7809":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12225:11584":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:43920:9905":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:940:9692":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"20:1693:5464":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:579:4571":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:11235:11484":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4781:7825":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:6544:3744":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:9114:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:5025:12894":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:9086:11367":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"20:4386:7808":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:1603:5457":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:4879:1022":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:1778:9725":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"7:79:20577":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:30703:31602":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:40350:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:2810:12228":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:2927:9799":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:46395:13396":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:11062:13681":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:8310:13860":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:1709:5467":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:1757:1712":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"17:12208:11576":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:4171:9502":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"3:0:452":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"20:4406:7810":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:5088:12287":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"20:4503:7818":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:12790:11693":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:929:9691":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:12750:11688":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:1717:5468":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:1587:12754":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"20:512:4561":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"1:8503:1719":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:12031:378":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:10059:11389":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:619:9668":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:21265:14742":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"20:5376:8435":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:7006:13733":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:43027:3640":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12531:11656":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:6471:3748":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:42070:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"11:1818:3702":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6268:34449":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:7737:9699":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:40276:9899":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"20:5491:8444":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:1118:32898":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:3441:13617":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:11937:9887":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:3581:3702":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:20811:32838":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:3234:9806":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:4770:31303":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:7853:3619":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:8882:13502":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"0:0:2584":{"crate_id":0,"path":["cc"],"kind":"module"},"2:43543:13310":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:13667:11944":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:850:9682":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:5758:3738":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:5661:12297":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:5128:3735":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:39599:13088":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"11:1501:20663":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:40672:13253":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:4341:7781":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12513:11655":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:45796:13372":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:10023:13623":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"18:636:11255":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:45951:13378":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:42265:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:531:3759":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:8579:9881":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:7497:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"20:4193:7787":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:22165:31596":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:39419:9802":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:21263:3627":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:1918:12956":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:41992:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:47011:13419":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:904:9686":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:7926:3670":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:10745:13887":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:7065:3682":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:9371:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"18:521:25629":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:11718:13320":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:10126:11391":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:2406:12211":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:11595:13538":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:10139:21692":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:40590:13246":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:9001:25858":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"14:7:13768":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:41729:13287":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:822:10296":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"18:624:34464":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4704:7816":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:2881:12231":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:11314:3724":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:1837:9738":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"9:450:20583":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:6077:8459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4535:7802":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:7337:3569":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:10962:11463":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:44328:9912":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:1544:3648":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:13792:11972":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:502:3754":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:10575:11419":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:46651:13402":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"20:1712:5467":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"20:6295:5388":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"9:0:3441":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:12685:11680":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8236:13860":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:46181:13389":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:9062:32862":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:11962:9880":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"9:507:12824":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:3232:13616":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:4374:9504":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:44650:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:7378:29989":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:7282:9452":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:44467:13356":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"9:237:3699":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:6041:21596":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:11454:10387":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:2969:20734":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:47075:13421":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:113:25619":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:10086:9734":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:5574:12234":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"11:844:9694":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:4194:3648":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:0:507":{"crate_id":2,"path":["core"],"kind":"module"},"6:4638:7811":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:6547:3745":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:5588:12237":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:4810:7829":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12970:11738":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:9044:13505":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:12543:11658":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:2644:12221":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"0:333:1737":{"crate_id":0,"path":["cc","Build"],"kind":"struct"},"5:7529:9686":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:482:4558":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:46251:13391":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:9617:34458":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:4527:12270":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:504:13608":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:9328:3660":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:10561:11418":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:8284:13487":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:40204:13218":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:43582:13821":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:41604:13272":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:39592:9805":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:10021:3627":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:1595:5456":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:47823:13458":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:8953:21660":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:4310:10333":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:4499:14700":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:5866:12321":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:7540:13893":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:5992:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:20828:32837":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:2959:2864":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:7269:34450":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:11341:13532":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13274:11490":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:43569:12973":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:276:3265":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:2523:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:3565:13618":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:43266:13308":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:1523:13780":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:40291:19934":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:5053:13842":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10012:11401":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:20964:14746":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:14499:12172":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:9138:3633":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:45750:13370":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:14056:12038":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:12098:11565":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:46548:13400":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:7621:21603":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4556:7805":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6792:12451":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:11000:11465":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:14083:12045":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:3213:9804":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:1983:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:4664:7813":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"20:1530:5449":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"15:306:20688":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:39786:27891":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:2969:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:42148:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13723:11956":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11048:13677":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12007:11555":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:7893:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:4746:3782":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:43884:9904":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:22113:12991":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"20:6847:4514":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:9488:34453":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"20:4200:7788":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:10799:3621":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:4389:7785":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"20:544:4564":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"20:4084:7778":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:9823:21673":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:40355:3577":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:46517:13399":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:4374:7783":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:10410:13649":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:4641:11127":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"11:311:12748":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:1064:9697":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:39516:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:2832:12229":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:43251:13307":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"0:314:3213":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs14"],"kind":"variant"},"20:5427:8440":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4328:7780":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13188:11772":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:10726:13671":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:12004:14659":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:644:9682":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:7880:3618":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:13071:11752":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:782:10293":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:9366:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:11642:13315":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:10316:11406":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"0:55:2163":{"crate_id":0,"path":["cc","windows_registry","find"],"kind":"function"},"1:2187:1713":{"crate_id":1,"path":["std","fs"],"kind":"module"},"2:42829:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:4984:7840":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:4098:13794":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:5612:12239":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:43048:3699":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:14378:12146":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"18:590:11245":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:43522:12972":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11490:11516":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:40440:3590":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:14221:12105":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:6415:12384":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:4637:11123":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"5:1672:10290":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:5575:12960":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:5051:12911":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"20:5499:8445":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:11788:11533":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:8205:21606":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:119:4233":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:5121:12288":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:5058:7838":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:3512:30394":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:40189:9899":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:48007:13462":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:14478:12169":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"20:130:4233":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"2:41873:4011":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:2829:9784":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:21271:14744":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"15:327:14545":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:6915:12244":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"20:5739:8490":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:1138:32907":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:9383:3599":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:10750:11427":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"20:4496:7817":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:14308:12121":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13215:11776":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10097:13636":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"0:57:2588":{"crate_id":0,"path":["cc","windows_registry","find_tool"],"kind":"function"},"2:39434:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7722:12242":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:11679:13318":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"20:4276:7798":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"20:4528:7821":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:22202:31600":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:2904:9794":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:40480:13812":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:9277:11373":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:9375:3592":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:43660:9901":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"20:4323:7803":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:3446:1717":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:31101:4133":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:3594:9682":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:5967:8449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:7026:10374":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:46003:13380":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:3302:3674":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:582:4133":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:10661:13663":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:554:4567":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:12049:758":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:43820:9909":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:46105:13384":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:2141:12925":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:4749:396":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:6753:12439":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:547:4566":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:44443:13350":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:11063:19892":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:2766:12226":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:3764:12260":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:10507:11414":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:7396:31589":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:1681:5463":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:11982:13896":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"20:4590:7829":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:3330:9686":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:8812:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:44451:13352":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"20:1606:5457":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:7558:12920":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:7568:12250":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"20:7173:9440":{"crate_id":20,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"20:4580:7828":{"crate_id":20,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:5920:8447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:8978:21661":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:10672:13664":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:1582:12753":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:1667:1111":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:7278:9251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"0:316:3215":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs15"],"kind":"variant"},"17:9372:11376":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:10107:13877":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:4862:12842":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:21:698":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:3944:14679":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:6868:8882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:878:10298":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:12058:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"20:4613:7832":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:586:14651":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:21203:3627":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:13202:11775":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"11:2180:12757":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:6696:12426":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:3503:1718":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:5567:3715":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:8119:3622":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:6130:8490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:30539:31604":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:12050:1544":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"20:644:4601":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:6022:8455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:7090:12485":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:41621:14675":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:10366:13645":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:4744:3154":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:5403:11366":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13010:11742":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13298:11793":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:44151:13332":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:11191:11473":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:44122:13323":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:12727:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"11:1611:10284":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:42345:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:7540:7972":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:4835:12279":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:21369:14741":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:4889:12281":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:11389:13536":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:9102:11368":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:5882:8444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:41052:3683":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"0:394:128":{"crate_id":0,"path":["cc","Error"],"kind":"struct"},"11:1822:9452":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:2597:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:2763:4138":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:12658:11675":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"9:357:20598":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:9491:10380":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:40540:13238":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"11:2174:12756":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:2649:9671":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:4854:7835":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:8946:14713":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:3184:29858":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:6573:5384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:39560:3563":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"20:4095:7779":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:21710:12979":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"20:4298:7800":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:41670:31567":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:2339:12203":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:40572:13244":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12024:11556":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:1921:9667":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:2504:12215":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:9590:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:46571:13401":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"20:4728:7845":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:4806:12278":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:1536:5450":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:6984:14306":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:8471:4014":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:10847:29868":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:12422:11636":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:3915:12264":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:12043:11557":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:22876:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"20:4315:7802":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10227:13642":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"20:585:4570":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"6:6044:11039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"11:805:9691":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:4678:3777":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:3461:12259":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"18:0:3448":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:9582:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:10036:11387":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:2618:12220":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:1411:3702":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:12598:11667":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:5318:10290":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:629:13778":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:9070:11366":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:2876:9792":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:12373:11611":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"20:1885:5608":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:2170:12927":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:6637:10290":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:8413:3698":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:5863:8420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:11586:11521":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:8899:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:42520:3601":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:10951:12821":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:8217:3660":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:7529:11363":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:2514:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:13575:11908":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12062:11558":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:11356:13533":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:1839:9739":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:7360:34448":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:8281:12617":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:22073:12983":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:9574:34457":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"20:4660:7838":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:4129:12957":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:6015:8454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:21388:3627":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"20:4330:7804":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:793:9687":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:4462:12268":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:44459:13354":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:4872:12848":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:11162:11468":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:8296:14698":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"11:986:9696":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:7523:12540":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:6332:12233":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:43066:13306":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}