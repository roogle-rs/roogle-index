{"root":"0:0:2679","crate_version":"1.0.83","includes_private":false,"index":{"0:121:573":{"id":"0:121:573","crate_id":0,"name":"debug","span":{"filename":"src/lib.rs","begin":[948,4],"end":[951,5]},"visibility":"public","docs":"Configures whether the compiler will emit debug information when\ngenerating object files.\n\nThis option is automatically scraped from the `DEBUG` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["debug",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3570-0:333:1833":{"id":"b:2:3570-0:333:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2943:3890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3568:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3572:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:96:1859":{"id":"0:96:1859","crate_id":0,"name":"static_flag","span":{"filename":"src/lib.rs","begin":[632,4],"end":[635,5]},"visibility":"public","docs":"Set the `-static` flag.\n\nWhen enabled on systems that support dynamic linking, this prevents\nlinking with the shared libraries.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .static_flag(true)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:1973":{"id":"0:86:1973","crate_id":0,"name":"object","span":{"filename":"src/lib.rs","begin":[410,4],"end":[413,5]},"visibility":"public","docs":"Add an arbitrary object file to link in","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["obj",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:2037":{"id":"0:93:2037","crate_id":0,"name":"flag_if_supported","span":{"filename":"src/lib.rs","begin":[566,4],"end":[569,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler if it supports it\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag_if_supported(\"-Wlogical-op\") // only supported by GCC\n    .flag_if_supported(\"-Wunreachable-code\") // only supported by clang\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:34689":{"id":"5:5552:34689","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:3360","`String`":"5:7534:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:3360","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8993:4122-0:311:3304":{"id":"a:2:8993:4122-0:311:3304","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8993:4122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:207:2760":{"id":"0:207:2760","crate_id":0,"name":"get_archiver","span":{"filename":"src/lib.rs","begin":[2844,4],"end":[2849,5]},"visibility":"public","docs":"Get the archiver (ar) that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5479:9983"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5446:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2737-0:394:134":{"id":"b:2:2737-0:394:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2707:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:134","2:2741:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:118:785":{"id":"0:118:785","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[920,4],"end":[923,5]},"visibility":"public","docs":"Configures the host assumed by this configuration.\n\nThis option is automatically scraped from the `HOST` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .host(\"arm-linux-gnueabihf\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["host",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:1851":{"id":"0:122:1851","crate_id":0,"name":"force_frame_pointer","span":{"filename":"src/lib.rs","begin":[959,4],"end":[962,5]},"visibility":"public","docs":"Configures whether the compiler will emit instructions to store\nframe pointers during codegen.\n\nThis option is automatically enabled when debug information is emitted.\nOtherwise the target platform compiler's default will be used.\nYou can use this option to force a specific setting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["force",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2993:3891-0:333:1833":{"id":"a:2:2993:3891-0:333:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2993:3891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:413:717":{"id":"0:413:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[193,16],"end":[193,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9918:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9899:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2487:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:326:661"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12821:33999":{"id":"2:12821:33999","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:710":{"id":"0:98:710","crate_id":0,"name":"file","span":{"filename":"src/lib.rs","begin":[649,4],"end":[652,5]},"visibility":"public","docs":"Add a file which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[178,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9948:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:133:1142":{"id":"0:133:1142","crate_id":0,"name":"pic","span":{"filename":"src/lib.rs","begin":[1034,4],"end":[1037,5]},"visibility":"public","docs":"Configures whether the compiler will emit position independent code.\n\nThis option defaults to `false` for `windows-gnu` and bare metal targets and\nto `true` for all other targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pic",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:2795":{"id":"2:12917:2795","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:9996"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:9991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:394:134":{"id":"0:394:134","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[156,0],"end":[161,1]},"visibility":"public","docs":"Represents an internal error that occurred, with an explanation.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2993:3891-0:394:134","a:2:8993:4122-0:394:134","a:2:2936:243-0:394:134","a:2:2953:253-0:394:134","a:2:8994:4121-0:394:134","b:2:2742-0:394:134","b:2:3570-0:394:134","b:2:2727-0:394:134","b:2:2424-0:394:134","b:2:2737-0:394:134","b:2:2427-0:394:134","b:2:2731-0:394:134","b:5:687-0:394:134","b:5:5809-0:394:134","0:63","0:397","0:65","0:399","0:61"]}}},"0:322":{"id":"0:322","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9943:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:323:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12833:34001":{"id":"2:12833:34001","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12038:1536","crate::ops::IndexMut":"2:3236:9911","str::slice_unchecked":"2:12832:34000"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:1988":{"id":"0:90:1988","crate_id":0,"name":"asm_flag","span":{"filename":"src/lib.rs","begin":[460,4],"end":[463,5]},"visibility":"public","docs":"Add a flag that will only be used with assembly files.\n\nThe flag will be applied to input files with either a `.s` or\n`.asm` extension (case insensitive).\n\n# Example\n\n```no_run\ncc::Build::new()\n    .asm_flag(\"-Wa,-defsym,abc=1\")\n    .file(\"src/foo.S\")  // The asm flag will be applied here\n    .file(\"src/bar.c\")  // The asm flag will not be applied here\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320:3314":{"id":"0:320:3314","crate_id":0,"name":"Vs17","span":{"filename":"src/windows_registry.rs","begin":[94,4],"end":[94,8]},"visibility":"default","docs":"Visual Studio 17 (2022)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:273:3011":{"id":"0:273:3011","crate_id":0,"name":"is_like_msvc","span":{"filename":"src/lib.rs","begin":[3625,4],"end":[3630,5]},"visibility":"public","docs":"Whether the tool is MSVC-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:34008":{"id":"2:12902:34008","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314:3308":{"id":"0:314:3308","crate_id":0,"name":"Vs14","span":{"filename":"src/windows_registry.rs","begin":[88,4],"end":[88,8]},"visibility":"default","docs":"Visual Studio 14 (2015)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12840:2977":{"id":"2:12840:2977","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12839:2747"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44204:9998","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3570-0:401:1893":{"id":"b:2:3570-0:401:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2943:3890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3568:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3572:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12941:15489":{"id":"2:12941:15489","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4745:15489"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44229:10008","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:2493":{"id":"5:5537:2493","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330":{"id":"0:330","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,31],"end":[82,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2948:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:140:2220":{"id":"0:140:2220","crate_id":0,"name":"try_compile","span":{"filename":"src/lib.rs","begin":[1086,4],"end":[1249,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThis will return a result instead of panicing; see compile() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42168:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12870:34003":{"id":"2:12870:34003","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12508:9996","str::split":"2:12861:2573","prim@char":"1:12032:451","`DoubleEndedIterator`":"2:7900:127","str::rsplit_terminator":"2:12873:34004"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43971:10020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:34688":{"id":"5:5551:34688","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1843":{"id":"0:100:1843","crate_id":0,"name":"files","span":{"filename":"src/lib.rs","begin":[655,4],"end":[664,5]},"visibility":"public","docs":"Add files which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7862:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:7862:162","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2704:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"1:2946:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3572:1632":{"id":"2:3572:1632","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39785:13808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:267:334":{"id":"0:267:334","crate_id":0,"name":"args","span":{"filename":"src/lib.rs","begin":[3568,4],"end":[3570,5]},"visibility":"public","docs":"Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"OsString","id":"1:1966:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2936:243-0:401:1893":{"id":"a:2:2936:243-0:401:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2936:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:113:1846":{"id":"0:113:1846","crate_id":0,"name":"cpp_set_stdlib","span":{"filename":"src/lib.rs","begin":[879,4],"end":[887,5]},"visibility":"public","docs":"Force the C++ compiler to use the specified standard library.\n\nSetting this option will automatically set `cpp_link_stdlib` to the same\nvalue.\n\nThe default value of this option is always `None`.\n\nThis option has no effect when compiling for a Visual Studio based\ntarget.\n\nThis option sets the `-stdlib` flag, which is only supported by some\ncompilers (clang, icc) but not by others (gcc). The library will not\ndetect which compiler is used, as such it is the responsibility of the\ncaller to ensure that this option is only used in conjunction with a\ncompiler which supports the `-stdlib` flag.\n\nA value of `None` indicates that no specific C++ standard library should\nbe used, otherwise `-stdlib` is added to the compile invocation.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .cpp_set_stdlib(\"c++\")\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_set_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2701:159","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12908:34012":{"id":"2:12908:34012","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:9996"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12533:9989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:1860":{"id":"0:106:1860","crate_id":0,"name":"warnings_into_errors","span":{"filename":"src/lib.rs","begin":[763,4],"end":[766,5]},"visibility":"public","docs":"Set warnings into errors flag.\n\nDisabled by default.\n\nWarning: turning warnings into errors only make sense\nif you are a developer of the crate using cc-rs.\nSome warnings only appear on some architecture or\nspecific version of the compiler. Any user of this crate,\nor any other crate depending on it, could fail during\ncompile time.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings_into_errors(true)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings_into_errors",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12891:34005":{"id":"2:12891:34005","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12508:9996","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::matches":"2:12888:3633"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44143:10015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:9991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:376:717":{"id":"0:376:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[94,16],"end":[94,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9918:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9899:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12812:873":{"id":"2:12812:873","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12032:451"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12822:339":{"id":"2:12822:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12823:3253","`u8`":"1:12049:1641"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8993:4122-0:401:1893":{"id":"a:2:8993:4122-0:401:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8993:4122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:131:1854":{"id":"0:131:1854","crate_id":0,"name":"cargo_metadata","span":{"filename":"src/lib.rs","begin":[1015,4],"end":[1018,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.\n\nThe emitted metadata is:\n\n - `rustc-link-lib=static=`*compiled lib*\n - `rustc-link-search=native=`*target folder*\n - When target is MSVC, the ATL-MFC libs are added via `rustc-link-search=native=`\n - When C++ is enabled, the C++ stdlib is added via `rustc-link-lib`\n - If `emit_rerun_if_env_changed` is not `false`, `rerun-if-env-changed=`*env*\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_metadata",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:332:455":{"id":"0:332:455","crate_id":0,"name":"clone","span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253:60":{"id":"0:253:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[3410,4],"end":[3412,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2733:744":{"id":"2:2733:744","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12894:34006":{"id":"2:12894:34006","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12508:9996","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::rmatch_indices":"2:12897:34007"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44071:10012","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5809-0:394:134":{"id":"b:5:5809-0:394:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9948:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2943:3890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5807:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5811:1594"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:52:1828":{"id":"0:52:1828","crate_id":0,"name":"windows_registry","span":{"filename":"src/windows_registry.rs","begin":[11,0],"end":[896,1]},"visibility":"public","docs":"A helper module to probe the Windows Registry when looking for\nwindows-specific tools.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:55:2257","0:57:2683","0:311:3304","0:58:3318"],"is_stripped":false}}},"0:155:2411":{"id":"0:155:2411","crate_id":0,"name":"expand","span":{"filename":"src/lib.rs","begin":[1599,4],"end":[1604,5]},"visibility":"public","docs":"Run the compiler, returning the macro-expanded version of the input files.\n\nThis is only relevant for C and C++ files.\n\n# Panics\nPanics if more than one file is present in the config, or if compiler\npath has an invalid file name.\n\n# Example\n```no_run\nlet out = cc::Build::new().file(\"src/foo.c\").expand();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6959:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2427-0:394:134":{"id":"b:2:2427-0:394:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2943:3890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2421:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2429:26769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:401:1893":{"id":"0:401:1893","crate_id":0,"name":"Tool","span":{"filename":"src/lib.rs","begin":[194,0],"end":[203,1]},"visibility":"public","docs":"Configuration used to represent an invocation of a C compiler.\n\nThis can be used to figure out what compiler is in use, what the arguments\nto it are, and what the environment variables look like for the compiler.\nThis can be used to further configure other build systems (e.g. forward\nalong CC and/or CFLAGS) or the `to_command` method can be used to run the\ncompiler itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:254","a:2:2993:3891-0:401:1893","a:2:8993:4122-0:401:1893","a:2:2936:243-0:401:1893","a:2:2953:253-0:401:1893","a:2:8994:4121-0:401:1893","b:2:2742-0:401:1893","b:2:3570-0:401:1893","b:2:2727-0:401:1893","b:2:2424-0:401:1893","b:2:2737-0:401:1893","b:2:2427-0:401:1893","b:2:2731-0:401:1893","b:5:687-0:401:1893","0:410","0:412"]}}},"2:12842:34002":{"id":"2:12842:34002","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44185:10011","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:398:455":{"id":"0:398:455","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[155,9],"end":[155,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:744":{"id":"0:62:744","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[173,4],"end":[175,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"io::Error","id":"1:2946:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12815:33997":{"id":"2:12815:33997","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1561":{"id":"0:117:1561","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[902,4],"end":[905,5]},"visibility":"public","docs":"Configures the target this configuration will be compiling for.\n\nThis option is automatically scraped from the `TARGET` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .target(\"aarch64-linux-android\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272:3014":{"id":"0:272:3014","crate_id":0,"name":"is_like_clang","span":{"filename":"src/lib.rs","begin":[3620,4],"end":[3622,5]},"visibility":"public","docs":"Whether the tool is Clang-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12823:3253":{"id":"2:12823:3253","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12049:1641"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:1856":{"id":"0:134:1856","crate_id":0,"name":"use_plt","span":{"filename":"src/lib.rs","begin":[1049,4],"end":[1052,5]},"visibility":"public","docs":"Configures whether the Procedure Linkage Table is used for indirect\ncalls into shared libraries.\n\nThe PLT is used to provide features like lazy binding, but introduces\na small performance loss due to extra pointer indirection. Setting\n`use_plt` to `false` can provide a small performance increase.\n\nNote that skipping the PLT requires a recent version of GCC/Clang.\n\nThis only applies to ELF targets. It has no effect on other platforms.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["use_plt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:3037":{"id":"0:270:3037","crate_id":0,"name":"cflags_env","span":{"filename":"src/lib.rs","begin":[3603,4],"end":[3612,5]},"visibility":"public","docs":"Returns the compiler flags in format of CFLAGS environment variable.\nImportant here - this will not be CFLAGS from env, its internal gcc's flags to use as CFLAGS\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:1966:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12843:32477":{"id":"2:12843:32477","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44213:9997","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:311:3304":{"id":"b:5:687-0:311:3304","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2959","5:690:2033","5:691:9610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2993:3891-0:394:134":{"id":"a:2:2993:3891-0:394:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2993:3891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:326:661":{"id":"0:326:661","crate_id":0,"name":"eq","span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:2276":{"id":"0:156:2276","crate_id":0,"name":"get_compiler","span":{"filename":"src/lib.rs","begin":[1624,4],"end":[1629,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis function will return a `Tool` which represents the culmination\nof this configuration at a snapshot in time. The returned compiler can\nbe inspected (e.g. the path, arguments, environment) to forward along to\nother tools, or the `to_command` method can be used to invoke the\ncompiler itself.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12814:33996":{"id":"2:12814:33996","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12853:2257":{"id":"2:12853:2257","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42025:197","prim@char":"1:12032:451","self::pattern":"2:12508:9996"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:3318":{"id":"0:58:3318","crate_id":0,"name":"find_vs_version","span":{"filename":"src/windows_registry.rs","begin":[102,0],"end":[104,1]},"visibility":"public","docs":"Find the most recent installed version of Visual Studio\n\nThis is used by the cmake crate to figure out the correct\ngenerator.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42168:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12876:29368":{"id":"2:12876:29368","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:9996","str::rsplitn":"2:12879:29370"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44025:10018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12826:29333":{"id":"2:12826:29333","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42025:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12830:29335":{"id":"2:12830:29335","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:2006":{"id":"0:92:2006","crate_id":0,"name":"is_flag_supported","span":{"filename":"src/lib.rs","begin":[495,4],"end":[553,5]},"visibility":"public","docs":"Run the compiler to test if it accepts the given flag.\n\nFor a convenience method for setting flags conditionally,\nsee `flag_if_supported()`.\n\nIt may return error if it's unable to run the compiler with a test file\n(e.g. the compiler is missing or a write to the `out_dir` failed).\n\nNote: Once computed, the result of this call is stored in the\n`known_flag_support` field. If `is_flag_supported(flag)`\nis called again, the result will be read from the hash table.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42168:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}},{"type":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12811":{"id":"2:12811","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12812:873","2:12813:2031","2:12814:33996","2:12815:33997","2:12817:33998","2:12820:2243","2:12821:33999","2:12822:339","2:12823:3253","2:12824:2010","2:12826:29333","2:12828:29334","2:12830:29335","2:12832:34000","2:12833:34001","2:12834:2721","2:12835:29356","2:12836:3010","2:12837:14050","2:12838:9761","2:12839:2747","2:12840:2977","2:12841:9755","2:12842:34002","2:12843:32477","2:12844:2020","2:12847:2226","2:12850:2227","2:12853:2257","2:12857:2722","2:12861:2573","2:12864:29364","2:12867:29366","2:12870:34003","2:12873:34004","2:12876:29368","2:12879:29370","2:12882:29372","2:12885:29373","2:12888:3633","2:12891:34005","2:12894:34006","2:12897:34007","2:12900:2989","2:12902:34008","2:12904:34009","2:12906:34010","2:12907:34011","2:12908:34012","2:12911:2724","2:12914:3100","2:12917:2795","2:12920:2799","2:12923:3519","2:12926:34013","2:12929:2380","2:12931:29095","2:12932:29236","2:12933:29096","2:12934:29092","2:12935:29091","2:12936:29239","2:12937:29240","2:12938:29241","2:12939:34014","2:12941:15489","2:12942:34015"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12850:2227":{"id":"2:12850:2227","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:9996"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:9991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[184,0],"end":[184,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","source","provide","description","cause"],"trait":{"name":"Error","id":"2:2789:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8993:4122-0:394:134":{"id":"a:2:8993:4122-0:394:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8993:4122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2746:1617":{"id":"2:2746:1617","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42168:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:1977":{"id":"0:88:1977","crate_id":0,"name":"flag","span":{"filename":"src/lib.rs","begin":[425,4],"end":[428,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"-ffunction-sections\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2727-0:311:3304":{"id":"b:2:2727-0:311:3304","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2730:1882"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12933:29096":{"id":"2:12933:29096","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12836:3010":{"id":"2:12836:3010","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43891:10003","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[155,9],"end":[155,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:398:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5543:3107":{"id":"5:5543:3107","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12888:3633":{"id":"2:12888:3633","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12508:9996","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::rmatches":"2:12891:34005"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44125:10014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12864:29364":{"id":"2:12864:29364","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:9996"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12324:9999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12935:29091":{"id":"2:12935:29091","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12837:14050":{"id":"2:12837:14050","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43897:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135:1864":{"id":"0:135:1864","crate_id":0,"name":"emit_rerun_if_env_changed","span":{"filename":"src/lib.rs","begin":[1060,4],"end":[1063,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo to detect environment\nchanges that should trigger a rebuild.\n\nThis has no effect if the `cargo_metadata` option is `false`.\n\nThis option defaults to `true`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["emit_rerun_if_env_changed",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:691:9610":{"id":"5:691:9610","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12882:29372":{"id":"2:12882:29372","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1842":{"id":"0:97:1842","crate_id":0,"name":"no_default_flags","span":{"filename":"src/lib.rs","begin":[643,4],"end":[646,5]},"visibility":"public","docs":"Disables the generation of default compiler flags. The default compiler\nflags may cause conflicts in some cross compiling scenarios.\n\nSetting the `CRATE_CC_NO_DEFAULTS` environment variable has the same\neffect as setting this to `true`. The presence of the environment\nvariable and the value of `no_default_flags` will be OR'd together.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["no_default_flags",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2742-0:401:1893":{"id":"b:2:2742-0:401:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2745:134","2:2746:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12834:2721":{"id":"2:12834:2721","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12835:29356"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:477":{"id":"0:125:477","crate_id":0,"name":"compiler","span":{"filename":"src/lib.rs","begin":[979,4],"end":[982,5]},"visibility":"public","docs":"Configures the compiler to be used to produce output.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["compiler",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:1964":{"id":"0:81:1964","crate_id":0,"name":"includes","span":{"filename":"src/lib.rs","begin":[381,4],"end":[390,5]},"visibility":"public","docs":"Add multiple directories to the `-I` include path.\n\n# Example\n\n```no_run\n# use std::path::Path;\n# let condition = true;\n#\nlet mut extra_dir = None;\nif condition {\n    extra_dir = Some(Path::new(\"/path/to\"));\n}\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .includes(extra_dir)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dirs",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7862:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:7862:162","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2679":{"id":"0:0:2679","crate_id":0,"name":"cc","span":{"filename":"src/lib.rs","begin":[1,0],"end":[4024,1]},"visibility":"public","docs":"A library for build scripts to compile custom C code\n\nThis library is intended to be used as a `build-dependencies` entry in\n`Cargo.toml`:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n```\n\nThe purpose of this crate is to provide the utility functions necessary to\ncompile C code into a static archive which is then linked into a Rust crate.\nConfiguration is available through the `Build` struct.\n\nThis crate will automatically detect situations such as cross compilation or\nother environment variables set by Cargo and will build code appropriately.\n\nThe crate is not limited to C code, it can accept any source code that can\nbe passed to a C or C++ compiler. As such, assembly files with extensions\n`.s` (gcc/clang) and `.asm` (MSVC) can also be compiled.\n\n[`Build`]: struct.Build.html\n\n# Parallelism\n\nTo parallelize computation, enable the `parallel` feature for the crate.\n\n```toml\n[build-dependencies]\ncc = { version = \"1.0\", features = [\"parallel\"] }\n```\nTo specify the max number of concurrent compilation jobs, set the `NUM_JOBS`\nenvironment variable to the desired amount.\n\nCargo will also set this environment variable when executed with the `-jN` flag.\n\n# Examples\n\nUse the `Build` struct to compile `src/foo.c`:\n\n```no_run\nfn main() {\n    cc::Build::new()\n        .file(\"src/foo.c\")\n        .define(\"FOO\", Some(\"bar\"))\n        .include(\"src\")\n        .compile(\"foo\");\n}\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/cc/1.0\")]","#![allow(deprecated)]","#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:52:1828","0:333:1833","0:394:134","0:401:1893"],"is_stripped":false}}},"2:12920:2799":{"id":"2:12920:2799","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:9996"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:9991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12931:29095":{"id":"2:12931:29095","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:2989":{"id":"2:12900:2989","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:327":{"id":"0:327","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2947:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12937:29240":{"id":"2:12937:29240","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:36349"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2731-0:394:134":{"id":"b:2:2731-0:394:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2733:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:109:1845":{"id":"0:109:1845","crate_id":0,"name":"cpp_link_stdlib","span":{"filename":"src/lib.rs","begin":[838,4],"end":[844,5]},"visibility":"public","docs":"Set the standard library to link against when compiling with C++\nsupport.\n\nIf the `CXXSTDLIB` environment variable is set, its value will\noverride the default value, but not the value explicitly set by calling\nthis function.\n\nA value of `None` indicates that no automatic linking should happen,\notherwise cargo will link against the specified library.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n- `c++_shared` or `c++_static` for Android\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .cpp_link_stdlib(\"stdc++\")\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_link_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2701:159","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:1849":{"id":"0:123:1849","crate_id":0,"name":"out_dir","span":{"filename":"src/lib.rs","begin":[969,4],"end":[972,5]},"visibility":"public","docs":"Configures the output directory where all object files and static\nlibraries will be located.\n\nThis option is automatically scraped from the `OUT_DIR` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["out_dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12867:29366":{"id":"2:12867:29366","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12508:9996","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::split":"2:12861:2573"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43939:10016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:9991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12907:34011":{"id":"2:12907:34011","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:34687":{"id":"5:5540:34687","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2424-0:394:134":{"id":"b:2:2424-0:394:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2943:3890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2418:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2426:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12813:2031":{"id":"2:12813:2031","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12844:2020":{"id":"2:12844:2020","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:9996"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:328":{"id":"0:328","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2492:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2745:134":{"id":"2:2745:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32445:3823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:2936:243-0:394:134":{"id":"a:2:2936:243-0:394:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2936:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2424-0:401:1893":{"id":"b:2:2424-0:401:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2943:3890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2418:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2426:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2741:1619":{"id":"2:2741:1619","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42168:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1844":{"id":"0:102:1844","crate_id":0,"name":"cpp","span":{"filename":"src/lib.rs","begin":[676,4],"end":[679,5]},"visibility":"public","docs":"Set C++ support.\n\nThe other `cpp_*` options will only become active if this is set to\n`true`.\n\nThe name of the C++ standard library to link is decided by:\n1. If [cpp_link_stdlib](Build::cpp_link_stdlib) is set, use its value.\n2. Else if the `CXXSTDLIB` environment variable is set, use its value.\n3. Else the default is `libc++` for OS X and BSDs, `libc++_shared` for Android,\n`None` for MSVC and `libstdc++` for anything else.","links":{"Build::cpp_link_stdlib":"0:109:1845"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8993:4122-0:333:1833":{"id":"a:2:8993:4122-0:333:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8993:4122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:268:658":{"id":"0:268:658","crate_id":0,"name":"env","span":{"filename":"src/lib.rs","begin":[3576,4],"end":[3578,5]},"visibility":"public","docs":"Returns the set of environment variables needed for this compiler to\noperate.\n\nThis is typically only used for MSVC compilers currently.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"tuple":[{"resolved_path":{"name":"OsString","id":"1:1966:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"OsString","id":"1:1966:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:1969":{"id":"0:83:1969","crate_id":0,"name":"define","span":{"filename":"src/lib.rs","begin":[403,4],"end":[407,5]},"visibility":"public","docs":"Specify a `-D` variable with an optional value.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .define(\"FOO\", \"BAR\")\n    .define(\"BAZ\", None)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["val",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2701:159","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8994:4121-0:311:3304":{"id":"a:2:8994:4121-0:311:3304","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8994:4121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2727-0:401:1893":{"id":"b:2:2727-0:401:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2730:1882"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:264:2018":{"id":"0:264:2018","crate_id":0,"name":"to_command","span":{"filename":"src/lib.rs","begin":[3534,4],"end":[3556,5]},"visibility":"public","docs":"Converts this compiler into a `Command` that's ready to be run.\n\nThis is useful for when the compiler needs to be executed and the\ncommand returned will already have the initial arguments and environment\nvariables configured.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5446:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:3013":{"id":"0:271:3013","crate_id":0,"name":"is_like_gnu","span":{"filename":"src/lib.rs","begin":[3615,4],"end":[3617,5]},"visibility":"public","docs":"Whether the tool is GNU Compiler Collection-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2740:134":{"id":"2:2740:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12879:29370":{"id":"2:12879:29370","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12032:451","str::splitn":"2:12876:29368","self::pattern":"2:12508:9996"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44043:10017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:9991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3570-0:311:3304":{"id":"b:2:3570-0:311:3304","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2943:3890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3568:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3572:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12835:29356":{"id":"2:12835:29356","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12834:2721"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12857:2722":{"id":"2:12857:2722","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42025:197","prim@char":"1:12032:451","self::pattern":"2:12508:9996"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:9991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12911:2724":{"id":"2:12911:2724","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:9996"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12936:29239":{"id":"2:12936:29239","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:36349"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1037":{"id":"0:78:1037","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[299,4],"end":[341,5]},"visibility":"public","docs":"Construct a new instance of a blank set of configuration.\n\nThis builder is finished with the [`compile`] function.\n\n[`compile`]: struct.Build.html#method.compile","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8994:4121-0:401:1893":{"id":"a:2:8994:4121-0:401:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8994:4121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12926:34013":{"id":"2:12926:34013","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:9996"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:9991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2993:3891-0:311:3304":{"id":"a:2:2993:3891-0:311:3304","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2993:3891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[293,0],"end":[3407,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:1037","0:79:817","0:81:1964","0:83:1969","0:86:1973","0:88:1977","0:89:1981","0:90:1988","0:92:2006","0:93:2037","0:94:2049","0:95:1858","0:96:1859","0:97:1842","0:98:710","0:100:1843","0:102:1844","0:103:1847","0:104:1848","0:105:1528","0:106:1860","0:107:1805","0:108:1861","0:109:1845","0:113:1846","0:117:1561","0:118:785","0:119:1850","0:120:2164","0:121:573","0:122:1851","0:123:1849","0:125:477","0:127:1852","0:129:1853","0:131:1854","0:132:2196","0:133:1142","0:134:1856","0:135:1864","0:136:1857","0:140:2220","0:149:2316","0:153:2402","0:155:2411","0:156:2276","0:157:2015","0:207:2760","0:208:2761","0:211:2770","0:212:2771"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:690:2033":{"id":"5:690:2033","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:29092":{"id":"2:12934:29092","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:411:455":{"id":"0:411:455","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[193,9],"end":[193,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324":{"id":"0:324","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2936:243-0:311:3304":{"id":"a:2:2936:243-0:311:3304","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2936:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:79:817":{"id":"0:79:817","crate_id":0,"name":"include","span":{"filename":"src/lib.rs","begin":[358,4],"end":[361,5]},"visibility":"public","docs":"Add a directory to the `-I` or include path for headers\n\n# Example\n\n```no_run\nuse std::path::Path;\n\nlet library_path = Path::new(\"/path/to/library\");\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .include(library_path)\n    .include(\"src\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:331":{"id":"0:331","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:332:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:55:2257":{"id":"0:55:2257","crate_id":0,"name":"find","span":{"filename":"src/windows_registry.rs","begin":[35,0],"end":[37,1]},"visibility":"public","docs":"Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.\n\nThe `target` argument is the target that the tool should work for (e.g.\ncompile or link for) and the `tool` argument is the tool to find (e.g.\n`cl.exe` or `link.exe`).\n\nThis function will return `None` if the tool could not be found, or it will\nreturn `Some(cmd)` which represents a command that's ready to execute the\ntool with the appropriate environment variables set.\n\nNote that this function always returns `None` for non-MSVC targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::process::Command","id":"1:5446:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:2402":{"id":"0:153:2402","crate_id":0,"name":"try_expand","span":{"filename":"src/lib.rs","begin":[1562,4],"end":[1585,5]},"visibility":"public","docs":"This will return a result instead of panicing; see expand() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42168:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6959:269","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2731-0:333:1833":{"id":"b:2:2731-0:333:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2733:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:94:2049":{"id":"0:94:2049","crate_id":0,"name":"try_flags_from_environment","span":{"filename":"src/lib.rs","begin":[594,4],"end":[598,5]},"visibility":"public","docs":"Add flags from the specified environment variable.\n\nNormally the `cc` crate will consult with the standard set of environment\nvariables (such as `CFLAGS` and `CXXFLAGS`) to construct the compiler invocation. Use of\nthis method provides additional levers for the end user to use when configuring the build\nprocess.\n\nJust like the standard variables, this method will search for an environment variable with\nappropriate target prefixes, when appropriate.\n\n# Examples\n\nThis method is particularly beneficial in introducing the ability to specify crate-specific\nflags.\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .try_flags_from_environment(concat!(env!(\"CARGO_PKG_NAME\"), \"_CFLAGS\"))\n    .expect(\"the environment variable must be specified and UTF-8\")\n    .compile(\"foo\");\n```\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["environ_key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42168:232","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:412":{"id":"0:412","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[193,16],"end":[193,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9943:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:413:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12828:29334":{"id":"2:12828:29334","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:29241":{"id":"2:12938:29241","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:36349"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2731-0:311:3304":{"id":"b:2:2731-0:311:3304","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2733:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8994:4121-0:333:1833":{"id":"a:2:8994:4121-0:333:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8994:4121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8994:4121-0:394:134":{"id":"a:2:8994:4121-0:394:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8994:4121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3570-0:394:134":{"id":"b:2:3570-0:394:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2943:3890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3568:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3572:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:64:717":{"id":"0:64:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[179,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9918:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9899:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:9755":{"id":"2:12841:9755","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44175:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149:2316":{"id":"0:149:2316","crate_id":0,"name":"compile","span":{"filename":"src/lib.rs","begin":[1288,4],"end":[1292,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\n# Library name\n\nThe `output` string argument determines the file name for the compiled\nlibrary. The Rust compiler will create an assembly named \"lib\"+output+\".a\".\nMSVC will create a file named output+\".lib\".\n\nThe choice of `output` is close to arbitrary, but:\n\n- must be nonempty,\n- must not contain a path separator (`/`),\n- must be unique across all `compile` invocations made by the same build\n  script.\n\nIf your build script compiles a single source file, the base name of\nthat source file would usually be reasonable:\n\n```no_run\ncc::Build::new().file(\"blobstore.c\").compile(\"blobstore\");\n```\n\nCompiling multiple source files, some people use their crate's name, or\ntheir crate's name + \"-cc\".\n\nOtherwise, please use your imagination.\n\nFor backwards compatibility, if `output` starts with \"lib\" *and* ends\nwith \".a\", a second \"lib\" prefix and \".a\" suffix do not get added on,\nbut this usage is deprecated; please omit `lib` and `.a` in the argument\nthat you pass.\n\n# Panics\n\nPanics if `output` is not formatted correctly or if one of the underlying\ncompiler commands fails. It can also panic if it fails reading file names\nor creating directories.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:1848":{"id":"0:104:1848","crate_id":0,"name":"cudart","span":{"filename":"src/lib.rs","begin":[706,4],"end":[711,5]},"visibility":"public","docs":"Link CUDA run-time.\n\nThis option mimics the `--cudart` NVCC command-line option. Just like\nthe original it accepts `{none|shared|static}`, with default being\n`static`. The method has to be invoked after `.cuda(true)`, or not\nat all, if the default is right for the project.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cudart",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:29093":{"id":"5:5555:29093","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12935:29091"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:2796":{"id":"0:269:2796","crate_id":0,"name":"cc_env","span":{"filename":"src/lib.rs","begin":[3584,4],"end":[3598,5]},"visibility":"public","docs":"Returns the compiler command in format of CC environment variable.\nOr empty string if CC env was not present\n\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:1966:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:1861":{"id":"0:108:1861","crate_id":0,"name":"extra_warnings","span":{"filename":"src/lib.rs","begin":[807,4],"end":[810,5]},"visibility":"public","docs":"Set extra warnings flags.\n\nAdds some flags:\n- nothing for MSVC.\n- \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\n// Disables -Wextra, -Wall remains enabled:\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .extra_warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12861:2573":{"id":"2:12861:2573","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12508:9996","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::split_whitespace":"2:12839:2747","str::rsplit":"2:12867:29366"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43921:3764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:311:3304":{"id":"0:311:3304","crate_id":0,"name":"VsVers","span":{"filename":"src/windows_registry.rs","begin":[84,0],"end":[95,1]},"visibility":"public","docs":"A version of Visual Studio","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:312:3306","0:314:3308","0:316:3310","0:318:3312","0:320:3314"],"impls":["a:2:2993:3891-0:311:3304","a:2:8993:4122-0:311:3304","a:2:2936:243-0:311:3304","a:2:2953:253-0:311:3304","a:2:8994:4121-0:311:3304","b:2:2742-0:311:3304","b:2:3570-0:311:3304","b:2:2727-0:311:3304","b:2:2424-0:311:3304","b:2:2737-0:311:3304","b:2:2427-0:311:3304","b:2:2731-0:311:3304","b:5:687-0:311:3304","0:322","0:327","0:330","0:325","0:324","0:331","0:328"]}}},"2:12942:34015":{"id":"2:12942:34015","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4742:34015"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44238:10009","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12885:29373":{"id":"2:12885:29373","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:9991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:312:3306":{"id":"0:312:3306","crate_id":0,"name":"Vs12","span":{"filename":"src/windows_registry.rs","begin":[86,4],"end":[86,8]},"visibility":"default","docs":"Visual Studio 12 (2013)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"5:5553:3783":{"id":"5:5553:3783","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2953:253-0:394:134":{"id":"a:2:2953:253-0:394:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2953:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2426:1807":{"id":"2:2426:1807","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2953:253-0:333:1833":{"id":"a:2:2953:253-0:333:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2953:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:374:455":{"id":"0:374:455","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266:1139":{"id":"0:266:1139","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[3562,4],"end":[3564,5]},"visibility":"public","docs":"Returns the path for this compiler.\n\nNote that this may not be a path to a file on the filesystem, e.g. \"cc\",\nbut rather something which will be resolved when a process is spawned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5240:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2737-0:311:3304":{"id":"b:2:2737-0:311:3304","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2707:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:134","2:2741:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:400:717":{"id":"0:400:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[155,16],"end":[155,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9918:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9899:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2742-0:333:1833":{"id":"b:2:2742-0:333:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2745:134","2:2746:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12932:29236":{"id":"2:12932:29236","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39972:29243","Self::is_ascii":"2:12931:29095"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39972:29243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2427-0:333:1833":{"id":"b:2:2427-0:333:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2943:3890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2421:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2429:26769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,16],"end":[94,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9943:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:376:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2953:253-0:401:1893":{"id":"a:2:2953:253-0:401:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2953:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12929:2380":{"id":"2:12929:2380","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12469:133","`FromStr`":"2:12468:3338"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42168:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12468:3338","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12468:3338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:34686":{"id":"5:5536:34686","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:3360","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:3360","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:1805":{"id":"0:107:1805","crate_id":0,"name":"warnings","span":{"filename":"src/lib.rs","begin":[784,4],"end":[788,5]},"visibility":"public","docs":"Set warnings flags.\n\nAdds some flags:\n- \"-Wall\" for MSVC.\n- \"-Wall\", \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12824:2010":{"id":"2:12824:2010","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42025:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12914:3100":{"id":"2:12914:3100","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:9996"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1858":{"id":"0:95:1858","crate_id":0,"name":"shared_flag","span":{"filename":"src/lib.rs","begin":[613,4],"end":[616,5]},"visibility":"public","docs":"Set the `-shared` flag.\n\nWhen enabled, the compiler will produce a shared object which can\nthen be linked with other objects to form an executable.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["shared_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3409,0],"end":[3413,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2778:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:253:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12939:34014":{"id":"2:12939:34014","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4744:34014"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44220:10007","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2742-0:311:3304":{"id":"b:2:2742-0:311:3304","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2745:134","2:2746:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12832:34000":{"id":"2:12832:34000","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12038:1536","str::slice_mut_unchecked":"2:12833:34001","crate::ops::Index":"2:3232:9910"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2427-0:401:1893":{"id":"b:2:2427-0:401:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2943:3890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2421:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2429:26769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2727-0:333:1833":{"id":"b:2:2727-0:333:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2730:1882"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12897:34007":{"id":"2:12897:34007","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12508:9996","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::match_indices":"2:12894:34006"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44089:10013","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:9991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2429:26769":{"id":"2:2429:26769","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2730:1882":{"id":"2:2730:1882","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2704:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:318:3312":{"id":"0:318:3312","crate_id":0,"name":"Vs16","span":{"filename":"src/windows_registry.rs","begin":[92,4],"end":[92,8]},"visibility":"default","docs":"Visual Studio 16 (2019)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12923:3519":{"id":"2:12923:3519","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:9996"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3415,0],"end":[3631,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:2018","0:266:1139","0:267:334","0:268:658","0:269:2796","0:270:3037","0:271:3013","0:272:3014","0:273:3011"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:316:3310":{"id":"0:316:3310","crate_id":0,"name":"Vs15","span":{"filename":"src/windows_registry.rs","begin":[90,4],"end":[90,8]},"visibility":"default","docs":"Visual Studio 15 (2017)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:211:2770":{"id":"0:211:2770","crate_id":0,"name":"get_ranlib","span":{"filename":"src/lib.rs","begin":[2895,4],"end":[2900,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5479:9983"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5446:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2731-0:401:1893":{"id":"b:2:2731-0:401:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2733:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:689:2959":{"id":"5:689:2959","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:34686","5:5537:2493","5:5540:34687","5:5543:3107","5:5551:34688","5:5552:34689","5:5553:3783","5:5554:29094","5:5555:29093"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:208:2761":{"id":"0:208:2761","crate_id":0,"name":"try_get_archiver","span":{"filename":"src/lib.rs","begin":[2855,4],"end":[2857,5]},"visibility":"public","docs":"Get the archiver that's in use for this configuration.\n\nThis will return a result instead of panicing;\nsee [`get_archiver()`] for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42168:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5446:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:1853":{"id":"0:129:1853","crate_id":0,"name":"ranlib","span":{"filename":"src/lib.rs","begin":[999,4],"end":[1002,5]},"visibility":"public","docs":"Configures the tool used to index archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ranlib",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:34010":{"id":"2:12906:34010","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2424-0:333:1833":{"id":"b:2:2424-0:333:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2943:3890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2418:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2426:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:120:2164":{"id":"0:120:2164","crate_id":0,"name":"opt_level_str","span":{"filename":"src/lib.rs","begin":[938,4],"end":[941,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:29094":{"id":"5:5554:29094","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12934:29092"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[155,16],"end":[155,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9943:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:400:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:103:1847":{"id":"0:103:1847","crate_id":0,"name":"cuda","span":{"filename":"src/lib.rs","begin":[691,4],"end":[698,5]},"visibility":"public","docs":"Set CUDA C++ support.\n\nEnabling CUDA will invoke the CUDA compiler, NVCC. While NVCC accepts\nthe most common compiler flags, e.g. `-std=c++17`, some project-specific\nflags might have to be prefixed with \"-Xcompiler\" flag, for example as\n`.flag(\"-Xcompiler\").flag(\"-fpermissive\")`. See the documentation for\n`nvcc`, the CUDA compiler driver, at https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/\nfor more information.\n\nIf enabled, this also implicitly enables C++ support.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cuda",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:1981":{"id":"0:89:1981","crate_id":0,"name":"ar_flag","span":{"filename":"src/lib.rs","begin":[441,4],"end":[444,5]},"visibility":"public","docs":"Add a flag to the invocation of the ar\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .file(\"src/bar.c\")\n    .ar_flag(\"/NODEFAULTLIB:libc.dll\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323:717":{"id":"0:323:717","crate_id":0,"name":"fmt","span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9918:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9899:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12839:2747":{"id":"2:12839:2747","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12840:2977"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44195:10000","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:401:1893":{"id":"b:5:687-0:401:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2959","5:690:2033","5:691:9610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2737-0:333:1833":{"id":"b:2:2737-0:333:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2707:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:134","2:2741:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2727-0:394:134":{"id":"b:2:2727-0:394:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2730:1882"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:687-0:394:134":{"id":"b:5:687-0:394:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2959","5:690:2033","5:691:9610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2737-0:401:1893":{"id":"b:2:2737-0:401:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2707:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:134","2:2741:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2936:243-0:333:1833":{"id":"a:2:2936:243-0:333:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2936:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12820:2243":{"id":"2:12820:2243","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12063:2987"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1852":{"id":"0:127:1852","crate_id":0,"name":"archiver","span":{"filename":"src/lib.rs","begin":[989,4],"end":[992,5]},"visibility":"public","docs":"Configures the tool used to assemble archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["archiver",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2695:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:1857":{"id":"0:136:1857","crate_id":0,"name":"static_crt","span":{"filename":"src/lib.rs","begin":[1068,4],"end":[1071,5]},"visibility":"public","docs":"Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.\n\nThis option defaults to `false`, and affect only msvc targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_crt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12904:34009":{"id":"2:12904:34009","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:1850":{"id":"0:119:1850","crate_id":0,"name":"opt_level","span":{"filename":"src/lib.rs","begin":[929,4],"end":[932,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"primitive":"u32"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:2015":{"id":"0:157:2015","crate_id":0,"name":"try_get_compiler","span":{"filename":"src/lib.rs","begin":[1634,4],"end":[1714,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis will return a result instead of panicing; see get_compiler() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42168:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:1528":{"id":"0:105:1528","crate_id":0,"name":"std","span":{"filename":"src/lib.rs","begin":[739,4],"end":[742,5]},"visibility":"public","docs":"Specify the C or C++ language standard version.\n\nThese values are common to modern versions of GCC, Clang and MSVC:\n- `c11` for ISO/IEC 9899:2011\n- `c17` for ISO/IEC 9899:2018\n- `c++14` for ISO/IEC 14882:2014\n- `c++17` for ISO/IEC 14882:2017\n- `c++20` for ISO/IEC 14882:2020\n\nOther values have less broad support, e.g. MSVC does not support `c++11`\n(`c++14` is the minimum), `c89` (omit the flag instead) or `c99`.\n\nFor compiling C++ code, you should also set `.cpp(true)`.\n\nThe default is that no standard flag is passed to the compiler, so the\nlanguage version will be the compiler's default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/modern.cpp\")\n    .cpp(true)\n    .std(\"c++17\")\n    .compile(\"modern\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["std",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212:2771":{"id":"0:212:2771","crate_id":0,"name":"try_get_ranlib","span":{"filename":"src/lib.rs","begin":[2906,4],"end":[2912,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nThis will return a result instead of panicing;\nsee [`get_ranlib()`] for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42168:232","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5446:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2953:253-0:311:3304":{"id":"a:2:2953:253-0:311:3304","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2953:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5811:1594":{"id":"5:5811:1594","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12873:34004":{"id":"2:12873:34004","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12508:9996","str::split":"2:12861:2573","prim@char":"1:12032:451","str::split_terminator":"2:12870:34003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43989:10019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:9991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12817:33998":{"id":"2:12817:33998","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12815:33997"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:2683":{"id":"0:57:2683","crate_id":0,"name":"find_tool","span":{"filename":"src/windows_registry.rs","begin":[43,0],"end":[45,1]},"visibility":"public","docs":"Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["_tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2424-0:311:3304":{"id":"b:2:2424-0:311:3304","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2943:3890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2418:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2426:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12847:2226":{"id":"2:12847:2226","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:9996"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:9990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2742-0:394:134":{"id":"b:2:2742-0:394:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2745:134","2:2746:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:687-0:333:1833":{"id":"b:5:687-0:333:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2959","5:690:2033","5:691:9610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[193,9],"end":[193,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:411:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:132:2196":{"id":"0:132:2196","crate_id":0,"name":"link_lib_modifier","span":{"filename":"src/lib.rs","begin":[1025,4],"end":[1028,5]},"visibility":"public","docs":"Adds a native library modifier that will be added to the\n`rustc-link-lib=static:MODIFIERS=LIBRARY_NAME` metadata line\nemitted for cargo if `cargo_metadata` is enabled.\nSee https://doc.rust-lang.org/rustc/command-line-arguments.html#-l-link-the-generated-crate-to-a-native-library\nfor the list of modifiers accepted by rustc.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["link_lib_modifier",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:333:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:333:1833":{"id":"0:333:1833","crate_id":0,"name":"Build","span":{"filename":"src/lib.rs","begin":[95,0],"end":[135,1]},"visibility":"public","docs":"A builder for compilation of a native library.\n\nA `Build` is the main type of the `cc` crate and is used to control all the\nvarious configuration options and such of a compile. You'll find more\ndocumentation on each method itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:77","a:2:2993:3891-0:333:1833","a:2:8993:4122-0:333:1833","a:2:2936:243-0:333:1833","a:2:2953:253-0:333:1833","a:2:8994:4121-0:333:1833","b:2:2742-0:333:1833","b:2:3570-0:333:1833","b:2:2727-0:333:1833","b:2:2424-0:333:1833","b:2:2737-0:333:1833","b:2:2427-0:333:1833","b:2:2731-0:333:1833","b:5:687-0:333:1833","0:373","0:375","0:252"]}}},"b:2:2427-0:311:3304":{"id":"b:2:2427-0:311:3304","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2943:3890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2421:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:311:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2429:26769"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12838:9761":{"id":"2:12838:9761","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43907:3763","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2993:3891-0:401:1893":{"id":"a:2:2993:3891-0:401:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2993:3891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:401:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"6:6169:8571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12572:14415":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:3200:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10667:35523":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:12522:9992":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:40814:13969":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:42219:9793":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:46107:14095":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:4893:7944":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:32485:13247":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"5:1477:9794":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:4529:7906":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:4455:14525":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:43096:3691":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"18:644:11850":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:10968:30957":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:42456:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"20:5402:8549":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:11551:14535":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:3155:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:48334:14190":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:12468:3338":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:7651:13640":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:7645:8086":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:41027:13978":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:42772:3701":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:1873:9775":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:7582:13256":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:7375:9564":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:44640:14068":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:43074:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:41213:13980":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"20:5529:8559":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"20:6172:4588":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:4497:12983":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:3753:14511":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:5104:13622":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:4884:7943":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:2979:33939":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:7534:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:8190:3761":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:5117:13628":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:5123:13631":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:15345:12676":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:5885:8549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"11:2352:9808":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:46502:14111":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:9900:1815":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:7540:14625":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:1737:1809":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"17:13948:12306":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6204:14429":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"11:2562:13474":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:6531:13112":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:6100:8565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:2209:3426":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"11:1910:13466":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"11:1676:10902":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:12533:9989":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"11:875:9804":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:3010:9894":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12746:12138":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:14181:12358":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"20:4509:7931":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:13516:12227":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:10510:14339":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:40801:13968":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:5403:11982":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:7915:14584":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:12784:12140":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"13:0:3533":{"crate_id":13,"path":["std_detect"],"kind":"module"},"10:44:13479":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:12057:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:43031:13291":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:6401:12949":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:736:26737":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:9467:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:557:1820":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:23351:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"20:6255:5524":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:3049:21673":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:39799:13809":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"0:58:3318":{"crate_id":0,"path":["cc","windows_registry","find_vs_version"],"kind":"function"},"11:2554:35496":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:1913:5720":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:3197:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12380:12111":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:8157:3722":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:7722:12956":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:15535:12745":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:6871:10057":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:44529:10021":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:12584:14416":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:3432:32911":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6944:35512":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"8:0:3535":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:11144:3820":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:43311:14025":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:42160:3872":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"20:5617:8565":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:10430:3819":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:12063:2987":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:7843:3719":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"11:1891:9796":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:3818:9797":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:42211:3805":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:1743:658":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:22282:15670":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:6927:8992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:14757:12518":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:9918:22601":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:1591:5567":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:4:1113":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:43891:10003":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:9968:22602":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:9956:3701":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:2421:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:15177:12633":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:21643:13697":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:21513:3726":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:39636:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:48259:14185":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:5419:11983":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:0:878":{"crate_id":6,"path":["libc"],"kind":"module"},"2:7825:20829":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"11:430:35498":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:7848:3716":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:8261:3247":{"crate_id":1,"path":["std","os","raw","c_int"],"kind":"type_alias"},"17:15003:12592":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:8984:3862":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:8292:14594":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:10716:14342":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:21272:32603":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:4949:12997":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:2305:21670":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:7284:13662":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:44071:10012":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:45955:14089":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:5051:14573":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12684:11955":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"9:393:21522":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:1527:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:4824:7935":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:10410:10970":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:8325:20828":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:43303:14024":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:3732:14567":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"20:4705:7954":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10896:11998":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:13309:12185":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"11:700:9564":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:636:11871":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:4588:9617":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:8866:9564":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"18:0:3543":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:8006:14586":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"20:130:4345":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"16:7102:22539":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:4578:7912":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:23165:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"20:1539:5562":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:12739:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"20:5509:8558":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"20:5780:8604":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:5111:13625":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:44549:10022":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"20:1684:5575":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"11:1883:3805":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:12046:796":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:14312:12376":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"20:5624:8566":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:9950:3693":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:10741:3805":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:15566:12753":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:13407:12195":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:10986:3822":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:6691:8980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:922:9801":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:16160:12900":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:6718:4459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:15710:12792":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:11215:14246":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:39724:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:588:4684":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:357:3877":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:14904:12570":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"20:4503:7930":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:4703:15538":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:8814:3820":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"20:6225:8982":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:13407:10048":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:6499:12967":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:11537:14569":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"20:1572:5565":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:5696:22531":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:12035:1150":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"0:311:3304":{"crate_id":0,"path":["cc","windows_registry","VsVers"],"kind":"enum"},"16:7544:13255":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:531:11855":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:2881:12945":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"15:327:15184":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:504:3858":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:44195:10000":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"20:1516:5559":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:6868:8988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4860:7940":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:928:9802":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"20:6327:8985":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:43256:3738":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:3447:9920":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:44301:20742":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:6013:21140":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:46776:14120":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:8146:3787":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:4635:9618":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:527:4675":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:6798:8983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:3095:9906":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:8195:13324":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:918:9800":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:14266:12371":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:7474:14482":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:4906:15547":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:7276:9564":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:2324:635":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:43019:32565":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:1545:9797":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"20:4681:7952":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:8904:2345":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:3915:12978":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:4666:7920":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"20:7183:9553":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:10532:3779":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:12052:1640":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:11657:12041":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:501:4673":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:5574:12948":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:3419:9917":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"20:5631:8567":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"20:6180:5496":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:12273:14038":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"20:5438:8553":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11001:14351":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"18:719:11880":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:7689:3867":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:13254:12177":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:14822:12558":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:42575:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4440:7896":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"20:7060:9524":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"20:6448:8993":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:41840:13998":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:4928:14337":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:3044:9896":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:14041:12317":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:15868:12817":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:7953:3892":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:3196:35049":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:6813:8985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:15294:12665":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:14413:12395":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"20:4169:7897":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:10812:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:5634:13007":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:7548:13667":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:4914:7947":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:6425:13099":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:4252:3805":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"0:57:2683":{"crate_id":0,"path":["cc","windows_registry","find_tool"],"kind":"function"},"6:6666:5496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:10767:3716":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"20:4660:7950":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:22632:13702":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:10016:22580":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"20:4304:7913":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12560:14414":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"20:5653:11655":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:15480:12726":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:4231:14570":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:40539:3674":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:3888:12977":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:14145:12353":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:4808:7933":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:10726:35519":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:44204:9998":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:8009:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:46675:14117":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:48250:14184":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:43715:13689":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:4566:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:11369:12024":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4947:13567":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:16076:12883":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:4789:7931":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:7633:8084":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:22672:13710":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"11:787:9795":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:1815:1187":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:44890:14556":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:6059:8561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13663:12264":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:4939:1100":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:266:10908":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:22699:13712":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:2426:1811":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:9094:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"20:6403:8989":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:15267:12658":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:3103:9908":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:867:9794":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:12797:12141":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:2472:12928":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:3315:12972":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:10608:14341":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:533:3863":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:7663:2335":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"20:1676:5574":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:3241:3782":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:11051:11001":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:14934:12576":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:10822:3722":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"20:4642:7948":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"20:5588:8562":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:11027:11972":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:9128:3732":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:41013:13977":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"20:4634:7947":{"crate_id":20,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"11:2536:13470":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:6467:13103":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:10872:14530":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:11459:14370":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:3491:32093":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4698:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11426:14367":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:7862:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"20:4084:7890":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:1550:13465":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:4915:15548":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"12:0:3539":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:9196:14231":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"20:4689:7953":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:15049:12598":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:15192:12635":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:11052:14533":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:47966:14176":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:46578:14114":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"18:590:11861":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"20:1530:5561":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:6485:12950":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"11:1160:9809":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:10155:14610":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:6896:10990":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:2670:12936":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"20:4065:7888":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11945:14392":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:3079:9903":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"7:0:1686":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:5082:14573":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"20:5745:7803":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:595:11979":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:23196:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:4764:7928":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"11:1007:9806":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:44847:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:7568:12964":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:1301:9807":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:790:10911":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"20:1498:5556":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6456:13102":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:3323:3770":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:4628:7918":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5955:8532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:7906:2242":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:2996:4254":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:2958:3871":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"11:2403:9793":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:6742:13152":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:5435:13005":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:6351:15673":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:3343:9797":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:12014:31160":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:10378:10964":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:11256:14361":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:11034:10999":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:8352:3886":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:11576:12033":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"20:518:4674":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"1:4569:15544":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:2948:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:40487:13945":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:11817:22701":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:7613:14489":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:4595:7914":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:12953:12149":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:1789:9797":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:13882:12049":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:32445:3823":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"20:6466:8994":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:3811:9564":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:3500:3724":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:13285:12181":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:40388:13938":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:15903:12847":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:45977:14090":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"11:800:9796":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:3040:9898":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:3581:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:4038:15525":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:3160:31981":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12536:14412":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:903:3805":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:11340:14249":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:15855:12169":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:39702:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"20:566:4679":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"16:3764:12974":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:8995:4120":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:15235:12647":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:44636:14067":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:4469:15538":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:5753:3841":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:4585:12986":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:42151:9788":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:16049:12874":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:40772:13965":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4998:13603":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:2334:20851":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"20:4286:7911":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:4524:10951":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:13314:10975":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:41924:32467":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:6861:10056":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:22381:3726":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:12701:12136":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"20:6333:8986":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"20:5384:8548":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:7330:9564":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:11215:12014":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:2830:9780":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:44911:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:47010:14135":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:46156:14097":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"20:4567:7938":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:7391:22540":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:5648:14420":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:4549:7909":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:3484:9921":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:13365:12190":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:42417:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:8993:4122":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:41947:14005":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:8281:13331":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:6686:10908":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:14878:12564":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:6818:13166":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:7923:3773":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"0:312:3306":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs12"],"kind":"variant"},"17:401:14324":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:3392:9913":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:40763:13964":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:11453:11004":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:2062:14511":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"18:671:14321":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6961:8994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:836:3805":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:15200:12636":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:13856:12292":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:43939:10016":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:11126:14355":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"20:7137:8085":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:7434:3666":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:10910:14531":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:8936:15552":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:6070:10982":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:6560:10895":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:8978:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:10925:22614":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"20:4418:7923":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"11:1896:9797":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:4388:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:9943:22585":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:43743:13692":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"20:4590:7941":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:44953:14086":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:46600:14115":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:7269:35515":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:46125:14096":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:9971:14002":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:11168:22631":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:1534:3805":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:4889:12995":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:10962:14348":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:7128:14223":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"18:660:14317":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:7679:13641":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"20:4580:7940":{"crate_id":20,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:3020:9890":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:44213:9997":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:6513:13104":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:6545:13114":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:12038:1536":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:1718:5580":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:1734:5581":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:7668:8088":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:3988:15522":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:10535:3781":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:6658:4588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:903:9797":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:9958:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"20:4255:7907":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"20:6351:8987":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:41003:3762":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:42074:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:23072:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:40379:13937":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"20:4734:7958":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:5031:3788":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:40644:3721":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"16:2504:12929":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11523:12028":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:12513:9990":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:11932:14391":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"20:585:4682":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"16:8134:13322":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:43511:14027":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"20:4095:7891":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12153:14404":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:2197:14329":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:435:11941":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:12051:1639":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:3994:15523":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4603:7915":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:596:4685":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:21250:4245":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:11666:12042":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"20:5376:8547":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:6530:10908":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:12033:20914":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:11469:14371":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:15287:12664":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:10432:35527":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:5666:3747":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:9602:32347":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:22267:3726":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:12972:12152":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:8300:14591":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:4811:20772":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:4613:12987":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:1883:20861":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"20:5491:8556":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"11:832:9798":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"3:0:478":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:2998:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:12445:14411":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:4105:3747":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11041:12017":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:48212:14181":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:8991:30777":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:42653:3839":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:654:4713":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:2983:33940":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"20:4722:7956":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:5568:3062":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:8330:4459":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:6415:13098":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:9624:22579":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:4381:10929":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:6600:22536":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:14346:12388":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:13026:12156":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:2202:3702":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"20:6318:8984":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"20:4712:7955":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"0:394:134":{"crate_id":0,"path":["cc","Error"],"kind":"struct"},"1:5500:1819":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:13684:12268":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12356:12109":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:21961:32601":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:10207:3739":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"20:544:4676":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"6:6107:8566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:42091:9793":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:2832:12943":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:6543:3848":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:46980:14134":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:6540:3847":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:12056:1246":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:3568:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:542:4677":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7360:35516":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:14057:12322":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:8207:3763":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"11:1142:14502":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:3191:13466":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:41236:13982":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:548:4678":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:6929:13175":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:30430:15516":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:44323:14042":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:11307:14363":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11978:14394":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:21462:15583":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"20:1885:5720":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:3069:9900":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:11497:12025":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:48174:14180":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"11:2498:21596":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"16:4641:12988":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:11767:14390":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:5639:14199":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:22790:13725":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:42378:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:14373:12390":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:4042:15526":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"20:1652:5572":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"20:4071:7889":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:12202:22725":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:10757:14235":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:23134:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:4556:7910":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:10172:11987":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:11612:14256":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:939:9803":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4776:7929":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"20:4484:7928":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:12250:14037":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:14662:12435":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11485:14376":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:4745:12990":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:4523:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:2354:3706":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:1054:9807":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:43664:14550":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:2428:12926":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:4527:12984":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"11:2383:3805":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:16180:12187":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:43764:14029":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:3217:13467":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:7343:4626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:6604:9564":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:13352:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:15680:12787":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:7554:12963":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:11816:11008":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4932:13562":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:9479:10997":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:4921:12996":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:21949:13698":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:44664:14074":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:12049:1641":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:1906:13673":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:4543:7908":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:3052:9897":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:12054:848":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:15842:12168":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:12290:12101":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:30727:32559":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"20:6196:4546":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"18:727:11883":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4745:7926":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:12031:1033":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:13832:12291":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:14426:12396":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:16062:12880":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:11382:14252":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:44495:20743":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:7597:35513":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:7015:13190":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:10538:3777":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:8237:15513":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:10102:11985":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:2228:14332":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:5910:8552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:8476:3803":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:13754:12278":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:10803:14344":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:11981:14628":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:0:1528":{"crate_id":1,"path":["std"],"kind":"module"},"1:11593:14255":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:12596:14417":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:2370:3710":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:6913:8991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:15733:12796":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"20:5408:8550":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:4159:15534":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:830:10914":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:6842:10055":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:4635:11739":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:5075:7955":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:3064:9899":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:8154:14491":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:7523:13254":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:40440:13943":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"7:31:21508":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:11675:12122":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:48311:14189":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:1778:634":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:15519:12741":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:2205:3703":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"20:6232:4459":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:1496:5556":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:5963:14422":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:22724:32481":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:23413:13732":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"11:883:9805":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:1703:5578":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:12042:691":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:2943:3890":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:7529:11979":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:1439:9793":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:2492:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:40520:13950":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"20:486:4669":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"6:6741:5524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11170:31164":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:12103:14400":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:4050:15527":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:1387:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:4647:7919":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"20:5645:8569":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"20:4181:7898":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13297:12182":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:7338:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:9962:3699":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:5146:7957":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:14122:12352":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:14969:12580":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"20:5486:8555":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:43753:14552":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:14282:12372":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"20:1699:5577":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:2321:12915":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:5760:22532":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7462:13249":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10471:35522":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:12508:9996":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:1664:5573":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:7291:20832":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:6189:13083":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:11269:12001":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:6968:22538":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:3048:9895":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:7355:32339":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:8493:1816":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:2144:3858":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:10657:12017":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11399:14365":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"20:4276:7910":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:4473:7899":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:563:4680":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:2701:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:12345:12108":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"20:5445:8554":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4830:7936":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:7510:3671":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:44728:20952":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:8796:3819":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:7380:30799":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"20:4670:7951":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:12048:793":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:11088:12005":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:212:10906":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:495:4672":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:1094:14326":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:11619:14256":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:12301:12102":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:6159:8570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:1286:9808":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:1424:3805":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:3837:14569":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:4955:13572":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:786:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:14633:12415":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:9559:22581":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"9:177:15197":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:2518:1813":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:13463:12213":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:21521:15582":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:9274:9848":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:2596:12933":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"20:607:4685":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"16:5866:13035":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:43989:10019":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"11:2151:9808":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:11590:12034":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:2236:35363":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"10:0:3537":{"crate_id":10,"path":["adler"],"kind":"module"},"2:42751:3692":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:43845:14555":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"20:4226:7903":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11536:12030":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:46001:14091":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11958:12076":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:3203:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:15990:12861":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:3251:13468":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"20:5686:8571":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:6120:8568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"20:6214:8981":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:5897:8551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:42991:14011":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:6811:15577":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:7621:22541":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:2526:12930":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:1537:5562":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:5033:7951":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"20:4175:7741":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:893:9796":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:1528:5561":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:41811:15514":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:11014:14352":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"11:123:10896":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:15374:12683":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:5950:13680":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:15432:12725":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:46856:14121":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:8973:14597":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:3251:14333":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:5344:10908":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:6568:10958":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:10945:10016":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13989:12312":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:9678:22586":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:32499:9616":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:22510:13699":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:5816:13027":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13056:12160":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:12191:12084":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:7577:3785":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:2944:4250":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:10578:3867":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:15301:12666":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"20:7173:9552":{"crate_id":20,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:11141:14356":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:7598:8080":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:14455:12399":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:3032:12969":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:849:9793":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:22563:13700":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:45931:14088":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:7702:9553":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:11714:14384":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:4557:12985":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:42236:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:15356:12680":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:43264:14020":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:41251:10960":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:48296:14188":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"14:7:14495":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:7580:10993":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:5650:10055":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:3425:1814":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:5052:7953":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:32492:14542":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:11507:12026":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:3182:3765":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"15:0:3541":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:3460:14334":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:25:658":{"crate_id":2,"path":["core","env"],"kind":"macro"},"18:624:35528":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:3797:12975":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"18:755:11888":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:22294:32760":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:9106:9990":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:12474:12017":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"15:394:21635":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:6563:13684":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:859:9564":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:13186:14539":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:7900:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:3510:1812":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"20:559:4678":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"11:364:10898":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:5830:13028":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:43281:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:2973:35035":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:261:14323":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:1063:9808":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"20:4406:7922":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:44940:13477":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:3278:3777":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:7931:3775":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:6071:8562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:6261:14455":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11563:12032":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:1576:5566":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:4534:9616":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"20:5637:8568":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"20:4544:7935":{"crate_id":20,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"20:5458:8531":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:5388:9994":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:5961:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:7657:8087":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:574:11850":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:39680:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:9952:3692":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:15321:12672":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:7828:13272":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:12053:1637":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:4972:419":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"20:4534:7934":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:1270:9806":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:46934:14133":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11617:12036":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:15212:12642":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:2031:14328":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:44481:14056":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"18:582:4245":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4977:13588":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:46624:14116":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:0:3542":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:12335:12106":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"11:687:9793":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:1785:13670":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:8167:14494":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:21289:32609":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:4814:7934":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"19:0:1130":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"20:7149:8087":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:10167:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:10473:10998":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:14497:12406":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:8802:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"20:1560:5564":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:6268:35517":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:8286:15537":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13909:12301":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:5905:13038":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"20:6295:5500":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4506:7903":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:3036:3656":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:7668:3869":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:3402:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"11:434:35499":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:6263:8604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:22811:13728":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12459:12001":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:7871:3893":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:46554:14113":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:8545:3805":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:8403:3801":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:1455:9564":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:42168:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"20:4430:7924":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:13134:32150":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:6361:13091":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:11549:12031":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:47636:14173":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:6700:8981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:7616:13639":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"20:4367:7919":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"11:299:13459":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:15:1884":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:14221:12362":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:119:4345":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:7534:12962":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:6017:22533":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:6983:14939":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:14087:12341":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:4964:4110":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:2704:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:1507:5558":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:40863:13973":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"13:110:35503":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:44928:14085":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:14156:12355":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12009:12017":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:2658:3726":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:8385:4114":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:1315:9809":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12718:22604":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:15557:12751":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:6012:8559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:11388:14253":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"9:357:21536":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"20:7108:8081":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:4639:11743":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:15725:12793":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:5395:3814":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:10988:14350":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:2644:12935":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:7599:10995":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"20:644:4713":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:40494:13946":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:1505:9799":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:7136:28513":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:0:533":{"crate_id":2,"path":["core"],"kind":"module"},"1:8842:3822":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:10395:10965":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:3232:12914":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:2154:13645":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:7862:13276":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:2336:20852":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"20:4193:7899":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"20:4269:7909":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"20:4121:7893":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:9099:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:32481:14541":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:39778:9914":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:4375:7891":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:4993:32919":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:1131:35036":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"20:1523:5560":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:2548:12931":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:1650:5572":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:14296:12373":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:637:14558":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:12828:12142":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:9943:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"20:7160:8088":{"crate_id":20,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"20:6312:8983":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:30699:13734":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:4461:7898":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"14:215:13408":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:40416:13941":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:11178:14076":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:10337:11992":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:42495:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:48349:14191":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:42141:4119":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:9104:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:16109:12890":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:4411:3747":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:26260:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:4364:7890":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:4744:3887":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:3001:4256":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"20:5603:8564":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:22707:13713":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:4167:15535":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:42300:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:4020:9796":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:13395:12194":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"20:4200:7900":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:43733:14551":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:6696:13140":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:5004:3747":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:5992:8558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"0:318:3312":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs16"],"kind":"variant"},"1:12039:1622":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:1115:33953":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:4092:9793":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11743:14388":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:2707:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:15980:12860":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:15037:12595":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:10738:14618":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:7838:3718":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:4129:28509":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:42758:3693":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:2284:21644":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4676:7921":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:6086:8564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:1203:14327":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:3169:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:6466:3851":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:3443:3723":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:11516:14568":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:9860:22600":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:40721:13957":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11991:12079":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:9747:3690":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:13961:12308":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:5085:13608":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"20:6847:4626":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:7284:4118":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12115:14401":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:43496:14026":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:15631:12772":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:10953:1819":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:10775:14343":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:2169:22659":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:22761:32465":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:7708:12966":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"20:1712:5579":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:12324:9999":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:3482:1815":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:7296:9796":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:14399:12392":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:22296:20851":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"18:652:11850":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:43724:13690":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:3594:3805":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"15:288:21625":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:4383:14572":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:489:4671":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"20:6892:9364":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:5661:13011":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:3600:3428":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:8137:3785":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:8316:3808":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:4847:7938":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"18:564:11860":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:9048:30842":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"20:4520:7932":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:1024:10908":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:7651:14490":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:4806:12992":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:8169:3725":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:3225:13465":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:6943:8993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:914:9799":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:41777:13989":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:40740:13960":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"20:4216:7902":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:6083:21643":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:12033:1657":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:6879:13171":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:10840:31163":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:9069:14226":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:15384:12688":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"0:314:3308":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs14"],"kind":"variant"},"1:5571:3818":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:48387:14193":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:41227:2321":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"20:506:4672":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"17:13707:12272":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:12047:797":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:30785:32562":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:7267:10049":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:6819:8986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:5867:8548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"20:494:4670":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:7644:3879":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"9:237:3802":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:12273:12142":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"14:165:21606":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"20:4208:7901":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:2946:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:6901:12957":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:11727:14386":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:10974:12001":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"0:52:1828":{"crate_id":0,"path":["cc","windows_registry"],"kind":"module"},"2:13112:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"20:4528:7933":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:9034:14223":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:23858:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:6596:3852":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:13787:12286":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"14:40:12170":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:13334:12188":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:5829:8503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:30693:10046":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:21641:15580":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"20:6869:9362":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:10940:9852":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:40702:13954":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:14439:12397":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:47778:14174":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:14470:12403":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:10242:11989":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10422:14338":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:12049:14537":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:12055:1696":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:4610:7916":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4738:3882":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:7367:9564":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:2788:12941":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:8319:15502":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:44143:10015":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:12387:22727":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:43790:13693":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13724:12275":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:2474:13654":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"11:2304:9806":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:7610:8082":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:30715:3689":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:2990:4252":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:4243:20755":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:645:15491":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:3199:3779":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:1639:5571":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:44220:10007":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:3366:3786":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:10618:35525":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:13976:12311":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:40651:13693":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"9:426:21523":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:3201:3780":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:44837:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:43047:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:2380:3469":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:475:4669":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:6610:3853":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"11:2542:13471":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:15160:12626":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:14887:12568":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:2659:20783":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:11370:14579":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:8453:3802":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"20:4336:7917":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"7:78:21515":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:15079:12609":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:2352:3705":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:14359:12389":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:30659:10045":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:4344:12980":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:2406:12925":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:5072:854":{"crate_id":2,"path":["core","iter"],"kind":"module"},"11:2423:9564":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:15311:12669":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:30891:32560":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"20:553:4677":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"16:7792:22542":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:4212:3747":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"20:1666:5573":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12264:12100":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"18:699:11876":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:40460:10008":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12029:12081":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:4177:14522":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11294:14362":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:7604:8081":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"20:4249:7906":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:2778:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:7006:14460":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4841:7937":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:7717:15494":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:9759:22597":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6960:14459":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:43897:10002":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11449:11934":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:42765:3700":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:9960:3698":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:7736:13262":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:4740:3884":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"0:55:2257":{"crate_id":0,"path":["cc","windows_registry","find"],"kind":"function"},"1:9186:31158":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:8200:3762":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:1514:5559":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:1593:5567":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"18:521:26739":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"20:4323:7915":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"20:4298:7912":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:5939:13044":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:1902:9776":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:44716:14079":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:4224:20712":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:5992:3838":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:12037:1503":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:2359:12923":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:10915:14345":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:2975:13650":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:2418:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:12032:451":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"11:396:10900":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:5891:8550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:1682:5575":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:4383:9615":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:2969:21672":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:23258:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:11243:14360":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:7450:3669":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:9415:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:7467:3672":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:14170:12357":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:16098:12889":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:1521:5560":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"11:710:9799":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"18:599:35530":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:39660:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"20:4236:7904":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:5088:13001":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:2618:12934":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:15329:12673":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:3394:3747":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:40792:13967":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"20:1606:5569":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:10597:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:47216:14138":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:21534:13697":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:11476:13469":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:2698:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:4417:12981":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:13099:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:4351:7889":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"18:507:11850":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:4340:13677":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:4865:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:46055:14093":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:3005:3655":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:15659:12781":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:11024:10018":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:40711:13955":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:39607:9912":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:44656:14072":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4902:7945":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:5140:7956":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"18:113:26729":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:6484:9796":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:0:1973":{"crate_id":17,"path":["object"],"kind":"module"},"20:4613:7944":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:3280:3778":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:44644:14069":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:634:14508":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:10076:9844":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:640:14560":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"11:1887:9564":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:13935:12304":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:4774:12991":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:12758:12139":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:4311:14571":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:12036:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:2574:12932":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:42002:14007":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:4686:7922":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11194:22632":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"11:1051:9808":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:2440:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"20:4330:7916":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12418:14408":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:4455:7741":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:4579:10952":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:2368:3709":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"18:481:11848":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:48028:14177":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:3677:9796":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:7622:8083":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:2586:2339":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:14324:12377":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:15244:12650":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:48090:14178":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:6373:13681":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:307:1587":{"crate_id":1,"path":["std","thread"],"kind":"module"},"17:14485:12106":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:14208:12361":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"11:328:13462":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:4922:13556":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:6781:5500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:5381:1818":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:11045:11000":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11800:12045":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:44648:14070":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"20:4243:7905":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:6915:12958":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:11234:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"20:5676:8570":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:15013:12593":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"18:96:26728":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:41269:13985":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:44352:14051":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:7067:13197":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:7782:13264":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:42534:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:1632:5570":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:880:9795":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:11779:12043":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:8050:13313":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:2911:10981":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:10293:3763":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:15507:12738":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:48270:14186":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:46263:14102":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:14385:12391":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:48136:14179":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:7497:3670":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:742:9800":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:21306:32606":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:15671:12783":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:5761:3747":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:3687:10908":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:14194:12360":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:5152:7958":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"11:811:9797":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:13648:12260":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:13322:12187":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:2380:12924":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:5982:8557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:3184:3805":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5941:8531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:6041:22534":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"20:4315:7914":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"0:320:3314":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs17"],"kind":"variant"},"1:9474:3719":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:7346:13663":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:2183:13647":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:11645:12038":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:4773:14336":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"4:0:3534":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:6047:8560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:2933:21671":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:4366:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:21515:15579":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"20:7102:8080":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:588:15488":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:4798:3888":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"14:187:21613":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:3151:9918":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:10944:10771":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:47170:14137":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:22396:15661":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:2864:12944":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:12659:22583":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:1796:9844":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:1604:5569":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:10762:14237":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11113:14354":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:7003:10944":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:44672:14076":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"20:6427:8991":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"20:1705:5578":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:10587:3726":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:6226:14444":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:4755:7927":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:10315:11991":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"18:766:26738":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:10790:3764":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"20:574:4680":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"2:21460:3726":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:42083:3805":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"20:6875:9363":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"0:401:1893":{"crate_id":0,"path":["cc","Tool"],"kind":"struct"},"2:31261:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:6804:8984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:42261:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:14099:12343":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:3074:9901":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:9730:22596":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:12310:12103":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"11:1107:14501":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:40452:10009":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:1541:9796":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:22204:15666":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"20:5576:8561":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:2744:12939":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"20:580:4681":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"6:7556:9524":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:47246:14139":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"11:1087:35497":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:856:9803":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:533:4676":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:12091:14399":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:15133:12622":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7342:35518":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:5431:3816":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:7318:13230":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:43825:14554":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"20:4561:7937":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:2711:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:4535:7907":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:40614:3688":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"20:7143:8086":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"11:1566:21601":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:7090:13199":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:2487:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:44125:10014":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:6844:13167":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:13448:12207":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13145:12170":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:40731:13958":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:23227:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:8920:15551":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:12050:1638":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:6128:8569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:43803:14553":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:39746:3659":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:10802:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:2600:10965":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:5971:10987":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:10950:14347":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"18:707:9992":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:22350:20851":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"16:5017:12999":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:44691:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:8220:3760":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:48426:14194":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:4180:15536":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"20:1634:5570":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:1758:9834":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:12921:12106":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:7481:32478":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:8994:4121":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:39972:29243":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:8281:14206":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:39560:9919":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:11476:14567":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:15184:12634":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:10067:11984":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:6426:2321":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:40680:3761":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:2695:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:2662:3774":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"20:4160:7896":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12410:12115":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:4449:7897":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13218:12175":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"20:4628:7946":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:4777:717":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"20:5564:8560":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:3830:12976":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:11066:14534":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:15493:12732":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:47888:14175":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:2696:12937":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:6889:8989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:15943:12172":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:4986:12998":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:6117:3747":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"11:2548:13472":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:13633:12256":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:21318:32598":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"5:2703:13657":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:13161:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:22:731":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:16004:12865":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:6228:7803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:44417:14054":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:40873:13974":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:10202:3737":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:13097:12168":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:44898:14082":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:8226:14591":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:13202:12174":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:46023:14092":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:10941:14346":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:10321:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:44043:10017":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:6318:13088":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11155:12007":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:5780:3842":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:48239:14183":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:10780:14241":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:4401:7893":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:6162:10986":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:692:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:43907:3763":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:40:10050":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"20:1641:5571":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:9954:3700":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:10792:3720":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:1562:13467":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:13676:12266":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:14698:12466":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11395:14364":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"20:0:878":{"crate_id":20,"path":["libc"],"kind":"module"},"11:1603:14504":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:1536:14510":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:6711:8982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:9899:232":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"16:6352:13090":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:4460:14526":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:47280:14140":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5859:8547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:15101:12615":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:3032:9892":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:2339:12917":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"20:1509:5558":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:22823:15517":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:12528:9991":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:22073:15581":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:8891:14221":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:44175:3760":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"14:160:14495":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7694:12965":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:7639:8085":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"15:306:21626":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:909:9798":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:15589:12766":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:43056:3689":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:13436:12204":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:5837:13678":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:22071:3726":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:44855:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"20:500:4671":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"20:1548:5563":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:11355:14250":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:13742:12276":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:8213:3764":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"0:316:3310":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs15"],"kind":"variant"},"6:1691:5576":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:42099:9564":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:11065:12003":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:4783:7930":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:43879:10006":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:4053:12979":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:15337:12675":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:2523:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"20:4458:3882":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"20:1693:5576":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:14765:12521":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13162:12172":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:12432:14410":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"16:5121:13002":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"20:6278:5497":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"9:330:13516":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"20:591:4683":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"6:4488:7901":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7041:13191":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:14843:12563":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:1516:9800":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:14896:12569":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:23382:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:46356:14107":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"9:450:21521":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"11:2326:9807":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:4444:10929":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:12486:12117":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"5:7618:9797":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:1760:9835":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:4742:3248":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"18:80:26727":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"20:6441:8992":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:21260:32603":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:41220:13981":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:44369:14052":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:10833:9999":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12077:14395":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:42023:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:7855:3720":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:12003:15496":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:5384:22530":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"20:7131:8084":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"20:4148:7894":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:16170:12182":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:4862:12994":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:4151:15533":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:15612:12767":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"20:1578:5566":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:13383:12191":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:1819:9848":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"11:1903:13465":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:3085:9904":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:10520:35520":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:46722:14118":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:1072:9809":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:1674:5574":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:3015:9891":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:1582:14503":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:44338:14048":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:46186:14098":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:7407:20824":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:13478:12219":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:22425:15662":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:10207:11988":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"18:515:11853":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:10569:35526":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:13765:12279":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:40475:20778":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:13896:12300":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:3607:9793":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:5049:13000":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:16134:12896":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:11307:14247":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:10765:9793":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:6332:12947":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12166:14405":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:1558:5564":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:11158:3821":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:6792:13165":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:3329:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12324:12104":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:22243:15667":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:4625:15523":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:12044:798":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:6114:8567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:12396:12112":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:10785:35521":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:363:3878":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:7768:12954":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:10095:14609":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"20:1720:5580":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:40400:32454":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"11:1025:9807":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:12579:20736":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:46386:14108":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:6376:22535":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:23103:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:13273:12178":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"14:0:3540":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:14021:12316":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:11605:30961":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:40749:13961":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:6557:13685":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:7371:9363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12220:12089":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:22616:13701":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:32506:13799":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:43835:13695":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:10813:35524":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:48285:14187":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:12510:12118":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:5995:12907":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:7523:10934":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:43515:14028":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:46226:14100":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:8858:14596":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:3239:3781":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:40581:3675":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:40430:13942":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:31289:4245":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:40781:13966":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11604:12035":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:15279:12661":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:3407:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:1697:5577":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:42614:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"20:1736:5581":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:886:10916":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:8535:3804":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:8205:22544":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"11:2469:9797":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"20:5414:8551":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"14:221:13410":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:8072:13314":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:3026:9893":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:9109:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:12898:22605":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"11:1066:21600":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:6898:8990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:1151:33954":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:21632:3726":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:41960:14205":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:13695:12271":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:1710:5579":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:1685:10908":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:15253:12651":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:5004:13606":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:1596:5568":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:40373:10008":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:12872:12144":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12140:14403":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:5825:3850":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"0:0:2679":{"crate_id":0,"path":["cc"],"kind":"module"},"17:12366:22726":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"11:837:9801":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:10559:14340":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:15125:12620":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:8363:32345":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:13584:12231":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4516:7904":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:9790:22598":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:10035:11982":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:1567:13468":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:14235:12365":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:45911:14087":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11321:12017":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:13869:12295":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:3099:9907":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"18:690:11875":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:7858:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:6346:14458":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:4201:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:6682:4546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:13504:12224":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:511:14325":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"20:512:4673":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"1:2176:1810":{"crate_id":1,"path":["std","fs"],"kind":"module"},"1:8011:1866":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4710:7924":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:5807:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:10051:11983":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:41794:13991":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:12043:693":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:40624:3687":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:5798:13023":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:9147:14227":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:46208:14099":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:7754:9852":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:621:9777":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:11313:3827":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:12213:14034":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:7316:35041":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:7365:9362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"18:491:11849":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:5673:12952":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:15961:12173":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"20:6412:8990":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:44668:14075":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"18:614:35531":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:2093:13676":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:13083:12167":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:11197:3732":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:9420:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11052:14342":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:7634:10051":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:3670:15515":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:40671:14543":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:5746:3840":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:14786:12528":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:6248:8603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:14251:12367":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:1546:5563":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"9:0:3536":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"20:1598:5568":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:44238:10009":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:6430:3844":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:4028:15524":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:6721:22537":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"20:4465:7926":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:4491:15539":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:5712:13013":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"11:1917:13467":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:44229:10008":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:1556:13466":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"14:202:20744":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:951:9805":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:7901:3736":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:483:4670":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:14509:12413":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:16146:12899":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:21304:32612":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:15087:12612":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:3735:14568":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:11584:14536":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:6222:8602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:149:10893":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:2256:13653":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4878:7942":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:3230:35048":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"20:5427:8552":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:2810:12942":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:16032:12872":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:2907:12946":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:1897:13671":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:8828:3821":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:4309:14524":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:11998:15208":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12244:12095":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:5921:8553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"20:4444:7925":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:5877:9796":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:15367:12681":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:8001:14585":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"11:1923:13468":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"20:4263:7908":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"20:5739:8602":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6583:13116":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:1821:9849":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:12127:14402":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:6194:14576":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:6279:13085":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:39620:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:14989:12588":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4800:7932":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:4584:7913":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:7185:9569":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"9:507:13538":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"18:538:11858":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"20:5765:8603":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:7821:20830":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"20:5499:8557":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12230:12091":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:15747:12799":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11632:12037":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:13809:12287":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:22336:15671":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:569:4681":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:7738:9851":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:4719:12989":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:16123:12894":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:8232:14593":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:15117:12618":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:3461:12973":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"20:134:4346":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:4908:7946":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"9:486:21520":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:4724:7925":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12850:12089":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:482:10977":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:8274:14205":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13121:12169":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:8850:3805":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:4870:7941":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11755:14389":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4496:7902":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:3980:15521":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:1486:9795":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"10:36:13478":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"20:4154:7895":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:47430:14141":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"11:102:13458":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:47092:14136":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:8308:14207":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:44025:10018":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:5727:13016":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:40693:13952":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"20:5472:8532":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:2048:3775":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:21919:3726":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:13491:12223":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:5009:7888":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"0:333:1833":{"crate_id":0,"path":["cc","Build"],"kind":"struct"},"16:7436:13051":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:1501:5557":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:22430:15660":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"5:7028:10947":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:3065:11891":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:12930:22606":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:7884:22543":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:2722:12938":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:6079:8563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:15645:12774":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"20:4574:7939":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:7388:9364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:48364:14192":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:5130:7950":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:4462:12982":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:40824:13970":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"20:6382:8988":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:2993:3891":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:2622:3766":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"20:61:4279":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"20:4348:7918":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"11:2369:14507":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:46753:14119":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"11:0:3538":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:536:12905":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"20:7120:8083":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:6959:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:9918:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:41983:14006":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:5969:8555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:40468:10007":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:40534:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"20:1503:5557":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:5322:13003":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:43865:10010":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:6136:11655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"20:4650:7949":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:15062:12604":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:1495:9798":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:3232:9910":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:14001:12313":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:40833:13971":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:10312:10962":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:11690:14381":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:6156:13078":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:3166:28733":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:4637:11741":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:123:4346":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:4189:14523":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"20:6205:8980":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:22684:32475":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:5588:12951":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:12548:14413":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"20:4396:7921":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:5044:7952":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:2947:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:40501:20779":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:3057:9902":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"20:4550:7936":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:6837:8987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:4989:13597":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:6386:13095":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:8562:3807":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"20:5347:8503":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:4968:13582":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"20:4386:7920":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:40567:3673":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:32593:4257":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:43921:3764":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"20:4496:7929":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12180:14406":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:11625:20734":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:3091:9905":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:3108:9909":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:7865:3717":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:3584:14335":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:3193:2384":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:5015:7948":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:7643:3726":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:48230:14182":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:4700:15549":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:3966:15520":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:4451:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:2936:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:44506:14057":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:2953:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:8097:13316":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"20:4108:7892":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"20:599:4684":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"1:6146:10975":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:5982:13047":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:1692:3747":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"18:681:11872":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10852:22612":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:10983:14532":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"20:4475:7927":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:5612:12953":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:256:14322":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:9948:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:2789:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"20:4622:7945":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:62:4279":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:42339:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"20:4728:7957":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:5415:3815":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:13419:12196":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:43001:3689":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:11345:12022":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"20:538:4675":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:10247:3825":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:5023:7949":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:46532:14112":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"13:226:13457":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:15027:12594":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:12045:795":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:12255:12099":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:4434:7895":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:3236:9911":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"20:4604:7943":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13235:12176":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:574:4682":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:46310:14103":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11701:14382":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:6893:13173":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:6687:13139":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"14:31:14495":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:555:4679":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:21287:32611":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:14778:12527":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"20:5596:8563":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:12030:401":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:8551:3806":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:11290:11002":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:9021:14602":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:39521:9922":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:3163:28723":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"11:2443:9796":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:7660:13260":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:4821:3883":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:7559:14521":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:8872:14220":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"11:2140:9807":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:13182:12173":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:3936:15518":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:44652:14071":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:7306:10919":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:9164:14605":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:4480:7900":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6243:14447":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:5392:9995":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:10137:11986":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"20:7114:8082":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:43272:3740":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:40849:11869":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:42227:9564":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:12614:22603":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"11:351:35492":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:8959:3843":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:4616:7917":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:4608:3870":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:7732:15495":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"18:609:14316":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:22159:15665":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"16:6569:12955":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:9651:22595":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:43293:3802":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:11226:14357":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:5928:8554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:46456:14110":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:44185:10011":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:14950:12579":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:9813:22599":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:507:4674":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:2529:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"11:2124:9806":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:16016:12867":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:12999:12153":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:3930:15519":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:7503:12961":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:15689:12789":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:9014:14601":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:6753:13153":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:10159:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:4182:3747":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:44660:14073":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:23320:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:15224:12643":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:5068:7954":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"11:2231:13469":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:41754:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:41242:3786":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:7637:3833":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:44089:10013":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:22797:13727":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:13922:12303":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:43816:13694":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:15527:12744":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:2766:12940":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:1538:9564":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:5154:3838":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:2450:12927":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:5974:8556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:6764:5497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:3738:3775":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:3413:9915":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:8239:13247":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:7692:9552":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:11038:10017":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4854:7939":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:3655:3429":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:6249:10987":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:46408:14109":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:7492:13250":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:10338:30907":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:12289:14039":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:46245:14101":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:14921:12571":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"9:52:15187":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:22648:13706":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"11:774:9794":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:4050:10908":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:7422:3665":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:8326:14595":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:8115:13319":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:580:4683":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:12052:12082":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:4428:7894":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:9026:14603":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:4835:12993":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:281:3360":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:7054:13194":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:23289:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:22745:32466":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:1570:5565":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:945:9804":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:44444:14055":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:9891:22582":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:15546:12750":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:2972:2959":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:673:3805":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:21924:15585":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:13303:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:1909:704":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"20:4598:7942":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:10097:14608":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"11:844:9802":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:1040:9806":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:11439:14368":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:10881:22613":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:5743:13017":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:5363:13004":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:43971:10020":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:13347:12189":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:1973:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:8181:12968":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:9607:15206":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:16087:12888":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:46085:14094":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:7513:13253":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:41261:13983":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:15108:12617":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:40551:32478":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:44516:14061":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:5632:10987":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:2569:3665":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11412:14366":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:7026:10991":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:6934:13636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:42108:4118":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:39785:13808":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:10831:31161":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}