{"root":"0:0:2541","crate_version":"1.0.82","includes_private":false,"index":{"a:2:8384:3971-0:392:128":{"id":"a:2:8384:3971-0:392:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8384:3971","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:64:676":{"id":"0:64:676","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[178,4],"end":[180,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9253:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9242:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12250:2962":{"id":"2:12250:2962","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:9837"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:1843":{"id":"0:81:1843","crate_id":0,"name":"includes","span":{"filename":"src/lib.rs","begin":[379,4],"end":[388,5]},"visibility":"public","docs":"Add multiple directories to the `-I` include path.\n\n# Example\n\n```no_run\n# use std::path::Path;\n# let condition = true;\n#\nlet mut extra_dir = None;\nif condition {\n    extra_dir = Some(Path::new(\"/path/to\"));\n}\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .includes(extra_dir)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dirs",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7269:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:7269:152","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2508:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3320-0:310:3164":{"id":"b:2:3320-0:310:3164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3741","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3322:1514"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:135:1736":{"id":"0:135:1736","crate_id":0,"name":"static_crt","span":{"filename":"src/lib.rs","begin":[1035,4],"end":[1038,5]},"visibility":"public","docs":"Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.\n\nThis option defaults to `false`, and affect only msvc targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_crt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:332:1712":{"id":"b:2:2250-0:332:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3741","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2244:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:1685"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:128:1731":{"id":"0:128:1731","crate_id":0,"name":"ranlib","span":{"filename":"src/lib.rs","begin":[966,4],"end":[969,5]},"visibility":"public","docs":"Configures the tool used to index archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ranlib",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2508:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2701:228-0:310:3164":{"id":"a:2:2701:228-0:310:3164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:116:1446":{"id":"0:116:1446","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[869,4],"end":[872,5]},"visibility":"public","docs":"Configures the target this configuration will be compiling for.\n\nThis option is automatically scraped from the `TARGET` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .target(\"aarch64-linux-android\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3320-0:332:1712":{"id":"b:2:3320-0:332:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3741","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3322:1514"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:118:1728":{"id":"0:118:1728","crate_id":0,"name":"opt_level","span":{"filename":"src/lib.rs","begin":[896,4],"end":[899,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"primitive":"u32"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:372:425":{"id":"0:372:425","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:26377":{"id":"5:5528:26377","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12270:26380"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319:3174":{"id":"0:319:3174","crate_id":0,"name":"Vs17","span":{"filename":"src/windows_registry.rs","begin":[94,4],"end":[94,8]},"visibility":"default","docs":"Visual Studio 17 (2022)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:83:1849":{"id":"0:83:1849","crate_id":0,"name":"define","span":{"filename":"src/lib.rs","begin":[401,4],"end":[405,5]},"visibility":"public","docs":"Specify a `-D` variable with an optional value.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .define(\"FOO\", \"BAR\")\n    .define(\"BAZ\", None)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["val",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2514:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:33862":{"id":"5:5510:33862","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3220","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:9891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:3220","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:9891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:310:3164":{"id":"b:5:680-0:310:3164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2266:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2821","5:683:1914","5:684:9452"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2253-0:332:1712":{"id":"b:2:2253-0:332:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3741","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2247:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:25603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2610-0:392:128":{"id":"b:2:2610-0:392:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2603:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3741","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3374:19857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:14274"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[177,0],"end":[181,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9283:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12173:13272":{"id":"2:12173:13272","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12020:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43605:9843","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:1896":{"id":"0:156:1896","crate_id":0,"name":"try_get_compiler","span":{"filename":"src/lib.rs","begin":[1601,4],"end":[1673,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis will return a result instead of panicing; see get_compiler() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41812:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12160:1890":{"id":"2:12160:1890","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41670:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2741:3742-0:310:3164":{"id":"a:2:2741:3742-0:310:3164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:3742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:315:3170":{"id":"0:315:3170","crate_id":0,"name":"Vs15","span":{"filename":"src/windows_registry.rs","begin":[90,4],"end":[90,8]},"visibility":"default","docs":"Visual Studio 15 (2017)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:119:2029":{"id":"0:119:2029","crate_id":0,"name":"opt_level_str","span":{"filename":"src/lib.rs","begin":[905,4],"end":[908,5]},"visibility":"public","docs":"Configures the optimization level of the generated object files.\n\nThis option is automatically scraped from the `OPT_LEVEL` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["opt_level",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:2623":{"id":"0:207:2623","crate_id":0,"name":"try_get_archiver","span":{"filename":"src/lib.rs","begin":[2814,4],"end":[2816,5]},"visibility":"public","docs":"Get the archiver that's in use for this configuration.\n\nThis will return a result instead of panicing;\nsee [`get_archiver()`] for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41812:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5444:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:313:3168":{"id":"0:313:3168","crate_id":0,"name":"Vs14","span":{"filename":"src/windows_registry.rs","begin":[88,4],"end":[88,8]},"visibility":"default","docs":"Visual Studio 14 (2015)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2250-0:392:128":{"id":"b:2:2250-0:392:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3741","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2244:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:1685"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:268:2658":{"id":"0:268:2658","crate_id":0,"name":"cc_env","span":{"filename":"src/lib.rs","begin":[3543,4],"end":[3557,5]},"visibility":"public","docs":"Returns the compiler command in format of CC environment variable.\nOr empty string if CC env was not present\n\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:1976:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12153:33187":{"id":"2:12153:33187","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12151:33186"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:33862","5:5511:2355","5:5514:33863","5:5517:2969","5:5525:33864","5:5526:33865","5:5527:3635","5:5528:26377","5:5529:26378"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:104:1726":{"id":"0:104:1726","crate_id":0,"name":"cudart","span":{"filename":"src/lib.rs","begin":[704,4],"end":[709,5]},"visibility":"public","docs":"Link CUDA run-time.\n\nThis option mimics the `--cudart` NVCC command-line option. Just like\nthe original it accepts `{none|shared|static}`, with default being\n`static`. The method has to be invoked after `.cuda(true)`, or not\nat all, if the default is right for the project.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cudart",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:28598":{"id":"2:12171:28598","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12170:2583"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310:3164":{"id":"0:310:3164","crate_id":0,"name":"VsVers","span":{"filename":"src/windows_registry.rs","begin":[84,0],"end":[95,1]},"visibility":"public","docs":"A version of Visual Studio","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:311:3166","0:313:3168","0:315:3170","0:317:3172","0:319:3174"],"impls":["a:2:2741:3742-0:310:3164","a:2:2701:228-0:310:3164","a:2:8385:3970-0:310:3164","a:2:2684:220-0:310:3164","a:2:8384:3971-0:310:3164","b:2:2555-0:310:3164","b:2:2544-0:310:3164","b:2:2253-0:310:3164","b:2:2250-0:310:3164","b:2:2550-0:310:3164","b:2:3320-0:310:3164","b:2:2540-0:310:3164","b:5:680-0:310:3164","0:324","0:323","0:330","0:327","0:329","0:321","0:326"]}}},"b:2:2555-0:399:1772":{"id":"b:2:2555-0:399:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2514:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2558:128","2:2559:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:330":{"id":"0:330","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2266:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:331:425"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12179:31559":{"id":"2:12179:31559","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43921:9838","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266:309":{"id":"0:266:309","crate_id":0,"name":"args","span":{"filename":"src/lib.rs","begin":[3527,4],"end":[3529,5]},"visibility":"public","docs":"Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"OsString","id":"1:1976:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:251":{"id":"0:251","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3368,0],"end":[3372,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2591:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:252:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:684:9452":{"id":"5:684:9452","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:702":{"id":"0:62:702","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[172,4],"end":[174,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"io::Error","id":"1:2919:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2684:220-0:310:3164":{"id":"a:2:2684:220-0:310:3164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2250-0:310:3164":{"id":"b:2:2250-0:310:3164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3741","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2244:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:1685"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[171,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2517:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"1:2919:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:702"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12170:2583":{"id":"2:12170:2583","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12171:28598"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12253:2657":{"id":"2:12253:2657","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:9837"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:9832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12215:28612":{"id":"2:12215:28612","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12020:421","str::splitn":"2:12212:28610","self::pattern":"2:11849:9837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43751:9858","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:9832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:399:1772":{"id":"b:5:680-0:399:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2266:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2821","5:683:1914","5:684:9452"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:52:1707":{"id":"0:52:1707","crate_id":0,"name":"windows_registry","span":{"filename":"src/windows_registry.rs","begin":[11,0],"end":[896,1]},"visibility":"public","docs":"A helper module to probe the Windows Registry when looking for\nwindows-specific tools.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:55:2124","0:57:2545","0:310:3164","0:58:3178"],"is_stripped":false}}},"0:96:1738":{"id":"0:96:1738","crate_id":0,"name":"static_flag","span":{"filename":"src/lib.rs","begin":[630,4],"end":[633,5]},"visibility":"public","docs":"Set the `-static` flag.\n\nWhen enabled on systems that support dynamic linking, this prevents\nlinking with the shared libraries.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .static_flag(true)\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["static_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:265:1052":{"id":"0:265:1052","crate_id":0,"name":"path","span":{"filename":"src/lib.rs","begin":[3521,4],"end":[3523,5]},"visibility":"public","docs":"Returns the path for this compiler.\n\nNote that this may not be a path to a file on the filesystem, e.g. \"cc\",\nbut rather something which will be resolved when a process is spawned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:1724":{"id":"0:112:1724","crate_id":0,"name":"cpp_set_stdlib","span":{"filename":"src/lib.rs","begin":[846,4],"end":[854,5]},"visibility":"public","docs":"Force the C++ compiler to use the specified standard library.\n\nSetting this option will automatically set `cpp_link_stdlib` to the same\nvalue.\n\nThe default value of this option is always `None`.\n\nThis option has no effect when compiling for a Visual Studio based\ntarget.\n\nThis option sets the `-stdlib` flag, which is only supported by some\ncompilers (clang, icc) but not by others (gcc). The library will not\ndetect which compiler is used, as such it is the responsibility of the\ncaller to ensure that this option is only used in conjunction with a\ncompiler which supports the `-stdlib` flag.\n\nA value of `None` indicates that no specific C++ standard library should\nbe used, otherwise `-stdlib` is added to the compile invocation.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .cpp_set_stdlib(\"c++\")\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_set_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2514:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12174:9605":{"id":"2:12174:9605","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43615:3615","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:445":{"id":"0:124:445","crate_id":0,"name":"compiler","span":{"filename":"src/lib.rs","begin":[946,4],"end":[949,5]},"visibility":"public","docs":"Configures the compiler to be used to produce output.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["compiler",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2508:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:321":{"id":"0:321","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9278:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:322:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2741:3742-0:392:128":{"id":"a:2:2741:3742-0:392:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:3742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:682:2821":{"id":"5:682:2821","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:98:667":{"id":"0:98:667","crate_id":0,"name":"file","span":{"filename":"src/lib.rs","begin":[647,4],"end":[650,5]},"visibility":"public","docs":"Add a file which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2508:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:3178":{"id":"0:58:3178","crate_id":0,"name":"find_vs_version","span":{"filename":"src/windows_registry.rs","begin":[102,0],"end":[104,1]},"visibility":"public","docs":"Find the most recent installed version of Visual Studio\n\nThis is used by the cmake crate to figure out the correct\ngenerator.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41812:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12164:28576":{"id":"2:12164:28576","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2540-0:332:1712":{"id":"b:2:2540-0:332:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2517:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2514:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:1761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12156:2110":{"id":"2:12156:2110","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11409:2849"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:2633":{"id":"0:211:2633","crate_id":0,"name":"try_get_ranlib","span":{"filename":"src/lib.rs","begin":[2865,4],"end":[2871,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nThis will return a result instead of panicing;\nsee [`get_ranlib()`] for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41812:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Command","id":"1:5444:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:1930":{"id":"0:94:1930","crate_id":0,"name":"try_flags_from_environment","span":{"filename":"src/lib.rs","begin":[592,4],"end":[596,5]},"visibility":"public","docs":"Add flags from the specified environment variable.\n\nNormally the `cc` crate will consult with the standard set of environment\nvariables (such as `CFLAGS` and `CXXFLAGS`) to construct the compiler invocation. Use of\nthis method provides additional levers for the end user to use when configuring the build\nprocess.\n\nJust like the standard variables, this method will search for an environment variable with\nappropriate target prefixes, when appropriate.\n\n# Examples\n\nThis method is particularly beneficial in introducing the ability to specify crate-specific\nflags.\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .try_flags_from_environment(concat!(env!(\"CARGO_PKG_NAME\"), \"_CFLAGS\"))\n    .expect(\"the environment variable must be specified and UTF-8\")\n    .compile(\"foo\");\n```\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["environ_key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41812:210","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12265:2247":{"id":"2:12265:2247","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11810:127","`FromStr`":"2:11809:3198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41812:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11809:3198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11809:3198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263:1899":{"id":"0:263:1899","crate_id":0,"name":"to_command","span":{"filename":"src/lib.rs","begin":[3493,4],"end":[3515,5]},"visibility":"public","docs":"Converts this compiler into a `Command` that's ready to be run.\n\nThis is useful for when the compiler needs to be executed and the\ncommand returned will already have the initial arguments and environment\nvariables configured.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5444:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12147":{"id":"2:12147","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12148:823","2:12149:1912","2:12150:33185","2:12151:33186","2:12153:33187","2:12156:2110","2:12157:33188","2:12158:316","2:12159:315","2:12160:1890","2:12162:28575","2:12164:28576","2:12166:28577","2:12168:33189","2:12169:33190","2:12170:2583","2:12171:28598","2:12172:2872","2:12173:13272","2:12174:9605","2:12175:2609","2:12176:2839","2:12177:9599","2:12178:33191","2:12179:31559","2:12180:1901","2:12183:2092","2:12186:2093","2:12189:2124","2:12193:2584","2:12197:2435","2:12200:28606","2:12203:28608","2:12206:33192","2:12209:33193","2:12212:28610","2:12215:28612","2:12218:33194","2:12221:33195","2:12224:3495","2:12227:33196","2:12230:33197","2:12233:33198","2:12236:2851","2:12238:33199","2:12240:33200","2:12242:33201","2:12243:33202","2:12244:33203","2:12247:2586","2:12250:2962","2:12253:2657","2:12256:2661","2:12259:3379","2:12262:33204","2:12265:2247","2:12267:26375","2:12268:29715","2:12269:26379","2:12270:26380","2:12271:26381","2:12272:33205","2:12274:14605","2:12275:33206"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:411:676":{"id":"0:411:676","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[192,16],"end":[192,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9253:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9242:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2701:228-0:392:128":{"id":"a:2:2701:228-0:392:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2250-0:399:1772":{"id":"b:2:2250-0:399:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3741","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2244:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:1685"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12176:2839":{"id":"2:12176:2839","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12175:2609"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43912:9839","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12209:33193":{"id":"2:12209:33193","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11849:9837","str::split":"2:12197:2435","prim@char":"1:12020:421","str::split_terminator":"2:12206:33192"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43697:9860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:9832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:398:676":{"id":"0:398:676","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[154,16],"end":[154,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9253:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9242:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2550-0:332:1712":{"id":"b:2:2550-0:332:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2520:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:128","2:2554:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:88:1857":{"id":"0:88:1857","crate_id":0,"name":"flag","span":{"filename":"src/lib.rs","begin":[423,4],"end":[426,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag(\"-ffunction-sections\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:1727":{"id":"0:122:1727","crate_id":0,"name":"out_dir","span":{"filename":"src/lib.rs","begin":[936,4],"end":[939,5]},"visibility":"public","docs":"Configures the output directory where all object files and static\nlibraries will be located.\n\nThis option is automatically scraped from the `OUT_DIR` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["out_dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2508:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2544-0:392:128":{"id":"b:2:2544-0:392:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2517:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[183,0],"end":[183,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","cause","type_id","provide","description"],"trait":{"name":"Error","id":"2:2603:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:121:1729":{"id":"0:121:1729","crate_id":0,"name":"force_frame_pointer","span":{"filename":"src/lib.rs","begin":[926,4],"end":[929,5]},"visibility":"public","docs":"Configures whether the compiler will emit instructions to store\nframe pointers during codegen.\n\nThis option is automatically enabled when debug information is emitted.\nOtherwise the target platform compiler's default will be used.\nYou can use this option to force a specific setting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["force",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5773:1478":{"id":"5:5773:1478","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12274:14605":{"id":"2:12274:14605","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4540:14605"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43937:9849","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:2277":{"id":"0:154:2277","crate_id":0,"name":"expand","span":{"filename":"src/lib.rs","begin":[1566,4],"end":[1571,5]},"visibility":"public","docs":"Run the compiler, returning the macro-expanded version of the input files.\n\nThis is only relevant for C and C++ files.\n\n# Panics\nPanics if more than one file is present in the config, or if compiler\npath has an invalid file name.\n\n# Example\n```no_run\nlet out = cc::Build::new().file(\"src/foo.c\").expand();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6886:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12236:2851":{"id":"2:12236:2851","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1721":{"id":"0:100:1721","crate_id":0,"name":"files","span":{"filename":"src/lib.rs","begin":[653,4],"end":[662,5]},"visibility":"public","docs":"Add files which will be compiled","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["p",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7269:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:7269:152","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2508:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2555-0:332:1712":{"id":"b:2:2555-0:332:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2514:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2558:128","2:2559:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5514:33863":{"id":"5:5514:33863","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8385:3970-0:332:1712":{"id":"a:2:8385:3970-0:332:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8385:3970","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12212:28610":{"id":"2:12212:28610","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:9837","str::rsplitn":"2:12215:28612"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43733:9859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8384:3971-0:310:3164":{"id":"a:2:8384:3971-0:310:3164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8384:3971","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[154,16],"end":[154,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9278:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:398:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12148:823":{"id":"2:12148:823","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12020:421"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12267:26375":{"id":"2:12267:26375","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12270:26380":{"id":"2:12270:26380","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:741":{"id":"0:117:741","crate_id":0,"name":"host","span":{"filename":"src/lib.rs","begin":[887,4],"end":[890,5]},"visibility":"public","docs":"Configures the host assumed by this configuration.\n\nThis option is automatically scraped from the `HOST` environment\nvariable by build scripts, so it's not required to call this function.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .host(\"arm-linux-gnueabihf\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["host",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:332:1712":{"id":"0:332:1712","crate_id":0,"name":"Build","span":{"filename":"src/lib.rs","begin":[95,0],"end":[134,1]},"visibility":"public","docs":"A builder for compilation of a native library.\n\nA `Build` is the main type of the `cc` crate and is used to control all the\nvarious configuration options and such of a compile. You'll find more\ndocumentation on each method itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:77","a:2:2741:3742-0:332:1712","a:2:2701:228-0:332:1712","a:2:8385:3970-0:332:1712","a:2:2684:220-0:332:1712","a:2:8384:3971-0:332:1712","b:2:2555-0:332:1712","b:2:2544-0:332:1712","b:2:2253-0:332:1712","b:2:2250-0:332:1712","b:2:2550-0:332:1712","b:2:3320-0:332:1712","b:2:2540-0:332:1712","b:5:680-0:332:1712","0:251","0:373","0:371"]}}},"a:2:2741:3742-0:399:1772":{"id":"a:2:2741:3742-0:399:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:3742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:271:2876":{"id":"0:271:2876","crate_id":0,"name":"is_like_clang","span":{"filename":"src/lib.rs","begin":[3579,4],"end":[3581,5]},"visibility":"public","docs":"Whether the tool is Clang-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:1683":{"id":"0:106:1683","crate_id":0,"name":"warnings","span":{"filename":"src/lib.rs","begin":[751,4],"end":[755,5]},"visibility":"public","docs":"Set warnings flags.\n\nAdds some flags:\n- \"-Wall\" for MSVC.\n- \"-Wall\", \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:120:532":{"id":"0:120:532","crate_id":0,"name":"debug","span":{"filename":"src/lib.rs","begin":[915,4],"end":[918,5]},"visibility":"public","docs":"Configures whether the compiler will emit debug information when\ngenerating object files.\n\nThis option is automatically scraped from the `DEBUG` environment\nvariable by build scripts, so it's not required to call this function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["debug",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:26378":{"id":"5:5529:26378","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12271:26381"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12197:2435":{"id":"2:12197:2435","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11849:9837","`DoubleEndedIterator`":"2:7307:121","prim@char":"1:12020:421","str::split_whitespace":"2:12175:2609","str::rsplit":"2:12203:28608"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43629:3616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:1918":{"id":"0:93:1918","crate_id":0,"name":"flag_if_supported","span":{"filename":"src/lib.rs","begin":[564,4],"end":[567,5]},"visibility":"public","docs":"Add an arbitrary flag to the invocation of the compiler if it supports it\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .flag_if_supported(\"-Wlogical-op\") // only supported by GCC\n    .flag_if_supported(\"-Wunreachable-code\") // only supported by clang\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12247:2586":{"id":"2:12247:2586","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:9837"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:1734":{"id":"0:132:1734","crate_id":0,"name":"pic","span":{"filename":"src/lib.rs","begin":[1001,4],"end":[1004,5]},"visibility":"public","docs":"Configures whether the compiler will emit position independent code.\n\nThis option defaults to `false` for `windows-gnu` and bare metal targets and\nto `true` for all other targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pic",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12221:33195":{"id":"2:12221:33195","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:9832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2255:25603":{"id":"2:2255:25603","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:327":{"id":"0:327","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2319:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12268:29715":{"id":"2:12268:29715","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39699:29708","Self::is_ascii":"2:12267:26375"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39699:29708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148:2183":{"id":"0:148:2183","crate_id":0,"name":"compile","span":{"filename":"src/lib.rs","begin":[1255,4],"end":[1259,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\n# Library name\n\nThe `output` string argument determines the file name for the compiled\nlibrary. The Rust compiler will create an assembly named \"lib\"+output+\".a\".\nMSVC will create a file named output+\".lib\".\n\nThe choice of `output` is close to arbitrary, but:\n\n- must be nonempty,\n- must not contain a path separator (`/`),\n- must be unique across all `compile` invocations made by the same build\n  script.\n\nIf your build script compiles a single source file, the base name of\nthat source file would usually be reasonable:\n\n```no_run\ncc::Build::new().file(\"blobstore.c\").compile(\"blobstore\");\n```\n\nCompiling multiple source files, some people use their crate's name, or\ntheir crate's name + \"-cc\".\n\nOtherwise, please use your imagination.\n\nFor backwards compatibility, if `output` starts with \"lib\" *and* ends\nwith \".a\", a second \"lib\" prefix and \".a\" suffix do not get added on,\nbut this usage is deprecated; please omit `lib` and `.a` in the argument\nthat you pass.\n\n# Panics\n\nPanics if `output` is not formatted correctly or if one of the underlying\ncompiler commands fails. It can also panic if it fails reading file names\nor creating directories.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8385:3970-0:399:1772":{"id":"a:2:8385:3970-0:399:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8385:3970","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2550-0:310:3164":{"id":"b:2:2550-0:310:3164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2520:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:128","2:2554:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2555-0:392:128":{"id":"b:2:2555-0:392:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2514:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2558:128","2:2559:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:683:1914":{"id":"5:683:1914","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1720":{"id":"0:97:1720","crate_id":0,"name":"no_default_flags","span":{"filename":"src/lib.rs","begin":[641,4],"end":[644,5]},"visibility":"public","docs":"Disables the generation of default compiler flags. The default compiler\nflags may cause conflicts in some cross compiling scenarios.\n\nSetting the `CRATE_CC_NO_DEFAULTS` environment variable has the same\neffect as setting this to `true`. The presence of the environment\nvariable and the value of `no_default_flags` will be OR'd together.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["no_default_flags",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12240:33200":{"id":"2:12240:33200","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2252:1685":{"id":"2:2252:1685","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2555-0:310:3164":{"id":"b:2:2555-0:310:3164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2514:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2558:128","2:2559:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:152:2268":{"id":"0:152:2268","crate_id":0,"name":"try_expand","span":{"filename":"src/lib.rs","begin":[1529,4],"end":[1552,5]},"visibility":"public","docs":"This will return a result instead of panicing; see expand() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41812:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6886:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12159:315":{"id":"2:12159:315","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12037:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:2061":{"id":"0:131:2061","crate_id":0,"name":"link_lib_modifier","span":{"filename":"src/lib.rs","begin":[992,4],"end":[995,5]},"visibility":"public","docs":"Adds a native library modifier that will be added to the\n`rustc-link-lib=static:MODIFIERS=LIBRARY_NAME` metadata line\nemitted for cargo if `cargo_metadata` is enabled.\nSee https://doc.rust-lang.org/rustc/command-line-arguments.html#-l-link-the-generated-crate-to-a-native-library\nfor the list of modifiers accepted by rustc.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["link_lib_modifier",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,16],"end":[94,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9278:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:107:1740":{"id":"0:107:1740","crate_id":0,"name":"extra_warnings","span":{"filename":"src/lib.rs","begin":[774,4],"end":[777,5]},"visibility":"public","docs":"Set extra warnings flags.\n\nAdds some flags:\n- nothing for MSVC.\n- \"-Wextra\" for GNU and Clang.\n\nEnabled by default.\n\n# Example\n\n```no_run\n// Disables -Wextra, -Wall remains enabled:\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .extra_warnings(false)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12172:2872":{"id":"2:12172:2872","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12020:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43599:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:33190":{"id":"2:12169:33190","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12026:1420","crate::ops::IndexMut":"2:2985:9753","str::slice_unchecked":"2:12168:33189"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2741:3742-0:332:1712":{"id":"a:2:2741:3742-0:332:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:3742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5526:33865":{"id":"5:5526:33865","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:3220","`String`":"5:7449:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3220","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:9891","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2684:220-0:332:1712":{"id":"a:2:2684:220-0:332:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:0:2541":{"id":"0:0:2541","crate_id":0,"name":"cc","span":{"filename":"src/lib.rs","begin":[1,0],"end":[3983,1]},"visibility":"public","docs":"A library for build scripts to compile custom C code\n\nThis library is intended to be used as a `build-dependencies` entry in\n`Cargo.toml`:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n```\n\nThe purpose of this crate is to provide the utility functions necessary to\ncompile C code into a static archive which is then linked into a Rust crate.\nConfiguration is available through the `Build` struct.\n\nThis crate will automatically detect situations such as cross compilation or\nother environment variables set by Cargo and will build code appropriately.\n\nThe crate is not limited to C code, it can accept any source code that can\nbe passed to a C or C++ compiler. As such, assembly files with extensions\n`.s` (gcc/clang) and `.asm` (MSVC) can also be compiled.\n\n[`Build`]: struct.Build.html\n\n# Parallelism\n\nTo parallelize computation, enable the `parallel` feature for the crate.\n\n```toml\n[build-dependencies]\ncc = { version = \"1.0\", features = [\"parallel\"] }\n```\nTo specify the max number of concurrent compilation jobs, set the `NUM_JOBS`\nenvironment variable to the desired amount.\n\nCargo will also set this environment variable when executed with the `-jN` flag.\n\n# Examples\n\nUse the `Build` struct to compile `src/foo.c`:\n\n```no_run\nfn main() {\n    cc::Build::new()\n        .file(\"src/foo.c\")\n        .define(\"FOO\", Some(\"bar\"))\n        .include(\"src\")\n        .compile(\"foo\");\n}\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/cc/1.0\")]","#![allow(deprecated)]","#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:52:1707","0:332:1712","0:392:128","0:399:1772"],"is_stripped":false}}},"2:2612:14274":{"id":"2:2612:14274","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3386:13746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1722":{"id":"0:102:1722","crate_id":0,"name":"cpp","span":{"filename":"src/lib.rs","begin":[674,4],"end":[677,5]},"visibility":"public","docs":"Set C++ support.\n\nThe other `cpp_*` options will only become active if this is set to\n`true`.\n\nThe name of the C++ standard library to link is decided by:\n1. If [cpp_link_stdlib](Build::cpp_link_stdlib) is set, use its value.\n2. Else if the `CXXSTDLIB` environment variable is set, use its value.\n3. Else the default is `libc++` for OS X and BSDs, `libc++_shared` for Android,\n`None` for MSVC and `libstdc++` for anything else.","links":{"Build::cpp_link_stdlib":"0:108:1723"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12175:2609":{"id":"2:12175:2609","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12176:2839"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43903:9841","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12227:33196":{"id":"2:12227:33196","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11849:9837","`DoubleEndedIterator`":"2:7307:121","prim@char":"1:12020:421","str::matches":"2:12224:3495"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43851:9856","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:9832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2684:220-0:392:128":{"id":"a:2:2684:220-0:392:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2550-0:392:128":{"id":"b:2:2550-0:392:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2520:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:128","2:2554:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:130:1732":{"id":"0:130:1732","crate_id":0,"name":"cargo_metadata","span":{"filename":"src/lib.rs","begin":[982,4],"end":[985,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.\n\nThe emitted metadata is:\n\n - `rustc-link-lib=static=`*compiled lib*\n - `rustc-link-search=native=`*target folder*\n - When target is MSVC, the ATL-MFC libs are added via `rustc-link-search=native=`\n - When C++ is enabled, the C++ stdlib is added via `rustc-link-lib`\n - If `emit_rerun_if_env_changed` is not `false`, `rerun-if-env-changed=`*env*\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cargo_metadata",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:311:3166":{"id":"0:311:3166","crate_id":0,"name":"Vs12","span":{"filename":"src/windows_registry.rs","begin":[86,4],"end":[86,8]},"visibility":"default","docs":"Visual Studio 12 (2013)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12218:33194":{"id":"2:12218:33194","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2554:1501":{"id":"2:2554:1501","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41812:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2558:128":{"id":"2:2558:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32170:3675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:323":{"id":"0:323","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2694:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[292,0],"end":[3366,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:951","0:79:773","0:81:1843","0:83:1849","0:86:1853","0:88:1857","0:89:1861","0:90:1868","0:92:1886","0:93:1918","0:94:1930","0:95:1737","0:96:1738","0:97:1720","0:98:667","0:100:1721","0:102:1722","0:103:1725","0:104:1726","0:105:1739","0:106:1683","0:107:1740","0:108:1723","0:112:1724","0:116:1446","0:117:741","0:118:1728","0:119:2029","0:120:532","0:121:1729","0:122:1727","0:124:445","0:126:1730","0:128:1731","0:130:1732","0:131:2061","0:132:1734","0:133:1735","0:134:1743","0:135:1736","0:139:2085","0:148:2183","0:152:2268","0:154:2277","0:155:2143","0:156:1896","0:206:2622","0:207:2623","0:210:2632","0:211:2633"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12151:33186":{"id":"2:12151:33186","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:2969":{"id":"5:5517:2969","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:2875":{"id":"0:270:2875","crate_id":0,"name":"is_like_gnu","span":{"filename":"src/lib.rs","begin":[3574,4],"end":[3576,5]},"visibility":"public","docs":"Whether the tool is GNU Compiler Collection-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3320-0:399:1772":{"id":"b:2:3320-0:399:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3741","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3322:1514"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:206:2622":{"id":"0:206:2622","crate_id":0,"name":"get_archiver","span":{"filename":"src/lib.rs","begin":[2803,4],"end":[2808,5]},"visibility":"public","docs":"Get the archiver (ar) that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5477:9826"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5444:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324":{"id":"0:324","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2314:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:325:618"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:89:1861":{"id":"0:89:1861","crate_id":0,"name":"ar_flag","span":{"filename":"src/lib.rs","begin":[439,4],"end":[442,5]},"visibility":"public","docs":"Add a flag to the invocation of the ar\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .file(\"src/bar.c\")\n    .ar_flag(\"/NODEFAULTLIB:libc.dll\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12238:33199":{"id":"2:12238:33199","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12186:2093":{"id":"2:12186:2093","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:9837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:9832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12244:33203":{"id":"2:12244:33203","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:9837"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11874:9830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12189:2124":{"id":"2:12189:2124","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41670:179","prim@char":"1:12020:421","self::pattern":"2:11849:9837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12177:9599":{"id":"2:12177:9599","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43883:3612","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12178:33191":{"id":"2:12178:33191","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43893:9852","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:322:676":{"id":"0:322:676","crate_id":0,"name":"fmt","span":{"filename":"src/windows_registry.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9253:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9242:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12162:28575":{"id":"2:12162:28575","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41670:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12275:33206":{"id":"2:12275:33206","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4537:33206"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43946:9850","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12193:2584":{"id":"2:12193:2584","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41670:179","prim@char":"1:12020:421","self::pattern":"2:11849:9837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:9832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:408":{"id":"0:408","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[192,9],"end":[192,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2266:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:409:425"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:134:1743":{"id":"0:134:1743","crate_id":0,"name":"emit_rerun_if_env_changed","span":{"filename":"src/lib.rs","begin":[1027,4],"end":[1030,5]},"visibility":"public","docs":"Define whether metadata should be emitted for cargo to detect environment\nchanges that should trigger a rebuild.\n\nThis has no effect if the `cargo_metadata` option is `false`.\n\nThis option defaults to `true`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["emit_rerun_if_env_changed",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:773":{"id":"0:79:773","crate_id":0,"name":"include","span":{"filename":"src/lib.rs","begin":[356,4],"end":[359,5]},"visibility":"public","docs":"Add a directory to the `-I` or include path for headers\n\n# Example\n\n```no_run\nuse std::path::Path;\n\nlet library_path = Path::new(\"/path/to/library\");\n\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .include(library_path)\n    .include(\"src\")\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dir",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2508:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:1853":{"id":"0:86:1853","crate_id":0,"name":"object","span":{"filename":"src/lib.rs","begin":[408,4],"end":[411,5]},"visibility":"public","docs":"Add an arbitrary object file to link in","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["obj",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2508:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:392:128":{"id":"b:5:680-0:392:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2266:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2821","5:683:1914","5:684:9452"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12149:1912":{"id":"2:12149:1912","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8384:3971-0:332:1712":{"id":"a:2:8384:3971-0:332:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8384:3971","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:409:425":{"id":"0:409:425","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[192,9],"end":[192,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252:60":{"id":"0:252:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[3369,4],"end":[3371,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12150:33185":{"id":"2:12150:33185","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:317:3172":{"id":"0:317:3172","crate_id":0,"name":"Vs16","span":{"filename":"src/windows_registry.rs","begin":[92,4],"end":[92,8]},"visibility":"default","docs":"Visual Studio 16 (2019)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12230:33197":{"id":"2:12230:33197","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11849:9837","`DoubleEndedIterator`":"2:7307:121","prim@char":"1:12020:421","str::rmatch_indices":"2:12233:33198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43779:9853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:3635":{"id":"5:5527:3635","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12203:28608":{"id":"2:12203:28608","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11849:9837","`DoubleEndedIterator`":"2:7307:121","prim@char":"1:12020:421","str::split":"2:12197:2435"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43647:9857","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:9832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2553:128":{"id":"2:2553:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12256:2661":{"id":"2:12256:2661","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:9837"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:9832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374:676":{"id":"0:374:676","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[94,16],"end":[94,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9253:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9242:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12271:26381":{"id":"2:12271:26381","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12262:33204":{"id":"2:12262:33204","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:9837"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:9832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2253-0:310:3164":{"id":"b:2:2253-0:310:3164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3741","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2247:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:25603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2701:228-0:332:1712":{"id":"a:2:2701:228-0:332:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12242:33201":{"id":"2:12242:33201","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3322:1514":{"id":"2:3322:1514","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39491:13029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12243:33202":{"id":"2:12243:33202","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:1868":{"id":"0:90:1868","crate_id":0,"name":"asm_flag","span":{"filename":"src/lib.rs","begin":[458,4],"end":[461,5]},"visibility":"public","docs":"Add a flag that will only be used with assembly files.\n\nThe flag will be applied to input files with either a `.s` or\n`.asm` extension (case insensitive).\n\n# Example\n\n```no_run\ncc::Build::new()\n    .asm_flag(\"-Wa,-defsym,abc=1\")\n    .file(\"src/foo.S\")  // The asm flag will be applied here\n    .file(\"src/bar.c\")  // The asm flag will not be applied here\n    .compile(\"foo\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:951":{"id":"0:78:951","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[298,4],"end":[339,5]},"visibility":"public","docs":"Construct a new instance of a blank set of configuration.\n\nThis builder is finished with the [`compile`] function.\n\n[`compile`]: struct.Build.html#method.compile","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12200:28606":{"id":"2:12200:28606","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:9837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11665:9840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12166:28577":{"id":"2:12166:28577","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12180:1901":{"id":"2:12180:1901","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:9837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12168:33189":{"id":"2:12168:33189","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12026:1420","str::slice_mut_unchecked":"2:12169:33190","crate::ops::Index":"2:2981:9752"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12259:3379":{"id":"2:12259:3379","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:9837"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12233:33198":{"id":"2:12233:33198","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11849:9837","`DoubleEndedIterator`":"2:7307:121","prim@char":"1:12020:421","str::match_indices":"2:12230:33197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43797:9854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:9832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:1725":{"id":"0:103:1725","crate_id":0,"name":"cuda","span":{"filename":"src/lib.rs","begin":[689,4],"end":[696,5]},"visibility":"public","docs":"Set CUDA C++ support.\n\nEnabling CUDA will invoke the CUDA compiler, NVCC. While NVCC accepts\nthe most common compiler flags, e.g. `-std=c++17`, some project-specific\nflags might have to be prefixed with \"-Xcompiler\" flag, for example as\n`.flag(\"-Xcompiler\").flag(\"-fpermissive\")`. See the documentation for\n`nvcc`, the CUDA compiler driver, at https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/\nfor more information.\n\nIf enabled, this also implicitly enables C++ support.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cuda",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1737":{"id":"0:95:1737","crate_id":0,"name":"shared_flag","span":{"filename":"src/lib.rs","begin":[611,4],"end":[614,5]},"visibility":"public","docs":"Set the `-shared` flag.\n\nWhen enabled, the compiler will produce a shared object which can\nthen be linked with other objects to form an executable.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["shared_flag",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:1723":{"id":"0:108:1723","crate_id":0,"name":"cpp_link_stdlib","span":{"filename":"src/lib.rs","begin":[805,4],"end":[811,5]},"visibility":"public","docs":"Set the standard library to link against when compiling with C++\nsupport.\n\nIf the `CXXSTDLIB` environment variable is set, its value will\noverride the default value, but not the value explicitly set by calling\nthis function.\n\nA value of `None` indicates that no automatic linking should happen,\notherwise cargo will link against the specified library.\n\nThe given library name must not contain the `lib` prefix.\n\nCommon values:\n- `stdc++` for GNU\n- `c++` for Clang\n- `c++_shared` or `c++_static` for Android\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .shared_flag(true)\n    .cpp_link_stdlib(\"stdc++\")\n    .compile(\"libfoo.so\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cpp_link_stdlib",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2514:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:2355":{"id":"5:5511:2355","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126:1730":{"id":"0:126:1730","crate_id":0,"name":"archiver","span":{"filename":"src/lib.rs","begin":[956,4],"end":[959,5]},"visibility":"public","docs":"Configures the tool used to assemble archives.\n\nThis option is automatically determined from the target platform or a\nnumber of environment variables, so it's not required to call this\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["archiver",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2508:75","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:392:128":{"id":"0:392:128","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[155,0],"end":[160,1]},"visibility":"public","docs":"Represents an internal error that occurred, with an explanation.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2741:3742-0:392:128","a:2:2701:228-0:392:128","a:2:8385:3970-0:392:128","a:2:2684:220-0:392:128","a:2:8384:3971-0:392:128","b:2:2610-0:392:128","b:2:2555-0:392:128","b:2:2544-0:392:128","b:2:2253-0:392:128","b:2:2250-0:392:128","b:2:2550-0:392:128","b:2:3320-0:392:128","b:2:2540-0:392:128","b:5:5771-0:392:128","b:5:680-0:392:128","0:397","0:65","0:395","0:63","0:61"]}}},"2:2543:1761":{"id":"2:2543:1761","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2517:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:2899":{"id":"0:269:2899","crate_id":0,"name":"cflags_env","span":{"filename":"src/lib.rs","begin":[3562,4],"end":[3571,5]},"visibility":"public","docs":"Returns the compiler flags in format of CFLAGS environment variable.\nImportant here - this will not be CFLAGS from env, its internal gcc's flags to use as CFLAGS\nThis is typically used by configure script","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OsString","id":"1:1976:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:2632":{"id":"0:210:2632","crate_id":0,"name":"get_ranlib","span":{"filename":"src/lib.rs","begin":[2854,4],"end":[2859,5]},"visibility":"public","docs":"Get the ranlib that's in use for this configuration.\n\nYou can use [`Command::get_program`] to get just the path to the command.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{"`Command::get_program`":"1:5477:9826"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Command","id":"1:5444:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12272:33205":{"id":"2:12272:33205","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4539:33205"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43928:9848","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2540-0:399:1772":{"id":"b:2:2540-0:399:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2517:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2514:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:1761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5771-0:392:128":{"id":"b:5:5771-0:392:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9283:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3741","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5769:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5773:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:133:1735":{"id":"0:133:1735","crate_id":0,"name":"use_plt","span":{"filename":"src/lib.rs","begin":[1016,4],"end":[1019,5]},"visibility":"public","docs":"Configures whether the Procedure Linkage Table is used for indirect\ncalls into shared libraries.\n\nThe PLT is used to provide features like lazy binding, but introduces\na small performance loss due to extra pointer indirection. Setting\n`use_plt` to `false` can provide a small performance increase.\n\nNote that skipping the PLT requires a recent version of GCC/Clang.\n\nThis only applies to ELF targets. It has no effect on other platforms.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["use_plt",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2684:220-0:399:1772":{"id":"a:2:2684:220-0:399:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:680-0:332:1712":{"id":"b:5:680-0:332:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2266:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2821","5:683:1914","5:684:9452"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12183:2092":{"id":"2:12183:2092","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:9837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371":{"id":"0:371","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,9],"end":[94,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2266:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:372:425"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2701:228-0:399:1772":{"id":"a:2:2701:228-0:399:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:105:1739":{"id":"0:105:1739","crate_id":0,"name":"warnings_into_errors","span":{"filename":"src/lib.rs","begin":[730,4],"end":[733,5]},"visibility":"public","docs":"Set warnings into errors flag.\n\nDisabled by default.\n\nWarning: turning warnings into errors only make sense\nif you are a developer of the crate using cc-rs.\nSome warnings only appear on some architecture or\nspecific version of the compiler. Any user of this crate,\nor any other crate depending on it, could fail during\ncompile time.\n\n# Example\n\n```no_run\ncc::Build::new()\n    .file(\"src/foo.c\")\n    .warnings_into_errors(true)\n    .compile(\"libfoo.a\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["warnings_into_errors",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:1886":{"id":"0:92:1886","crate_id":0,"name":"is_flag_supported","span":{"filename":"src/lib.rs","begin":[493,4],"end":[551,5]},"visibility":"public","docs":"Run the compiler to test if it accepts the given flag.\n\nFor a convenience method for setting flags conditionally,\nsee `flag_if_supported()`.\n\nIt may return error if it's unable to run the compiler with a test file\n(e.g. the compiler is missing or a write to the `out_dir` failed).\n\nNote: Once computed, the result of this call is stored in the\n`known_flag_support` field. If `is_flag_supported(flag)`\nis called again, the result will be read from the hash table.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["flag",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41812:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}},{"type":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2540-0:392:128":{"id":"b:2:2540-0:392:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2517:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2514:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:1761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:331:425":{"id":"0:331:425","crate_id":0,"name":"clone","span":{"filename":"src/windows_registry.rs","begin":[82,37],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:2085":{"id":"0:139:2085","crate_id":0,"name":"try_compile","span":{"filename":"src/lib.rs","begin":[1053,4],"end":[1216,5]},"visibility":"public","docs":"Run the compiler, generating the file `output`\n\nThis will return a result instead of panicing; see compile() for the complete description.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41812:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:267:615":{"id":"0:267:615","crate_id":0,"name":"env","span":{"filename":"src/lib.rs","begin":[3535,4],"end":[3537,5]},"visibility":"public","docs":"Returns the set of environment variables needed for this compiler to\noperate.\n\nThis is typically only used for MSVC compilers currently.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"tuple":[{"resolved_path":{"name":"OsString","id":"1:1976:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"OsString","id":"1:1976:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:399:1772":{"id":"0:399:1772","crate_id":0,"name":"Tool","span":{"filename":"src/lib.rs","begin":[193,0],"end":[202,1]},"visibility":"public","docs":"Configuration used to represent an invocation of a C compiler.\n\nThis can be used to figure out what compiler is in use, what the arguments\nto it are, and what the environment variables look like for the compiler.\nThis can be used to further configure other build systems (e.g. forward\nalong CC and/or CFLAGS) or the `to_command` method can be used to run the\ncompiler itself.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:253","a:2:2741:3742-0:399:1772","a:2:2701:228-0:399:1772","a:2:8385:3970-0:399:1772","a:2:2684:220-0:399:1772","a:2:8384:3971-0:399:1772","b:2:2555-0:399:1772","b:2:2544-0:399:1772","b:2:2253-0:399:1772","b:2:2250-0:399:1772","b:2:2550-0:399:1772","b:2:3320-0:399:1772","b:2:2540-0:399:1772","b:5:680-0:399:1772","0:410","0:408"]}}},"b:2:2544-0:399:1772":{"id":"b:2:2544-0:399:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2517:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12269:26379":{"id":"2:12269:26379","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:33864":{"id":"5:5525:33864","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8384:3971-0:399:1772":{"id":"a:2:8384:3971-0:399:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8384:3971","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:57:2545":{"id":"0:57:2545","crate_id":0,"name":"find_tool","span":{"filename":"src/windows_registry.rs","begin":[43,0],"end":[45,1]},"visibility":"public","docs":"Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.","links":{},"attrs":["#[cfg(not(windows))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["_tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2143":{"id":"0:155:2143","crate_id":0,"name":"get_compiler","span":{"filename":"src/lib.rs","begin":[1591,4],"end":[1596,5]},"visibility":"public","docs":"Get the compiler that's in use for this configuration.\n\nThis function will return a `Tool` which represents the culmination\nof this configuration at a snapshot in time. The returned compiler can\nbe inspected (e.g. the path, arguments, environment) to forward along to\nother tools, or the `to_command` method can be used to invoke the\ncompiler itself.\n\nThis method will take into account all configuration such as debug\ninformation, optimization level, include directories, defines, etc.\nAdditionally, the compiler binary in use follows the standard\nconventions for this path, e.g. looking at the explicitly set compiler,\nenvironment variables (a number of which are inspected here), and then\nfalling back to the default configuration.\n\n# Panics\n\nPanics if an error occurred while determining the architecture.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3374,0],"end":[3590,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:263:1899","0:265:1052","0:266:309","0:267:615","0:268:2658","0:269:2899","0:270:2875","0:271:2876","0:272:2873"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:396:425":{"id":"0:396:425","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[154,9],"end":[154,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2550-0:399:1772":{"id":"b:2:2550-0:399:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2520:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:128","2:2554:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:325:618":{"id":"0:325:618","crate_id":0,"name":"eq","span":{"filename":"src/windows_registry.rs","begin":[82,16],"end":[82,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8385:3970-0:310:3164":{"id":"a:2:8385:3970-0:310:3164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8385:3970","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2546:702":{"id":"2:2546:702","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3320-0:392:128":{"id":"b:2:3320-0:392:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3741","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3322:1514"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:55:2124":{"id":"0:55:2124","crate_id":0,"name":"find","span":{"filename":"src/windows_registry.rs","begin":[35,0],"end":[37,1]},"visibility":"public","docs":"Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.\n\nThe `target` argument is the target that the tool should work for (e.g.\ncompile or link for) and the `tool` argument is the tool to find (e.g.\n`cl.exe` or `link.exe`).\n\nThis function will return `None` if the tool could not be found, or it will\nreturn `Some(cmd)` which represents a command that's ready to execute the\ntool with the appropriate environment variables set.\n\nNote that this function always returns `None` for non-MSVC targets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["target",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["tool",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::process::Command","id":"1:5444:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,31],"end":[82,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2540-0:310:3164":{"id":"b:2:2540-0:310:3164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2517:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2514:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:1761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12224:3495":{"id":"2:12224:3495","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11849:9837","`DoubleEndedIterator`":"2:7307:121","prim@char":"1:12020:421","str::rmatches":"2:12227:33196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43833:9855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2544-0:332:1712":{"id":"b:2:2544-0:332:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2517:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Build","id":"0:332:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:326":{"id":"0:326","crate_id":0,"name":null,"span":{"filename":"src/windows_registry.rs","begin":[82,27],"end":[82,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2695:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8385:3970-0:392:128":{"id":"a:2:8385:3970-0:392:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8385:3970","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12157:33188":{"id":"2:12157:33188","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2544-0:310:3164":{"id":"b:2:2544-0:310:3164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2517:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VsVers","id":"0:310:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[192,16],"end":[192,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9278:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:411:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2253-0:392:128":{"id":"b:2:2253-0:392:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3741","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2247:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:25603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:272:2873":{"id":"0:272:2873","crate_id":0,"name":"is_like_msvc","span":{"filename":"src/lib.rs","begin":[3584,4],"end":[3589,5]},"visibility":"public","docs":"Whether the tool is MSVC-like.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[154,9],"end":[154,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2266:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:392:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:396:425"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2559:1500":{"id":"2:2559:1500","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41812:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12158:316":{"id":"2:12158:316","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12159:315","`u8`":"1:12037:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12206:33192":{"id":"2:12206:33192","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11849:9837","str::split":"2:12197:2435","prim@char":"1:12020:421","`DoubleEndedIterator`":"2:7307:121","str::rsplit_terminator":"2:12209:33193"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43679:9861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:9831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2253-0:399:1772":{"id":"b:2:2253-0:399:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:3741","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2247:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Tool","id":"0:399:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:25603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"1:7661:3720":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:2741:3742":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:8480:3655":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:45731:13314":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:8210:12472":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:3386:3638":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:43893:9852":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:2352:12149":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"11:1012:9649":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:2981:9752":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"20:5402:8393":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:40536:13190":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:6720:8829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:4264:13751":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:1911:5564":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:7061:12424":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:44636:13307":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:8384:3971":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:2839:9747":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:10313:13605":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:5366:9836":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:44648:12701":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"14:165:20624":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:9192:28046":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:10633:11366":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:12526:11613":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:22077:31526":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"19:0:1043":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:21131:14693":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:12646:11632":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:5752:3693":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:4536:12212":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:43587:9847":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:47674:13398":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:5920:8403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:10253:13600":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:42659:13233":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:1055:9648":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:7637:3730":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:46240:13334":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:14150:12047":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12815:11674":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:1064:9649":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:9487:10329":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"20:4689:7797":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:21045:14702":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:43416:12908":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:2508:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:4929:12822":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:12032:754":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"18:719:11213":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:2266:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:40443:13178":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"20:5408:8394":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4723:7774":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:3186:26027":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"11:1027:20618":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:5318:10240":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:9274:3615":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:3178:12691":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12354:11589":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:45833:13318":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"20:6382:8832":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"11:644:9634":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:43615:3615":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:45763:13315":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:8899:21614":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:6637:10240":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4862:12781":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"20:1699:5421":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"14:31:13722":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:13125:11720":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:10066:13591":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:11467:11462":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:3519:13572":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:3999:13747":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:3395:13571":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13732:11925":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:30616:31709":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:43435:12910":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:400:13561":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:8068:12541":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:4984:7796":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:8161:3578":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:11600:13480":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"8:0:3395":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:7558:12859":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:2827:9745":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:3259:3633":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13803:11943":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:9153:11319":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:41728:3657":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:13923:11972":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:21985:12921":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:43851:9856":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:22656:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:4872:12787":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:4740:3109":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"18:481:11181":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"18:727:11216":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"11:1517:13730":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:2963:9761":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:6789:12391":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:5959:12274":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:10786:13627":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:8086:12544":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:8407:3653":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:7682:3718":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:5775:8392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:11591:11431":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:41619:13428":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:13096:11717":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10486:11360":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:45793:13316":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"11:403:34330":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:44364:13293":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:35:9892":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:915:9640":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:10241:3677":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:42297:3691":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"20:4160:7740":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:1544:3603":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"20:4276:7754":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:12742:9890":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:362:3729":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:12031:650":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:3841:13793":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:7289:12455":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"20:5617:8409":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"20:599:4528":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"17:11020:13641":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:11342:13474":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:9913:13585":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:6744:8831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:2959:2821":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4518:7756":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:41855:3657":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:0:828":{"crate_id":6,"path":["libc"],"kind":"module"},"5:7191:9408":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:8878:13443":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:1630:592":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"20:4175:7585":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:21276:3582":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:7523:11311":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11084:11414":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"11:736:9636":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:41944:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:4678:3733":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:5008:7798":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10323:13606":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"18:609:13553":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:3735:13735":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:2805:9744":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:14054:12009":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:7025:12419":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:1757:1687":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"0:311:3166":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs12"],"kind":"variant"},"13:0:3393":{"crate_id":13,"path":["std_detect"],"kind":"module"},"20:4226:7747":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:6658:12364":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:2443:12153":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:3330:9638":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:5737:8347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:40485:13185":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:11591:13259":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:12021:1539":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:11056:21739":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:21098:14698":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:3674:14629":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:4955:7792":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:10280:13602":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:11118:11423":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:6648:5368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12671:11634":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:21307:14703":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:41477:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:7525:12189":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:8818:3672":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12592:11624":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:3517:3580":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:5612:12234":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:1513:5403":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:1693:5420":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:5793:8393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:2319:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"20:1539:5406":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:6598:8824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:11040:10333":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"20:1684:5419":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:6439:9637":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:2857:12170":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:47967:13407":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:2800:9739":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:22001:12925":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:1302:9650":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:30422:12955":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:3499:1693":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:9243:1693":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:7718:14616":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:4194:3603":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:43937:9849":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:11803:10340":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:7759:9694":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:7553:12481":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"20:6225:8826":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"20:1572:5409":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:1464:9635":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:531:3714":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:14315:12095":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:12982:11697":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:40310:3533":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"20:6278:5341":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:40753:13199":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:10773:13465":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:9966:11340":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:11791:11490":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:9020:13825":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"20:5491:8400":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:7231:32843":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:4765:391":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"20:6327:8829":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:4348:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:1558:9408":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:43903:9841":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:526:4519":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:47596:13397":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:6317:13685":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:45815:13317":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:7199:12881":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:2399:12151":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:14026:12001":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:5384:3603":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:940:9644":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"18:491:11182":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"0:399:1772":{"crate_id":0,"path":["cc","Tool"],"kind":"struct"},"2:42961:3654":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"20:4406:7766":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:9482:3575":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:9202:13455":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:4794:7783":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:42426:3548":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:500:4517":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:4259:13750":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:13894:11964":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:2247:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"20:4193:7743":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:7349:3525":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"20:5458:8375":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:2692:4094":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:42932:13242":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:40230:19895":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:1778:9677":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:9100:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:12605:11625":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:1118:32782":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:3934:14633":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:11809:3198":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:11498:11463":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:3524:1690":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:4164:3603":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:12161:11544":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:6809:14691":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:8949:21616":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"11:760:9638":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:8252:12556":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:5720:12244":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:3970:14634":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:1473:9636":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"20:6448:8837":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:1587:12693":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"14:187:20631":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:11874:9830":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:6692:21553":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:7656:2202":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:5622:10313":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:1595:5412":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:13029:11710":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10609:13625":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13957:11985":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:4818:7786":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:11726:11481":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5025:12833":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:14341:12104":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13847:11954":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:2497:12155":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"20:6312:8827":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:3219:3631":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"0:313:3168":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs14"],"kind":"variant"},"11:986:9648":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:42949:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:4626:7766":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4469:7750":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:14007:11996":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:9840:13580":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:6939:21554":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:12034:752":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:7857:3572":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:5444:1697":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:12952:11693":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:9027:13826":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:45916:13321":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:5532:12897":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:48134:13416":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:2164:13569":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:7449:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:6652:9413":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"11:2049:9648":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:7228:19932":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:6044:10988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"20:5603:8408":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:14205:12066":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:7722:19930":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:2851:9750":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:4483:7752":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:44348:13289":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:4255:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:10430:11356":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:8113:3577":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:3182:32493":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:910:9639":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:3221:3632":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:5629:10314":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:41606:13227":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:20968:14706":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:2932:3745":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:2223:32901":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:643:14607":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:46116:13331":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:8211:3615":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"20:1676:5418":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:40216:13166":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:7099:13446":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:12148:11540":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:8990:3713":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:4389:7741":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:5818:8396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:8924:21615":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:12905:11686":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:7679:12192":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"20:5653:10988":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"11:723:9635":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:4698:14663":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:40546:13191":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:20708:32189":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:8385:3970":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:43629:3616":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:6977:13687":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:46286:13336":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:41744:9408":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12579:11622":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:5967:8405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:8304:13815":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:43183:13250":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:7574:10325":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13368:11787":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:7534:13846":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:3204:12692":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"20:1530:5405":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:4738:3735":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:5128:3690":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:39526:13030":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:44384:13298":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:2763:9733":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:14102:12046":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"20:6892:9208":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13795:11941":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:9537:3592":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:5994:21549":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:5363:21546":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"14:202:19855":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:6607:8825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"20:4200:7744":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:2133:13566":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:10621:13626":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:9289:3556":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:11969:13849":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"20:4084:7734":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:45663:13311":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:13016:11709":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:6347:21551":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:11202:13470":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:11630:13261":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:2591:3618":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:7599:9396":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:2243:12872":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:10080:13592":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:6028:8412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:1690:5420":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:21969:12920":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"15:306:20644":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"11:311:12687":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:4965:12225":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:4476:12210":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:619:9623":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:1761:615":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:10520:11365":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:1557:5408":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:10312:1697":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:8230:13815":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:10458:11358":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:22425:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:46308:13337":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:44376:13296":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:13456:11849":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:8138:13721":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:10671:21714":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"11:2180:12696":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:10293:13603":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:3739:13792":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:2589:12159":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:3079:9755":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:46332:13338":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:20926:19955":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:2569:10295":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:3635:3289":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:42219:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:1638:5415":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:3940:14632":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"20:6466:8838":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:3414:3603":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:3800:9638":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:7529:7927":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:1041:9647":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:5561:3670":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"20:5384:8392":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:40471:13182":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"20:5765:8447":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"20:6869:9206":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:5499:8401":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:6741:19934":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"20:5686:8415":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:42022:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"15:394:20653":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:40373:12911":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:4323:12207":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:6197:13671":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:635:13781":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:3220:12198":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:4887:12792":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:10795:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"5:0:287":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:2970:32789":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:8555:3658":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:41517:13213":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:13448:11848":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:14227:12072":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:11369:13476":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:6171:8448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"20:4216:7746":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:5979:8406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:4390:9459":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:44368:13294":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:7438:10266":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:6868:8838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:21175:3582":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:1506:5402":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:39264:9762":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:41500:13211":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:44207:19854":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"11:332:10230":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:5080:7802":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"20:4574:7783":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:7269:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:5839:9637":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:21916:12919":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:149:10225":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:10933:9694":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:5558:2924":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:2774:9735":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:1288:9648":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:481:10307":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:4387:13796":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:9016:11314":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"20:4348:7762":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:11034:10332":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:47993:13409":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:5553:12174":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:14417:12120":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:4606:19888":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:11593:27906":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:5890:8401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"11:2194:12698":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"20:4208:7745":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:8497:1694":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:7128:27855":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:44403:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:20876:14699":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"20:4628:7790":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"20:4528:7777":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:4754:7778":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:47920:13403":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:7278:3747":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:555:1699":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:43647:9857":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:11520:11412":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:4426:10261":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:261:10240":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"11:1103:13729":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:7887:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:43407:12907":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:39505:12472":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:9253:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:12519:13763":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:22060:12932":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:7232:19931":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"20:7131:7928":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:6850:8837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:2696:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:13492:11879":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:40108:13158":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:7707:12487":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:2911:3617":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:11375:13477":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:6667:12365":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:1138:32836":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:8848:3674":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:13905:11968":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:45685:13312":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"20:1503:5401":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:9283:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:44228:13283":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:32297:4101":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"11:817:9644":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:6769:9897":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:41795:9629":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"20:7160:7932":{"crate_id":20,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:42178:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:20912:14701":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"16:2373:12150":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:1979:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:3183:26023":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"20:7173:9396":{"crate_id":20,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:8659:21607":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:45971:13324":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:4363:10261":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:12038:1520":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:42419:3547":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:6775:8832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:3935:3603":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:4824:7787":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:9977:13577":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:20693:32189":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:40402:3613":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:13707:11916":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:10805:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:6541:3700":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:3374:19857":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:11554:13256":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:10374:9859":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:5849:8375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:12106:11525":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:8566:3659":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:7012:12416":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:6724:12378":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:7586:12860":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:4842:7789":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:9048:11316":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"20:7114:7926":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:5639:12238":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:9223:11321":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:2471:3582":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:5074:7801":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:14329:12102":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:6930:10276":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"20:4095:7735":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:9806:21628":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"0:52:1707":{"crate_id":0,"path":["cc","windows_registry"],"kind":"module"},"6:7540:7928":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:4441:12209":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:10981:13638":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:5793:12254":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:8150:3639":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"20:6318:8828":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:9296:11323":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:10785:3576":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:8979:14520":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"20:4728:7801":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:4184:14650":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"20:4255:7751":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:10522:3633":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:12792:11673":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13999:11994":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:4011:13748":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:1814:9686":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:6015:8410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:8491:9831":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:6540:12181":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:12757:11662":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"18:644:11183":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:32210:13020":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:8141:3637":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:21177:14695":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:11753:11488":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:2744:4098":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:4796:3739":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"20:4323:7759":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"20:4298:7756":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6332:12316":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"9:357:20554":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:9875:13582":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4704:7772":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"9:237:3654":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:10654:11368":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:5068:7800":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:14403:12117":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:10339:13612":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10499:11361":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"20:566:4523":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"2:2929:3744":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:8942:14666":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:4812:805":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:7445:13709":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:9295:3554":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:3442:1692":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:3867:12204":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:2332:12143":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:506:4518":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:2359:3561":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:4764:7779":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:1663:5417":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:4879:1013":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:7864:3576":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:4456:7748":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"20:1652:5416":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:7545:9893":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:7715:3660":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:45709:13313":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"0:332:1712":{"crate_id":0,"path":["cc","Build"],"kind":"struct"},"17:13882:11963":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:4900:12223":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:0:3394":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:4996:12226":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:40585:13194":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:8334:4303":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:681:11205":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13914:11971":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"11:1611:10234":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:2715:12164":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:10351:11348":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:837:3657":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:10388:9858":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10906:11405":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:11371:11457":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:12424:11599":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:4336:9458":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:39342:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:5882:12265":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:7261:12882":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:9153:13451":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:10957:13636":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:44013:19853":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:11967:11503":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"20:4613:7788":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:4171:14649":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:6713:12377":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:41719:1845":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:22557:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"18:80:25564":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:2966:32783":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:43921:9838":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:10161:13598":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:30191:14630":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:47882:13402":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:8008:1745":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:5049:13797":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8312:13430":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:10568:13620":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:12727:11643":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:10417:3671":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:7038:12422":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:11872:11495":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:8278:13428":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"20:518:4518":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"6:5900:8402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:6130:8446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8979:13821":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:21281:14694":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:4781:7781":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:41534:14628":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"20:6172:4432":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:41642:13228":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:4:1026":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:9475:13574":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"20:6427:8835":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:4023:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:8290:14651":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12826:11676":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"20:4243:7749":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:8173:3581":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:3514:9637":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:4381:10284":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"20:500:4515":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"17:11290:21617":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"0:317:3172":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs16"],"kind":"variant"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:5590:12899":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:3171:3657":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:0:500":{"crate_id":2,"path":["core"],"kind":"module"},"20:5576:8405":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12435:11600":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:1482:9639":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"11:793:9639":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:3298:3629":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:3343:3622":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"9:52:14501":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:9485:34353":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:47958:13406":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:8897:13444":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:3157:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"18:614:34367":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:11614:13260":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:11395:13761":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:10222:13754":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:1733:5425":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6931:13686":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:4664:7769":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:13604:11897":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:5382:11314":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:48004:13410":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:42669:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"20:4315:7758":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13981:11990":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:10123:11333":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:7725:14611":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:7337:3524":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:5745:3692":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"11:1852:12692":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4938:12828":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:894:9637":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:12033:751":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:39491:13029":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:43445:13775":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:12035:753":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:2898:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:21012:14707":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"20:6196:4390":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:44129:13276":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:6396:12324":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:868:9635":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:2706:3722":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:11329:21618":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:13557:11889":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:14189:12062":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:40514:13188":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:22037:31517":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:7568:34346":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:4724:12217":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"20:4598:7786":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:12089:11517":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:45934:13322":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:44372:13295":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:3894:12205":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:4716:7773":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:10260:13755":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:5612:9897":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"13:226:12682":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:9756:10300":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:4446:7747":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:6067:8414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"20:4634:7791":{"crate_id":20,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:3042:20690":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:1837:9690":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:3234:9764":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:5987:8407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:7833:12501":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"20:1509:5402":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:4002:9637":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:30382:9886":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:7855:21559":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:11607:13480":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:3152:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"20:5564:8404":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13749:11930":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"15:0:3401":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:40280:31544":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:474:4513":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:2361:3562":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:22114:31564":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:8539:3656":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:12878:11682":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:11581:13479":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:1520:5404":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:4770:7780":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:10417:11355":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:1273:9649":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:10934:13760":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:42742:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:5863:8376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:8330:13819":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"20:4520:7776":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:6306:14784":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:43356:13773":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:7546:7929":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:40181:9850":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:12769:11664":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:11504:13792":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:8176:21560":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:2356:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:41753:3967":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"20:5509:8402":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10812:11399":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:12631:11629":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:2962:12869":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:568:4525":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12502:11612":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:12711:11638":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:14216:12071":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:6571:21552":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:43697:9860":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:22458:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:6425:2188":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:11849:9837":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"11:836:9645":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"0:319:3174":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs17"],"kind":"variant"},"2:9242:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"6:6618:8826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:6820:8835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11600:21621":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:21115:3582":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:8771:21610":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"20:7120:7927":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:10883:11404":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:7552:7930":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:6531:10227":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:494:4516":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:41983:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:1631:5414":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"11:1822:9408":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:6296:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"20:1516:5403":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:8605:21594":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:43495:13776":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:41668:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:5805:8395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:6456:12176":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11272:13644":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:6161:10319":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:1709:5423":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4963:7793":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:22143:12944":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:9115:13450":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:923:9642":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:6711:8828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:9518:13575":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:11416:11459":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:30510:31706":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"18:707:9833":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:40129:31507":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:9734:13579":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:502:3709":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:40102:9849":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:11277:10334":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:7593:10327":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:14044:12004":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:9032:11315":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:14:1763":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:6175:13656":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:46461:13341":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:8003:13810":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:44661:13308":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:2691:3741":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:14177:12059":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:2519:12156":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:3142:9756":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:13043:11711":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:41812:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:12687:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13639:11901":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:7425:3529":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:8806:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:11300:3679":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:1554:3657":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:10565:3718":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:12023:1061":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:5472:3603":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:6470:12193":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:13757:11933":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:4785:12219":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:10330:13609":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:44193:13278":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"11:695:9641":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:14359:12110":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:30438:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:40503:13187":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:44555:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:8926:14665":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13548:11885":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:4543:7759":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:6289:12313":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:9118:11318":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:7463:12886":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"20:5624:8410":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:43751:9858":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:55:12529":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"20:7108:7925":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:7505:7924":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:3169:9760":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:7433:12474":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:7743:9693":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:4787:7782":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:43599:9844":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:10544:13617":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"20:1593:5411":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:3648:9408":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:11155:11427":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:48072:13414":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:44619:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:40204:19894":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:43883:3612":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"20:4396:7765":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:10863:11340":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:7240:34352":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"20:4148:7738":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:2461:12873":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10110:13596":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"20:1560:5408":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:4740:7776":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:7564:7931":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"11:0:3398":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:6984:3637":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"20:1578:5410":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:42979:13247":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:6625:4303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"20:4386:7764":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:49940:14710":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"20:607:4529":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"2:48042:13412":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:7584:13716":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:7282:9408":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"18:521:25576":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:434:11273":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:40959:13203":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:3186:13570":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:2926:20688":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:10975:19845":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:44035:13264":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:1527:5405":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"9:426:20541":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:1075:13563":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"18:538:11191":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:39225:9765":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:8872:21613":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11852:11494":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"20:553:4521":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"17:11264:11441":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:4413:7743":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"10:36:12702":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:9054:26161":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:22623:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:4535:7758":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:1590:5411":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:4854:7791":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:11184:3588":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:4550:7760":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:21183:14697":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:4819:3734":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:39484:9757":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:12479:11608":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:9040:13446":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:11440:10336":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:895:3657":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:40263:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:5301:12230":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:12024:313":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:8806:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:3110:3640":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:587:4528":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:5807:12255":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:10175:11340":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:10597:13624":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:4506:12211":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:7710:14610":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:5393:3666":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:13155:11431":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:11178:11429":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:40159:13163":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:6193:13800":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:12303:11577":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7255:3967":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:946:9645":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:2492:1691":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:7517:7926":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:113:25566":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:1733:19966":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:6248:10313":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"20:7183:9397":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:5940:13649":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:1702:5422":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:9105:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"20:1523:5404":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:10760:3572":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:504:13562":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:42440:3557":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:3984:14635":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"20:1598:5412":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:8800:3671":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:6303:12173":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:2833:9746":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:40415:13173":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:8997:26169":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:12040:1522":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:8457:3654":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:4368:7738":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:21525:14700":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"5:4846:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"11:2060:9649":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"18:599:34369":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:11986:14522":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:2689:12163":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:10444:11357":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"20:4642:7792":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:9285:3548":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:40725:3614":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:44545:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:11165:13298":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:2746:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:5994:8408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:1756:12892":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"20:4458:3733":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:356:3728":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:8356:3737":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:4133:27858":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:41871:9408":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"0:57:2545":{"crate_id":0,"path":["cc","windows_registry","find_tool"],"kind":"function"},"20:4121:7737":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:42764:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:2792:9738":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:45639:13310":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:2520:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:532:4520":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:26045:12953":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:7250:4470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"9:0:3396":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:256:13559":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:6356:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:8872:9408":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:3025:12195":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:3992:14636":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:44598:13779":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:43797:9854":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"20:4304:7757":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:39452:3518":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:46688:13356":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:2803:12168":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6427:12327":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:7221:10251":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:4032:10240":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"18:624:34366":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:4042:14639":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:12037:1523":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:10249:13599":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"20:494:4514":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:7874:3573":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:6057:20661":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:5398:11315":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"18:660:13554":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:6484:12329":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:11642:11473":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10223:11347":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:2917:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"5:1411:3657":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:7529:9638":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:13697:11915":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:5126:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:47344:13395":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:45864:13319":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:11327:13473":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:21530:14708":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:6136:7647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:46383:13339":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:13964:11986":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:3669:10240":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:2207:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:46878:13359":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:8711:21608":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:1776:9638":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:6036:8413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:22755:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:10969:13637":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:1681:5419":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:46800:13358":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4729:7775":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:10529:11445":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:6357:12320":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"11:2201:3524":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:8542:21596":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:7407:12278":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:2209:3558":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:46718:13357":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:7313:34349":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"20:6847:4470":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11199:11433":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:4564:12213":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"10:44:12703":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:13673:11913":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:7515:12480":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:6079:3603":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:11127:11463":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:8389:3963":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:42940:3595":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:22689:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:40249:13171":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:11924:11498":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:7636:3582":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:13303:11736":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:40117:13159":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:11250:11438":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:46954:13361":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:1603:5413":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:6239:34351":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:12065:11515":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6554:12341":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"0:58:3178":{"crate_id":0,"path":["cc","windows_registry","find_vs_version"],"kind":"function"},"2:40453:13179":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:7763:13765":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:46484:13342":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:41583:31563":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:5843:12262":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11210:11434":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:10361:11349":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:2695:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4428:7745":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11454:11461":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:9318:11324":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:5414:12232":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:11034:13642":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:13659:11909":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:7463:9368":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:5651:12178":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:46642:13355":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:6502:12337":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:1495:5400":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6900:12400":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:1976:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:2874:12171":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:22590:3723":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"20:5739:8446":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:2694:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:45894:13320":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"20:4734:7802":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:4155:14647":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:5882:8400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"10:0:3397":{"crate_id":10,"path":["adler"],"kind":"module"},"1:10519:3631":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:47486:13396":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:7253:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:22164:12947":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:9528:34357":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"20:4567:7782":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:11241:21741":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"20:5427:8396":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:1637:12889":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:43164:13248":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12017:11510":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"20:6214:8825":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:12432:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:4341:7737":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:44563:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"20:4444:7769":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:6429:3696":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:7484:12478":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:9287:3547":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:4841:12221":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:42699:12516":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:7575:7932":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:530:12132":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:43605:9843":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:2753:3514":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:40197:9848":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:6805:8834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:2900:12172":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:4567:14658":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:7511:7925":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:7295:9208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:9744:34355":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"20:6333:8830":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:2165:19956":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:6608:3705":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:47947:13405":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:6705:8827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:41905:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"11:630:3657":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:13854:11955":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:6834:8836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:8841:21612":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:39512:13766":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:10140:3616":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:22098:31557":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:6788:31460":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:10750:13459":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:2825:12169":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9706:13578":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:7852:3575":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:11943:11499":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:6726:8830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:6516:12339":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:40984:13205":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:860:9408":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:48095:13415":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:9293:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:6841:12855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:4235:13794":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:11463:13791":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"20:512:4517":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"17:13574:11891":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12552:11372":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:6485:10240":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:4524:7757":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:590:11194":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:11294:13471":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:10815:3578":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:4810:7785":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:6594:3704":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:6069:10315":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:6465:3703":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:14037:12002":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:276:3220":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:2926:3743":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:44050:13270":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:43733:9859":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:2788:9740":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:11863:9833":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:9442:34361":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:46430:13340":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"20:5472:8376":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:2131:3709":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:2567:12158":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:4623:14637":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:44261:9863":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:4496:7754":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"20:591:4527":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"17:9344:34360":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:10199:11345":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"20:6351:8831":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:595:4529":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:46164:13332":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:9821:11330":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"11:968:9647":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:39366:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4848:7790":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"11:1858:12693":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6250:12310":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:7372:30321":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"14:221:12635":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:40223:13167":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:10945:13635":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:6894:10322":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"20:544:4520":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"2:40739:13198":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"20:130:4189":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"1:4495:14653":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:62:4123":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"11:119:10228":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5051:12850":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:22524:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:11357:13803":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:1523:13734":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:4973:7795":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:2919:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:308:1472":{"crate_id":1,"path":["std","thread"],"kind":"module"},"16:2759:12166":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"20:4705:7798":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:2690:12876":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:11767:11489":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:562:4524":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:12457:11607":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:10329:26211":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:261:13560":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"18:652:11183":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:12566:11621":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:9399:13573":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:44352:13290":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:881:9636":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:2514:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:43456:13251":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:1717:5424":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"20:4722:7800":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:42971:13246":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12333:11585":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:12043:1577":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:4635:11074":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:4786:32293":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:13870:11957":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:919:9641":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:2314:12141":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:6128:12303":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:2141:12864":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:4592:12214":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:3460:3579":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"0:55:2124":{"crate_id":0,"path":["cc","windows_registry","find"],"kind":"function"},"16:6886:12184":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:44424:13301":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"11:97:12683":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:10958:26172":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:8834:3673":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4695:7771":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:11905:11497":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:2611:12160":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:7020:10323":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:24:615":{"crate_id":2,"path":["core","env"],"kind":"macro"},"1:6538:3699":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:2163:19955":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"11:657:9408":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:582:4089":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:9297:3555":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:12639:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:4315:7735":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:6955:10279":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"20:4484:7772":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:6864:12398":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"20:559:4522":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"2:1667:1099":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:7044:3685":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:3777:12202":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:40189:9849":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:40462:13181":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:2212:3559":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:12412:11597":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"20:4712:7799":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11815:11491":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"20:1885:5564":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:1917:9622":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"20:4622:7789":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:47798:13400":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:4328:7736":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4420:7744":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12053:11512":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"20:5676:8414":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:22150:12946":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:12075:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:1696:5421":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:10038:13589":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:6688:5344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"20:5438:8397":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:40595:13195":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:13830:11947":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:42100:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:8984:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:41863:9634":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:2784:3515":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:1576:12691":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:12851:11679":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:7920:3625":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:4046:19823":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:11045:11407":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:22788:12951":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"18:766:25575":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:1565:9638":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:5673:21547":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:10901:13759":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"20:7143:7930":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12618:11627":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:12042:799":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:11007:13640":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:43946:9850":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:1575:5410":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"9:177:14511":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"20:7102:7924":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:2244:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"20:4660:7794":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:8811:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:40523:13189":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:12004:11509":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:4074:9634":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:10994:13639":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:40353:3545":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"20:574:4524":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"2:40494:13186":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:2421:12152":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:12377:11593":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:1973:13565":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:4985:3603":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:14350:12108":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:2350:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:11023:10331":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"20:5414:8395":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:9032:13827":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:4620:12215":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"20:5529:8403":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:20740:32272":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:12002:26162":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:46064:13329":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:3183:32845":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:4315:13795":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:3318:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"20:6875:9207":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:21059:19955":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"16:7665:12191":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:5689:12240":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:1888:9621":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"14:40:11491":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6763:12390":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"14:160:13722":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:10295:9857":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"3:0:446":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:9724:10294":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:6323:12315":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:10832:13630":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:3441:12200":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:2631:3626":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:515:11186":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:20874:3582":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:43928:9848":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:2170:12866":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:8241:14627":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:11109:11422":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:11525:13793":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:8152:12194":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:6232:13682":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"20:0:828":{"crate_id":20,"path":["libc"],"kind":"module"},"6:123:4190":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:482:4514":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:1747:12890":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:3197:9763":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:4506:7755":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:4928:12224":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"18:574:11183":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"20:1498:5400":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:4114:13749":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:10416:13758":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:7592:21557":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"11:1838:12690":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:5986:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:40943:13202":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:13513:11884":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:7382:3530":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:1536:5406":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"11:2168:12694":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10471:11359":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:11832:11493":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:1924:661":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"20:1634:5414":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:5044:12847":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:12041:1519":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:5342:12231":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:21:689":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"11:844:9646":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:42061:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:40343:3546":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:12691:11637":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:4234:3657":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:7505:12188":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:2882:10312":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:12045:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:2216:3286":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:6796:8833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:8105:12547":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:12039:1521":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:9291:3557":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:44380:13297":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:2511:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:8794:21611":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:12394:11596":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:782:10243":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:4401:7742":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:5769:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:44081:13274":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:9777:21627":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"20:538:4519":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:7474:13745":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"20:5486:8399":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:1184:13564":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:5567:12177":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:4904:14661":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:7609:9397":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:2174:12695":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:1561:9637":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:7736:2109":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:3163:9758":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"11:1831:9638":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:14380:12113":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"20:5637:8412":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:11991:14612":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:20924:31969":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:14282:12088":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:40950:2188":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"20:4561:7781":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:43527:12913":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:6872:12183":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:7182:9891":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"9:330:12740":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:7763:21558":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:43537:13778":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:2737:12165":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:4992:7797":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:638:13783":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:32170:3675":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:6986:12415":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"20:5445:8398":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:40965:3638":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:2465:12154":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12966:11694":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:3594:9634":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:47844:13401":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11623:11470":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:10115:9634":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:9134:3588":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:1503:9641":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"9:507:12763":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"20:1641:5415":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:10555:13618":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"9:486:20538":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:10377:11351":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:9990:11335":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:1102:32829":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:629:13732":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13069:11713":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:21309:12915":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:10824:26502":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:30416:9887":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:4145:12896":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:46094:13330":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:12077:11516":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:44218:13279":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:40974:10290":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:10525:3629":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:1918:12895":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:7631:12485":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:5413:3667":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"9:450:20539":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:39326:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:2033:9647":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:13683:11914":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:9665:34354":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:9741:10295":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:41880:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:2555:2206":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:2293:20662":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:40296:3531":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:2960:32779":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:9952:11304":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:5028:12227":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"11:365:10232":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:5991:12900":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:7278:9207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"20:4509:7775":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:4410:3721":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:44064:13273":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:10937:12760":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:4463:7749":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:9083:11317":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:4868:12222":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:7463:12475":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"20:1666:5417":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:1776:9676":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:6145:10305":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:41654:13229":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"20:6255:5368":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:12445:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:13778:11938":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:7272:9206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:5737:21548":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:1569:5409":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:4638:7767":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:3300:3630":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:44436:20050":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:586:14604":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:4568:7762":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:5379:1696":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:4833:7788":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:2922:2251":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:11131:3672":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:4556:7761":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:9409:34358":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:4742:3738":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:2843:9748":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:21863:12918":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:10731:13840":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:4748:7777":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:3212:12690":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"20:580:4525":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"6:5015:7799":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"20:6441:8836":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"20:506:4516":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"1:12027:1504":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:11145:3673":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:43425:13774":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:30452:31707":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:9658:10292":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"0:315:3170":{"crate_id":0,"path":["cc","windows_registry","VsVers","Vs15"],"kind":"variant"},"5:1442:9408":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:42715:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"20:5780:8448":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:547:4522":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:6850:12396":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"20:7149:7931":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:5704:12243":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:11920:19847":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:582:11311":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"0:310:3164":{"crate_id":0,"path":["cc","windows_registry","VsVers"],"kind":"enum"},"6:6077:8415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:47938:13404":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:9188:11320":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:1545:5407":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:39386:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:1426:9634":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:5799:8394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:11669:11474":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"20:4336:7761":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13719:11919":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:8740:21609":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:7622:13717":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:8043:12539":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:8965:3695":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"20:4367:7763":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:8856:3657":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:4949:7732":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4475:7751":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:2856:9751":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"18:564:11193":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:10799:13628":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"20:4544:7779":{"crate_id":20,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:13427:11839":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:1570:12690":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"20:5347:8347":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"20:4249:7750":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:13787:11939":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:8236:13817":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"20:4534:7778":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:5975:20239":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:207:10238":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:8125:13718":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:7523:12858":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"20:6403:8833":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:579:4527":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:6788:9898":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"11:1121:9650":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"20:1720:5424":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:46018:13325":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:13179:11734":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:12018:374":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:6558:9408":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:2524:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"20:4503:7774":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:4396:12208":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:2749:4100":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:11568:21620":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:1500:5401":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:21744:3582":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:1582:12692":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4304:7734":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"20:4269:7753":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:5779:3694":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:43833:9855":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"20:5376:8391":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:7847:3574":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"20:644:4557":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:850:9634":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:9475:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"11:1845:12691":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:8265:3108":{"crate_id":1,"path":["std","os","raw","c_int"],"kind":"typedef"},"2:43779:9853":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"20:1712:5423":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"20:6295:5344":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:2314:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4895:12797":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:6835:19926":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:12254:11552":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"20:134:4190":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:14015:11997":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"20:5631:8411":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:10511:11364":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:41563:13220":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"20:1736:5425":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:14395:12114":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:653:4557":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:31014:4089":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"14:7:13722":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:2105:21672":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:2186:34329":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"20:4604:7787":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:4698:12216":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"11:1826:9637":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"20:4430:7768":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"20:585:4526":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"17:14236:12074":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"18:636:11204":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:12020:421":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:4917:12813":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:11379:20011":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:40268:3532":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"20:4681:7796":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:2377:3566":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:10148:13597":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:5626:13647":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:3180:30327":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12186:11548":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:9494:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:10183:9840":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:22025:12929":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:4633:11072":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:12467:32362":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:9933:3582":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:5954:3690":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:9604:11340":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11234:11437":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:4473:14652":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:6160:12308":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:39699:29708":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:5916:12271":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:11854:9831":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:5970:10313":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"0:0:2541":{"crate_id":0,"path":["cc"],"kind":"module"},"1:8224:3612":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:7799:12497":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:11388:21619":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:44360:13292":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:952:9646":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:9887:13583":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:10402:13757":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"20:4065:7732":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"20:7060:9368":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:10091:3657":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:42433:3556":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:40433:13176":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"20:5588:8406":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:43179:13249":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:10266:13601":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"20:4169:7741":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:8194:3613":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:12035:11511":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:4291:7733":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:3386:13746":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"13:110:34337":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:6642:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:40936:13201":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:488:4515":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:5877:8399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:1492:9640":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:3744:12201":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:5058:7794":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:4701:14652":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:14301:12093":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:4163:14648":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:13140:11724":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:3238:12693":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:12026:1420":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:7360:3746":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:10460:10330":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:12044:1143":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:12494:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"11:805:9643":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:4393:3603":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:9939:13587":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:4637:11076":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:40169:13164":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"11:1048:34336":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:4800:7784":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"20:6412:8834":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:10946:1698":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:7759:32299":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:7928:3627":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:6386:12323":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6214:13674":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4436:7746":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:4437:9460":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:4032:14638":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:8296:13818":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:7904:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:47978:13408":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:11665:9840":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:21634:32187":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:11189:11431":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"14:0:3400":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"18:531:11188":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12994:11698":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:8204:3614":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"20:4263:7752":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:6915:34347":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"20:486:4513":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"6:4606:7764":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:2817:9742":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:9943:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:3217:32841":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:21622:12917":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:23235:12952":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"14:215:12633":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:3581:3657":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"7:32:20526":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12936:11692":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:878:10248":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"0:392:128":{"crate_id":0,"path":["cc","Error"],"kind":"struct"},"17:11992:11508":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"20:7137:7929":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"18:736:25574":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:5067:12228":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:43912:9839":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:44241:9862":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:11074:11412":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:9571:34362":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:5972:12134":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:8021:12538":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:42724:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:14163:12053":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:6372:12175":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:12318:11581":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:7693:12182":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:7073:21555":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:46988:13362":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:671:13558":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:5498:1698":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:5615:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"11:798:9642":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:0:1412":{"crate_id":1,"path":["std"],"kind":"module"},"11:285:12684":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12365:11592":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:9926:13586":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:13971:11987":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:8632:21606":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:0:1853":{"crate_id":17,"path":["object"],"kind":"module"},"5:1257:9647":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:47736:13399":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"18:507:11183":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:4908:12807":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:40992:13207":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:43679:9861":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4685:7770":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:11354:11287":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:6008:8409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"20:5745:7647":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:48057:13413":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:8166:12549":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:7912:13808":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:9899:11333":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:47138:13363":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:2812:9741":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:8910:2212":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:7362:21556":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:7412:3528":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:2402:1689":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:6671:5341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:4054:14641":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:40424:13175":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:46564:13343":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"20:4465:7770":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:20680:4089":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:13167:11727":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:12650:10305":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:20723:32277":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"11:399:34335":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:4046:14640":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:1673:5418":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:7494:12479":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:39408:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:5080:13797":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"20:4670:7795":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"7:0:1567":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:2541:12157":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11696:11477":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:6978:14259":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:8549:3657":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:41786:3968":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"18:690:11208":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:12019:948":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:9075:13449":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:22052:12931":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:11409:2849":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:10581:13622":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:12030:648":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:48019:13411":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:2035:3627":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:45619:13309":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"20:4650:7793":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:14197:12065":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12174:11545":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:119:4189":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:6022:8411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:6589:4390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:2637:12161":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"20:1606:5413":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:7307:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:11098:11418":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:5429:3668":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"20:4154:7739":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:2663:12162":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"20:1548:5407":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:12891:11683":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:45953:13323":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"9:393:20540":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:13771:11936":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:42258:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:10013:11337":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13083:11716":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:2758:9736":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:7731:9651":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:9110:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:12864:11681":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:2517:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:13620:11900":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5767:8391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10303:11266":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:5775:12250":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13435:11842":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10931:13631":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6018:21550":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:9278:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"20:4496:7773":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:7265:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:9866:13581":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"20:4286:7755":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:6573:5340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:11428:11460":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:39311:9754":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:2387:3329":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:3261:3634":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:42139:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4944:12831":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:41804:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:2780:9734":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:6886:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"20:6205:8824":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:4187:9457":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:21746:14696":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:7998:13809":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:5306:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:12036:749":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:30986:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"20:61:4123":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"17:8997:21595":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:7753:12489":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:40145:13162":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:3736:13791":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:6565:4432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:9282:9690":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:13591:11892":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"15:327:14498":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:554:4523":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"18:0:3403":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:7290:9408":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"20:4418:7767":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:40555:13192":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:7245:9408":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:6798:9899":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:3058:11224":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"20:4590:7785":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:6438:12328":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:11144:11426":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:11869:9832":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:43573:9851":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"11:1068:13728":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:44156:13277":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:21300:3582":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:5836:8398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:541:4521":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:3810:12203":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"20:4580:7784":{"crate_id":20,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:10403:11354":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:46210:13333":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:32206:13765":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:5955:8404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:7331:34350":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:13991:11993":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:9850:21629":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:11955:11502":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:2153:593":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:9978:13224":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:13862:11956":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:2796:9737":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:4913:14662":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"11:749:9637":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:20738:32276":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:7539:12190":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:11220:21740":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:10845:11402":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:2822:9743":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:8386:3969":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:4962:3959":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:46262:13335":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"11:1501:20619":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4489:7753":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"20:4071:7733":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:1839:9691":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:9542:3593":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:9716:34359":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"20:4108:7736":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12133:11534":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:39519:9458":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:5590:12179":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:10755:13461":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:1672:10240":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:904:9638":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:5829:8397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:929:9643":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:10833:26504":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"20:5596:8407":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:2684:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:42924:3596":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:9614:34356":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:573:4526":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:7415:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"18:699:11209":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:12539:11616":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:21197:12915":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"20:4550:7780":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:20721:32274":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:4616:7765":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:8864:13820":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"11:1818:3657":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:3580:3288":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:1821:9889":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"20:1705:5422":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13949:11982":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:6156:8447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:7396:31544":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:1073:9650":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"20:4236:7748":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:10333:13756":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:7211:9637":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:22176:14631":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:39430:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:46924:13360":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"12:0:3399":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:4759:676":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"5:5362:9835":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:43508:12912":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:6815:12392":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:2781:12167":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:4032:12206":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13055:11712":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:3508:26150":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:2701:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:3295:12199":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:5100:12229":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"15:288:20643":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:8285:13429":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"20:4475:7771":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:4374:7739":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:11157:26505":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:11979:11506":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:12840:11678":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:12025:1390":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:2603:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:2375:3565":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:1011:10240":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:13332:11756":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:7739:12180":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:40571:11202":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:10097:13595":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"18:755:11221":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12346:11587":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"18:96:25565":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:22491:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:44606:13304":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:10101:26212":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:13109:11718":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:10976:3674":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:2847:9749":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:2962:20689":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"11:667:9640":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:9502:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:9655:13577":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:8974:32298":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"20:6180:5340":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:2985:9753":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:2049:13735":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:3998:14637":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"20:5645:8413":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:822:10246":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"7:79:20533":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:4814:12220":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:4326:10283":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:43482:12911":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:0:3402":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:9561:13576":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:2183:1688":{"crate_id":1,"path":["std","fs"],"kind":"module"},"2:43517:13777":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:12659:11633":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:2738:4096":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:2591:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:5238:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:4650:7768":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:44356:13291":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:13566:11890":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:12921:11688":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"11:1538:13731":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"20:6232:4303":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:4587:7763":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:7474:12187":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:3720:3627":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:4753:12218":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:8217:3616":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:10151:13832":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10390:11353":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4395:7585":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11888:11496":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:12118:11528":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13937:11979":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:22722:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"11:2130:20613":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:14259:12087":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:42687:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:11164:11428":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:9170:13829":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:1649:5416":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:41736:9634":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"20:4330:7760":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4380:7740":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"20:4181:7742":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:11542:11465":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:5824:3702":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:2768:9732":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:2472:19899":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:40393:13767":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:10082:9686":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:10051:13590":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:11221:13450":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}