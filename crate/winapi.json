{"root":"0:0:1644","crate_version":"0.3.9","includes_private":false,"index":{"2:11976:30710":{"id":"2:11976:30710","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11595:7652","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::rmatch_indices":"2:11979:30711"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42784:7667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5354:2178":{"id":"5:5354:2178","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:23839":{"id":"2:11908:23839","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40639:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5337:31374":{"id":"5:5337:31374","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1890","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6961:2051","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1890","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6961:2051","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:26670":{"id":"2:11923:26670","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42888:2154","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:23864":{"id":"2:11916:23864","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11917:23865"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11949:23876":{"id":"2:11949:23876","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11595:7652","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::split":"2:11943:23872"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42652:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12016:23540":{"id":"2:12016:23540","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11986:30714":{"id":"2:11986:30714","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5341:31375":{"id":"5:5341:31375","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5356:23537":{"id":"5:5356:23537","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12016:23540"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11961:23880":{"id":"2:11961:23880","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11864:410","str::splitn":"2:11958:23878","self::pattern":"2:11595:7652"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42756:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:1859":{"id":"2:11970:1859","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11595:7652","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::matches":"2:11970:1859"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42838:7669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:27667":{"id":"2:11922:27667","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11921:27487"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42917:7654","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11955:30706":{"id":"2:11955:30706","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11595:7652","str::split":"2:11943:23872","prim@char":"1:11864:410","str::split_terminator":"2:11952:30705"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42702:7671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:23878":{"id":"2:11958:23878","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7652","str::rsplitn":"2:11961:23880"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42738:7639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11990:30717":{"id":"2:11990:30717","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7652"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11620:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:30713":{"id":"2:11984:30713","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11906:23838":{"id":"2:11906:23838","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40639:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12013:23535":{"id":"2:12013:23535","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11932:23884":{"id":"2:11932:23884","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7652"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12008:30721":{"id":"2:12008:30721","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7652"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:19650":{"id":"2:11920:19650","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42620:2151","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12011:30722":{"id":"2:12011:30722","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11557:126","`FromStr`":"2:11556:2327"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11556:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11556:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12014:23538":{"id":"2:12014:23538","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:310":{"id":"2:11904:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11905:23842","`u8`":"1:11881:1471"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11996:20168":{"id":"2:11996:20168","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7652"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12015:23539":{"id":"2:12015:23539","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11894:799":{"id":"2:11894:799","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11864:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5355:23536":{"id":"5:5355:23536","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12015:23539"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11918:27712":{"id":"2:11918:27712","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42604:7659","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:27713":{"id":"2:11925:27713","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42926:7653","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:27532":{"id":"2:11919:27532","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42610:7658","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12002:30719":{"id":"2:12002:30719","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7652"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11964:30707":{"id":"2:11964:30707","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:21392":{"id":"2:11895:21392","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:23883":{"id":"2:11929:23883","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7652"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12017:30723":{"id":"2:12017:30723","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4541:30723"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42933:7663","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:30698":{"id":"2:11896:30698","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:30718":{"id":"2:11993:30718","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7652"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1644":{"id":"0:0:1644","crate_id":0,"name":"winapi","span":{"filename":"src/lib.rs","begin":[6,0],"end":[71,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":[],"is_stripped":false}},"2:11897:30699":{"id":"2:11897:30699","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11912:23841":{"id":"2:11912:23841","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:23872":{"id":"2:11943:23872","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11595:7652","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::split_whitespace":"2:11921:27487","str::rsplit":"2:11949:23876"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42634:2153","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12020:30724":{"id":"2:12020:30724","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4539:30724"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42951:7664","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12019:1969":{"id":"2:12019:1969","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4542:1969"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42942:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11999:23885":{"id":"2:11999:23885","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7652"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5352:31377":{"id":"5:5352:31377","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5336":{"id":"5:5336","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5247:1374","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5337:31374","5:5338:2155","5:5341:31375","5:5344:31376","5:5352:31377","5:5353:31378","5:5354:2178","5:5355:23536","5:5356:23537"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11926:23882":{"id":"2:11926:23882","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7652"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:19365":{"id":"2:11935:19365","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40639:176","prim@char":"1:11864:410","self::pattern":"2:11595:7652"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11973:30709":{"id":"2:11973:30709","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11595:7652","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::matches":"2:11970:1859"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42856:7670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12005:30720":{"id":"2:12005:30720","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7652"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5344:31376":{"id":"5:5344:31376","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:19366":{"id":"2:11939:19366","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40639:176","prim@char":"1:11864:410","self::pattern":"2:11595:7652"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:23842":{"id":"2:11905:23842","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11881:1471"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:30700":{"id":"2:11899:30700","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11897:30699"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:23865":{"id":"2:11917:23865","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11916:23864"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5338:2155":{"id":"5:5338:2155","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:23840":{"id":"2:11910:23840","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:30703":{"id":"2:11915:30703","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11870:1374","crate::ops::IndexMut":"2:3020:2048","str::slice_unchecked":"2:11914:30702"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:23874":{"id":"2:11946:23874","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7652"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11419:7641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11979:30711":{"id":"2:11979:30711","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11595:7652","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::match_indices":"2:11976:30710"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42802:7668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11982:30712":{"id":"2:11982:30712","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11903:30701":{"id":"2:11903:30701","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:19704":{"id":"2:11902:19704","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11163:7656"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11988:30715":{"id":"2:11988:30715","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:30716":{"id":"2:11989:30716","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11893":{"id":"2:11893","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11158:1374","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11894:799","2:11895:21392","2:11896:30698","2:11897:30699","2:11899:30700","2:11902:19704","2:11903:30701","2:11904:310","2:11905:23842","2:11906:23838","2:11908:23839","2:11910:23840","2:11912:23841","2:11914:30702","2:11915:30703","2:11916:23864","2:11917:23865","2:11918:27712","2:11919:27532","2:11920:19650","2:11921:27487","2:11922:27667","2:11923:26670","2:11924:30704","2:11925:27713","2:11926:23882","2:11929:23883","2:11932:23884","2:11935:19365","2:11939:19366","2:11943:23872","2:11946:23874","2:11949:23876","2:11952:30705","2:11955:30706","2:11958:23878","2:11961:23880","2:11964:30707","2:11967:30708","2:11970:1859","2:11973:30709","2:11976:30710","2:11979:30711","2:11982:30712","2:11984:30713","2:11986:30714","2:11988:30715","2:11989:30716","2:11990:30717","2:11993:30718","2:11996:20168","2:11999:23885","2:12002:30719","2:12005:30720","2:12008:30721","2:12011:30722","2:12013:23535","2:12014:23538","2:12015:23539","2:12016:23540","2:12017:30723","2:12019:1969","2:12020:30724"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11921:27487":{"id":"2:11921:27487","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11922:27667"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42908:7655","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:30704":{"id":"2:11924:30704","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42898:7666","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11967:30708":{"id":"2:11967:30708","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5353:31378":{"id":"5:5353:31378","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:1890","`String`":"5:7210:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1890","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6961:2051","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:30702":{"id":"2:11914:30702","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11870:1374","str::slice_mut_unchecked":"2:11915:30703","crate::ops::Index":"2:3016:2047"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11952:30705":{"id":"2:11952:30705","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11595:7652","str::split":"2:11943:23872","prim@char":"1:11864:410","`DoubleEndedIterator`":"2:7203:120","str::rsplit_terminator":"2:11955:30706"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42684:7672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"2:29989:8008":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"18:652:33767":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:25647:2206":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6496:9666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:45413:2487":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:8926:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:8105:2123":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:8967:25665":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:6200:15193":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:4583:12230":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13557:19299":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:8056:2122":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:5967:32371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12237:18434":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:9844:15465":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:11350:2202":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:39469:7614":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"14:160:14168":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:8814:1995":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:10704:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:41074:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:8991:33747":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"12:861:2007":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:12884:18793":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:2916:15469":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:4414:1953":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:534:32952":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"12:2205:1991":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:3519:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:562:15325":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:4689:14899":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:4669:2233":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:7150:2094":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:22141:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:7435:15238":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:9526:15405":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:11235:15844":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:10394:15556":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:2727:14257":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:2891:8032":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:39716:7987":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:10202:7639":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:44899:2463":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:6530:13340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:31786:7993":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:2961:1885":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:3352:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:1366:1994":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:10528:15350":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:5494:15165":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:1422:2000":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:2077:1941":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:8881:33752":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:42192:7617":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:39345:7786":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:44232:27528":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:9155:15348":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:9090:7581":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:7203:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:2389:14243":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:6528:15207":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:8774:15309":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:13404:19258":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:9183:15349":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:11029:20238":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:7180:2092":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:20411:7796":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:1898:2088":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:39702:2150":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"14:40:15569":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:22075:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:8117:2127":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:9250:15372":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4850:12259":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:2930:14265":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:8138:2149":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:3051:2183":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:40914:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:5999:21385":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:11125:15752":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:9446:15395":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:6250:30514":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:4628:12233":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:8494:14206":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:41980:27682":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:6571:9693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"12:274:32596":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:3915:2220":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:2255:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:2869:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:13176:19204":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:6903:15220":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:9031:33741":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:10642:15355":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"14:7:14168":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"12:1866:2016":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:11133:8142":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:12177:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:4994:12274":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:22108:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"9:676:13966":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:4795:783":{"crate_id":2,"path":["core","iter"],"kind":"module"},"12:853:2006":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:8137:15326":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:10721:15359":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:13192:19206":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:11245:23041":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:2835:8021":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:4119:7765":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:5388:15159":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:3415:7731":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"5:3125:2015":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:4844:2285":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:5862:2139":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:2964:1886":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10490:15560":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"18:707:7650":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:3448:2126":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:9644:15401":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:1847:2075":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:9557:27177":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:41699:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:9001:20166":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:12022:18358":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:10310:15553":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:9873:15508":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:12251:18435":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:5510:15166":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:20645:2440":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:4757:12249":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:43377:8187":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:9778:15431":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:11218:20155":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:4102:2252":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:39305:7663":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12609:18574":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:8871:15342":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"12:353:32599":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:2169:31726":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:41636:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:42188:27650":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:42412:7624":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:9422:15383":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:12307:18444":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:46457:2483":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:8483:2320":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:12225:18433":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12768:18681":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:12896:18795":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:44853:2478":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:9751:15430":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"12:777:14155":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:12695:18631":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:6075:2511":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:2847:8022":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"12:646:1994":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:2530:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:12730:18635":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:41757:8127":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:40994:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:39632:7982":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:1695:9745":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"12:1852:2014":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:4501:12224":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"14:202:7698":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:5772:12879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:42421:7623":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:45043:27467":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:6542:2375":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:3667:1995":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:7825:15249":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:12060:18361":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"18:590:27412":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:5347:2334":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:10672:20183":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"11:0:1747":{"crate_id":11,"path":["adler"],"kind":"module"},"5:2908:30080":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:43212:7687":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:12211:18432":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:7275:23501":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:20696:2430":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"5:4269:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:9165:33737":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:5698:12911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:20877:2234":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:11821:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"12:659:1995":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:5363:2335":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:3089:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:7511:13912":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:44729:2501":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:43568:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12964:19131":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:5145:30514":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:7832:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:9234:28293":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:39511:7967":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:6719:32908":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:7847:15250":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:870:1995":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"15:175:14185":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:46632:7547":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:3198:7749":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10270:15525":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:9318:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:11087:15750":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:2509:14248":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:43353:8180":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:2857:8024":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:5839:15179":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4820:12256":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"9:800:14091":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:4945:12269":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:9791:15459":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9897:15510":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:30083:27689":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:8096:2182":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:12387:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:6829:33059":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"9:827:14055":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:4248:12197":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:30011:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:39222:7787":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:8217:2305":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:7282:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"12:751:1998":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:653:8879":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"12:0:1748":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"5:3995:1994":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:6536:7721":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:4155:1993":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:40697:1993":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:546:8824":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4733:12246":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:11436:18157":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:42361:28122":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:11251:23047":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:7193:2093":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:6865:33016":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:39246:7790":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:6094:12963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"13:226:32657":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:7552:2023":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11748:18339":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:12485:18571":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:5060:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"18:681:19369":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:3159:2173":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:6146:15189":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"12:1085:14158":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:38976:7725":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:20684:2234":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:14:1862":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:5773:2360":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:3391:2124":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:22438:2211":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:8272:15330":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:8643:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:2613:2166":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:6773:13353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:9501:15391":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:8393:15334":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:6017:15182":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:5193:7608":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:38800:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:7650:1972":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:1213:2010":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13082:19170":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:8596:15337":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:40623:2197":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:10659:2101":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:2803:8015":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:558:1950":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:7819:2103":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"12:822:2004":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:2759:1883":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:6363:2366":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:531:8822":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:3159:2014":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:572:8828":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"9:622:13979":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:4144:14714":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:7059:2302":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:8806:2376":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:9030:2090":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:11056:2131":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:2300:14239":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:4618:12232":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:41721:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"9:33:14030":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"5:3671:2033":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:10670:15356":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:4322:12203":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:11037:8201":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:8776:2340":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:43233:7689":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6743:15216":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:13184:19205":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:29949:2028":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:6475:2370":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:2714:1954":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:11885:1467":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:5722:12913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12322:18445":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:4656:12236":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:3959:2139":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:38860:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:11327:20984":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:38738:7576":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"5:3530:1993":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"14:31:14168":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"7:32:13929":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:2749:14258":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:11883:1469":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6735:15215":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"12:1859:2015":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:4748:1616":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:12674:18630":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:3973:2224":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:11054:15742":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:12103:18364":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:1927:2089":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:8944:20185":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"12:320:32601":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:5753:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:21492:27337":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:7511:15242":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:8295:15331":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:10894:15366":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:956:2006":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:8987:15220":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:6704:15214":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:10403:15360":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:10244:7638":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:2481:2234":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:2367:14242":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:9776:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:9108:15347":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"14:215:14171":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:21598:27433":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:3232:7573":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:4566:19987":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:9063:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:3605:2198":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"12:1534:14161":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:5752:12916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:10050:7628":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:42620:2151":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"18:481:19378":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:7622:1947":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:2345:2109":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:39392:8111":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:5614:32831":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:44252:27649":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:44322:2484":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:44566:2462":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:3566:14280":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:7288:15228":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:39651:7984":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:29763:2207":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:43069:7682":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:11609:7650":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:3123:26584":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:9118:33736":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:2905:7566":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:42908:7655":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:30189:27614":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:10867:2341":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"9:956:13959":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:42942:1970":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:1899:9889":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:12176:18382":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"18:699:19371":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:42604:7659":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:38785:8033":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:420:14212":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:1638:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:6879:2180":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:6635:7973":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:4330:7759":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:44298:2492":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:40637:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:4629:2287":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:0:487":{"crate_id":2,"path":["core"],"kind":"module"},"2:2831:8019":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:4835:2284":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:4687:12240":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:2709:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:45491:2475":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:1534:9730":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:7446:12422":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:1051:2008":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:505:1941":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:3249:15492":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:5949:15180":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:6034:15183":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:38999:7760":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"4:0:1743":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:11875:632":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:8323:7648":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:7105:1991":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:44529:2477":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:8155:2151":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:8161:2153":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:2521:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:1723:9748":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:2156:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:487:15324":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13071:19169":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:1074:2010":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:42173:8171":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:21702:27679":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:6079:12962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:4952:12270":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:123:8499":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:7637:15247":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:5525:15167":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:21136:2436":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:45601:2464":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:9553:15346":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:7659:15248":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:4574:14880":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:11800:18343":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:7681:2013":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:6643:13344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:11600:7648":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:9088:7582":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"13:110:32656":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4328:12045":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:5916:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:10230:7640":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:43550:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:5235:33033":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:5878:12923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:44428:2497":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:12781:18682":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:1520:9728":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:2823:2424":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:43385:8189":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:46747:7552":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:13340:19218":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:3854:14448":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:11774:18341":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:13031:19163":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:42702:7671":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:12797:18683":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:11308:8193":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:9223:15371":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11536:15512":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:4361:12207":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:21687:27678":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:46685:7550":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:8941:15343":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:11005:2339":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:6324:1995":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:7708:25695":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:40688:8039":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:641:1976":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:41660:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:21651:27651":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:11853:18347":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:10051:25687":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:11259:15954":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:42430:7627":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:1083:2011":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:12739:18636":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:3204:7748":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:8932:1946":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:4871:12261":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:8441:15336":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:46560:7541":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:0:1751":{"crate_id":16,"path":["gimli"],"kind":"module"},"18:564:19383":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:8638:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:6690:15213":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:11203:20163":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:7249:15225":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:45567:2482":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:36:2052":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:43441:8203":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:1509:9726":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:1716:1999":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"5:5597:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:41396:7581":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11330:15969":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:586:8830":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"9:863:13956":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:5219:14204":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:6926:21404":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:46209:2496":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:7224:7695":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:39927:1980":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:6884:26451":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:7117:33090":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:9631:15402":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:9073:2386":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:43198:7686":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:9700:15428":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:7596:1935":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:12429:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:847:1993":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:10520:15562":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:6270:15197":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:42784:7667":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:39642:7983":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:6728:13349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:13492:19289":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:9328:15386":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:7797:2099":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:0:1366":{"crate_id":1,"path":["std"],"kind":"module"},"5:6136:30541":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:9358:7816":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:4307:12201":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:9691:15429":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"19:0:1015":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:20727:2432":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:8218:2304":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:2825:14261":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11288:15964":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:9061:15346":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"12:2080:2010":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:39006:7737":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:361:1964":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:9350:15384":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:7953:2167":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:7173:1889":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12836:18726":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"18:599:33770":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:20858:2431":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:11871:1453":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:8110:15306":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:22273:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:2874:8028":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:9283:15394":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:50283:27506":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:891:1997":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:4604:7775":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:961:30514":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:6512:8699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:1771:599":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:3689:14331":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:11343:15970":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:6697:30541":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:11846:20245":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:2868:8027":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:11186:15791":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:7943:25653":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:2793:2423":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:4673:2238":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11873:18348":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:8418:15335":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:3923:1998":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:3716:14334":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:10684:2102":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:8499:2322":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"12:2053:2008":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:7555:2026":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:10714:2123":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:6698:13347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:9263:15373":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:7031:30079":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:1541:9731":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:7211:15223":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:4064:23034":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:10139:15346":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:1571:1998":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:8884:2383":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:6472:2369":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:7948:23500":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:6628:13342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:5664:15172":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:9764:15458":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:10708:15358":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:10011:7641":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"12:1065:32603":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:2557:14250":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:621:1971":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"18:582:7796":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:6649:13345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4237:12196":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:9094:7591":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"18:736:19374":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:4413:14815":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:11870:1374":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:5378:2336":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:5558:15169":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:5411:15160":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:3185:2017":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:5780:15176":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:21814:2209":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:39194:7788":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:3455:2148":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:5433:15161":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:12972:19132":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:646:1977":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:4191:7603":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:8278:2289":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:6791:13354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4812:986":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"14:165:14169":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"12:815:2003":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:29983:7717":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:11137:15753":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:4681:12239":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:6565:7723":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:4408:12213":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11149:15788":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:6842:32974":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:2819:2422":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:44406:2493":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:6284:15198":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:6653:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:4429:12216":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"12:669:2001":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:41194:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:40588:2195":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:7052:1995":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:7498:12429":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:39185:7751":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12349:18508":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:1413:1997":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:1076:30574":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:5755:2372":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"9:709:2317":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:11074:20253":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:4166:2254":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:2361:2114":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:13047:19167":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11594:18212":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13478:19271":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:13148:19180":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:43246:7673":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:5900:2377":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:6359:15203":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:13024:19162":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:4379:12209":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:46099:2476":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"12:1518:14160":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:950:2005":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6463:15205":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:6985:1998":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:271:30514":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:21401:2433":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:3402:14271":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:3114:2049":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11468:7553":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:43373:8186":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:9577:15410":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:5945:12930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11528:15514":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:8796:15341":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:13231:19215":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:1663:9742":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:7872:15251":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:8241:15329":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:5938:12929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:12398:2511":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:43266:7674":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:6517:14182":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:5596:15170":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:9068:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:10075:15470":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:6546:7966":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:4217:14763":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4637:12234":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:4769:27371":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:40469:2192":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:1617:9739":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:7218:13725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:2657:14254":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:4259:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:8089:2180":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:5554:7969":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:1197:2008":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:43641:7564":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:2831:20995":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:4817:14931":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"3:229:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:3188:14269":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:39359:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:2636:30127":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:10420:15548":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:7601:1945":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:8229:2256":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:20884:2437":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:8493:1993":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:8974:23495":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:11951:18354":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:39258:7664":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:2411:14244":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:45331:2502":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5990:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:5492:2342":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:7434:12420":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:4775:12251":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:2476:2163":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"12:1138:2011":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:39266:7781":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:962:2007":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:3263:14270":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:42738:7639":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:7970:15257":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:8222:2195":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"3:0:434":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"12:1840:1998":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:8424:2318":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:1824:2068":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"12:985:2008":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:7483:15240":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:3632:14298":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:10419:2175":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:10506:15527":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13221:19214":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:8852:2381":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:6976:2021":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:7522:21286":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"18:0:1753":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4877:12262":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:9820:15506":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:3865:2218":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:2631:14253":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:10385:15555":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:12211:28198":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:355:1963":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:11556:2327":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:42461:7616":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:9475:8154":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:46411:2465":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:4568:19989":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:7210:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:40532:27705":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:2878:8029":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:9885:15509":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:6593:15209":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:11511:14194":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:6576:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:46655:7548":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:7481:12427":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:11419:7641":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:11217:15793":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:7688:2063":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:2882:8030":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:4749:14911":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:4246:2255":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:39376:27623":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:5189:7607":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:41654:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:8212:15328":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:1443:2002":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"12:810:2000":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"9:0:1745":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:1583:9735":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:2912:30081":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:2993:14266":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:3871:2217":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:39319:7784":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:5541:15168":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:2827:8020":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:12073:18362":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:42532:7632":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:10762:7630":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:2605:14252":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:40849:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:10837:2338":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"12:2198:32594":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:3532:1998":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:2341:14241":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:8185:2190":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:5374:15158":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:6877:15219":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:8240:2248":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:5441:7721":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:11882:1468":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:3977:2225":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:0:804":{"crate_id":6,"path":["libc"],"kind":"module"},"16:7093:15221":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:5432:2338":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:11606:18268":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:7849:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:1463:2031":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:8441:2319":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:9671:15422":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:8752:2151":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:39529:7974":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:1592:2016":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"12:2178:32592":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:4263:7753":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"9:382:14064":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:12955:18811":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:2916:30082":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:43560:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:7463:12424":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:45957:2507":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"12:393:32606":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:8526:15311":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:38904:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:4457:12219":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:30025:27505":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:6682:28126":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4422:12215":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:39590:7980":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:6252:15196":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:12850:18728":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:6528:2374":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:39667:7985":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:7497:15241":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:4805:12255":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"18:80:19352":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:11835:1979":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:4261:12198":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12087:18363":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:11880:729":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:11893:18349":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:13126:19177":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:5716:12912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"9:188:14009":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:13527:19297":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:40824:1993":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:7440:12421":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:13203:19207":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:6052:15184":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11576:18168":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:933:2003":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:1559:9733":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:6619:15210":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:10466:15558":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:44547:27698":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:4559:12228":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4346:12205":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:39730:7988":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"18:609:33782":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:11889:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:1612:30514":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:9475:15407":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5813:12920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4274:12199":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:11620:7647":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"9:111:13973":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:22837:2205":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9831:15507":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:1228:2009":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:6123:15187":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:4483:12222":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"15:193:14186":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:43624:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:41988:27714":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:44823:2474":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:11864:410":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4649:12235":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:1989:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:9947:15511":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:1788:2057":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:2366:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:5902:12925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12630:18627":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:11412:2203":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:9877:19648":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:1351:1993":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:11014:15681":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:484:21284":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:3667:2202":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11997:18356":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"11:44:14145":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:13214:19213":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:2252:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:10796:15310":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:1586:2015":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:5823:12921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10455:15549":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:4981:12272":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:10216:7637":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:6376:15204":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"12:60:32609":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:11267:21400":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:42652:7635":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:8868:2382":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:9919:1993":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:7426:15237":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:1065:2009":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:4750:2232":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:8234:2257":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:8822:33740":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:13141:19179":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13168:19203":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:6764:13352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4962:12271":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:11706:21402":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:43653:7562":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:9092:7590":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:13506:19295":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:62:8444":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:42592:7662":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:2465:14246":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:4673:12238":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"12:738:1997":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:11877:731":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:1981:2032":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:21619:27617":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:9086:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:46670:7549":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10497:15561":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"10:0:1746":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:5712:2364":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:3963:2223":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:8475:15307":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:7388:15235":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:4549:12227":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:10182:15473":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:10296:15523":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:8248:2200":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:42951:7664":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:5786:12880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:4115:2253":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11199:15792":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:11163:7656":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:7164:27623":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:4606:14888":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:40755:2303":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:1056:30510":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:9317:15387":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:1597:2017":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:2573:2156":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4313:12202":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:3126:26585":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:247:33738":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"12:632:1993":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:11639:18270":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:9382:15390":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:11787:18342":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:21748:27527":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:22339:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:7890:15252":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:38816:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"18:624:33777":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:10849:20172":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:813:2019":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:21710:27413":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:2894:14264":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:20458:27796":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12514:18572":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:12118:18365":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:40874:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:22306:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"9:586:13991":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"6:6000:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:5549:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:46533:2468":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:11830:23479":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:9433:15382":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:4051:7570":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:6171:15191":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:10694:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:10221:15550":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:9738:15432":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:11884:1470":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:2407:30130":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:44631:2429":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:7319:15231":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13393:19257":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:11708:18336":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:6472:14183":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:3430:2090":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:4:998":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:9303:15391":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:5472:15164":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:12874:18731":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:1995:2033":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:11368:15984":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:10283:15524":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:43611:2510":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:13134:19178":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:4402:12212":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:2793:14260":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:39567:27640":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:1550:9732":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:8368:15333":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:8401:2317":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:7665:1975":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:43223:7688":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11070:15743":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:9193:33733":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:7584:2234":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:904:1998":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:41417:7591":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:9601:15408":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:31773:25695":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"12:387:32610":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:12198:18431":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:2329:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:44677:2494":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:6298:15199":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:10350:15361":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:1903:15443":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:10630:2288":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:13536:19298":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:3929:2222":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:6359:1980":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:11485:18158":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:920:2000":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:48935:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:7201:13724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:4416:12214":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:11939:18353":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:3543:1994":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:5184:14208":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:7166:15222":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:39439:2097":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:2706:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:9712:15457":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:3953:30514":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:567:8827":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:10752:15360":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:42802:7668":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:21800:2210":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:5878:14209":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:38840:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:10422:2171":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:2933:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:1580:2014":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:7792:2098":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:41933:7818":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:2705:14256":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:2695:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:7909:15253":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:48552:2508":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:7343:15233":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"9:649:13980":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"9:920:13958":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:43361:8183":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:10245:15552":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:5805:12919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:5728:12914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:13039:19164":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:3277:1999":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:10583:15352":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:44477:2485":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:5495:2344":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:10933:21380":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"13:0:1742":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:4571:12229":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:4662:14896":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:2886:8031":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:1674:1071":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:12148:18367":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:7195:13723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:4094:2251":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:4451:12218":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:42917:7654":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:4849:14939":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:9021:15345":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:6555:7722":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:5014:25666":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"12:119:32587":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:3026:14268":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:40954:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4828:12257":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:43055:7679":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:6051:2513":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:9185:2075":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:2386:1759":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:8744:2337":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:11093:2386":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:3403:7727":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:20733:2434":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:42838:7669":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:9589:27178":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"7:0:1514":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:45177:2506":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:43369:8185":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:5959:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:4149:7766":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:7567:15245":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"18:538:19382":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:41234:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11661:18276":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:9539:15404":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:5563:2378":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:7173:8776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:5737:15174":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"18:755:19375":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:42926:7653":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:44507:2473":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11174:15790":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:42684:7672":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:9857:15487":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:3199:2175":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:7235:7696":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:43161:7685":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:4268:7754":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:41154:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:11888:1108":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:10159:15475":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8790:2341":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:6827:21400":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"6:4787:12253":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:4028:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:499:8819":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:4468:12220":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:20456:27799":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:1771:15409":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:925:2001":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:45074:27684":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:44584:27522":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:8666:15339":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:9766:2234":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:781:2018":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:4520:12225":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:6719:13348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:11886:777":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:6939:2355":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:4385:7761":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:5000:12275":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:42440:7625":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:39969:7962":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:7307:7718":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:3125:15474":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:2524:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:20774:2435":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13382:19256":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:3240:2172":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:4318:2249":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:9458:15421":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"18:491:33764":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:286:1890":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:5686:2363":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:6345:15202":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:4721:14907":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:10001:20990":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:10875:15365":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:3772:2203":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:7596:28831":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:39289:7782":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:10729:7629":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:7117:1992":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:3659:2032":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:5663:1998":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:6403:30514":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:3985:2227":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:39489:2045":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:40764:8118":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:2282:14238":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:42500:7615":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:153:14215":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:11384:8194":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:4262:14784":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:2527:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:12980:19159":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:39539:7975":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"12:725:1996":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:1514:9727":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:38958:8035":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:12046:18360":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"12:1832:1993":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:5172:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:7541:21398":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:5628:15171":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:2343:2108":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:45301:2499":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:44996:27514":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:3346:2139":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"18:113:19354":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:1704:9746":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"12:1555:14162":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:5556:2377":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:9805:15505":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:40840:1995":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:11909:18350":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13580:19306":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"14:221:14177":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:10476:15559":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:7023:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:11879:733":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:914:1999":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:43381:8188":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:46349:2500":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:6053:12961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:39920:27521":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:11868:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:2809:8018":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:8907:2365":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"12:300:32588":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:2433:14245":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:9387:20997":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:12278:18437":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11761:18340":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"15:214:14190":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:46287:2480":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:8055:15308":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:8981:15344":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:20424:27352":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:3283:2160":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:525:8821":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:7226:1888":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:10649:20611":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:7603:15246":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:2840:8025":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:39498:2149":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:5910:12926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:39406:1617":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:48948:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5793:15177":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:20477:27798":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:13354:19219":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:4476:12221":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:8174:2200":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"9:505:14140":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:578:8829":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:10546:15351":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:10462:1947":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:6790:15218":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:40552:27711":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"12:98:32593":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:6611:9670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12291:18443":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:505:8820":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:10973:15568":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:5703:15173":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:1739:8061":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:9092:2131":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:7001:31647":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:4301:12200":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:44276:2504":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"12:1120:14159":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:2772:7571":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"12:834:2005":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:21:670":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:1747:9750":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:6091:21391":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:31777:8089":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:6816:33054":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:2208:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:12909:18796":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:46580:7543":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:42610:7658":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:5477:7978":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:3192:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:39961:7960":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:7487:12428":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:1609:9738":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:39312:7783":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:6070:15185":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:6781:15217":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:40781:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:11315:15968":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:10062:15472":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:41114:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:4545:14875":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:10321:15519":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:10921:15566":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:4751:12248":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:40773:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:42898:7666":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:6521:13339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:21635:27660":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:48974:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2360:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:4868:2139":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:10682:15357":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4389:12210":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:9353:7815":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:487:8817":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:10108:15467":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:41970:2317":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:4988:12273":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:10949:15567":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:2957:1884":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:2217:2105":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:10724:20266":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:860:1994":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:1710:9747":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:7521:13913":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4396:12211":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:40611:2196":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:2852:8023":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:11559:18165":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:1575:1999":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:46551:7540":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:12948:18799":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:7015:1995":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:6611:25663":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:13572:19304":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:10123:7635":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:21293:2427":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12617:18575":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:6241:15195":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:6123:23483":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:2324:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:6747:2426":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13279:19216":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4662:12237":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:644:33767":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:7298:15229":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:10161:7636":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:1242:2011":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:11615:7649":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:9304:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:7942:15255":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:9071:33745":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:4786:14924":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:4882:12263":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:481:8816":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:10357:21393":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:43603:2509":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:3177:8034":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:1716:2245":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:4983:25666":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2615:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:43429:2425":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:5789:8418":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:7929:15254":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"18:636:33786":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:5327:2333":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:10845:15363":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:4115:2139":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:39326:7785":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:5240:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:10314:2337":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:6668:33007":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:7329:15232":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:9339:15385":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:43389:8201":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:8921:23487":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"18:727:19373":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:40486:2193":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:42450:7626":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:11881:1471":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:4284:30531":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:4743:12247":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:4714:12243":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:2784:7996":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:6743:13350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:1827:2036":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:4921:14963":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:43086:7683":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:4441:14819":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:4766:12250":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:11149:8144":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:7671:2012":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:2601:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:4086:2250":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:3610:30514":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:6654:15211":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:2539:2164":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:10944:21374":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:21764:27519":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:8911:33754":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:638:1974":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:8216:2306":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:3010:14267":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:5843:12922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:11734:18338":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:39936:7958":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:4004:28304":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:9722:15454":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:46606:7545":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:7484:25660":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:39549:7976":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:10332:15554":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:44446:27513":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:4357:14807":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:5815:15178":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:2788:2421":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:7034:23042":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"9:592:13978":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:20853:2234":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:4404:2261":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:11017:2340":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:1040:30572":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:9909:15466":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:42542:7633":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:10138:2347":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:11813:18344":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:3316:2181":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:5800:12918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:7559:7963":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11617:18269":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"9:896:13957":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:13114:19174":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:44921:2466":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:40705:1994":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:3151:2016":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:4347:30531":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:719:19372":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:1645:7942":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:5690:12910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4703:12242":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:4632:2261":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:1786:2056":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"11:36:32584":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:20439:27352":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:40446:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:11106:15751":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:46708:7551":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:7135:33069":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"18:671:19368":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:6567:15208":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:11666:7678":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:4888:14954":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:2967:1887":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:8274:2286":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:1604:9737":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:9681:15456":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:2702:1882":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:21305:27355":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:493:8818":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11271:15957":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:4671:2237":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:594:8831":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:48922:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:42933:7663":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"14:0:1749":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:3118:1993":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:8951:33739":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:540:8823":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7357:15234":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:11247:15845":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:4989:2360":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:8510:14204":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:4498:2277":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:8979:23485":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:6322:25663":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:2359:2113":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:3161:2174":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:38926:1985":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:9658:15455":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:8333:2295":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:5931:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:42756:7637":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:7123:7965":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:386:15323":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:21141:2459":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:21826:2212":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:10257:15526":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:1527:9729":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"12:2184:27017":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:1652:9741":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:9375:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:42522:7634":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:44777:2486":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:2862:8026":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:4440:7763":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:9293:15392":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:42578:7665":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:4890:12264":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:39449:2096":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:12361:18511":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:10445:15363":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:7857:25658":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:11547:15513":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:43408:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:7058:1995":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:10233:15551":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"0:0:1644":{"crate_id":0,"path":["winapi"],"kind":"module"},"12:1029:2010":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:39236:7789":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:8806:28830":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:7704:2070":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:9274:15374":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:39619:7970":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:6059:12110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:39558:7977":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:2518:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:4554:2222":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:96:19353":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:41410:7590":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:38699:7747":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:553:8825":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:7237:15224":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:12816:18685":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:6496:15206":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:1762:8060":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:2815:8017":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:4929:12268":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:9081:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"18:507:33767":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:9098:7588":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:4795:12254":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:3439:26082":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:50262:27619":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:10854:15364":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:8701:15340":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:6594:9667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:6757:13351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:7809:2102":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:48987:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:878:1996":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:4727:2239":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:8256:2258":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:9401:15388":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:3016:2047":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:13413:19261":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:41949:7817":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:6186:15192":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:41941:27716":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:42513:7631":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:2998:7575":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:13366:19254":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"12:1845:1999":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:4720:12244":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10625:15354":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:6059:33089":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:39951:7959":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:8510:2323":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:41958:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:9488:15406":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:9096:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:1554:2139":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:2534:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:6676:15212":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:10950:21375":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:588:1967":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:12337:15363":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:21727:27639":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:11867:1033":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:4635:14893":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:42856:7670":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:12510:2050":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:3130:31661":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:4727:12245":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:3120:21616":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:8798:1993":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:1564:1993":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:41669:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:7473:15325":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11515:18160":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:6961:2051":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:1677:9743":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:7956:15256":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:1921:7577":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4900:12265":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:21399:2234":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:41403:7582":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:2906:30511":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:2946:2029":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:43134:7684":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:12238:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:5122:15140":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10374:15522":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:43365:8184":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:6286:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:7044:33081":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"12:697:2002":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"15:0:1750":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:43040:7676":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:929:2002":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:7452:12423":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:21675:2208":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:42487:7614":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:9627:15415":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:48961:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:2087:31662":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:44945:2467":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:11486:21158":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:12033:18359":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:38985:15259":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:41034:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:39581:7979":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:4772:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:39179:1970":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:5313:2332":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:8561:15312":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"18:614:33774":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:10824:2070":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:11876:734":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:3728:1999":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:13158:19202":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:2482:7806":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:2771:14259":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:3238:2171":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:7557:15244":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:4297:14795":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:3201:2176":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:6399:2373":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:48909:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:39206:27439":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:6993:2022":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:10209:2336":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:44875:2481":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:40575:2204":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:40503:2194":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:7386:13884":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:3901:2219":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:3269:7574":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:11233:19649":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:4611:2216":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11974:18355":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"18:531:19381":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:10207:15539":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:2371:2119":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:2487:14247":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5163:15157":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12748:18637":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:878:1993":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:1432:2001":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:13374:19255":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:30564:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:21545:27333":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:1382:1995":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:10828:20606":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:13518:19296":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:11170:2348":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:1571:9734":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:4893:2294":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:45097:27681":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:9040:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:11300:15965":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11034:15682":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:5996:15181":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:6667:13346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:41773:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:39942:2181":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:630:31656":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:11862:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:679:1978":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"12:1872:2017":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:2705:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:42634:2153":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:46591:7544":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:3670:2201":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:3457:14272":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:11356:15983":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:7802:2101":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:6161:15190":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:7475:12426":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:6970:1995":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:534:1948":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:43018:7675":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:22405:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:20608:2439":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:11518:14194":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"12:1836:1995":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:11391:2201":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:12638:18629":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:9052:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:6541:13341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:1021:15393":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:5203:14206":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:4327:14801":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7543:15243":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:1731:9749":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:1687:9744":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:8351:2307":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"12:2190:32591":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:8014:15259":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:11874:631":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:39691:7971":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:11887:1524":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"7:79:13936":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:3373:2125":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:2868:14263":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:44707:2498":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:4841:12258":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:3020:2048":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:40722:2302":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:7980:15258":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:8180:2199":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:2579:14251":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:12265:18436":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:12190:7812":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:3923:2221":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:12008:18357":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:7372:32780":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:7290:1999":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:7396:15236":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:46617:7546":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:7873:2032":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:11595:7652":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:8148:2150":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:6137:15188":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:4385:14811":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:2867:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"16:5981:33027":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:2703:7572":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:561:8826":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:2842:14262":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:7865:2165":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:1849:2076":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:7469:12425":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"9:19:14029":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:12455:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:45751:2488":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:2798:8016":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:10121:15468":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:9982:2068":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:12860:18729":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:3217:28062":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:2275:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:3187:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:11863:923":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:7278:15227":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:967:15389":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:5447:15162":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:45537:2479":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:13007:19161":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:10360:15520":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:2261:14210":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:8750:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:5951:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:46571:7542":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:40832:1994":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:45255:2495":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:10088:15471":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:12263:7813":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:39283:1970":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"9:977:13961":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:4439:12217":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:4334:12204":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:8762:2339":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:217:7580":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:1931:15403":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"18:574:33767":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:4539:12226":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:10416:2173":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:4862:12260":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:4564:19985":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:39913:7956":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:39520:7968":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:5761:15175":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:11865:1487":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:1568:1995":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:2189:30615":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:20886:2435":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13327:19217":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:2707:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12926:18797":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:4394:7762":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:4340:7760":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:41274:2361":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:7267:15226":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"18:515:19380":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:6634:13343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:5724:27878":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:38882:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:20479:27794":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:7428:12419":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12134:18366":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13091:19171":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:40713:1995":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:3164:31655":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:5679:2362":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:1589:9736":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:4426:2262":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:521:19377":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:39610:7981":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:11161:15789":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:473:8815":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:2116:30643":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:1962:15427":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:242:33750":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:5890:12924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:46495:2503":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:4016:28307":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:4910:12266":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:10088:7642":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:6722:30519":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:39599:7989":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:8162:15327":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:10434:15557":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:6226:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:11869:1344":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:11684:18277":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:39364:2095":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:861:2020":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:5741:12915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:939:2004":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:9968:2153":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:7469:15239":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:6488:8867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:9111:2419":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:43357:8182":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:20671:2441":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:22372:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:5948:7990":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:2535:14249":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:13436:19262":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:22240:1955":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:5917:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4597:12231":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:9100:7589":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:4369:12208":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:10226:20994":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:4921:12267":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:4224:12195":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"14:187:14178":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:2549:21376":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:1986:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:9382:2099":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:4489:12223":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:7164:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:10997:15569":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:11147:21395":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:119:8498":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:9930:15486":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:4085:2139":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:38992:28302":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:1645:9740":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:44344:2472":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"18:660:19367":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"8:0:1744":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:6548:2289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:766:19376":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:10654:26979":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"12:1003:2009":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:42888:2154":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:7160:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4697:12241":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:8056:15260":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:11368:8192":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:11345:8195":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:13059:19168":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:4781:12252":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:11828:18345":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:20725:2234":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:30581:7796":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:7585:1965":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12756:18679":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:13100:19172":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"12:2069:2009":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:6330:15201":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:8168:2154":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:10608:15353":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"12:762:1999":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:2210:2100":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:7133:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:44376:2505":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:41687:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:11841:18346":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:8839:2380":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:8339:15332":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:8631:15338":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:9022:20262":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:13459:19265":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:3599:14289":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:5460:15163":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:2320:14240":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:5759:12917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12934:18798":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:6109:15186":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4353:12206":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:0:1752":{"crate_id":17,"path":["object"],"kind":"module"},"2:6730:7954":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:10822:15362":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:3747:30514":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4218:12194":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:4519:14873":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:9362:15346":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:11500:18159":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:4314:2139":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:9119:21168":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"17:11721:18337":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:6204:1998":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:10774:15361":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:9371:15347":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:12164:18368":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:8820:2379":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:2213:2104":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:7127:7964":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:12550:18573":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:11164:23496":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:690:19370":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:39681:7986":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:2683:14255":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6316:15200":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:8811:29420":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"12:1044:14157":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"12:1628:32604":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:13594:19340":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:7309:15230":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:8300:2236":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:9574:21376":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:5660:12851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:1404:1996":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:6210:15194":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:22207:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:1753:27515":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:11878:732":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:21793:27702":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:31737:2345":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:22174:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:9943:1994":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:6178:2377":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}