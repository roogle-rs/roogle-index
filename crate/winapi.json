{"root":"0:0:1562","crate_version":"0.3.9","includes_private":false,"index":{"2:3272:2416":{"id":"2:3272:2416","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3273:163","2:3274:881"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13178:50468":{"id":"2:13178:50468","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3245:1984":{"id":"2:3245:1984","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247:163","2:3248:241"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3090:204":{"id":"2:3090:204","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3092:119","2:3093:1373"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3292:2424":{"id":"2:3292:2424","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3294:1072"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3255:2409":{"id":"2:3255:2409","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3257:163","2:3258:860"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5774:57124":{"id":"5:5774:57124","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8073:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8073:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13212:50132":{"id":"2:13212:50132","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:12813:2480","prim@char":"1:15725:1687"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13203:2068":{"id":"2:13203:2068","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49102:1877","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3012:2530":{"id":"2:3012:2530","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3011:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13526:130":{"id":"2:13526:130","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13527:163","2:13528:982"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10119:2363":{"id":"2:10119:2363","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10120:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13176":{"id":"2:13176","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12273:1301","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13177:761","2:13178:50468","2:13179:56464","2:13180:56465","2:13182:56466","2:13185:54097","2:13186:56467","2:13187:279","2:13188:50480","2:13189:50476","2:13191:50477","2:13193:50478","2:13195:50479","2:13197:2063","2:13198:56468","2:13199:50500","2:13200:50501","2:13201:2891","2:13202:2509","2:13203:2068","2:13204:28136","2:13205:28126","2:13206:3411","2:13207:56469","2:13208:28121","2:13209:50517","2:13212:50132","2:13215:50134","2:13218:3909","2:13222:3910","2:13226:50508","2:13229:27993","2:13232:50511","2:13235:56470","2:13238:56471","2:13241:50513","2:13244:50515","2:13247:56472","2:13250:56473","2:13253:1772","2:13256:56474","2:13259:56475","2:13262:56476","2:13265:56477","2:13267:56478","2:13269:56479","2:13271:56480","2:13272:56481","2:13273:56482","2:13276:56483","2:13279:10616","2:13282:50518","2:13285:56484","2:13288:56485","2:13291:56486","2:13294:2716","2:13296:3049","2:13297:50419","2:13298:50420","2:13299:50421","2:13300:56487","2:13302:1969","2:13303:56488"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6343:1811":{"id":"1:6343:1811","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6344:2279","1:6345:2280","1:6346:54041","1:6347:54277","1:6349:54281","1:6351:54278","1:6352:54279","1:6354:54280"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10425:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3396:109":{"id":"2:3396:109","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:200","2:3398:514"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13247:56472":{"id":"2:13247:56472","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47158:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3077:72":{"id":"2:3077:72","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3079:56260"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13285:56484":{"id":"2:13285:56484","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15725:1687","self::pattern":"2:12813:2480"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12838:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3426:123":{"id":"2:3426:123","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3428:351"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:124","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13241:50513":{"id":"2:13241:50513","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:12813:2480","prim@char":"1:15725:1687","str::rsplitn":"1:15730:1692"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49220:2833","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3314:2150":{"id":"2:3314:2150","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3316:163","2:3317:330"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13259:56475":{"id":"2:13259:56475","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"1:15730:1692","prim@char":"1:15725:1687","`DoubleEndedIterator`":"2:8233:112","self::pattern":"2:12813:2480"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49266:2864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13262:56476":{"id":"2:13262:56476","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:8233:112","self::pattern":"2:12813:2480","prim@char":"1:15725:1687","str::match_indices":"1:15730:1692"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49284:2865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12838:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13244:50515":{"id":"2:13244:50515","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:15730:1692","prim@char":"1:15725:1687","self::pattern":"2:12813:2480"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49238:2834","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12838:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3189:199":{"id":"2:3189:199","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5627:1831":{"id":"1:5627:1831","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5628:52191","1:5629:52193","1:5630:52192","1:5631:52194"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10115:171":{"id":"2:10115:171","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10116:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3319:2436":{"id":"2:3319:2436","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3321:163","2:3322:1194"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13299:50421":{"id":"2:13299:50421","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13186:56467":{"id":"2:13186:56467","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3339:2445":{"id":"2:3339:2445","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:331"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13267:56478":{"id":"2:13267:56478","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3083:127":{"id":"2:3083:127","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3085:651"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5683:1835":{"id":"1:5683:1835","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5684:52488","1:5685:52489","1:5686:52490","1:5687:52491"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13200:50501":{"id":"2:13200:50501","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15730:1692"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13250:56473":{"id":"2:13250:56473","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47158:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12838:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13256:56474":{"id":"2:13256:56474","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:15730:1692","prim@char":"1:15725:1687","self::pattern":"2:12813:2480","`DoubleEndedIterator`":"2:8233:112"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49338:2868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12838:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13177:761":{"id":"2:13177:761","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15725:1687"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4621:1874":{"id":"1:4621:1874","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4622:51747","1:4623:51748","1:4624:51749","1:4626:1873","1:4627:51750","1:4629:50508","1:4630:3411"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4539:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10356:2023":{"id":"2:10356:2023","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10357:138","2:10358:29423","2:10359:53969"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6094:202":{"id":"5:6094:202","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6095:57746"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13209:50517":{"id":"2:13209:50517","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:12813:2480","prim@char":"1:15725:1687"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5766":{"id":"5:5766","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5586:1301","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5767:57122","5:5768:1881","5:5771:57123","5:5774:57124","5:5786:57125","5:5787:57126","5:5788:1903","5:5789:51611","5:5790:51612"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5561:1849":{"id":"1:5561:1849","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5562:3881","1:5563:54097"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10425:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8233:112":{"id":"2:8233:112","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8234:54100","2:8235:54101","2:8236:54102","2:8237:54103","2:8241:54104","2:8244:3910"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8384:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13997:1977":{"id":"2:13997:1977","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13998:51878","2:13999:51879","2:14000:51880","2:14001:51881","2:14002:51882","2:14003:51883","2:14004:49989"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13222:3910":{"id":"2:13222:3910","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:15725:1687","`None`":"2:47158:158","self::pattern":"2:12813:2480"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47158:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12838:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3297:2431":{"id":"2:3297:2431","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3298:163","2:3299:921"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3182:1797":{"id":"2:3182:1797","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13279:10616":{"id":"2:13279:10616","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12813:2480","prim@char":"1:15725:1687"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47158:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9118:2158":{"id":"2:9118:2158","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10107:2359":{"id":"2:10107:2359","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10108:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12838:2483":{"id":"2:12838:2483","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12840:54100","2:12841:55169","2:12842:55170"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12832:2482","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23468:2603":{"id":"2:23468:2603","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23469:2607"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23464:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3187:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10117:2362":{"id":"2:10117:2362","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10118:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3304:2148":{"id":"2:3304:2148","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3306:163","2:3307:325"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5786:57125":{"id":"5:5786:57125","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8073:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8073:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13206:3411":{"id":"2:13206:3411","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49370:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8185:128":{"id":"2:8185:128","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8187:654"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12260:3056":{"id":"2:12260:3056","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12261:2732","2:12262:56151"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3218:1798":{"id":"2:3218:1798","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8258:1800":{"id":"2:8258:1800","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8259:761","2:8260:50468"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8384:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5705:1838":{"id":"1:5705:1838","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5706:52116"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4682:2401":{"id":"2:4682:2401","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4683:2732","2:4684:54910","2:4685:52506"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7681:2112":{"id":"1:7681:2112","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7682:51941"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13185:54097":{"id":"2:13185:54097","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12284:3014"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3348:2450":{"id":"2:3348:2450","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3350:1198"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6365:1812":{"id":"1:6365:1812","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6366:52269","1:6367:36217","1:6368:52270","1:6369:52271","1:6370:52272","1:6371:52273"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10425:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13265:56477":{"id":"2:13265:56477","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3086:205":{"id":"2:3086:205","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3088:119","2:3089:1374"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5522:3064":{"id":"5:5522:3064","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5524:163","5:5525:29173"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22625:1943":{"id":"2:22625:1943","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22615:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13303:56488":{"id":"2:13303:56488","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15725:1687"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49433:2874","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5787:57126":{"id":"5:5787:57126","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:421:1802","`String`":"5:8073:196"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1802","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7778:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8073:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3155:108":{"id":"2:3155:108","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3156:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10714:194":{"id":"2:10714:194","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10716:163","2:10717:50476","2:10718:50477","2:10719:50478","2:10720:50479","2:10721:721","2:10722:722"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10705:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5555:1847":{"id":"1:5555:1847","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5556:52484","1:5557:3157"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10425:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8148:2595":{"id":"2:8148:2595","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8150:52526"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3343:2447":{"id":"2:3343:2447","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3345:1195"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22819:2608":{"id":"2:22819:2608","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23468:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22810:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13207:56469":{"id":"2:13207:56469","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49380:2869","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13288:56485":{"id":"2:13288:56485","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15725:1687","self::pattern":"2:12813:2480"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12832:2482":{"id":"2:12832:2482","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12834:2502","2:12835:890","2:12836:56114","2:12837:56115"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3325:2439":{"id":"2:3325:2439","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3327:163","2:3328:1197"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13300:56487":{"id":"2:13300:56487","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15725:1687"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49415:2873","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13189:50476":{"id":"2:13189:50476","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47158:158"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47158:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10714:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10714:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13272:56481":{"id":"2:13272:56481","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5790:51612":{"id":"5:5790:51612","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15730:1692"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8073:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4614:1871":{"id":"1:4614:1871","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4615:49860","1:4616:36069","1:4617:49861","1:4618:49862"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13232:50511":{"id":"2:13232:50511","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:8233:112","str::split":"1:15730:1692","self::pattern":"2:12813:2480","prim@char":"1:15725:1687"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49134:2830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12838:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13235:56470":{"id":"2:13235:56470","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12813:2480","str::rsplit_terminator":"1:15730:1692","`DoubleEndedIterator`":"2:8233:112","str::split":"1:15730:1692","prim@char":"1:15725:1687"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49166:2860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5771:57123":{"id":"5:5771:57123","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8073:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8073:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13202:2509":{"id":"2:13202:2509","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15725:1687"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49092:2856","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13204:28136":{"id":"2:13204:28136","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15730:1692"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49390:2870","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13298:50420":{"id":"2:13298:50420","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10098:103":{"id":"2:10098:103","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10099:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5693:1836":{"id":"1:5693:1836","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5694:49949"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10311:134":{"id":"2:10311:134","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10312:685","2:10314:54695"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3485:2531":{"id":"2:3485:2531","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3487:722"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3481:2026","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3266:2406":{"id":"2:3266:2406","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3268:163","2:3269:1071"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3423:122":{"id":"2:3423:122","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:350"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3426:123","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3276:1985":{"id":"2:3276:1985","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3278:242"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10113:2353":{"id":"2:10113:2353","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10114:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5518:3062":{"id":"5:5518:3062","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5520:163","5:5521:405"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:5789:51611":{"id":"5:5789:51611","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15730:1692"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8073:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3633:203":{"id":"2:3633:203","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3634:163","2:3635:2453","2:3636:656","2:3637:343"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3638:129","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:203","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5788:1903":{"id":"5:5788:1903","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8073:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8073:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6696:1811":{"id":"1:6696:1811","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6697:54042"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10425:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13205:28126":{"id":"2:13205:28126","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15730:1692"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49399:2871","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:772:201":{"id":"5:772:201","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:3070","5:774:54805","5:775:54806"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12752:2091":{"id":"2:12752:2091","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12753:118","2:12754:49963"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9205:1940":{"id":"1:9205:1940","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9206:52130","1:9207:52131","1:9208:52132","1:9209:52133","1:9210:2902","1:9211:35591","1:9212:52129"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10425:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3904:67":{"id":"2:3904:67","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3905:1386"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:3331:2442":{"id":"2:3331:2442","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3333:326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13198:56468":{"id":"2:13198:56468","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15730:1692","crate::ops::IndexMut":"2:3485:2531","str::slice_unchecked":"1:15730:1692"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2865:159":{"id":"2:2865:159","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2866:388","2:2867:2673","2:2868:2670","2:2869:53999"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:0:1562":{"id":"0:0:1562","crate_id":0,"name":"winapi","span":{"filename":"src/lib.rs","begin":[6,0],"end":[71,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":[]}},"2:13179:56464":{"id":"2:13179:56464","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3463:2399":{"id":"2:3463:2399","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3465:213","2:3466:188","2:3467:56077"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13197:2063":{"id":"2:13197:2063","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3481:2026","str::slice_mut_unchecked":"1:15730:1692","`str`":"1:15730:1692"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13302:1969":{"id":"2:13302:1969","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15725:1687"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49424:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6591:1834":{"id":"1:6591:1834","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6592:52380","1:6593:52306","1:6594:52307","1:6595:52309","1:6596:52308","1:6597:52310","1:6598:52311","1:6599:52313","1:6600:52314","1:6601:52317","1:6602:52318","1:6603:52319","1:6604:52320","1:6605:52321","1:6606:52322","1:6607:52315","1:6608:52316"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8659:2025":{"id":"2:8659:2025","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8384:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3644:2453":{"id":"2:3644:2453","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3646:53159"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13182:56466":{"id":"2:13182:56466","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15730:1692"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10048:1846":{"id":"2:10048:1846","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10049:1485","2:10050:55281","2:10052:49988"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3260:2411":{"id":"2:3260:2411","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3262:163","2:3263:529"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10109:2360":{"id":"2:10109:2360","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10110:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13226:50508":{"id":"2:13226:50508","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"1:15730:1692","`DoubleEndedIterator`":"2:8233:112","self::pattern":"2:12813:2480","prim@char":"1:15725:1687","str::split_whitespace":"1:15730:1692"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49116:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13271:56480":{"id":"2:13271:56480","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13276:56483":{"id":"2:13276:56483","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12813:2480","prim@char":"1:15725:1687"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5768:1881":{"id":"5:5768:1881","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8073:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8073:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5649:1834":{"id":"1:5649:1834","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5650:54547","1:5651:49949","1:5652:52116","1:5653:54548","1:5654:2279","1:5655:2280","1:5656:54549","1:5657:1265","1:5658:54550","1:5659:54551","1:5660:54552","1:5661:54553","1:5662:54554","1:5663:54555","1:5664:54556","1:5665:54557"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9119:2157":{"id":"2:9119:2157","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3250:1986":{"id":"2:3250:1986","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3252:163","2:3253:1316"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13187:279":{"id":"2:13187:279","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15739:1701","str::as_mut_ptr":"1:15730:1692"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5697:1830":{"id":"1:5697:1830","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5698:54361"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10425:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5767:57122":{"id":"5:5767:57122","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1802","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7778:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1802","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7778:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2829:165":{"id":"2:2829:165","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2831:575","2:2832:875"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10321:138":{"id":"2:10321:138","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10322:622","2:10323:1775","2:10324:51944","2:10325:51945","2:10326:51946","2:10327:51947","2:10328:51948","2:10329:51949","2:10330:51950","2:10331:51951","2:10332:51952","2:10333:51953","2:10334:51954","2:10335:51955","2:10336:51956","2:10337:1485"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6693:1946":{"id":"1:6693:1946","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6694:51739","1:6695:51740"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10425:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8198:1801":{"id":"2:8198:1801","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8200:35589","2:8202:4109","2:8203:52148"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1075:1967":{"id":"1:1075:1967","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:3070","1:1077:3049","1:1078:51611","1:1079:51612","1:1080:50419","1:1081:50420","1:1082:50421"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2834:116":{"id":"2:2834:116","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3288:2422":{"id":"2:3288:2422","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3290:530"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8384:149":{"id":"2:8384:149","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8385:2732","2:8386:890","2:8387:52506","2:8388:468","2:8390:50474","2:8393:52507","2:8394:52508","2:8395:2551","2:8396:2535","2:8398:2554","2:8400:2545","2:8401:52509","2:8403:809","2:8406:52510","2:8413:2540","2:8415:2541","2:8418:2539","2:8419:2547","2:8420:2550","2:8422:2553","2:8424:2546","2:8427:1269","2:8428:2552","2:8429:2549","2:8433:52511","2:8436:2542","2:8437:2543","2:8438:2544","2:8440:49989","2:8441:1807","2:8443:52512","2:8446:52513","2:8448:52514","2:8458:52515","2:8473:52516","2:8475:52517","2:8479:52518","2:8488:52519","2:8491:52520","2:8493:52521","2:8496:252","2:8503:269","2:8510:3909","2:8517:52522","2:8526:52523","2:8536:983","2:8543:52524","2:8550:2673","2:8551:2670","2:8552:2675","2:8564:2674","2:8571:2672","2:8583:2671","2:8590:2548","2:8591:52525","2:8596:2537","2:8599:2536","2:8602:2538","2:8603:52526","2:8605:52527","2:8607:388","2:8610:52528","2:8613:966","2:8616:52529","2:8619:575","2:8622:52530","2:8625:875","2:8627:794","2:8629:760","2:8631:683","2:8633:666","2:8635:50541","2:8636:50542","2:8644:50543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3420:1799":{"id":"2:3420:1799","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3421:549"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4539:1845":{"id":"1:4539:1845","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4540:2213","1:4541:54369","1:4543:54370","1:4544:54371","1:4545:1868","1:4546:54372","1:4547:54054","1:4549:54373","1:4550:49989","1:4551:2068","1:4552:2535","1:4554:2552"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13925:133":{"id":"2:13925:133","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13926:253","2:13927:491","2:13928:256","2:13929:1048"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2777:2602":{"id":"2:2777:2602","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2779:55341"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:92","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3481:2026":{"id":"2:3481:2026","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3483:163","2:3484:721"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3177:192":{"id":"2:3177:192","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8189:143":{"id":"2:8189:143","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8190:2732","2:8191:1996","2:8192:736"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13297:50419":{"id":"2:13297:50419","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13253:1772":{"id":"2:13253:1772","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15725:1687","self::pattern":"2:12813:2480","`DoubleEndedIterator`":"2:8233:112","str::matches":"1:15730:1692"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49320:2867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22774:12075":{"id":"2:22774:12075","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22775:55200","2:22776:55201","2:22777:55202"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22767:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13229:27993":{"id":"2:13229:27993","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12813:2480","prim@char":"1:15725:1687"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12605:2827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2774:92":{"id":"2:2774:92","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2776:1757"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:7713:2429":{"id":"2:7713:2429","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7714:55211","2:7715:55212","2:7716:55209","2:7717:55207","2:7718:55213","2:7719:55210","2:7720:55208"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:98","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8666:2428":{"id":"2:8666:2428","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7713:2429","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4596:1846":{"id":"1:4596:1846","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4597:1775","1:4598:49984","1:4600:49985","1:4601:3333","1:4602:49986","1:4603:49987","1:4604:49988","1:4613:49989"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12823:2479":{"id":"2:12823:2479","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12825:2482","2:12826:55452","2:12827:55453","2:12828:55454","2:12829:55456","2:12830:55455","2:12831:55457"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2565:119":{"id":"1:2565:119","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2566:52297","1:2568:1670","1:2569:54616","1:2570:54617"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10098:103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10105:111","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2799:98":{"id":"2:2799:98","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2800:382","2:2801:384"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13191:50477":{"id":"2:13191:50477","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47158:158"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47158:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10714:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10714:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13291:56486":{"id":"2:13291:56486","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12813:2480","prim@char":"1:15725:1687"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12838:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3080:141":{"id":"2:3080:141","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3082:54239"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10105:111":{"id":"2:10105:111","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10106:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13193:50478":{"id":"2:13193:50478","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10714:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10714:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3280:1987":{"id":"2:3280:1987","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3282:1317"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4899:1923":{"id":"1:4899:1923","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4900:1994","1:4901:54513"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3621:2947":{"id":"2:3621:2947","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3552:2946","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13294:2716":{"id":"2:13294:2716","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12752:2091","`FromStr`":"2:12752:2091"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47285:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12752:2091","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12752:2091","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13208:28121":{"id":"2:13208:28121","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49408:2872","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6857:1814":{"id":"1:6857:1814","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6858:54820"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3552:2946":{"id":"2:3552:2946","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3554:55434","2:3555:55435","2:3556:50517"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6765:1815":{"id":"1:6765:1815","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6766:54719"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13269:56479":{"id":"2:13269:56479","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8662:2426":{"id":"2:8662:2426","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8384:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13541:142":{"id":"2:13541:142","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13542:163","2:13543:142","2:13544:735"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3335:2430":{"id":"2:3335:2430","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3337:328"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6767:1817":{"id":"1:6767:1817","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6768:52165"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13282:50518":{"id":"2:13282:50518","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12813:2480","prim@char":"1:15725:1687"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47158:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12838:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3186:197":{"id":"2:3186:197","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3638:129":{"id":"2:3638:129","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3640:657"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:203","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13273:56482":{"id":"2:13273:56482","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:12813:2480","prim@char":"1:15725:1687"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12843:2484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3187:100":{"id":"2:3187:100","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:98","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13199:50500":{"id":"2:13199:50500","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15730:1692"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3429:124":{"id":"2:3429:124","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3431:163","2:3432:352"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3679:2459":{"id":"2:3679:2459","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3284:2420":{"id":"2:3284:2420","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3286:861"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13215:50134":{"id":"2:13215:50134","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:12813:2480","prim@char":"1:15725:1687"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12838:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8152:2594":{"id":"2:8152:2594","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8154:52527"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3716:2458":{"id":"2:3716:2458","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3309:2149":{"id":"2:3309:2149","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3311:163","2:3312:327"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13180:56465":{"id":"2:13180:56465","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13218:3909":{"id":"2:13218:3909","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15725:1687","self::pattern":"2:12813:2480","`None`":"2:47158:158"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47158:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13296:3049":{"id":"2:13296:3049","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6463:1949":{"id":"1:6463:1949","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6464:52368","1:6465:52369"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3409:1882":{"id":"2:3409:1882","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3410:516"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3396:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3074:73":{"id":"2:3074:73","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3076:280"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5635:1832":{"id":"1:5635:1832","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5636:52116","1:5637:54198","1:5638:54199"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13238:56471":{"id":"2:13238:56471","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:15730:1692","self::pattern":"2:12813:2480","prim@char":"1:15725:1687","str::split_terminator":"1:15730:1692"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49184:2861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12823:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12838:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3185:198":{"id":"2:3185:198","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10111:2361":{"id":"2:10111:2361","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10112:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13201:2891":{"id":"2:13201:2891","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15725:1687"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49086:2855","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2875:166":{"id":"2:2875:166","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2877:966","2:2878:794","2:2879:760","2:2880:683","2:2881:666"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5643:1833":{"id":"1:5643:1833","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5644:52116","1:5645:52351"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13188:50480":{"id":"2:13188:50480","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15739:1701"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6769:1818":{"id":"1:6769:1818","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6770:54217"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13195:50479":{"id":"2:13195:50479","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10714:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10714:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12843:2484":{"id":"2:12843:2484","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12838:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"paths":{"5:5522:3064":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:3396:109":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:49220:2833":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:4023:39337":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:9780:2813":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:50865:2640":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:6691:3542":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:5683:1835":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:50008:29176":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:2866:3720":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:6870:39516":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:4574:1860":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"5:6355:3139":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:3260:2411":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:1472:1999":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:12521:48096":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"12:925:2001":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:51398:2613":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:48468:2478":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12507:48095":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:1572:37231":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:1619:2009":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:49074:2598":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:6644:40767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:8035:3155":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:4331:39368":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:23726:2723":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:2634:3186":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:10700:110":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:3928:1999":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:24190:2915":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:10979:1877":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:3182:1797":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:46424:2569":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"12:1651:3373":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:4417:42090":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:3365:3711":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:11519:43835":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:8354:184":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:9719:43204":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:4651:2524":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:13685:49255":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:10716:1889":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:1658:37238":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:599:36348":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4193:39355":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"12:784:2002":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:4961:2781":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:10253:3788":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:45573:177":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:8084:3071":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:6152:3458":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:1446:1997":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:4539:1845":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:1642:2011":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:10938:43505":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:11653:43943":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:49836:2883":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:12946:48638":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:13564:49241":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:7333:167":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:46374:2579":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13377:48876":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:6769:1818":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:1748:57322":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:46038:2874":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:8198:1801":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:13192:48746":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11572:43903":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11147:43213":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:49677:2495":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:3607:3202":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:4614:42162":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:11314:2071":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:10425:1821":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:47345:1996":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:3990:39333":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:7477:3481":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4523:39391":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:161:36030":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:11062:2829":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:3339:2445":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:5753:3517":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:37323:2669":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:48173:69":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"15:269:3387":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:3664:2000":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:14848:52325":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"12:2039:2146":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:2865:159":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:3172:3725":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12095:48009":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"9:809:2081":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:10407:3868":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:11977:2047":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"7:0:1436":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:681:43190":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:3241:3728":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:11388:2082":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"13:232:58582":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:45783:2740":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:48857:2832":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:6430:56074":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:13924:49335":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:3951:39329":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:2027:137":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:10321:138":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:7643:2555":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:48188:66":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"5:2093:3132":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:11204:2326":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:49116:1879":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:51350:2628":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"12:2045:2147":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:24224:2916":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:7541:2581":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:49613:2493":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:51660:2654":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:15729:1691":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:6176:3528":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:13526:130":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:51200:2648":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:22350:2669":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:12073:48003":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:8189:143":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:13043:35552":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:10972:1876":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"12:2005:1994":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:1717:37244":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10224:43282":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:11866:54061":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:49134:2830":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:15141:2264":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:53093:17621":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:15730:1692":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"9:963:3294":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:11726:44003":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:2188:2147":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:13154:48700":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:23562:2910":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:46365:2564":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:3218:3727":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:12685:48168":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:22418:56150":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:10519:2013":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:7406:3462":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:5407:39994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:53119:17623":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:53082:17620":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:744:59462":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:3245:1984":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:9961:43209":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:2543:3839":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:2723:1954":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:10237:54046":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:51032:2609":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:7216:3553":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:11159:43214":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:7125:57322":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:10788:43395":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:6858:39514":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:3420:1799":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:11794:44125":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:2113:31384":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:3130:2145":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"15:248:3383":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:47915:2360":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:10279:3828":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:5672:3513":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:1547:37228":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13963:49338":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:10287:52448":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:46336:2562":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:10827:3813":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:13203:2271":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:14000:49379":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:6366:3380":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:11135:2831":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:3074:73":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:11130:9506":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:10599:43424":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"18:677:134":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:12327:48082":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:10403:3842":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:45456:2350":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:5185:39977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11199:43216":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:2829:165":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:4955:42228":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:4671:42169":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:3638:129":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:5860:2324":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:783:6784":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:7713:2429":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:7333:3478":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:47191:2732":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:11851:52324":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"2:48477:138":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:2912:3721":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:4173:1908":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"12:968:2007":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:5433:3504":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"14:250:41501":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:10041:43264":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:23369:1942":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:375:3081":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:14024:1900":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:14348:52117":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"9:157:3246":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:3650:2455":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:1236:43279":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:22767:1821":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12645:48165":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11254:3859":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:9005:43193":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"14:244:41495":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:6605:3473":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:4262:39360":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:14927:2058":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:5312:39987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:11210:2269":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:3080:141":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:10635:43393":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:49640:2494":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:7894:3495":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13609:49246":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:620:59477":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:14310:1948":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:6899:39520":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:1302:135":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:24428:2920":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:6812:40926":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:15735:1697":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:47354:160":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:10553:7917":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10975:43482":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:11448:2084":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"12:112:58573":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:46063:1970":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:3325:2439":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:8902:43191":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:45548:176":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:49166:2860":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:46015:3040":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:11855:52111":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"6:4419:39379":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:8662:2426":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:10095:3891":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:53249:17629":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:4614:1871":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:2887:57796":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:7147:54036":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:790:3911":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:6335:68":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:24292:2202":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"14:56:43619":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:14753:2107":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:47285:187":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:53108:17622":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:49998:183":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:11028:1931":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"1:8802:2130":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"12:853:1998":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:6678:2578":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:820:6784":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:5385:1534":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:10571:43423":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:1524:1994":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:12155:48070":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:2395:7903":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:49238:2834":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:49007:2845":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:13772:49293":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"12:1667:3374":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:11022:1926":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"18:667:3926":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:10048:1846":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:13742:2106":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:11458:43618":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:4704:42177":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:8290:3201":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"5:6792:57324":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:4890:42213":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:6252:3531":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:11176:2833":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:5505:3508":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:5707:3514":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:48499:54956":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:9245:3792":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:772:201":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"12:556:135":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:4535:42108":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:7870:3129":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:14385:1870":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:9119:2157":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:23797:2719":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:1604:176":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:13356:48863":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"12:949:2006":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12275:48079":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:45731:2706":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:13394:49194":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:6935:40953":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:1617:37235":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13119:48696":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"14:189:41493":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:11906:1994":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:5876:2327":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:49856:2881":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:5555:1847":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:10226:43190":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:4916:2371":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:10558:43422":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:4377:39374":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13348:48862":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:12568:48099":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13370:48864":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:3800:41623":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:1586:2002":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:47715:80":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:6591:3540":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:9440:43201":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:5945:36260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:781:102":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:2162:1999":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:13221:48748":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:22810:1821":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:11820:56025":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:11993:47898":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:50778:2631":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:5371:39990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:52593:2623":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:912:3121":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:8519:2283":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"12:2032:2145":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:50993:2624":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:7178:54036":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"14:216:41502":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:11800:163":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:49092:2856":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:13541:142":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:9296:43181":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:11087:52336":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"17:10353:3872":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:7236:3555":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:51555:55112":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"9:776:3276":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:12494:48094":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:49828:2882":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:1311:3898":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:10651:1966":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:4083:39345":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:45663:2945":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:49725:35553":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:7569:2104":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:9162:3860":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:8929:43192":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:7392:3464":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:909:91":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4101:39347":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:11052:1932":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"6:1596:37233":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:8169:2199":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:3116:1868":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:591:36347":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:7024:3767":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"3:300:187":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:5002:182":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:12889:2487":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:15743:1705":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:12142:48069":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:5627:1831":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:4293:39363":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:2774:92":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:11192:1925":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:7855:52453":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"18:811:3913":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:53073:17619":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:2816:3738":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:525:36340":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"12:930:2004":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:55786:2525":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7174:3549":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:1633:2010":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:15733:1695":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:3041:3724":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:5213:3032":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:10106:3892":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"18:0:1668":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:6852:39513":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:11100:3863":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:11915:47891":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:10052:43265":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:4844:2775":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"12:877:2000":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:0:1292":{"crate_id":1,"path":["std"],"kind":"module"},"2:50888:2644":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:5996:3524":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:48926:2839":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:896:3920":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"9:1020:3296":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:50093:1958":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:1132:1960":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:23860:35252":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:14779:1981":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:13898:49328":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:3237:2000":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:5379:39991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:5697:1830":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:1837:2000":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"12:2315:58581":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:11696:43946":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:51739:2642":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5255:39962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:48179:125":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:13733:49256":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12287:48080":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:1760:37248":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:15727:1689":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:9971:59443":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:2171:2144":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:22819:2608":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:46106:3039":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:3868:39323":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:13598:49245":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:23812:35242":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:2188:2690":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:3280:1987":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:4300:39364":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"18:837:2482":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"11:0:1662":{"crate_id":11,"path":["adler"],"kind":"module"},"16:6964:2956":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:49840:2887":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:50052:2893":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:6200:40403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:5360:3500":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:5548:40027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"18:712:2669":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:22395:56147":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:8260:2199":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"6:4325:39367":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:7521:57349":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:6554:3538":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:11539:43895":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:6518:3537":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:3189:199":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:2134:3184":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:5998:40394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:7195:3551":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:23784:2718":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:3716:2458":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:13038:35551":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"6:6100:40397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:5210:39980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:1744:37247":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:53172:17626":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10458:43322":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:7521:2101":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:10081:3828":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:10452:2197":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:47259:2958":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:46445:1876":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:15696:6902":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"8:0:1659":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13054:48692":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:3195:3726":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:32089:55067":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:24530:2922":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:8666:2428":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:47268:35512":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"7:38:41045":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:4470:39385":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:47673:85":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:670:36382":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:12234:48076":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:7812:54251":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:49266:2864":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6110:3497":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:5456:3505":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:3108:120":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"12:396:3366":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:5273:3713":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:6126:3526":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:8168:3102":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:8762:2161":{"crate_id":2,"path":["core","lazy","Lazy"],"kind":"struct"},"6:4052:39341":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:9626:52459":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"1:10794:2135":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:47929:2361":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:3679:2459":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:9133:43197":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"9:686:3227":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:13582:49243":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:11993:2048":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13532:49237":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:9456:51711":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:7965:2162":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:49424:1970":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:1584:37232":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:4790:42188":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:11835:44140":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:6837:1819":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13799:49296":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:8067:57284":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"17:10128:3894":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"12:1180:3361":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:1534:1995":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:49548:2491":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"15:0:1665":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:3772:41620":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:569:36345":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:1700:37242":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:2888:57279":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:3235:2217":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:5960:3708":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:7818:57282":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:50970:2620":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:5400:39993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:563:36344":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"12:0:1663":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:8750:2303":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:1497:2003":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:421:1802":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:5231:42429":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:15728:1690":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:3472:1994":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:5167:39976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:1000:1994":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:3195:1851":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:4762:42185":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:13617:169":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:51375:2610":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:3953:187":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:48276:2358":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"16:7571:3455":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:6309:2575":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:15742:1704":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:519:36339":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:6087:3456":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:7420:3480":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"16:7467:3460":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:49712:2498":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:24258:2917":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:6219:3530":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:3297:2431":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:3955:119":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:6051:37164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:5693:1836":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:6857:1814":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:6176:40401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:15731:1693":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11628:43941":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:49832:2884":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:1613:3179":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:7886:3130":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:7042:3768":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"12:976:2008":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:1149:6897":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:10149:43207":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:12917:48637":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:14378:110":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:10228:55428":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"16:7786:3469":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"14:194:41494":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:7292:3106":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:3662:2456":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"18:636:59459":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:4120:39349":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:10557:3190":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:47200:1994":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:6682:3472":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:3183:2394":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:11914:2041":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11750:44113":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:7810:3124":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12221:48075":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:50705:55028":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:48489:2081":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:7907:2199":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:10266:3791":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:13062:48694":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:14955:2065":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:3272:2416":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:2418:3187":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:49882:1988":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:8664:54051":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"18:766:59463":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:22619:1941":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:4304:42052":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:11922:1996":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:9065:43195":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:2896:57718":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:5868:2325":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:49086:2855":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:11828:2108":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:10028:43263":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:3714:41587":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:5295:41575":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:22821:2607":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"9:722:3230":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"6:1708:37243":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:1219:3182":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:8185:128":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13884:49310":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:2892:57719":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:5284:2257":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:5815:3520":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:4346:1901":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:7541:2102":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4501:39388":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:2182:3208":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"12:1100:2009":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:10236:3797":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:10098:103":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:3966:39331":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"12:1762:58575":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:13306:48858":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"14:47:41493":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:46284:2557":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:7054:1996":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:3539:52456":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:46000:2761":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:6158:1999":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:5717:3515":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"9:996:3295":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:11365:2081":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:11328:43218":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:8268:2081":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:46670:30804":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:9721:6784":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:14021:1898":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:32031:2973":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:2429:2403":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8526:2285":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:46294:2558":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:6910:39521":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:12531:120":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:1482:2000":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:8799:2292":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:3644:2453":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:51979:2622":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:24394:2919":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:12531:2862":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:10942:1879":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:46158:2953":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:50834:2652":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:45703:1959":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:11714:44002":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:11155:2260":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:10105:111":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:13888:52450":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:4478:39386":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:10985:1879":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"18:754:59468":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:2777:2602":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:5330:41572":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:46085:2873":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:9943:59451":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:9574:3837":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:13722:56073":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:2159:1996":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:5558:57320":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:10468:3841":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:6091:40396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:46636:30801":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:774:59459":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:3335:2430":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:10887:43396":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:12385:48087":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:13576:56072":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:11337:3836":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:8628:154":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:5269:39983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:23876:35263":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:49380:2869":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:55838:2525":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:7455:2554":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:7453:3459":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:1676:37240":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:4512:1860":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:5436:57860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:49895:2970":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:48460:55115":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:11277:43180":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:3881:39324":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:2799:98":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:49433:2874":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:57087:55111":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:48945:2841":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:5522:3509":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:3552:2946":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:13997:1977":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:50939:2632":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:11588:43904":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:57108:55109":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:10115:171":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:4449:39383":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:10998:1925":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"17:9034:43194":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:9368:43199":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:1493:2002":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:8151:2000":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"5:7968:2022":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13590:49244":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:10117:2362":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:9499:54248":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"1:1507:2005":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"12:774:1996":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:5432:747":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:9186:3817":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:10426:2167":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:299:59442":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:3485:2531":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:1723:37245":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:12307:48081":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"18:610:3922":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:46175:2954":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:1908:37383":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:511:36338":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:0:1667":{"crate_id":17,"path":["object"],"kind":"module"},"2:46322:55069":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:7870:3465":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:49519:2485":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:6767:1817":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:10529:2014":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:46383:2565":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:3348:2450":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"18:829:3915":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6136:3498":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:7678:2110":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:5281:2256":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:4990:2053":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:46304:2559":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:2108:549":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:47505:83":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:50753:2639":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:14335:1843":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:3292:2424":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:46434:2574":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:6693:1946":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:543:36343":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:4995:42243":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:12540:52447":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:9329:54258":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"9:900:41198":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:5488:3507":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:801:3912":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:11269:1816":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:3011:1821":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:2889:3739":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:7399:111":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:4273:2243":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:4922:42220":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:10435:43321":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:10312:52465":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:12783:48241":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13318:48860":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:12771:43218":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:4267:2241":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:4112:39348":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:7949:56169":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:5705:1838":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:5386:39992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:3633:203":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:6032:3449":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:7856:3561":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:13838:2895":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:4281:39362":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:2211:2695":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:3918:39327":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:3255:2409":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:52092:2611":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:5766:2319":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"16:3264:3729":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:46099:3038":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:52846:2647":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:2754:3712":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:3595:1891":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:4371:39373":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:7955:2021":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:12262:48078":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:15736:1698":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:9210:43198":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:10211:43276":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:7303:3557":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:7807:2198":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"2:3409:1882":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:10799:2136":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:53210:17628":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:22678:2607":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:4899:1923":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"6:4227:39358":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:1622:37236":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:2843:3719":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:6236:2561":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:10714:194":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:5314:41573":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:6999:3545":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:1567:1998":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:15726:1688":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:12431:48089":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:47277:170":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:13788:49295":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11847:44141":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:3152:2147":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13637:49254":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:49824:2879":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"12:2013:1999":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:1545:1996":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:4459:39384":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:9839:3843":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:3284:2420":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:8258:1800":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"9:603:41275":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:13842:49301":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:10529:43324":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:610:36350":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:10107:2359":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:5987:40393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:3939:41737":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:3250:1986":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:1554:37229":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:8018:2953":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:3522:41576":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:2968:3722":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:7205:3552":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"12:2018:2000":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:2945:3744":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:10109:2360":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:6893:39519":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4425:39380":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:3304:2148":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:12091:1982":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:12442:48090":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:531:36341":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:4506:42104":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:0:253":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:55812:2525":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:136:49699":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4306:39365":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:12284:3014":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:24496:2921":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"9:41:3279":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:0:1666":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:10304:3831":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:8954:3819":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:3908:2138":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:1438:1996":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:15734:1696":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:9659:59437":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:48155:66":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:12838:2483":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:11199:2323":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:3552:57322":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:3972:39178":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:2582:54062":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"17:3743:3809":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:15120:2257":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"12:429:3365":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:4333:57321":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:13041:48640":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:8910:54051":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:11822:44127":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:11107:52123":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:10708:2234":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5469:39999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:9404:43200":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:46092:3037":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:1080:57322":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:6239:40406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:542:3431":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:584:36346":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:5941:171":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:22625:1943":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:12194:4505":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:11186:43215":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:7856:1996":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:1018:2199":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:23633:2912":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:1563:37230":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:3314:2150":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:51423:2614":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:6569:3753":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:14798:52106":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:12659:48166":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:983:3122":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:8875:2125":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:5221:3139":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:4046:39340":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:3481:2026":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:49496:2481":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12671:48167":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:3429:3445":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:27745:2601":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:10117:3893":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:1729:2270":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:46025:3041":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:13567:2115":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:49016:2846":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:7555:2103":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:7985:96":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:47463:76":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:49852:2880":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:13547:49239":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:15744:1706":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:10513:6898":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:48699:3046":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:6938:57322":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"18:866:3918":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:1433:2012":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:11406:43609":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:4157:3822":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:11224:2278":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:3392:3736":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:15746:1708":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:9081:2155":{"crate_id":1,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"1:11458:1994":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:12051:48002":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:23838:35261":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:38543:2397":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:9896:59444":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"12:937:2005":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:47936:2353":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:12843:2484":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:11218:2258":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:15475:51714":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"12:354:58567":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:50061:2894":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:46681:30806":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:15747:1709":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:49370:1880":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:3617:1890":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:3529:1888":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:6166:3527":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:3683:57322":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13429:49223":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:6464:3471":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:3177:192":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:52995:2650":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:31990:2944":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13296:48796":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:12040:48001":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:48935:2840":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6208:3529":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"18:704:59459":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:12046:2127":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:2075:57343":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:2456:4505":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:537:36342":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:4401:39377":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:7264:3474":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:1522:37224":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:4272:39361":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:7119:3450":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:5595:3511":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:2852:162":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:10918:1995":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:3091:3782":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:5889:2328":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:22363:56134":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:5635:1832":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:0:1658":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:10356:2023":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:3064:3781":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4005:39335":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11499:43834":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:6765:1815":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:10331:3843":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:32025:1974":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:23941:2936":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:10804:1892":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:6413:3379":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:7902:1996":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:3423:122":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:1428:1995":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:1500:89":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:50907:55141":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:13986:49345":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:7226:3554":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:23464:1821":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:6603:52319":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:45640:181":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:5838:2322":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:49399:2871":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"18:849:3916":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:6696:1811":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"18:650:3921":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5221:39981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:578:9134":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:50075:150":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12247:48077":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:4477:42100":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:11961:2046":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:7862:176":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:3218:1798":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:1459:1998":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:5406:2264":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:11947:47893":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:4019:1995":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:9622:74":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"9:749:3231":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:10962:43483":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"14:0:1664":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4133:39351":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6744:3758":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:10724:1891":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:12699:48169":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:3978:39332":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:45984:2759":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:46455:2570":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:6269:3532":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:13865:49304":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:48452:2024":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:6391:3534":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:3137:2146":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:4970:2372":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:69:3080":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:6644:3541":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:5347:39988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:11843:2109":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:6028:37190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:9785:2814":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:3083:127":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:11026:43210":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:11873:51713":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:6601:52317":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:55851:2525":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:45532:178":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:14538:7917":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:10562:1875":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"5:5100:1860":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:53062:17618":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:4156:1994":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:1190:6901":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:12032:2140":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:2138:1019":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:7843:3560":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13780:49294":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:3429:124":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:12605:2827":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:5159:39975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:49390:2870":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:9689:59453":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:2855:161":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:49691:2496":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:46223:8524":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:2362:571":{"crate_id":1,"path":["std","env"],"kind":"module"},"12:1118:2010":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:13465:49228":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:1690:37241":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:2512:3869":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:10447:2176":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:12118:48010":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:1179:57354":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:3145:3734":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:49059:2961":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:5975:3523":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:52450:2655":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:4823:42196":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:2458:7922":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:3970:2664":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:48981:2843":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:4605:53704":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:294:59436":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:9593:2251":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:3485:1995":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:894:2171":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:15230:3391":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:22416:56145":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:1410:2011":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:6887:39518":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:5013:2373":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:46661:1906":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:49702:2497":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:47225:2956":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:4318:212":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13205:48747":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:46345:2563":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:6021:3718":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:3955:57322":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:12195:48073":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:6923:40952":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:11304:43217":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:12494:2859":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:23759:35224":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:1152:6899":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:6343:1811":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:2794:3444":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6807:3544":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:2166:2000":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:49860:113":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:7378:3463":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:11001:43480":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:5274:39984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:10119:2363":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:14818:1980":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:547:3703":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:14942:2059":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:51051:55014":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:9649:43203":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:9759:43205":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:2875:166":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11616:43906":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:45594:180":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:13704:2104":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:3090:204":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:11475:2087":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"9:692:3229":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:48218:119":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:12554:2863":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:5518:3062":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"9:0:1660":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10317:3834":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13506:49232":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:7146:3547":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:46233:8523":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:2318:2402":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:5522:40026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11970:43428":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:3233:2216":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:1396:2009":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:52243:2635":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:4385:1897":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:9088:43196":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:11025:1927":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"1:4270:2242":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:24360:2203":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:46652:30803":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:53034:2615":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:5855:3521":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:7158:3548":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:4145:39352":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:6591:1834":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:2314:3871":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:51146:2641":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:10673:43427":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:9240:2479":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"18:729:59471":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:51296:2621":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:47158:158":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:10420:3867":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:11378:3814":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:49320:2867":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:5359:39989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:49035:2848":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:10377:3870":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:4639:2522":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:12017:2291":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:15195:26206":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:9280:41572":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:6605:52321":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:12373:48086":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:7884:3466":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:11358:3815":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:10988:43481":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:11097:2830":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:7514:3479":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:7314:3107":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:4682:2401":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:1075:1967":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:4439:39382":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:12570:2866":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:15737:1699":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"0:0:1562":{"crate_id":0,"path":["winapi"],"kind":"module"},"2:51475:54961":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:1595:2003":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:6620:3751":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:45724:2705":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:13446:49224":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:3187:100":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:4073:39344":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:10200:43277":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:4906:2780":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:7823:3470":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:11144:2258":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:5790:3519":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:12752:2091":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:7832:90":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:11204:2835":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:3077:72":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:47379:79":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:3118:3735":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:4347:39370":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:52909:2612":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:6214:40404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:13240:48750":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:46125:2763":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:15740:1702":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:3945:39328":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:5406:2348":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:11687:2849":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:12741:48177":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:11150:2259":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"9:1056:3289":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:7452:211":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:8148:2595":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:31850:2984":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:3319:2436":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:9886:43207":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:12168:48071":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:22378:56134":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:10844:3843":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11030:119":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:49534:2488":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:8361:2042":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:5228:39982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:46046:3035":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"17:9769:59449":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:3320:3783":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:10985:2827":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:720:55116":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:5953:37163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:10113:2353":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:37299:160":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:6068:37167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"12:2309:55200":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11604:43905":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"12:1688:3375":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:10001:43262":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"18:820:3914":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:46253:1875":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"12:1235:3363":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:15732:1694":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"12:2025:2144":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:6014:3525":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:10448:3799":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:7250:3556":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"12:1144:2011":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4364:39372":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:22397:56149":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:5428:39997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:12208:48074":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:10160:43280":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:6221:40405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:3488:3732":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:13402:49221":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:6447:1860":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:45738:2371":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:5420:39996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:2991:3733":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:10801:43394":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:5643:1833":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:50684:55157":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:6238:3461":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"11:54:3350":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"14:231:3074":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:8849:3857":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:5561:3510":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:5927:3522":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:49025:2847":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:11024:2828":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:15738:1700":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:4770:2020":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:8012:2199":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:45962:28669":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:6636:3475":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:6577:3539":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:5191:39978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"19:0:963":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6780:3543":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:49184:2861":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:12712:48170":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:9578:2250":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:14542:1850":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:1041:1952":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10623:43426":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:5346:3457":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:11962:43430":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:3331:2442":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:1630:37237":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:14325:52346":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:6463:1949":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:12182:48072":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:23468:2603":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:7224:168":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"10:0:1661":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:7624:2106":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:14330:52303":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:51177:2645":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:14670:52454":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:13272:48793":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:13331:48861":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:21:642":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:4641:42164":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:10912:1905":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:7908:1996":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:55825:2525":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:32037:55158":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"17:10814:3812":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:6731:3757":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:23820:35260":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"12:892:3352":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:10489:3844":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:51249:2633":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:50016:172":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:3997:39334":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:9729:59447":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:2886:3070":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:5978:40392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:15724:1686":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:7360:176":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:52783:2627":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"13:0:1657":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:51012:55165":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:49338:2868":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:46313:2560":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:14555:2109":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"18:885:3919":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:4852:42200":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"12:812:2003":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:3506:3731":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:6124:40399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:23906:35262":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:7073:3546":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:47631:78":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:11720:2850":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:15204:52302":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:46275:2576":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:48917:2838":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:11055:1933":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"6:5459:39998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:607:43189":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:11932:47892":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:14:1775":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:696:2166":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:12042:2126":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:47922:2359":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:10071:3897":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11231:3861":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:6718:3756":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:11082:3818":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:14911:2057":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:55693:2681":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:38480:1956":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:632:36353":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:8049:3156":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:46266:2573":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:49102:1877":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:3086:205":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:6614:36297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:152:49700":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13627:49253":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:5580:3701":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13180:48744":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:15691:54688":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:2397:7904":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:5940:3106":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:7549:3467":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:51786:2646":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:3288:2422":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:15739:1701":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:5197:39979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:10536:7910":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:11678:43945":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:3249:2221":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:49408:2872":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:52704:2643":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:49848:2886":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10502:43323":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:157:36029":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:6357:3533":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:4627:2521":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:2433:7915":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:10919:1907":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:11434:43617":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:13815:2105":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:12598:48101":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"15:230:3382":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:2484:43310":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:12823:2479":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:5649:1834":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:46414:2568":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:3426:123":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:1488:2001":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:6094:202":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:616:36351":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:4511:39389":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:0:766":{"crate_id":6,"path":["libc"],"kind":"module"},"2:8724:2160":{"crate_id":2,"path":["core","lazy","OnceCell"],"kind":"struct"},"2:3343:2447":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13520:49234":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:3563:1883":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:4344:1900":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:7778:3068":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:9332:3835":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:14961:2066":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:4183:39354":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:11779:44122":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:7681:2112":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:4517:39390":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:13497:49231":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:6106:40398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:4383:1896":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12582:48100":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:47216:1996":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:6155:40400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:51579:55164":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:3261:2227":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:13720:54250":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:4358:39371":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:13349:7915":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:7793:3123":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:3604:41578":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:4557:1869":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11118:43212":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:5407:3502":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:10111:2361":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:14395:53716":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:6424:3535":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:6864:39515":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:22615:1821":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:857:3917":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11767:44121":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:13163:48701":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:11190:2834":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:11296:10215":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:9551:3858":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:10516:3845":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13453:49227":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:4203:39356":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:1422:2010":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:24326:2918":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:51327:2625":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:15707:52126":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:3905:39326":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4066:39343":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:53053:17617":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"12:2331:2021":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:5528:39238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:11464:2086":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:5969:36219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:10101:103":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:12537:48097":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:7928:2705":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:47547:77":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12725:48176":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:4033:39338":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:5561:1849":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"12:1253:2012":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:15082:2256":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:6881:39517":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:13889:183":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"6:4060:39342":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:1602:37234":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:13574:49242":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:48292:71":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:3309:2149":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:9849:59441":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:9140:2156":{"crate_id":1,"path":["std","lazy","SyncLazy"],"kind":"struct"},"2:46465:2571":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:3904:67":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:4127:39350":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:51817:2649":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:52057:2629":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12795:48244":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"12:840:1997":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:13488:49230":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"9:1075:3297":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:11813:2107":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:3185:198":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:23704:35236":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:53134:17624":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11665:43944":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:10668:1844":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:1540:37227":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:2202:3183":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:50730:2651":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:11555:43896":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:88:35963":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:46393:2566":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:7279:3769":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:10543:43421":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:15725:1687":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:9799:43206":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"14:11:41493":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:46069:3036":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:8659:2025":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:12456:48091":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"18:169:49701":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:47757:87":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:4013:39336":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:49284:2865":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:4228:3168":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"17:13386:49193":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:3018:3723":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:1576:2001":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"18:782:59459":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:52026:2626":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:32189:55108":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"2:50801:2619":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:4282:1996":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:8570:2286":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:9487:54243":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:7892:1905":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"12:2323:58577":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:9120:2181":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:6893:1999":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"12:747:1994":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:13978:49343":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:4307:1899":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4395:39376":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:2690:550":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:3621:2947":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11015:43507":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:7761:3559":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:48994:2844":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:10058:126":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"12:761:1995":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"12:1159:3360":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:2733:3696":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:10940:1872":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:8096:3072":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:2177:2145":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:12467:48092":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:4734:42182":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:11045:43211":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:11243:1947":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:10912:43495":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:2155:1994":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:23913:2989":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:10928:1870":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:45696:2457":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:11738:44112":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:3276:1985":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:2565:119":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"1:11058:2122":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:1157:6900":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:49565:2492":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9205:1940":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:624:36352":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"12:1855:137":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:1530:2008":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:14686:52476":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"11:46:58566":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"16:5736:3516":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:5292:39986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:15741:1703":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:11640:43942":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:3266:2406":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10584:3821":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:15060:1935":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:11981:43429":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:9933:43208":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:13477:49229":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:5472:3506":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:1736:37246":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:6635:3060":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:47337:1995":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:15745:1707":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"9:27:3278":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:11218:2836":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:4215:39357":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:8384:149":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:10682:121":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:2202:2694":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"18:660:3925":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:10926:43504":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:3892:39325":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:4448:42096":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:13440:2121":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10477:3840":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:22774:12075":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:12028:47945":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"9:234:3254":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:5563:40028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:12538:2211":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:46140:95":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:9264:41573":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:510:43188":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:10470:2178":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:10962:1875":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:13554:49240":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:14692:52477":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:46643:2159":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"18:739:59478":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:51900:2634":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:4386:42084":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"19:117:59479":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:48240:70":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:10656:2211":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:1518:2006":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:3287:3730":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:0:461":{"crate_id":2,"path":["core"],"kind":"module"},"5:7787:1996":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:51523:55129":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:1665:37239":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:10140:3843":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:50105:1957":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:8368:2043":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:23928:2937":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10179:43278":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:10705:1821":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:6072:3477":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:11928:2044":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:3957:39330":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:11794:2105":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:1199:3181":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:24462:2113":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:4:948":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:4255:2277":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:47589:84":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:13652:29177":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:48703:3047":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:7507:2100":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:10361:2477":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11482:43619":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"13:120:41448":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:1533:37226":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12610:48115":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:9809:59448":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:3338:3710":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:2004:1860":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:5473:57322":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:49844:2885":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:7971:119":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:23743:55134":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:12037:2295":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:3461:152":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:7802:1999":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:9600:59438":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:12756:48178":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:11809:44126":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:15723:1685":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:7804:3468":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:11405:2083":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:10992:1880":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:13368:53701":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:5029:42252":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:1651:2012":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:7738:3558":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:3110:2212":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:10061:43281":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:24934:2765":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:12071:1981":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:6107:2275":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:6491:3536":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:14766:2108":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:11247:10211":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"3:0:403":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:2834:116":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:8073:52453":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:47208:1995":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:10311:134":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:6365:1812":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:10498:6895":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:3012:2530":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:12010:47901":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:48206:101":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:13912:49334":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:10894:1994":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:4008:43397":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:3155:108":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:3123:1994":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:4040:39339":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:46145:2952":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:9494:52429":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:10437:52345":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:6227:2276":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:4317:39366":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:45971:2758":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"12:1200:3362":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:4835:2169":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:8733:2159":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:13933:49336":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:48908:2837":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"12:866:1999":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:14102:2178":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"7:85:41052":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:4386:57321":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:644:3924":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"9:469:41170":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"12:160:3364":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"12:469:58570":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:4305:1898":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:13925:133":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12632:48164":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"12:181:3368":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13746:49257":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:12260:3056":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:1527:37225":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:47421:86":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:3251:2222":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:4095:39346":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:8152:2594":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:4230:42003":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:4494:39387":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:46354:2577":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:52956:2630":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:49415:2873":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:10661:1843":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:5990:2266":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:9528:1877":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:1415:1994":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:51099:2653":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:5766:3518":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:6768:3760":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13819:49300":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:4164:39353":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:3145:2144":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:3440:1887":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:900:2172":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:4839:2774":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:13098:48695":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:13810:49297":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6101:3454":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:9476:43202":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:8073:196":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:12343:48083":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:6005:10211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:45484:2400":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:5649:2572":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10656:43408":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:13760:49258":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:2765:1955":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:7295:3476":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:53157:17625":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12982:48639":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:8003:3154":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:9118:2158":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:12813:2480":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:14856:2117":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:10864:43398":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:3113:2213":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"12:2009:1996":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:12408:48088":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13942:49337":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:45617:179":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:5632:3512":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"12:377:3367":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:6949:3764":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:6185:40402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:4621:1874":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:4596:1846":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:14027:1896":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:5130:39933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:12051:1980":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:6085:40395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:1501:2004":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:7496:57324":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:2773:3745":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:11948:2045":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:5241:39961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:10611:43425":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13540:49238":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:8233:112":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:4241:39359":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:9592:120":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"9:927:41164":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:55799:2525":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:2303:58579":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:13620:49252":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:5414:39995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:53187:17627":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:7185:3550":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:13828:2404":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:3463:2399":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:13172:48702":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:5572:57348":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:9627:81":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:4410:39378":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:46402:2567":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:55773:2525":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:605:36349":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:13258:48791":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:12552:48098":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:4387:39375":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:47329:1994":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:2183:2146":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:3549:41577":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:6371:3150":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:6636:40766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:24564:2923":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:3186:197":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:5421:3503":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:13282:48794":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:45956:1970":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:12832:2482":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:7009:10214":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:4350:42073":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:3862:39322":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:4480:1906":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"12:463:58574":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:5384:3501":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:14361:121":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:48955:2842":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:5282:39985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:1558:1997":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:48507:54955":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:4341:39369":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:9631:52475":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:1524:2007":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:7342:3492":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:15219:3391":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"18:694:3927":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12480:48093":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:10950:43506":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4431:39381":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"}},"external_crates":{"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}