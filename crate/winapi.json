{"root":"0:0:1610","crate_version":"0.3.9","includes_private":false,"index":{"2:3104:2458":{"id":"2:3104:2458","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3103:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13084:2406":{"id":"2:13084:2406","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13503:57441":{"id":"2:13503:57441","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13054:2407","prim@char":"1:16004:1737","str::match_indices":"1:16010:1742","`DoubleEndedIterator`":"2:8448:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49630:2930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13537:3113":{"id":"2:13537:3113","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5785:1874":{"id":"1:5785:1874","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5786:50831"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6085:1926":{"id":"5:6085:1926","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22804:2769":{"id":"2:22804:2769","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22805:2668","2:22806:56421","2:22807:1227","2:22808:1228","2:22809:39330","2:22810:56484","2:22811:56485","2:22812:56486","2:22813:56487","2:22814:56488","2:22815:56422","2:22816:56423","2:22817:56424","2:22818:56425","2:22819:56426","2:22820:56427","2:22821:56428"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13453:51096":{"id":"2:13453:51096","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:16004:1737","self::pattern":"2:13054:2407"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3337:2213":{"id":"2:3337:2213","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3339:181","2:3340:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8448:120":{"id":"2:8448:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8449:55041","2:8450:55042","2:8451:55043","2:8452:55044","2:8456:55045","2:8459:3968"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13485:51501":{"id":"2:13485:51501","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:16010:1742","self::pattern":"2:13054:2407","prim@char":"1:16004:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49584:2899","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3368:2214":{"id":"2:3368:2214","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3370:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8883:2633":{"id":"2:8883:2633","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13540:50983":{"id":"2:13540:50983","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3310:1848":{"id":"2:3310:1848","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5837:3125":{"id":"5:5837:3125","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:29444"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3172:149":{"id":"2:3172:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3174:53614"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3372:2215":{"id":"2:3372:2215","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:1356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1075:2020":{"id":"1:1075:2020","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:3133","1:1077:3113","1:1078:50986","1:1079:50985","1:1080:50987","1:1081:50984","1:1082:50983"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2888:104":{"id":"2:2888:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2889:408","2:2890:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13494:1822":{"id":"2:13494:1822","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"1:16010:1742","`DoubleEndedIterator`":"2:8448:120","prim@char":"1:16004:1737","self::pattern":"2:13054:2407"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49666:2932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3717:2999":{"id":"2:3717:2999","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3648:2998","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13064:2408":{"id":"2:13064:2408","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13066:2410","2:13067:56535","2:13068:56536","2:13069:56537","2:13070:56539","2:13071:56538","2:13072:56540"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5735:1869":{"id":"1:5735:1869","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5736:50638","1:5737:50694"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5647:1966":{"id":"1:5647:1966","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5648:52842","1:5649:3226"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5833:3127":{"id":"5:5833:3127","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13535:2813":{"id":"2:13535:2813","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12993:2098","FromStr::Err":"2:12993:2098"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12993:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12993:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14166:141":{"id":"2:14166:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14167:277","2:14168:518","2:14169:280","2:14170:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13073:2410":{"id":"2:13073:2410","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13075:2429","2:13076:922","2:13077:56777","2:13078:56778"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13514:57447":{"id":"2:13514:57447","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:16004:1737","self::pattern":"2:13054:2407"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13084:2406","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3417:2505":{"id":"2:3417:2505","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3419:181","2:3420:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14242:2078":{"id":"2:14242:2078","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14243:52588","2:14244:52589","2:14245:52590","2:14246:52591","2:14247:52592","2:14248:52593","2:14249:52594"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3525:132":{"id":"2:3525:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3527:181","2:3528:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13447:3469":{"id":"2:13447:3469","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49716:1925","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3423:2516":{"id":"2:3423:2516","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13520:10822":{"id":"2:13520:10822","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:16004:1737","self::pattern":"2:13054:2407"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3812:2653":{"id":"2:3812:2653","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3247:115":{"id":"2:3247:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3248:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3347:2614":{"id":"2:3347:2614","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:181","2:3350:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10309:189":{"id":"2:10309:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10310:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6091:58090":{"id":"5:6091:58090","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6104:58092":{"id":"5:6104:58092","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:1852","`String`":"5:8368:216"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1852","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:3131","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13512:57445":{"id":"2:13512:57445","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2866:2632":{"id":"2:2866:2632","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:55820"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8400:136":{"id":"2:8400:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8402:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4000:68":{"id":"2:4000:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4001:1429"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"5:6107:50985":{"id":"5:6107:50985","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:16010:1742"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6106:50986":{"id":"5:6106:50986","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:16010:1742"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13421:57430":{"id":"2:13421:57430","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2926:124":{"id":"2:2926:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6084:58088":{"id":"5:6084:58088","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1852","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:3131","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1852","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:3131","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3505:1927":{"id":"2:3505:1927","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3506:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3492:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3277:218":{"id":"2:3277:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13450:51503":{"id":"2:13450:51503","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:16004:1737","self::pattern":"2:13054:2407"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13445:28377":{"id":"2:13445:28377","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:16010:1742"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49736:2935","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6105:1948":{"id":"5:6105:1948","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13428:304":{"id":"2:13428:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:16021:1751","str::as_mut_ptr":"1:16010:1742"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10301:2465":{"id":"2:10301:2465","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10302:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13444:2094":{"id":"2:13444:2094","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49448:1922","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13513:57446":{"id":"2:13513:57446","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13440:51486":{"id":"2:13440:51486","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:16010:1742"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3169:74":{"id":"2:3169:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3171:56268"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13079:2411":{"id":"2:13079:2411","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13081:55041","2:13082:56139","2:13083:56140"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13073:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3406:2042":{"id":"2:3406:2042","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:181","2:3409:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13449:28362":{"id":"2:13449:28362","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49754:2937","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10292:109":{"id":"2:10292:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10293:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13429:51466":{"id":"2:13429:51466","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16021:1751"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3178:228":{"id":"2:3178:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3180:127","2:3181:1417"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5008:1998":{"id":"1:5008:1998","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5009:2027","1:5010:53458"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5653:1968":{"id":"1:5653:1968","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5654:3844","1:5655:52838"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13526:57449":{"id":"2:13526:57449","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:16004:1737","self::pattern":"2:13054:2407"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3411:2511":{"id":"2:3411:2511","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:181","2:3414:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9260:2198":{"id":"2:9260:2198","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13418:793":{"id":"2:13418:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:16004:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13500:57440":{"id":"2:13500:57440","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:16004:1737","`DoubleEndedIterator`":"2:8448:120","self::pattern":"2:13054:2407","str::rmatch_indices":"1:16010:1742"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49612:2929","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1610":{"id":"0:0:1610","crate_id":0,"name":"winapi","span":{"filename":"src/lib.rs","begin":[6,0],"end":[71,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":[],"is_stripped":false}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1340","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:58088","5:6085:1926","5:6088:58089","5:6091:58090","5:6103:58091","5:6104:58092","5:6105:1948","5:6106:50986","5:6107:50985"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3364:2622":{"id":"2:3364:2622","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3365:181","2:3366:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3729:224":{"id":"2:3729:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3730:181","2:3731:2531","2:3732:686","2:3733:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3734:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13543:2022":{"id":"2:13543:2022","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:16004:1737"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49770:2023","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3376:2626":{"id":"2:3376:2626","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3378:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10313:2459":{"id":"2:10313:2459","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10314:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13782:150":{"id":"2:13782:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13783:181","2:13784:150","2:13785:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13467:51494":{"id":"2:13467:51494","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"1:16010:1742","`DoubleEndedIterator`":"2:8448:120","str::split_whitespace":"1:16010:1742","self::pattern":"2:13054:2407","prim@char":"1:16004:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49462:1924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3516:1849":{"id":"2:3516:1849","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3517:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13532:57451":{"id":"2:13532:57451","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13054:2407","prim@char":"1:16004:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13448:57434":{"id":"2:13448:57434","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49726:2934","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13517:57448":{"id":"2:13517:57448","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:16004:1737","self::pattern":"2:13054:2407"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6437:1894":{"id":"1:6437:1894","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6438:2332","1:6439:2333","1:6440:50729","1:6441:50730","1:6443:50734","1:6445:50731","1:6446:50732","1:6448:50733"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10311:2469":{"id":"2:10311:2469","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10312:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4783:2606":{"id":"2:4783:2606","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4784:2780","2:4785:56708","2:4786:53783"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3559:2767":{"id":"2:3559:2767","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3561:237","2:3562:206","2:3563:56231"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:3133","5:785:50840","5:786:50841"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23470:12327":{"id":"2:23470:12327","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23471:55979","2:23472:55980","2:23473:55981"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23465:2670","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3342:2043":{"id":"2:3342:2043","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:181","2:3345:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2957:177":{"id":"2:2957:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2958:415","2:2959:2450","2:2960:2447","2:2961:52809"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2926:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6685:1872":{"id":"1:6685:1872","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6686:53527","1:6687:50645","1:6688:50646","1:6689:50648","1:6690:50647","1:6691:50649","1:6692:50650","1:6693:50652","1:6694:50653","1:6695:50656","1:6696:50657","1:6697:50658","1:6698:50659","1:6699:50660","1:6700:50661","1:6701:50654","1:6702:50655"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13436:51465":{"id":"2:13436:51465","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13463:3968":{"id":"2:13463:3968","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13054:2407","`None`":"2:47495:176","prim@char":"1:16004:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3384:2629":{"id":"2:3384:2629","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3386:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:7928:2635":{"id":"2:7928:2635","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7929:56070","2:7930:56071","2:7931:56068","2:7932:56066","2:7933:56072","2:7934:56069","2:7935:56067"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3278:217":{"id":"2:3278:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6863:1865":{"id":"1:6863:1865","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6864:55325"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5775:1873":{"id":"1:5775:1873","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5776:52845","1:5777:52846","1:5778:52847","1:5779:52848"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8363:2547":{"id":"2:8363:2547","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8365:53803"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22840:2655":{"id":"2:22840:2655","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22841:56421","2:22842:1227","2:22843:1228","2:22844:56422","2:22845:56423","2:22846:56424","2:22847:56425","2:22848:56426","2:22849:56427","2:22850:56428"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10242:1889":{"id":"2:10242:1889","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10243:1533","2:10244:53055","2:10246:53056"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4666:1888":{"id":"1:4666:1888","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4667:2267","1:4668:52870","1:4670:52871","1:4671:52872","1:4672:1914","1:4673:52873","1:4674:52874","1:4676:52875","1:4677:52594","1:4678:2094","1:4679:2577","1:4681:2594"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3431:2520":{"id":"2:3431:2520","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13443:2436":{"id":"2:13443:2436","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:16004:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49438:2921","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13541:57452":{"id":"2:13541:57452","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:16004:1737"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49761:2938","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13473:51497":{"id":"2:13473:51497","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:16004:1737","self::pattern":"2:13054:2407","str::split":"1:16010:1742","`DoubleEndedIterator`":"2:8448:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49480:2895","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13434:51464":{"id":"2:13434:51464","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13506:57442":{"id":"2:13506:57442","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3274:1847":{"id":"2:3274:1847","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13510:57444":{"id":"2:13510:57444","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23774:2665":{"id":"2:23774:2665","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23775:2668"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23770:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6459:1979":{"id":"1:6459:1979","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6460:53487","1:6461:36441","1:6462:53488","1:6463:53489","1:6464:53490","1:6465:53491"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10540:146":{"id":"2:10540:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10541:652","2:10542:1825","2:10543:50408","2:10544:50409","2:10545:50410","2:10546:50411","2:10547:50412","2:10548:50413","2:10549:50414","2:10550:50415","2:10551:50416","2:10552:50417","2:10553:50418","2:10554:50419","2:10555:50420","2:10556:1533"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6959:1884":{"id":"1:6959:1884","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6960:53510"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4723:1889":{"id":"1:4723:1889","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4724:1825","1:4725:55208","1:4727:55209","1:4728:3392","1:4729:55210","1:4730:55211","1:4731:53056","1:4740:52594"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3775:2654":{"id":"2:3775:2654","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3175:135":{"id":"2:3175:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3177:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3380:2611":{"id":"2:3380:2611","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3382:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5797:1877":{"id":"1:5797:1877","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5798:50638"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3389:2506":{"id":"2:3389:2506","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:181","2:3391:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2572:127":{"id":"1:2572:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2573:50668","1:2575:55464","1:2576:55465","1:2577:53761"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10299:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3166:75":{"id":"2:3166:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13529:57450":{"id":"2:13529:57450","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:16004:1737","self::pattern":"2:13054:2407"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3519:130":{"id":"2:3519:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3521:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3522:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13427:57432":{"id":"2:13427:57432","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2863:97":{"id":"2:2863:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2865:1807"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3358:2619":{"id":"2:3358:2619","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3360:181","2:3361:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6088:58089":{"id":"5:6088:58089","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10934:214":{"id":"2:10934:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10936:181","2:10937:51462","2:10938:51463","2:10939:51464","2:10940:51465","2:10941:753","2:10942:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10925:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13508:57443":{"id":"2:13508:57443","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13419:50981":{"id":"2:13419:50981","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13523:51504":{"id":"2:13523:51504","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:16004:1737","self::pattern":"2:13054:2407"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6103:58091":{"id":"5:6103:58091","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3396:2040":{"id":"2:3396:2040","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3398:181","2:3399:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5727:1871":{"id":"1:5727:1871","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5728:50638","1:5729:53120","1:5730:53121"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8413:1851":{"id":"2:8413:1851","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8415:35877","2:8417:4194","2:8418:53023"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13470:28234":{"id":"2:13470:28234","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:16004:1737","self::pattern":"2:13054:2407"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12846:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3269:211":{"id":"2:3269:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3734:137":{"id":"2:3734:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3736:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8880:2039":{"id":"2:8880:2039","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3492:116":{"id":"2:3492:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3493:221","2:3494:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9343:1970":{"id":"1:9343:1970","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9344:53657","1:9345:53658","1:9346:53659","1:9347:53660","1:9348:53661","1:9349:35879","1:9350:53656"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5741:1872":{"id":"1:5741:1872","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5742:54993","1:5743:50831","1:5744:50638","1:5745:54994","1:5746:2332","1:5747:2333","1:5748:54995","1:5749:1304","1:5750:54996","1:5751:54997","1:5752:54998","1:5753:54999","1:5754:55000","1:5755:55001","1:5756:55002","1:5757:55003"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6557:2016":{"id":"1:6557:2016","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6558:53584","1:6559:53585"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6859:1864":{"id":"1:6859:1864","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6860:52731"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13441:51487":{"id":"2:13441:51487","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:16010:1742"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6861:1861":{"id":"1:6861:1861","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6862:53437"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3281:220":{"id":"2:3281:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3440:2525":{"id":"2:3440:2525","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3442:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13438:2089":{"id":"2:13438:2089","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:16010:1742","crate::ops::Index":"2:3577:2159","str::slice_mut_unchecked":"1:16010:1742"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:22940:1973":{"id":"2:22940:1973","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22930:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13423:57431":{"id":"2:13423:57431","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:16010:1742"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8473:1850":{"id":"2:8473:1850","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8474:793","2:8475:50981"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10303:2466":{"id":"2:10303:2466","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10304:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13432:51463":{"id":"2:13432:51463","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47495:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22877:2766":{"id":"2:22877:2766","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22878:2668","2:22879:1247","2:22880:1272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13456:51098":{"id":"2:13456:51098","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13054:2407","prim@char":"1:16004:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23137:2669":{"id":"2:23137:2669","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23774:2665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23128:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13539:50984":{"id":"2:13539:50984","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13482:51499":{"id":"2:13482:51499","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:16004:1737","self::pattern":"2:13054:2407","str::rsplitn":"1:16010:1742"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49566:2898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8602:157":{"id":"2:8602:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8603:2780","2:8604:922","2:8605:53782","2:8608:53783","2:8609:495","2:8611:51460","2:8614:53784","2:8615:53785","2:8616:2593","2:8617:2577","2:8619:2561","2:8621:2587","2:8622:53786","2:8624:841","2:8627:53787","2:8634:2582","2:8636:2583","2:8639:2581","2:8640:2589","2:8641:2592","2:8643:2595","2:8645:2588","2:8648:1308","2:8649:2594","2:8650:2591","2:8654:53788","2:8657:2584","2:8658:2585","2:8659:2586","2:8661:52594","2:8662:1857","2:8664:53789","2:8667:53790","2:8669:53791","2:8679:53792","2:8694:53793","2:8696:53794","2:8700:53795","2:8709:53796","2:8712:53797","2:8714:53798","2:8717:276","2:8724:294","2:8731:3967","2:8738:53799","2:8747:53800","2:8757:1014","2:8764:53801","2:8771:2450","2:8772:2447","2:8773:2452","2:8785:2451","2:8792:2449","2:8804:2448","2:8811:2590","2:8812:53802","2:8817:2579","2:8820:2578","2:8823:2580","2:8824:53803","2:8826:53804","2:8828:415","2:8831:53805","2:8834:997","2:8837:53806","2:8840:604","2:8843:53807","2:8846:907","2:8848:826","2:8850:792","2:8852:713","2:8854:696","2:8856:51527","2:8857:51528","2:8865:51529"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13479:57436":{"id":"2:13479:57436","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:16010:1742","str::split_terminator":"1:16010:1742","self::pattern":"2:13054:2407","prim@char":"1:16004:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49530:2926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12993:2098":{"id":"2:12993:2098","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12994:126","2:12995:53042"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4741:1917":{"id":"1:4741:1917","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4742:53676","1:4743:36291","1:4744:53677","1:4745:53678"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5719:1870":{"id":"1:5719:1870","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5720:50902","1:5721:50904","1:5722:50903","1:5723:50905"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13439:57433":{"id":"2:13439:57433","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3581:2631","str::slice_unchecked":"1:16010:1742","`str`":"1:16010:1742"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13497:57439":{"id":"2:13497:57439","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8448:120","self::pattern":"2:13054:2407","prim@char":"1:16004:1737","str::matches":"1:16010:1742"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49684:2933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3435:2522":{"id":"2:3435:2522","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3437:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3581:2631":{"id":"2:3581:2631","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3583:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3577:2159","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12501:3106":{"id":"2:12501:3106","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12502:2780","2:12503:57161"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10530:142":{"id":"2:10530:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10531:715","2:10533:52645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4051:1990":{"id":"2:4051:1990","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4052:53761"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23089:12308":{"id":"2:23089:12308","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23090:56379","2:23091:56380","2:23092:56381"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23082:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10307:2468":{"id":"2:10307:2468","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10308:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10575:2038":{"id":"2:10575:2038","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10576:146","2:10577:29690","2:10578:53089"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10305:2467":{"id":"2:10305:2467","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10306:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13491:57438":{"id":"2:13491:57438","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13538:50987":{"id":"2:13538:50987","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4748:1898":{"id":"1:4748:1898","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4749:55336","1:4750:55337","1:4751:55338","1:4753:1919","1:4754:55339","1:4756:51494","1:4757:3469"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4666:1888","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13442:2956":{"id":"2:13442:2956","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:16004:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49432:2920","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3401:2041":{"id":"2:3401:2041","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:181","2:3404:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13426:52838":{"id":"2:13426:52838","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12525:3068"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13446:28367":{"id":"2:13446:28367","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:16010:1742"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49745:2936","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13767:138":{"id":"2:13767:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13768:181","2:13769:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3648:2998":{"id":"2:3648:2998","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3650:55923","2:3651:55924","2:3652:51503"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:22751:2765":{"id":"2:22751:2765","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22752:2668","2:22753:56421","2:22754:56585","2:22755:56586","2:22756:56587","2:22757:39330","2:22758:56588","2:22759:56589","2:22760:56590","2:22761:56591","2:22762:56592","2:22763:56593","2:22764:56594","2:22765:56595","2:22766:56596","2:22767:56597","2:22768:56488","2:22769:56598","2:22770:55980","2:22771:55979","2:22772:55981","2:22773:56422","2:22774:56423","2:22775:56424","2:22776:56425"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13417":{"id":"2:13417","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12514:1340","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13418:793","2:13419:50981","2:13420:57429","2:13421:57430","2:13423:57431","2:13426:52838","2:13427:57432","2:13428:304","2:13429:51466","2:13430:51462","2:13432:51463","2:13434:51464","2:13436:51465","2:13438:2089","2:13439:57433","2:13440:51486","2:13441:51487","2:13442:2956","2:13443:2436","2:13444:2094","2:13445:28377","2:13446:28367","2:13447:3469","2:13448:57434","2:13449:28362","2:13450:51503","2:13453:51096","2:13456:51098","2:13459:3967","2:13463:3968","2:13467:51494","2:13470:28234","2:13473:51497","2:13476:57435","2:13479:57436","2:13482:51499","2:13485:51501","2:13488:57437","2:13491:57438","2:13494:1822","2:13497:57439","2:13500:57440","2:13503:57441","2:13506:57442","2:13508:57443","2:13510:57444","2:13512:57445","2:13513:57446","2:13514:57447","2:13517:57448","2:13520:10822","2:13523:51504","2:13526:57449","2:13529:57450","2:13532:57451","2:13535:2813","2:13537:3113","2:13538:50987","2:13539:50984","2:13540:50983","2:13541:57452","2:13543:2022","2:13544:57453"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8367:2546":{"id":"2:8367:2546","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8369:53804"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13488:57437":{"id":"2:13488:57437","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13420:57429":{"id":"2:13420:57429","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13476:57435":{"id":"2:13476:57435","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"1:16010:1742","self::pattern":"2:13054:2407","str::split":"1:16010:1742","`DoubleEndedIterator`":"2:8448:120","prim@char":"1:16004:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49512:2925","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7795:2179":{"id":"1:7795:2179","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7796:53779"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23465:2670":{"id":"2:23465:2670","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23466:1270","2:23467:1269","2:23468:1267","2:23469:1266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22877:2766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2967:184":{"id":"2:2967:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2969:997","2:2970:826","2:2971:792","2:2972:713","2:2973:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3522:131":{"id":"2:3522:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3524:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3525:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10299:119":{"id":"2:10299:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10300:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2921:183":{"id":"2:2921:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2923:604","2:2924:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:9259:2199":{"id":"2:9259:2199","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3352:2616":{"id":"2:3352:2616","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3354:181","2:3355:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8887:2634":{"id":"2:8887:2634","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7928:2635","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13544:57453":{"id":"2:13544:57453","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:16004:1737"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49779:2939","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3577:2159":{"id":"2:3577:2159","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3579:181","2:3580:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3279:106":{"id":"2:3279:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3427:2518":{"id":"2:3427:2518","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3429:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6790:1894":{"id":"1:6790:1894","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6791:50615"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8404:151":{"id":"2:8404:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8405:2780","2:8406:2028","2:8407:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13430:51462":{"id":"2:13430:51462","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47495:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13459:3967":{"id":"2:13459:3967","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47495:176","self::pattern":"2:13054:2407","prim@char":"1:16004:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:2408","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5789:1875":{"id":"1:5789:1875","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5790:53576"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3740:2531":{"id":"2:3740:2531","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3742:54450"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3182:227":{"id":"2:3182:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3184:127","2:3185:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6787:1892":{"id":"1:6787:1892","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6788:50957","1:6789:52863"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"paths":{"6:6094:37395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:5632:3506":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:13564:49789":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:6013:40641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:6859:1864":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:4741:1917":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:2183:2033":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"12:2032:2027":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6413:3438":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:6247:40653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:7226:3678":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:1653:2141":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10081:3874":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:52246:2697":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:51051:55885":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:6999:3669":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:510:43736":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:900:2226":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:38871:2603":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:9261:2235":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:53428:17860":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"9:1020:3355":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"9:603:41524":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:48136:3014":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:46353:3095":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:10299:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:49405:3015":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:3522:42124":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:7858:2596":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12645:48713":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:12187:2066":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:1712:37469":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"12:2072:2034":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:10307:2468":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:10925:1887":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:5505:3500":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:11328:43766":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:10684:7972":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:46024:2723":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:6949:3822":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:4599:58220":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"6:4340:39604":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:1472:2150":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:12257:2130":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"12:2066:2033":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:3341:3195":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:3506:3789":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:22930:1887":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:12521:48644":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:5544:39475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:11668:2027":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:2843:3777":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11254:3913":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:10266:3860":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:49462:1924":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:4179:39590":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4005:39570":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:46290:28912":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:8391:3121":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:12004:2172":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:15498:3450":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:5244:40220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:48803:55973":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:46486:3005":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:3352:2616":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:11120:1920":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:5039:2840":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:3559:2767":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:15032:2175":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:51147:2682":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:4762:42733":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:51285:2695":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:8107:1950":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:46612:2536":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:14821:2176":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:22993:2668":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:51030:55892":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:4378:2028":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:11822:44675":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:6695:50656":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:51546:2711":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:7467:3607":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:3362:2033":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:9368:43747":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:5833:3127":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6636:3622":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:24669:2256":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10448:3867":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:24237:2989":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:48531:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"12:1666:3432":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"15:269:3446":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:12158:2064":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:9133:43745":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:13893:29448":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:3682:1928":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:3492:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:46413:2938":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:6787:1892":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:7420:3627":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"5:374:3203":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4440:39617":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:5376:2310":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13453:49775":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10543:43969":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:12327:48630":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:1311:3956":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:8404:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:50421:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:8176:3117":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:46284:2023":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:22804:2769":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:6569:3811":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:13098:49243":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:4078:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"12:2392:59418":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"18:730:60307":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:4684:1915":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:15474:26446":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:4434:1944":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:2283:2643":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4425:39615":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:12227:2344":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:5500:2317":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:8344:3225":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:4614:42710":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:4639:1906":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:8115:2028":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:45876:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:5797:1877":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:11506:10421":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:3883:39560":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:10975:44030":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:545:36567":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:6438:2542":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"0:0:1610":{"crate_id":0,"path":["winapi"],"kind":"module"},"18:830:3973":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:3525:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:7216:3677":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:7738:3682":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:11479:1895":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"11:54:3409":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:8446:2030":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:37651:2446":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:25243:2828":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:49630:2930":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:10840:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:3581:2631":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:11726:44551":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:4699:58219":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:24013:35565":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:9639:50860":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:3740:2531":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:6768:3818":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:48842:55948":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:3519:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:6176:3652":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:4308:39600":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:161:36252":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:3993:39569":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12287:48628":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:10295:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:2594:53613":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"12:1203:3421":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:5522:3501":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:11163:1924":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:8146:57251":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13978:49891":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:11575:2110":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:9634:53173":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:10661:6958":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:49566:2898":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:24052:56745":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:53399:17857":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:8481:2061":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:4666:1888":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:1600:37459":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:9768:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:9971:60283":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:5231:42977":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:5030:2223":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:12168:48619":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:6964:41201":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:3939:42285":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:51696:2691":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:12456:48639":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:4386:42632":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"12:1103:2149":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:12494:48642":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:11598:2111":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:3960:39565":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:2508:2747":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:49480:2895":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:46641:2539":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"12:2059:2032":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:32500:56362":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"6:4055:39576":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:5201:40215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:7514:3626":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:10701:7979":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:13942:49885":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:48258:2466":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:681:43738":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"9:722:3289":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:24567:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:22940:1973":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:6644:3665":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:4098:39582":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:48265:2465":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:8646:2338":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11539:44443":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:5395:40229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:10211:43824":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"9:900:41447":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:49530:2926":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:10646:6955":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:10253:3857":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:3772:42168":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:8164:56481":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"5:3375:3196":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:3411:2511":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:5285:40221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:24873:2975":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:539:36566":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:6437:1894":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:46397:3090":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:0:1717":{"crate_id":17,"path":["object"],"kind":"module"},"2:49726:2934":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:15986:50698":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:5183:40214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:11231:3915":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:5927:3521":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"12:2280:2151":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:10962:44031":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:15754:52580":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:7255:55191":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11678:44493":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:9849:60274":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11406:44157":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:12993:2098":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:49865:2412":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:1606:37460":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:3648:1933":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:9259:2199":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:3800:42171":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:6072:3624":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:4417:42638":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"9:157:3305":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"16:5433:3494":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:9961:43757":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"14:0:1714":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:13590:49792":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:10618:2232":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:2200:58195":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:11159:43762":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:11199:43764":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:1626:37462":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"18:0:1718":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:6554:3662":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12051:48550":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:10377:3924":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:7477:3628":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:7042:3826":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:12010:48449":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:2162:2029":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:9839:3895":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:49745:2936":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:4506:42652":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:4671:42717":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:47495:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:9005:43741":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:55967:2749":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:1497:2143":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:50182:2948":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:12302:2211":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:56351:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11143:1924":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:5672:3507":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:13587:50878":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:11962:43978":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:13279:35839":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"17:12408:48636":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:15391:2310":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:3488:2030":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:9332:3881":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"9:809:2110":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:7205:3676":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:16010:1742":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:13933:49884":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:48522:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:13370:49412":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:3287:1976":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:9476:43750":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:16026:1756":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:50174:2947":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:5653:1968":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:12741:48725":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:45968:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:5415:1906":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:46682:2549":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:12010:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"12:764:2138":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:14808:1969":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:12252:2129":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:12124:2060":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"12:432:3424":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:32340:3027":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"17:12783:48789":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:7174:3673":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:2310:3267":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:53556:17868":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:11077:1952":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:1486:2152":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:46031:1991":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:7392:3611":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:15353:2309":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:46312:2773":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:51253:55891":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:10804:2264":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:7332:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:9065:43743":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"9:776:3335":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:57699:55957":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"5:3039:57304":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:5452:59169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:9689:60275":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:2458:7984":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:10988:44029":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:4532:39627":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:6032:3534":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"7:0:1481":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:8887:2634":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:6685:41016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:14958:53158":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:5717:3510":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:47553:2028":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:3372:2215":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:10882:1936":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:10279:3874":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:3368:2214":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:51595:2696":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:46299:2772":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:52163:2712":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:1642:2151":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:12946:49186":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:6319:2329":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7549:3614":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:14804:7979":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:13041:49188":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:11482:44167":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:11180:2001":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"1:1190:6961":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:4038:39574":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:8180:2201":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:3981:39568":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:7119:3535":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:3717:2999":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:10826:1883":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:10407:3922":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:136:50247":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:48795:2158":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:32696:2726":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:51445:2716":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"8:0:1709":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:3040:57250":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:5213:40217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:4515:3213":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"6:1621:37461":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:7236:3679":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:5952:2382":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:13772:49841":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"9:0:1710":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:47968:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:5436:40234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:11439:2901":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:4535:42656":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:6853:41175":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:2187:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"12:472:59406":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"9:469:41419":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:22564:56766":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:6976:41202":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:10309:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:1939:2030":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:13788:49843":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:50194:2951":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"12:353:59411":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:626:36576":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13331:49409":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:4921:2838":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:13598:49793":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:10866:2288":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:5295:42123":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:6366:3439":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:8379:3120":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:14626:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:11457:10417":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:9280:42120":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:299:60290":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13963:49886":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:6126:3650":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:3896:39561":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:2512:3923":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6014:3649":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:4394:2294":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12142:48617":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:10575:2038":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:1472:2029":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"9:686:3286":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:13130:2414":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:3197:2267":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:51358:55886":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:51901:55888":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:5207:40216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:4852:42748":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:53380:2678":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:49986:2421":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:4048:39575":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:22536:2446":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:3758:2722":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:46551:8586":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:12671:48715":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4218:39593":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12467:48640":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:24250:2988":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:46434:3093":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:2945:3802":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:7732:2173":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:7507:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:7849:58212":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:8197:2028":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"7:85:41301":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:5456:3495":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:9974:2878":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:53408:17858":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:3396:2040":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10558:43970":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:593:36571":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:6605:3620":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:6731:3815":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"12:1162:3419":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:7379:2028":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:5785:1874":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:5971:36484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:12262:48626":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:15412:2317":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:11354:2311":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:9034:43742":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:10673:43975":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:14936:53177":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:11356:2896":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"12:183:3427":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:11045:43759":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:3269:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:10061:43829":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4526:39626":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"18:867:3976":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:13898:49876":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:13782:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:4641:42712":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:2314:3925":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:6132:40646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:51869:55887":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:46751:2555":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:13377:49424":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:24215:35591":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:2957:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:3041:3782":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:51099:2702":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:3759:2027":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:10317:3880":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:5595:3505":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"18:745:60313":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:4752:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:12023:2174":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"12:895:3411":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:13386:49741":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:32348:56363":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:9627:50871":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:52438:2674":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:858:3975":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:3351:2281":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:10540:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:48850:55969":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:11794:44673":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:10529:43872":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:46691:2544":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:4885:2837":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12507:48643":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:2866:3778":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:8413:1851":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:24635:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:8602:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:5488:3499":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:3729:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:1488:2141":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:2062:1906":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:46420:3091":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:0:1331":{"crate_id":1,"path":["std"],"kind":"module"},"1:8193:50873":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"6:5363:40226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13547:49787":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:49716:1925":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:3516:1849":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13192:49294":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:47614:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:6464:3618":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:5837:3125":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:88:36185":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:13842:49849":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:13923:2171":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:24147:35590":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:1764:37474":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:2751:1984":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:12118:48558":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:7441:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:22877:2766":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:49042:3111":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"18:169:50249":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:3396:2034":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:4965:2156":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:10635:43941":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13627:49801":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:9799:43754":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:10530:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:12742:2264":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:4538:39628":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:8363:2547":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:14643:55140":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13402:49769":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:13884:49858":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:3577:2159":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:5889:58232":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"9:963:3353":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:11245:2893":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"9:1075:3356":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:6240:40652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:3933:39564":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:3339:2275":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:12385:48635":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:7264:3621":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:8908:2200":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:12610:48663":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13163:49249":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13465:49776":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:12735:2924":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:4296:39599":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:7927:2252":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"2:9763:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:7406:3609":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:13154:49248":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:24222:3043":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"9:1056:3348":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:8106:3131":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"12:2052:2031":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:4230:42551":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:157:36251":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:1912:37609":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:10305:2467":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:1551:37454":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:3278:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:6928:39755":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"18:850:3974":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:10957:2192":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:8121:3237":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:1236:43827":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:4464:39620":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:46631:2538":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"10:0:1711":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:9649:43751":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:12083:50596":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"6:5298:40223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:6691:3666":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:2866:2632":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:53439:17861":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:7856:3685":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:5579:40266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:5960:2383":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11696:44494":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:24499:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:4516:39625":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:3987:39415":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:46366:2939":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:23089:12308":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:6357:3657":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:14166:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:11397:2898":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:1607:2138":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:7870:3612":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:24805:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:15331:2008":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:16016:1746":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"12:856:2140":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:50023:2422":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12771:43766":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:10160:43828":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:3287:3788":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:2912:3779":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:49438:2921":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:12028:48493":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:9718:2303":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"16:6424:3659":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:49046:3110":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:8954:3888":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:6518:3661":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:5790:3516":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:49269:2904":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:5775:1873":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:1619:2149":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:12247:48625":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:16014:1744":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:15216:2085":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:5421:3493":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:8388:2110":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"18:651:3979":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10611:43973":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:4732:53088":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:3877:39559":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:8203:2028":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:12480:48641":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:5815:3517":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:1651:2152":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:51744:2676":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:4362:39607":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11640:44490":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:13073:2410":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:48052:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:1674:2143":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:50058:2425":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:51673:2688":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"12:2269:2150":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:7629:2168":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:16011:1743":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:5314:42121":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"12:2036:2028":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:23137:2669":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:9809:60278":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12917:49185":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:15970:53644":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:14588:50675":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:49420:2652":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:10001:43810":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:4510:1941":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:5387:40228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:46650:2540":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"11:0:1712":{"crate_id":11,"path":["adler"],"kind":"module"},"17:13637:49802":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:7786:3616":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:7073:3670":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:10242:1889":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:46782:1921":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:6905:39752":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:13240:49298":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12725:48724":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:9896:60289":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:32334:2197":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:1634:37463":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:16008:1740":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"18:637:60299":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:8362:57260":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:3423:2516":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:6208:3653":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7884:3613":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:4397:2295":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:53129:2690":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:894:2225":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:48549:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:13554:49788":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:4471:1945":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:10566:2221":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:3336:2032":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:51721:2673":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:24185:35592":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:4135:39586":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:12307:48629":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:47528:2780":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:6202:40649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:47007:31104":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:48516:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"16:2773:3803":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:14034:2172":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:23942:2972":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:22583:57169":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:9404:43748":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:3175:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:13786:2181":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:3342:2043":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:634:36577":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:11409:2381":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:13422:2324":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:12221:48623":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:1501:2144":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:5981:2386":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"12:2045:2030":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:4230:39594":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:10353:3926":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:7453:58197":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:11138:2138":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:1132:1992":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:10366:43738":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:5165:2479":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:10468:3893":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:24533:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:4142:39587":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:5719:1870":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:52939:2686":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:4607:1951":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:10200:43825":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:1843:58197":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:11628:44489":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:51180:2715":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:48279:2468":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:2863:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:56403:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:16024:1754":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:6031:10417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13540:49786":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:5407:3492":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:15130:2183":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:3812:2653":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:15072:50597":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:11250:2006":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:11268:2165":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"6:4346:39605":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:4208:39592":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:6181:40648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:8690:2339":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:10041:43812":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:3358:2619":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:11957:2915":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"15:0:1715":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:5373:2309":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:2967:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:10874:1934":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:6685:1872":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:49911:2419":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:10864:43946":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:12699:48717":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:601:36572":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:6491:3660":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:6152:3605":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:7303:3681":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"14:56:44167":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:49279:2905":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:9260:2198":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:7286:55191":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:775:60299":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:10311:2469":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:14601:2266":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"18:812:3971":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:3338:3525":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:47545:2138":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:49612:2929":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:1011:2027":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:8132:2253":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"16:5855:3518":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:14079:2960":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:3429:3530":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:12262:2073":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:4160:39589":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"9:234:3313":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:1680:37466":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11970:43976":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:11924:2914":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:9528:1922":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:10962:1937":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13488:49778":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:12065:50859":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:4723:1889":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:5156:2846":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:8925:2359":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:14236:1943":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:1157:6960":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:2292:2644":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:1482:2030":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:1669:37465":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:8448:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:5271:40200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:571:36569":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:12811:2931":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:4643:58219":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:46989:31103":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:6150:40647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:4783:2606":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:7257:58197":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:56377:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13180:49292":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:10584:3944":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:50202:2946":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:12685:48716":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:14242:2078":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:14952:53181":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:10452:53169":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:49371:2912":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:10952:2191":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:586:36570":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:24737:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:4432:1943":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:49251:2902":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:3172:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"12:1256:2152":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:1618:2028":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13356:49411":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:4454:39619":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:12795:2928":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13205:49295":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:3734:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:3178:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:3772:2138":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:9264:42121":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:6082:2319":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:12735:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:47562:3008":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:16022:1752":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:47666:2027":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:6640:36521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:5290:40222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:10447:55961":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"14:231:3123":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:4020:39572":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:3431:2520":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:22604:57164":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13520:49782":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:12501:3106":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:3329:2027":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:12203:2067":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:5707:3508":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"5:1215:3245":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:9296:43729":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:16025:1755":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:5584:1582":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"9:27:3337":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:4728:2761":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:4473:1946":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:4242:58197":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:12053:2176":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"13:0:1707":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:3648:2998":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:13986:49893":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:3376:2626":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:1694:3243":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:52403:2692":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:52796:2718":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:8263:2157":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10106:3950":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:51124:2694":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:10052:43813":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:4485:39622":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:12552:48646":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:3839:58197":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:48583:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:6937:1866":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:5561:3503":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:5008:1998":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"6:5995:36443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:51397:55884":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:10667:2045":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:14130:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:7928:2635":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:5185:2072":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:5257:40199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:1524:2147":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:10623:43974":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:24703:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:5423:40232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"18:740:60308":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:46730:2553":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:11519:44383":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:645:3982":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:10801:43942":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:46720:2552":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:3038:3133":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:9088:43744":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:13506:49780":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:15509:3450":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:11993:48446":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:14000:49927":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:3365:3526":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:9060:2345":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:46059:2501":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:46111:2787":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:5029:42800":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:5975:3647":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:6668:41015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:5875:58237":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"16:7333:3625":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:15483:50689":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"9:692:3288":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"16:2733:3528":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:9186:3886":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:13318:49408":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:2769:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:10313:2459":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:5960:3523":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"15:248:3442":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:14239:1945":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:10887:43944":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:12208:48622":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:6959:1884":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:12073:48551":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:5034:2839":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:10710:1920":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"5:1644:2140":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:45812:2768":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"18:152:50248":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:4350:42621":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:5788:58197":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:11186:43763":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:8488:2062":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:13865:49852":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:1588:37458":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"14:47:42041":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:13912:49882":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:1733:2323":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:49512:2925":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:8160:2028":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:11425:2900":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:12061:50722":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"12:843:2139":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:11685:2116":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:46374:3089":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:1721:37470":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:46702:2550":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:8849:3911":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:5444:40235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:13609:49794":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:50451:1987":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:1558:37455":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:11714:44550":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:7378:3610":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12431:48637":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:6964:3008":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:7649:2169":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:5416:40231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:13746:49805":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:53480:17864":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:7117:10420":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:52372:2689":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:6672:3178":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:15045:55144":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:6764:1906":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:23139:2668":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:10587:2230":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:1531:37451":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:5789:1875":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"18:755:60298":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"9:41:3338":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"18:713:2446":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:49200:2897":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:9729:60276":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:2188:2034":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:2362:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:5631:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:5766:3515":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4198:39591":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"12:2404:59420":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:49754:2937":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:52132:2709":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:50037:2423":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:6893:2545":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:13819:49848":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:4287:39598":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:12155:48618":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:53302:2693":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11378:3882":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11835:44688":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:1576:37457":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:2793:1985":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:46590:1920":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:50071:35841":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"2:2921:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:3505:1927":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:45945:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:3169:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"12:1682:3433":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:16004:1737":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:11809:44674":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:46659:55541":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:23664:1972":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:16021:1751":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:3310:1848":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:6269:3656":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11915:48439":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:47842:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:5408:3086":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:4474:39621":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:13306:49406":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11750:44661":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:2395:7965":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:3325:2271":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:3389:2506":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:3907:39562":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:52006:2717":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:6780:3667":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:51234:2707":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:48619:2464":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:11360:2312":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11015:44055":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:10420:3921":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:8639:2336":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:7642:3160":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:9162:3914":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:49684:2933":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"18:767:60301":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:51378:2672":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:52325:2685":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:6077:37392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:5384:3491":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:6126:40645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4446:39618":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:51769:2677":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:13497:49779":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:4790:42736":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:6934:39756":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:48561:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:9771:53179":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"16:2889:3797":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:7843:3684":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:9381:2408":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:12282:2210":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:10292:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:9659:60291":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4386:39610":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:696:2220":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"19:117:60317":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"17:11767:44669":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:6893:39750":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:9769:60292":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:3561:1932":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:1694:37467":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:533:36565":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:6087:3603":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:16017:1747":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:5346:3604":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:4434:39616":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:3522:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:7620:3159":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:46468:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:7824:58214":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:46980:2200":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:10403:3894":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:5360:3490":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:8313:3005":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:3044:57305":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:6265:40654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:5996:3648":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:4157:3945":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:50362:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"12:0:1713":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:45784:2530":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:2543:3891":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:14317:2232":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:9594:52582":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:12095:48557":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:11156:2000":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:13963:56387":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:10331:3895":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:11340:9720":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:7571:3602":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:3200:1914":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:5968:2385":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:3018:3781":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:47758:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:11365:2313":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:3604:42126":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:5226:40218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:32159:3038":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:16019:1749":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:1507:2145":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:15229:2091":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:11738:44660":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"18:621:60304":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:8474:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:12234:48624":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11082:3887":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:3182:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:783:6848":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:10705:3254":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:4392:39611":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4315:39601":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:22581:57167":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:4448:42644":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:1075:2020":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:7761:3683":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:7024:3825":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:2754:3527":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:5375:40227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:49300:2907":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:50198:2945":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:11232:2005":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"2:24839:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:10799:1978":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:11206:2892":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:5753:3514":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"14:189:42041":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:3091:3840":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:11779:44670":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:1149:6957":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:1235:3246":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:8473:1850":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:3145:3792":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:47605:35800":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:7111:58214":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:4075:39579":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:2572:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"6:580:9349":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:12772:2927":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:10303:2466":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"14:250:42049":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:10858:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:2553:3251":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:4304:42600":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:50354:29447":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:37627:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:6861:1861":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:4734:42730":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"18:661:3983":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:5146:40171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:2155:2027":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:46453:2777":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:3194:2265":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:24093:2815":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:11086:1916":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:4400:2296":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"12:2398:56379":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:1537:37452":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:22853:1887":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:15185:2083":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:6688:3191":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:3384:2629":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:6922:39754":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:6807:3668":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:28054:2638":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:15019:2174":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:24129:35589":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:13532:49785":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:7795:2179":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:16002:1735":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:4032:2194":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:3104:2458":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:47716:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13733:49804":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:46427:3092":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:3337:2213":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"12:162:3423":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:6591:3664":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"3:323:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:47537:2027":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:16018:1748":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:7670:2561":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"12:933:2144":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:49448:1922":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:16023:1753":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:3966:39566":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:5475:40236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:8463:3155":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:9245:3861":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:9174:55204":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:13172:49250":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:2219:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:7804:3615":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11616:44454":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:1195:58583":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:47800:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:11604:44453":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:820:6848":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"7:38:41294":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:13780:49842":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:3277:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:24169:35581":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:13258:49339":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:2397:7966":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"12:2253:2149":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:5605:2609":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:15235:2092":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:50206:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:10816:2266":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:16003:1736":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:3370:2031":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:45991:2997":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12537:48645":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4321:39602":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:46739:2554":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"12:1703:3434":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:10128:3952":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:53533:17867":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:10656:43956":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:9861:6848":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:1727:37471":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:432:1852":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:49736:2935":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:4066:1989":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"5:69:3154":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:16027:1757":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:23465:2670":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:3440:2525":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:14609:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:3103:1887":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:5308:40224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:7158:3672":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:5538:40264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:10179:43826":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:3736:1935":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:1530:2148":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11588:44452":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:6662:41014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:56364:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11932:48440":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:49361:2911":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:13221:49296":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6620:3809":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:12659:48714":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:4823:42744":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:1662:37464":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12582:48648":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:23082:1887":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:11150:1925":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:46771:2557":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:50186:2952":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:46761:2556":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"12:379:3426":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:12773:55203":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"2:46561:8585":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:5402:40230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:10844:3895":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:7756:2534":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:11114:2027":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:10236:3865":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:8330:3224":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:6951:39758":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:46581:2533":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:49666:2932":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:13767:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:5101:2845":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13119:49244":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:11653:44491":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:10912:44043":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:10677:2153":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:3970:58197":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:46473:3004":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"2:24035:2820":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"13:120:41996":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:1567:37456":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:2166:2030":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:57678:55966":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:672:36606":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:10571:43971":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:16029:1759":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:48820:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:6110:3644":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:7453:3606":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:14570:50682":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:24771:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:6219:3654":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:1748:37473":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:886:3977":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:24068:35553":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:6511:2543":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4012:39571":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"14:244:42043":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:9759:43753":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:4127:39585":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:5736:3511":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:14069:2607":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:3972:39567":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"18:721:55963":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:12038:2175":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:13064:2408":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:47682:2028":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:3488:3790":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:14565:50716":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:1493:2142":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:10502:43871":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:5858:2377":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"1:7677:2171":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:12182:48620":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:48832:2110":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:9886:43755":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:10477:3892":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:11572:44451":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:12712:48718":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:14242:1941":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:46792:2558":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"12:880:2030":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:9933:43756":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"12:952:2146":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10149:43755":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:6166:3651":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:48635:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:9210:43746":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:13858:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:11674:2115":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:4443:2027":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:923:3235":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:11297:50690":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"1:16005:1738":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:7250:3680":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:8367:2546":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:6111:40643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:9733:2304":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:3894:3230":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:22840:2655":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:13924:49883":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:4922:42768":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13296:49344":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:3435:2522":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:51211:2703":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:12040:48549":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:3417:2505":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:6863:1865":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:16028:1758":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"18:802:3970":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:53518:17866":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:6252:3655":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:4512:1942":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:12795:48792":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:12138:2063":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:8929:43740":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:618:36575":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:6682:3619":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:6199:2328":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:16009:1741":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:11453:1893":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:11070:1950":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:11414:2384":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"15:230:3441":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:53503:17865":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:11615:2112":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"18:821:3972":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12982:49187":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:47018:31106":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:6634:55908":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"5:8250:2037":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11118:43760":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"18:668:3984":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:13272:49341":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:2777:3250":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:4028:39573":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:12132:2028":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4356:39606":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"16:2794:3529":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:49842:2409":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:5741:1872":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:1428:2138":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:8298:3223":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:3218:3785":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:13961:2173":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:2159:2028":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:12525:3068":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:14103:53156":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:48811:2504":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:11137:1922":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11981:43977":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:13477:49777":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:1017:2253":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:8883:2633":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:32400:56328":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"1:11434:2331":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:23871:2970":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:8130:2029":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:4256:39596":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:5485:40237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:5430:40233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:11428:2311":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12275:48627":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:22549:56766":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:6024:40642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5979:37391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:4995:42791":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11337:3884":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:10577:50688":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:7792:2177":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:7823:3617":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:16015:1745":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:5735:1869":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:11026:43758":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:994:3236":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:3392:3794":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:3264:3787":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"12:928:2141":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:2262:3248":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:50190:2950":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:56390:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:2991:3791":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11847:44689":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:8902:43739":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:2330:3247":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"12:2040:2029":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:22602:57166":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:11277:43728":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:6117:40644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:50398:2958":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:12846:2892":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:4477:42648":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"12:979:2148":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:547:3512":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:48010:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:32299:2996":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:23470:12327":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:5237:40219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:49432:2920":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:4332:39603":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:3320:3841":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:13574:49790":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:4740:2762":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"13:232:59421":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:2968:3780":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:612:36574":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:2171:2031":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:611:3980":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:6557:2016":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:22751:2765":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:10814:3941":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:24106:2816":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:11499:44382":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:10565:1887":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:10592:2251":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:9766:53138":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"1:2456:4563":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:1526:37450":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:1438:2028":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"18:705:60299":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:9139:2128":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:49880:2415":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:51492:2704":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:565:36568":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:11208:2004":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"1:13568:7977":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:9440:43749":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:4277:39597":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:8027:2253":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:12057:56228":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"12:787:2142":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11434:44165":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:6257:3159":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:45860:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4088:39581":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:11318:2895":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:11658:2113":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:50344:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:1544:37453":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:3549:42125":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12442:48638":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:6391:3658":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:1415:2027":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:13348:49410":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:12247:2351":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:11402:2000":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:16020:1750":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:13760:49806":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:15122:50719":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:46:59405":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4493:39623":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:11420:2322":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:4080:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:50170:2944":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:49326:2908":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:46066:2478":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:4116:39584":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:15053:2210":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:11098:1918":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:46328:2775":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:10809:1882":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:3195:3784":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:0:1708":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:11283:2894":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:56338:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:53419:17859":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:12598:48649":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:10934:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4416:39614":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:6475:2029":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:8410:3229":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:7932:50863":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:23676:56770":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:1597:2027":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:6459:1979":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:2926:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:48498:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"12:1121:2150":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:13282:49342":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"12:815:2143":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:49770:2023":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:6101:3601":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:7212:2029":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:53192:2710":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:47926:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13620:49800":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:1633:2150":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:13685:49803":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:6238:3608":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:9467:53612":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"12:940:2145":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:11317:50715":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"16:6136:3645":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:8400:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"12:750:2027":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:10926:44052":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:13054:2407":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:9063:2134":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:38808:1986":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:9551:3912":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:1635:2139":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:10458:43870":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:13062:49242":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:8839:55204":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:49289:2906":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:4215:2029":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:10427:53161":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:46998:1951":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:4008:43945":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:53454:17862":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:6004:40640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:0:1716":{"crate_id":16,"path":["gimli"],"kind":"module"},"12:1784:59414":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:15092:2073":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:11130:1921":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:51316:2683":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:1740:37472":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4373:39608":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:7185:3674":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:11555:44444":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:2888:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:6954:3118":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:46973:31101":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:521:36563":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:1441:2149":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4509:39624":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:4306:2138":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:15975:6962":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:23770:1887":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:3775:2654":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:53595:17869":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:7975:50873":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"2:51821:55890":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:10028:43811":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:2194:31688":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:51076:2714":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:45901:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:10095:3949":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:5111:2478":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:11193:2002":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"17:10827:3942":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:15201:2084":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:13817:56707":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:3920:39563":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:9943:60287":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:6899:39751":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:3048:57306":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13582:49791":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:13284:35840":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"17:10788:43943":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:8138:3238":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:4300:1953":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"17:11001:44028":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:12744:50879":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:10071:3955":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"12:1238:3422":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:10580:2503":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13799:49844":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10435:43869":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:3118:3793":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:10252:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:12076:55202":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:10304:3877":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:13659:2099":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:12568:48647":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:13079:2411":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:47691:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:49894:2418":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"18:783:60299":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:50178:2949":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:1091:58197":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:1041:2019":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:13429:49771":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:50407:2959":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:4061:39577":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10224:43830":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:3380:2611":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:16007:1739":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:7663:2170":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:294:60282":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:9719:43752":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:50048:2424":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:49779:2939":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:14550:1896":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:607:43737":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"14:11:42041":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:6911:39753":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:3166:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:1457:2151":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:46603:2535":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:52589:2698":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:542:3538":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:5330:42120":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:3406:2042":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:50241:3024":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"17:10140:3895":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:51642:2684":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:2433:7977":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4067:39578":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"14:216:42050":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:1459:2140":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:51523:2708":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"14:194:42042":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:23128:1887":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:7295:3623":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:46391:2023":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:47884:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:8973:2196":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:14633:1916":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:53255:2675":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:3323:2270":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:3401:2041":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:2218:3198":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:4081:39580":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:11458:44166":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:3172:3783":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:4704:42725":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:56325:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11147:43761":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:3281:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:23774:2665":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"12:114:59409":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:1302:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"18:838:2410":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:2269:2640":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:13446:49772":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:3347:2614":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:53050:2706":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"12:399:3425":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6718:3814":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:52085:2705":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:5647:1966":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"12:971:2147":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:12343:48631":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"9:749:3290":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:2484:43858":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:8289:2253":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"6:5175:40213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:6054:37418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"12:1147:2151":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:47596:3010":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"12:777:2028":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:5328:40225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4410:39613":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:13810:49845":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:2397:2131":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:4955:42776":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:13084:2406":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"9:996:3354":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:5472:3498":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:5564:40265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:3274:1847":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"12:1183:3420":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:5273:3532":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:3064:3839":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:46802:2548":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:8738:2348":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:2816:3796":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:50228:2216":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:22934:1971":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10950:44054":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"12:2412:59416":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11947:48441":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"12:869:2029":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:10377:53609":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4402:39612":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:45922:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:11304:43765":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:1152:6959":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:50439:1988":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"18:897:3978":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4110:39583":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10599:43972":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:1663:2142":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:6699:50660":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"12:466:59410":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4379:39609":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:12195:48621":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:12171:2065":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:527:36564":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:9574:3889":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:1446:2139":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4270:2330":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:11524:2100":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:7342:3639":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:12756:48726":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:2177:2032":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:46343:3094":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:4051:1990":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:46711:2551":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:6577:3663":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:13939:50862":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:5580:3504":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:6226:40651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:791:3969":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:51339:2687":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:49584:2899":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12632:48712":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:3743:3938":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:7928:2500":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:3364:2622":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:47622:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10938:44053":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:14:1825":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:46621:2537":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:47674:2138":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:11358:3883":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:2027:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:9979:2879":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"9:927:41413":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:3241:3786":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:8880:2039":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:24121:35571":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10117:3951":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:46052:2500":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:10516:3897":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:9600:60288":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:12116:2027":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:10489:3896":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:1704:37468":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:7279:3827":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:6697:50658":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:513:36562":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:3279:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:11665:44492":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:6744:3816":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:11411:2899":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:8803:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:4000:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:3275:2600":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:4242:39595":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:49761:2938":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:4748:1898":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:6940:39757":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:3951:2030":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:51925:55882":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:6790:1894":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:7894:3642":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:53341:2713":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:7195:3675":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:8380:2253":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:10301:2465":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:9343:1970":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:1518:2146":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:48094:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:5208:2480":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:3658:53174":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:24601:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:49352:2910":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:6021:3776":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:3882:1936":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:12405:4563":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:14575:1882":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:7615:2167":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:3341:2276":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:49260:2903":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:3714:42135":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:49381:2913":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:48272:2467":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:4148:39588":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:49959:2420":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:3746:2598":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:53465:17863":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"12:2419:2037":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:5536:3178":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:5930:2380":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:13054:49240":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12373:48634":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:3247:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:4890:42761":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:3427:2518":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:12242:2207":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:7146:3671":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:13394:49742":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:6211:40650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:46673:2541":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"18:695:3985":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:49339:2909":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:607:36573":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:46503:3006":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:4670:1906":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"17:11100:3917":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:5727:1871":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"}},"external_crates":{"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":17}