{"root":"0:0:1648","crate_version":"0.3.9","includes_private":false,"index":{"5:5334:22946":{"id":"5:5334:22946","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11985:21645"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11985:21645":{"id":"2:11985:21645","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:30501":{"id":"2:11943:30501","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11565:7650","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::matches":"2:11940:1863"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42808:7668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:21644":{"id":"2:11984:21644","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:21757":{"id":"2:11896:21757","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7650"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11987:30515":{"id":"2:11987:30515","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4514:30515"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42885:7661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:21714":{"id":"2:11882:21714","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11954:30505":{"id":"2:11954:30505","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:21753":{"id":"2:11928:21753","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7650","str::rsplitn":"2:11931:21755"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42690:7639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11866:30490":{"id":"2:11866:30490","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11952:30504":{"id":"2:11952:30504","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11863":{"id":"2:11863","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11864:801","2:11865:19428","2:11866:30490","2:11867:30491","2:11869:30492","2:11872:26468","2:11873:30493","2:11874:311","2:11875:21715","2:11876:21711","2:11878:21712","2:11880:21713","2:11882:21714","2:11884:30494","2:11885:30495","2:11886:21739","2:11887:21740","2:11888:27208","2:11889:28650","2:11890:19613","2:11891:27219","2:11892:27223","2:11893:24316","2:11894:30496","2:11895:27209","2:11896:21757","2:11899:21758","2:11902:21759","2:11905:19332","2:11909:19333","2:11913:21747","2:11916:21749","2:11919:21751","2:11922:30497","2:11925:30498","2:11928:21753","2:11931:21755","2:11934:30499","2:11937:30500","2:11940:1863","2:11943:30501","2:11946:30502","2:11949:30503","2:11952:30504","2:11954:30505","2:11956:30506","2:11958:30507","2:11959:30508","2:11960:30509","2:11963:30510","2:11966:20371","2:11969:21760","2:11972:30511","2:11975:30512","2:11978:30513","2:11981:30514","2:11983:21643","2:11984:21644","2:11985:21645","2:11986:21646","2:11987:30515","2:11989:1972","2:11990:30516"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11880:21713":{"id":"2:11880:21713","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11886:21739":{"id":"2:11886:21739","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:11887:21740"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11890:19613":{"id":"2:11890:19613","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42572:2156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11892:27223":{"id":"2:11892:27223","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11891:27219"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42869:7652","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11887:21740":{"id":"2:11887:21740","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:11886:21739"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:30500":{"id":"2:11937:30500","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:21759":{"id":"2:11902:21759","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7650"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5317:2158":{"id":"5:5317:2158","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11885:30495":{"id":"2:11885:30495","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11863:1378","crate::ops::IndexMut":"2:2993:2051","str::slice_unchecked":"2:11884:30494"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:21758":{"id":"2:11899:21758","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7650"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5332:31170":{"id":"5:5332:31170","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:277:1894","`String`":"5:7180:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1894","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5323:31168":{"id":"5:5323:31168","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11876:21711":{"id":"2:11876:21711","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11865:19428":{"id":"2:11865:19428","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:1972":{"id":"2:11989:1972","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4515:1972"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42894:1973","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11891:27219":{"id":"2:11891:27219","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11892:27223"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42860:7653","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:30493":{"id":"2:11873:30493","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11889:28650":{"id":"2:11889:28650","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42562:7656","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11986:21646":{"id":"2:11986:21646","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11894:30496":{"id":"2:11894:30496","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42850:7664","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11869:30492":{"id":"2:11869:30492","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:11867:30491"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5315":{"id":"5:5315","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5316:31166","5:5317:2158","5:5320:31167","5:5323:31168","5:5331:31169","5:5332:31170","5:5333:2181","5:5334:22946","5:5335:22947"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11946:30502":{"id":"2:11946:30502","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11565:7650","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::rmatch_indices":"2:11949:30503"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42736:7665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5331:31169":{"id":"5:5331:31169","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11963:30510":{"id":"2:11963:30510","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7650"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:21751":{"id":"2:11919:21751","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11565:7650","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::split":"2:11913:21747"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42604:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11884:30494":{"id":"2:11884:30494","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11863:1378","str::slice_mut_unchecked":"2:11885:30495","crate::ops::Index":"2:2989:2050"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11960:30509":{"id":"2:11960:30509","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7650"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11590:7645","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11990:30516":{"id":"2:11990:30516","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4512:30516"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42903:7662","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11864:801":{"id":"2:11864:801","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11857:411"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:21760":{"id":"2:11969:21760","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7650"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11872:26468":{"id":"2:11872:26468","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11133:7654"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:1863":{"id":"2:11940:1863","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11565:7650","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::matches":"2:11940:1863"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42790:7667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11867:30491":{"id":"2:11867:30491","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:30511":{"id":"2:11972:30511","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7650"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:30507":{"id":"2:11958:30507","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11878:21712":{"id":"2:11878:21712","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11981:30514":{"id":"2:11981:30514","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11527:126","`FromStr`":"2:11526:2328"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40733:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11526:2328","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11526:2328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5320:31167":{"id":"5:5320:31167","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11983:21643":{"id":"2:11983:21643","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11956:30506":{"id":"2:11956:30506","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11978:30513":{"id":"2:11978:30513","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7650"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11934:30499":{"id":"2:11934:30499","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:30512":{"id":"2:11975:30512","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7650"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5335:22947":{"id":"5:5335:22947","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11986:21646"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:30498":{"id":"2:11925:30498","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11565:7650","str::split":"2:11913:21747","prim@char":"1:11857:411","str::split_terminator":"2:11922:30497"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42654:7669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:21747":{"id":"2:11913:21747","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11565:7650","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::split_whitespace":"2:11891:27219","str::rsplit":"2:11919:21751"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42586:2157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:21755":{"id":"2:11931:21755","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11857:411","str::splitn":"2:11928:21753","self::pattern":"2:11565:7650"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42708:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11888:27208":{"id":"2:11888:27208","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42556:7657","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:19332":{"id":"2:11905:19332","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40591:176","prim@char":"1:11857:411","self::pattern":"2:11565:7650"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:30497":{"id":"2:11922:30497","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11565:7650","str::split":"2:11913:21747","prim@char":"1:11857:411","`DoubleEndedIterator`":"2:7174:120","str::rsplit_terminator":"2:11925:30498"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42636:7670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:20371":{"id":"2:11966:20371","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7650"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5316:31166":{"id":"5:5316:31166","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1894","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1894","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:21715":{"id":"2:11875:21715","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5333:2181":{"id":"5:5333:2181","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1648":{"id":"0:0:1648","crate_id":0,"name":"winapi","span":{"filename":"src/lib.rs","begin":[6,0],"end":[71,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":[],"is_stripped":false}},"2:11959:30508":{"id":"2:11959:30508","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11949:30503":{"id":"2:11949:30503","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11565:7650","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::match_indices":"2:11946:30502"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42754:7666","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:27209":{"id":"2:11895:27209","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42878:7651","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:21749":{"id":"2:11916:21749","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7650"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11389:7641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:311":{"id":"2:11874:311","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11875:21715","`u8`":"1:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11893:24316":{"id":"2:11893:24316","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42840:2153","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:19333":{"id":"2:11909:19333","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40591:176","prim@char":"1:11857:411","self::pattern":"2:11565:7650"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:6282:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:42894:1973":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:41932:27953":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:6698:13317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:39872:28875":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:12233:7806":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:12211:18522":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:39210:7662":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:6628:13312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:44729:2486":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:7684:2079":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:5759:12887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:5525:15136":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:5640:2001":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:7044:33073":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:42878:7651":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:39158:28568":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:4720:12214":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:39865:7949":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:6463:15174":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:1030:31579":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:8475:15276":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:6851:2183":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:39441:2048":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:2804:8012":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:38834:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:3344:2142":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:46239:2480":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:5343:2335":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:562:15294":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"12:1518:14129":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:13231:19285":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:5527:7962":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11939:18504":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11485:18478":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:39594:7976":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:2216:2103":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:10946:24023":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:4888:14923":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"11:36:32558":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:3921:2224":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:39654:2155":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:7357:15203":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4322:12173":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:4574:14849":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:1401:2000":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12198:18521":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:7260:2002":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"9:111:13943":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"5:5124:31454":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:21275:29369":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:2676:7572":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:44518:2462":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:3989:29907":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:40716:8106":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:9115:20421":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"1:1927:2092":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:5447:15131":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:12237:18524":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4218:12164":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:7298:15198":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13168:19278":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:7805:2124":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:39174:7781":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4408:12183":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:8296:2239":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:10047:20486":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:4232:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:21369:2237":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:11271:17989":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:8418:15304":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:5751:2373":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:878:1999":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:4164:7603":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:5995:24009":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:4429:12186":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:4024:7570":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:11103:8122":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4389:12180":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:1988:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:39131:1973":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:3770:2206":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:12955:19258":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:9553:15315":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:6877:15188":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"18:614:33744":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:2916:15436":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"12:2198:32577":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:9250:15342":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:1716:2248":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:3927:2225":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:621:1974":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:5726:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"12:274:32570":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:2574:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:3076:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:1647:1073":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:11089:2387":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:9446:15362":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13279:19286":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10608:15322":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:5235:32969":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:41066:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:2358:2111":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:10020:7628":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:42402:7626":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:38737:8026":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:6506:7716":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:38944:29520":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"12:1138:2014":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:4637:12204":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:43305:8160":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:10940:24001":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:8110:15275":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:951:31454":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:2761:2421":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:43563:2510":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:2847:8021":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:8940:19787":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:6655:29186":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:7205:7693":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:6123:15156":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:4:1000":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:11052:2134":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:6070:15154":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:10221:15517":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:5428:2338":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:46622:7549":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:6865:32752":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:1431:2005":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:891:2000":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:2509:14217":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:11263:24017":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:9021:15314":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:2919:2032":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"12:60:32559":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:3314:2184":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:21515:28767":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:8397:2322":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:2782:8011":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"12:659:1998":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:534:33017":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:9058:7582":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:10394:15523":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4850:12229":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:7481:12397":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:21:671":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:9805:15472":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:9071:33724":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:41893:27945":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:9722:15421":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:11241:20393":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:1800:2039":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:43021:7683":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:10921:15533":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:46485:2468":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:11247:17987":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:4877:12232":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:8170:2203":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:2855:8023":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:21775:2215":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:2749:14227":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:12768:19245":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"14:215:14146":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:45519:2482":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:41709:8115":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:5697:29792":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"14:40:17971":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:6643:13314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:7869:2035":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:851:2023":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:1618:7938":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:8052:2125":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"5:4298:2142":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"12:98:32583":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:22189:1959":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:42708:7637":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:7872:15220":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:4139:1996":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:6294:1998":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12265:18526":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:8489:1996":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:12781:19246":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:9778:15398":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:9791:15426":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:39643:7964":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12022:18509":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:42474:7634":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:6109:15155":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6668:33014":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:9328:7809":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:505:1944":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:4113:2256":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:10321:15486":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:45026:28874":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:6955:2001":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:6676:15181":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:2808:8014":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:2771:14228":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:8810:1998":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:8157:2157":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:1771:15376":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:12147:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:1609:9708":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:46523:7542":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:12225:18523":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:6971:30389":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:2894:14233":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:9010:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4757:12219":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:7343:15202":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:9631:15369":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:1712:8053":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:6284:15167":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:3157:2176":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:2491:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:2157:30401":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:39682:7981":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:4689:14868":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"9:0:1749":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:3236:2174":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:6525:7717":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:43309:8164":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:10845:15332":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:11559:18481":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:4968:2361":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:5890:12894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:40986:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:41885:7811":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:484:23911":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:1592:2019":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:11166:2349":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:8230:2260":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:8113:2130":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:6571:9663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"12:822:2007":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:11590:7645":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:12046:18511":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:7469:15294":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:5698:12881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"12:1852:2017":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:20381:7796":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:5741:12885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:2360:2112":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"12:861:2010":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:7700:2080":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:46363:2465":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:1586:2018":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:8701:15309":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:4606:14857":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:3504:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:5772:12849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:7511:13882":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:45207:2495":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:10131:7636":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:8822:33715":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:10752:15329":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:6728:13319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4457:12189":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:4667:2236":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:10528:15319":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:4422:12185":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:5921:7983":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:4307:12171":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:2675:1886":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:10721:15328":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:7173:8746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:4805:12225":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:11876:1473":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:4261:12168":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:5996:15150":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:3026:14237":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:43175:7689":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:2859:8024":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:10929:24015":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:4268:31476":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:43198:7671":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:7557:15213":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:21600:27925":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:21624:2211":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:44328:2505":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:2389:14212":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:10257:15493":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12909:19254":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:39188:7783":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:4346:12175":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:2830:20732":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"0:0:1648":{"crate_id":0,"path":["winapi"],"kind":"module"},"12:1029:2013":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:42452:7615":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:578:8799":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:8085:2183":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:2868:14232":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:10668:20353":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:10700:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:13100:19271":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12630:19237":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"12:1845:2002":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:5388:15128":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:2841:8020":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:38937:15228":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:20641:2441":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:21106:2436":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:2297:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:2475:2166":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:6946:2024":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:531:8792":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:572:8798":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:4820:12226":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:4697:12211":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:11504:14163":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:20703:2434":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7567:15214":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:904:2001":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:9317:15354":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:9263:15343":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4649:12205":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:1985:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:3124:23802":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:42850:7664":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"14:187:14145":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:2579:14220":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:1509:9696":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:2830:8017":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:12617:19236":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:8880:2385":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:10445:15332":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:1354:1997":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:7329:15201":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:7483:15209":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:1571:2001":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:2867:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:7452:12393":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:30533:7796":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:4981:12242":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:10490:15527":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:6667:31471":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:12307:18529":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:939:2007":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:4962:12241":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:1969:2035":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:5374:2337":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:1559:9703":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:4673:12208":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:29712:2210":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:10520:15529":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:771:2021":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:242:33717":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:3371:2128":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"9:586:13997":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:12972:19260":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"18:609:33762":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"10:0:1750":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:870:1998":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:6330:15170":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:9155:15317":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:20744:2435":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:3913:2223":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:8561:15281":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:1723:9718":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:7030:26208":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:3505:2001":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:7825:15218":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:5184:14177":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13071:19268":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:10854:15333":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:41621:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:39358:1621":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:45253:2499":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:8951:33725":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:9577:15377":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:40649:1996":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:40575:2200":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:8911:33716":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:5552:2377":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:4611:2219":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:7150:2095":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:22786:2208":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4656:12206":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:5628:15140":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:11699:23404":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:2282:14207":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:8181:2194":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:7028:1998":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:5752:12886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:6743:15185":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:10546:15320":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10139:15315":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:6359:2367":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:9938:2157":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:9712:15424":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:12181:29973":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:6119:24577":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:8848:2384":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:4164:2257":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:4358:7755":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:11879:779":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:11565:7650":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:7646:1980":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:4583:12200":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:2825:14230":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:1527:9699":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:7944:24576":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:21111:2459":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:3325:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:38928:7729":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:2680:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:11774:18494":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:2535:14218":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:21713:28445":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:8941:15312":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:45283:2502":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:9274:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:42654:7669":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:9183:15318":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:755:19343":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:4562:20410":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:8134:2154":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:7132:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:62:8414":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:6567:15177":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:8526:15280":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:3599:14258":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:38856:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:7949:2170":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:8794:1996":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:1899:9859":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:11570:7646":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:9746:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:5990:12903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:6530:13310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:3160:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:3937:31454":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:12756:19244":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:22090:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:6059:33044":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:12357:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"18:699:19341":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:42903:7662":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:586:8800":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:42144:7617":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:7163:2096":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:7469:12395":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"9:505:14109":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"14:202:7691":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:3689:14300":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:9059:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:39888:7951":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:5488:2339":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:10418:2174":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:9018:20373":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:2668:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:11343:17994":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:9069:2387":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:6071:2511":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:48874:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5967:32360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:30141:28541":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:10455:15516":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:20847:2237":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:668:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:45553:2464":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:4628:12203":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:46637:7550":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:10720:20466":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:22321:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:21659:28557":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:10222:20738":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:11872:734":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:2454:2237":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:6222:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:11855:368":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:3264:2002":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:13572:19305":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:9736:2237":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:8241:15298":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:9681:15423":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:1771:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:10186:7637":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:5664:15141":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:12739:19242":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:4387:1957":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4571:12199":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:41651:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:4994:12244":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:3125:15441":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:10207:15506":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:22024:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:8347:2321":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:9066:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13557:19304":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11893:18502":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"18:491:33757":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"7:32:13899":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:11853:18500":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12514:19233":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"12:1840:2001":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:515:19347":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:11436:18477":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:3010:14236":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:10093:7635":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:6186:15161":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:4328:12015":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:7428:12389":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13327:19287":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:8903:2366":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:7603:15215":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:671:19338":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:39903:7952":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:1824:2070":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:3640:1998":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:2906:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:40866:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:21263:2427":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:11869:735":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:43360:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:39633:7979":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:3665:2205":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:41940:27915":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:7319:15200":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:9350:15351":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:12176:18520":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:3049:2186":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"5:7103:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:1962:15394":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:113:19321":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"13:110:32632":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:3138:2019":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:1652:9711":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12251:18525":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:39391:2100":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:4871:12231":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:11214:19612":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:8928:1948":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:5472:15133":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:11278:8173":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:6623:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:3150:8027":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:1611:579":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:29963:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:1604:9707":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:9458:15388":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:13126:19273":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:6963:2025":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:41910:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:10626:2291":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:5411:15129":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:6210:15163":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:22255:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"12:1832:1996":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:5558:15138":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7211:15192":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:10172:7639":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:3121:23658":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:7087:1995":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:44184:28845":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"18:582:7796":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:8014:15228":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:2302:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:2500:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"15:214:14159":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:3118:20125":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:2487:14216":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:6345:15171":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:9064:7591":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:3632:14267":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:1564:1996":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:43317:8165":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:6517:14151":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:1583:9705":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:2793:14229":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:2455:7800":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:7537:24021":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:5163:15126":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:42754:7666":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:3971:2227":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"12:697:2005":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:8236:2251":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:9658:15422":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:7543:15212":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:641:1977":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:44459:2473":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:4721:14876":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:5494:15134":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:7022:1998":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:4483:12192":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4812:988":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:8137:15295":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:42636:7670":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4945:12239":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11547:15480":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11974:18506":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:8922:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:5675:2363":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:44827:2481":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:4721:1620":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:6161:15159":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:21763:2212":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:40484:27890":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:3983:2230":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"8:0:1748":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:11405:2206":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:4441:14788":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:10159:15442":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:43393:8182":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:1894:7577":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:7174:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:3249:15459":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:7580:2237":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:2065:1944":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:9539:15371":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:39257:7661":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:6094:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:44681:2501":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:7518:24007":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:6985:1998":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"9:33:14000":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:42484:7632":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:8092:2185":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:11617:18485":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:3105:1996":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:7134:28501":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6528:15176":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:10875:15334":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:2225:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:3515:1996":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:6773:13323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:1185:2011":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:10353:24013":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:12160:7805":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:5510:15135":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:4402:2262":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:2624:30402":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:6572:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:4476:12191":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:8274:2292":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:9401:15355":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"12:2069:2012":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:7487:12398":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:933:2006":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:5722:12883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:46301:2500":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"3:0:435":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:11878:1471":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:1580:2017":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:6649:13315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4237:12166":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:9288:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"3:229:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:10645:20364":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:1065:2012":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:4549:12197":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:2893:7566":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:43576:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:7592:1955":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:42439:7614":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:6221:31454":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:4301:12170":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:10434:15524":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:39584:7975":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:7529:7956":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:7815:2121":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:2687:1958":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:6471:2371":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:10058:7642":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:46543:7544":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:6791:13324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:540:8793":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:8176:2202":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:4313:12172":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:13141:19275":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:4367:7756":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:3907:2001":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:11143:24024":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:567:8797":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:9527:28687":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:8420:2323":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:10466:15525":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:6175:2001":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:2507:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:39278:7780":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:5762:8388":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:2075:30408":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:4681:12209":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:3190:29399":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:9371:15316":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:12896:19253":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"12:2205:1994":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:43605:7562":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:638:1976":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:10182:15440":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:1597:2020":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:42869:7652":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:8437:2324":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:4385:14780":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:42562:7656":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:6521:13309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:44583:2429":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:2813:8018":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:39603:7977":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:5938:12899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:9204:30042":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"12:751:2001":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:12073:18513":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:10710:2126":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:10625:15323":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4396:12181":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:7218:13695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"2:4092:7759":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:8975:24555":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:22222:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:12148:18518":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:21651:28862":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:40455:2197":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:38878:1988":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:1216:2012":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:44499:28851":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:9051:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:45443:2475":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:4069:2142":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:5559:2378":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:6252:15165":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:38690:7576":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:5945:12900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:646:1978":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:1704:2002":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:1677:9713":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:20666:2430":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:8164:2153":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:3716:14303":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:40674:2305":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:8495:2326":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:39562:7974":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:13007:19262":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:3899:2222":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:7497:15210":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:11875:1472":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:8368:15302":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7372:32772":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:5703:15142":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:42140:28188":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:11070:17975":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:3975:2228":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"18:590:28882":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:4416:12184":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10822:15331":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:41612:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:5359:2336":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:1568:1998":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"9:382:14034":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:4743:12217":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:956:2009":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:42860:7653":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:44897:2467":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:4775:12221":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:41606:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:43555:2509":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:4262:14753":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:7095:7958":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:7075:1994":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"12:2190:32580":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:950:2008":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:9060:7581":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:4316:2252":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:5839:15148":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"12:853:2009":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:653:8849":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:44204:28871":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:8752:2156":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:11354:8174":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:2367:14211":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:0:806":{"crate_id":6,"path":["libc"],"kind":"module"},"5:6373:31454":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:6548:2292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:44873:2466":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:6174:2377":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11576:18482":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:3281:2163":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:5309:2333":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:2261:14179":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10949:17969":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:6719:32826":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11288:17990":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11125:17978":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:38958:7738":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:4952:12240":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11174:17982":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"12:353:32566":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:2497:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:44629:2494":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:2557:14219":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:11856:925":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:12399:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:22288:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:8187:2308":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:3159:2177":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:1747:9720":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:41106:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:3428:2093":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:3869:2220":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:6171:15160":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:9559:27066":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:3376:7721":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:5959:12902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:4334:12174":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:262:31454":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:5708:2365":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:1786:2059":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:6376:15173":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10973:17970":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:43086:7685":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:11511:14163":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:6472:14152":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:42572:2156":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11761:18493":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:7388:15204":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:6816:33021":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:6790:15187":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:9283:15361":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:40784:1997":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:119:8468":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:8781:27871":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:4217:14732":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:534:1949":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:3595:31454":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:2904:30442":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:4703:12212":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:41639:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:13594:19307":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11828:18498":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:39311:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:7271:26851":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:22156:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:9088:2134":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"9:188:13971":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"5:2894:31518":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:4413:14784":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:8225:2259":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:6200:15162":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"11:44:14115":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:4564:20412":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:43185:7690":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:4501:12194":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:9165:33713":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:11721:18490":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:11161:17981":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:10214:7638":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"12:1872:2020":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:2503:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:4253:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:4979:24558":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:1726:28886":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:10415:2178":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:40540:2198":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"9:592:13948":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:46569:7546":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:6607:24530":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:2989:2050":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:0:1756":{"crate_id":17,"path":["object"],"kind":"module"},"1:4671:2241":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:43341:8181":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:2766:2423":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:588:1971":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"12:1534:14130":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:44948:28870":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12860:19250":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:4303:7753":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:1931:15370":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:10385:15522":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:1534:9700":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12087:18514":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:45049:28872":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:42690:7639":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:5716:12882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:5491:2341":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:5418:7716":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:46660:7551":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:40563:2199":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:12485:19232":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:5168:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:10360:15487":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:10420:15515":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:8608:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:2842:14231":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:13214:19283":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:80:19319":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:9362:15315":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:3402:14240":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:967:15356":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:6704:15183":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:481:8786":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:7980:15227":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:4662:14865":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12278:18527":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:8997:19790":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"18:660:19337":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:4891:2297":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:2212:2102":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:3171:7743":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"12:2080:2013":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:12480:2053":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:21371:2433":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:45489:2479":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:9700:15395":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:40421:2195":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:3437:21515":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:42992:7681":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"12:1628:32581":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:2344:2107":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:44775:2474":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"14:221:14147":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:42970:7680":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:5902:12895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:22123:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:11119:8124":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:6940:1998":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:11235:17986":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"12:119:32575":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:2835:8019":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"18:681:19339":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:1788:2060":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:11579:7648":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5823:12891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:1370:1998":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:7059:2305":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"18:644:33753":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:39542:7973":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:41362:7590":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:4749:14880":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:10245:15519":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:11874:1475":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:21742:28888":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:2788:8010":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:8631:15307":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:847:1996":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:48926:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:39328:28501":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11034:17973":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:2129:580":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:41226:2362":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:2631:14222":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:20856:2435":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:10845:20433":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:9031:33709":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:42465:7631":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:10690:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:1520:9698":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:11199:17984":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:11791:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"9:676:13939":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"5:677:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:10650:20375":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:1735:8052":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:493:8788":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:7659:15217":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:4900:12235":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:11199:19619":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:11013:2344":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:5172:7608":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:46051:2476":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:42736:7665":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:39463:7960":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:0:1370":{"crate_id":1,"path":["std"],"kind":"module"},"1:11033:8181":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:20578:2439":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:9181:2076":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:29935:7712":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:8295:15300":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"12:300:32568":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:10296:15490":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:44296:2472":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:7288:15197":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:5786:12850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:7277:7713":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:13039:19265":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:6395:2374":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:41355:7582":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"15:193:14155":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13091:19270":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:43007:7682":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:6538:2376":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:499:8789":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:2678:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:3165:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:6611:9640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:41146:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:21568:27924":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:11839:20335":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11054:17974":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:7845:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:1983:2036":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:39421:7614":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"9:19:13999":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"6:546:8794":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:9897:15477":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:20449:29402":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:4084:2253":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:2851:8022":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:12934:19256":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:6052:15153":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:6000:12904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:9997:20734":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:13374:19291":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:46584:7547":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:40792:1998":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"18:96:19320":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:5912:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:39264:7778":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:11873:730":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:11864:1457":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:5236:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:3263:14239":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:20697:2432":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:48887:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8144:2155":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:11813:18497":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"12:1044:14126":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:7475:12396":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:7446:12392":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:505:8790":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:594:8801":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:1663:9712":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"9:863:13929":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:2940:1891":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:39316:2098":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:7618:1954":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:4669:2240":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:553:8795":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"9:800:14063":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:7201:13694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:10997:17971":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:38752:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:11639:18486":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:39571:7963":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:6593:15178":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:4144:14683":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:3732:31454":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:2865:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:29941:8001":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:5219:14173":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:7793:2123":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:1083:2014":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"18:564:19350":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:5203:14175":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:3199:2179":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:10075:15437":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:6743:13320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:11585:7647":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:43512:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:6024:2513":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:6524:2375":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:8796:15310":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:860:1997":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:44429:2485":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:9118:33712":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:6829:32991":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:41348:7581":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:2177:30407":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:1021:15360":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:8835:2381":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:6743:2426":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:43321:8169":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:3977:29906":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:8991:33714":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:25596:2209":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:50214:28873":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:803:2022":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"12:810:2003":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:44398:28881":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:5805:12889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:5728:12884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:22354:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:11001:2343":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13527:19302":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:11863:1378":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:8188:2307":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:11229:19665":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:8056:15229":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:39533:7972":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:43313:8166":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:7237:15193":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:1600:31454":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:8162:15296":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"18:521:19344":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:9223:15341":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:7195:13693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:9831:15474":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:8186:2309":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12008:18508":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:6316:15169":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:3528:1997":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:9751:15397":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:7890:15221":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:8252:2261":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:7180:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:9383:20644":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:10497:15528":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:39491:7968":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:12208:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:40640:8031":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:4635:14862":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:361:1968":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:11877:1474":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:44481:2477":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:208:7580":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5878:12893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:7939:24578":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:4768:785":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:13436:19296":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:153:14184":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:39913:7953":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:7136:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:12134:18517":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:525:8791":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:39668:7980":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"9:896:13930":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:9671:15389":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:9544:24004":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:40906:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:41901:7810":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:46607:7548":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:20394:29365":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:40733:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:920:2003":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:4725:2242":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:42373:7623":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:6608:7966":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:39894:2184":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4439:12187":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12322:18530":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:48939:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5122:15109":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:2320:14209":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:20447:29406":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:43381:2425":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:12836:19248":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:3932:2142":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:4862:12230":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:13580:19306":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:247:33723":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:5010:24558":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"9:920:13928":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:13114:19272":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:20695:2237":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:43333:8162":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:4062:26207":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:5056:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:13176:19279":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12850:19249":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:8981:15313":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:21584:27902":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:9930:15453":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:1051:2011":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:10458:1954":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:10200:7640":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:42382:7627":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:13354:19289":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:41588:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:8441:15305":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:2934:1889":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:7120:2097":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:39198:7784":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:44274:2484":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:8881:33706":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:13413:19295":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:10062:15439":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:2248:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:6719:13318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:29901:2031":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:2657:14223":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:5682:2364":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:1230:2014":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:3457:14241":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:8339:15301":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:7480:20866":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:4921:14932":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:9056:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"14:165:14138":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:4910:12236":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:9070:7589":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:6488:8837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:12118:18516":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:8816:2383":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:3656:2036":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"14:160:14137":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"12:815:2006":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:21462:28769":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:1617:9709":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:10332:15521":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:2411:14213":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:4817:14900":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:7396:15205":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:7909:15222":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:4241:7748":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:44805:2478":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:962:2010":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:11870:732":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:7853:23803":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:14:1866":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:46512:7541":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:8802:2386":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:2937:1890":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4597:12201":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4369:12178":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4224:12165":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:4489:12193":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:12291:18528":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12103:18515":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:9488:15373":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:652:33753":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:3566:14249":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:11881:1110":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:2612:2169":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:2341:14210":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:5374:15127":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:2682:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:40665:1998":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:13047:19266":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11841:18499":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:8864:2382":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:5878:14178":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:11951:18505":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:10233:15518":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:8479:2325":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:11070:19672":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:8970:24575":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:39921:7955":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:2339:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4274:12169":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:6594:9637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:5737:15143":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"12:2053:2011":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:3453:2151":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:925:2004":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:40707:2306":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:2796:2424":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:7145:1893":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:2745:7571":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:45909:2507":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:20409:29365":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:31725:24541":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:40826:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:12748:19243":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:4781:12222":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5910:12896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:39510:7970":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:40504:28547":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:5614:32942":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"12:2184:29188":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:39501:7969":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:42840:2153":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:3644:2035":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:11389:7641":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:10205:2337":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:6053:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:2494:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:20615:2440":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:44228:2504":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:6298:15168":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:12425:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"12:1003:2012":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:9061:15315":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:8218:2198":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:6137:15157":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:1589:9706":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:5815:15147":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:1420:2004":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:4092:2254":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:40801:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:11594:18483":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:11734:18491":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:7166:15191":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:44380:2497":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"15:0:1754":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:9064:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13148:19276":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:3197:2178":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:43329:8168":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:6764:13322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:43113:7686":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:2732:1887":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:7498:12399":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6034:15152":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:22057:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:43520:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:11909:18503":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:4331:31476":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"12:1555:14131":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4353:12176":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"12:393:32560":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:44995:28878":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:8983:15189":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:10824:20397":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"12:738:2000":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12948:19257":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"13:226:32585":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:3087:2052":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:2333:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"7:79:13906":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:6702:7947":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:4751:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:10732:7630":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:12361:18532":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:2776:8008":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"13:0:1746":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:40438:2196":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:481:19345":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:1849:2077":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:39401:2099":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:8963:24534":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:12926:19255":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:690:19340":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:38651:7741":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:42808:7668":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:3238:2175":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:7522:2026":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:5746:2361":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:9885:15476":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:5761:15144":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:11149:17980":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:355:1967":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:6087:24002":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:7521:13883":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5660:12821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:9108:15316":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:42885:7661":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:46161:2496":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:11684:18488":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4379:12179":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:4566:20414":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"9:827:14031":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:2209:2101":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:9873:15475":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"18:538:19349":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"15:175:14154":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11137:17979":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:2538:2167":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:11880:1528":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:29977:28551":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"5:277:1894":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:123:8469":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:11528:15481":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:9371:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:2679:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:13184:19280":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:6270:15166":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:11857:411":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:20428:29404":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:1575:2002":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:6468:2370":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:11661:18487":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"12:1120:14128":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:561:8796":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:9339:15352":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:7434:12390":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:39218:7776":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:4988:12243":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:42313:29895":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:12337:15332":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:558:1951":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:13059:19267":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:3151:31544":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:42125:8153":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:11217:17985":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:3388:7725":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:10670:15325":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13393:19293":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:41673:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:40657:1997":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:3863:2221":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:40725:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:39619:7978":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:13478:19298":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:1201:2013":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:4662:12207":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6017:15151":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:10310:2342":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:7661:1981":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:5981:33005":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:0:1751":{"crate_id":11,"path":["adler"],"kind":"module"},"1:4496:2280":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13340:19288":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:6318:24530":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"12:387:32573":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:41725:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:9644:15368":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:4833:2287":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"18:636:33748":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:13221:19284":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:38768:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:7249:15194":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:9378:2123":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:7847:15219":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:10708:15327":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:44250:2492":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:4627:2289":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:7135:33069":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:8786:2345":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:6541:13311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:8506:2327":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:2342:2106":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:6911:2356":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:5843:12892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:9068:7588":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:4714:12213":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:4357:14776":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:4766:12220":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:4122:7760":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:2771:8009":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:2825:8016":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:2727:14226":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:43038:7684":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:44851:2463":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:45703:2488":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:7597:1956":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:11882:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:40398:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:4748:2235":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:1710:9717":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:8494:14175":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:1527:2142":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:9422:15350":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:10108:15434":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:42586:2157":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"12:646:1997":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11300:17991":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:11862:1348":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:20426:29407":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:10283:15491":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:914:2002":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"19:0:1017":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:386:15292":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:10682:15326":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:8774:15278":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:5800:12888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:5460:15132":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12609:19235":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:3603:2201":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:9526:15372":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10894:15335":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:1339:1996":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:2433:14214":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:11160:20426":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:8746:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:11343:2205":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:5793:15146":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:4519:14842":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:11320:20735":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:43593:7564":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"18:507:33753":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:5690:12880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4828:12227":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:5951:12901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:621:30438":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:9889:1996":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"9:709:2322":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:42790:7667":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:39137:7745":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:7566:28603":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"12:1859:2018":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:7197:1892":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:6496:15175":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13158:19277":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:4786:14893":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:4539:12196":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:39297:7775":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:2683:14224":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:11873:18501":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:9601:15375":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:42413:7616":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:7463:12394":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:10350:15330":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:1571:9704":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"14:31:14137":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:2104:30391":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:7677:2016":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:9274:15344":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:2300:14208":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"9:622:13949":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:46699:7552":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"9:977:13931":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:3146:2017":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:10820:2080":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:3112:2018":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:11106:17977":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:40946:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:4842:2288":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:4787:12223":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:4297:14764":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:42494:7633":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:5931:12898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:39519:28894":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:8871:15311":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:13536:19303":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:727:19342":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:2792:2422":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:39241:7777":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:42364:7624":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:1898:2091":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:21749:2213":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:41369:7591":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:40776:1996":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:7440:12391":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:5000:12245":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:40589:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:2900:30441":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:7788:2122":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:11708:18489":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:31689:2346":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:9000:2093":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:11536:15479":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:41186:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:4545:14844":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:6781:15186":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"12:834:2008":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9909:15433":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:10655:2120":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:39879:1983":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"12:985:2011":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"14:0:1753":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"12:1866:2019":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:5835:2142":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:7704:24541":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:6059:12080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:48861:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:1065:32584":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:7667:2015":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:6535:7718":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:39344:8096":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:11636:7674":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:487:8787":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:7099:7957":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:1550:9702":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:7435:15207":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:4890:12234":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"9:956:13927":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:43325:8167":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10583:15321":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:1442:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:11338:8172":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4559:12198":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"18:624:33752":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:10088:15438":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:6359:15172":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:9382:15357":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:39146:7782":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:12060:18512":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:20854:2437":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:8151:2156":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:2572:2159":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:12730:19241":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"12:1836:1998":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:9978:2070":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:8596:15306":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:4244:2258":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:4577:7769":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:39450:2154":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:11025:20463":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:12964:19259":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:5545:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:12980:19261":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:2930:14234":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:5596:15139":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:4248:12167":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:6993:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:10310:15520":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:4424:2263":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:7637:15216":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"12:0:1752":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:4733:12216":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:11867:632":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:2820:8015":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:3389:2127":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:8244:2203":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:11860:1035":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:13192:19281":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:9820:15473":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:9501:15358":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:9433:15349":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:1410:2003":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:2800:8013":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:6757:13321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:7861:2168":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11186:17983":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:38951:7754":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:2993:14235":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:2395:30405":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:2705:14225":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11606:18484":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:4849:14908":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:8293:7646":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:39271:7779":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:11259:17988":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:9475:15374":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:12033:18510":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"18:531:19348":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:5450:7971":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:13404:19294":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:7117:33060":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:8917:24582":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:7828:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:1645:9710":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4618:12202":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:10134:2348":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:43150:7687":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:2896:30392":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:7252:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:4727:12215":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11330:17993":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:9874:19419":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:2993:2051":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:4313:7754":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"12:320:32564":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:21697:28498":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:1731:9719":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:8613:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:48913:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4630:2262":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:13203:19282":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:6692:31461":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:2588:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:5168:7607":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:6519:7959":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:7278:15196":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:11461:7558":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:9627:15382":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:46532:7543":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:42604:7635":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:48900:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:2178:32576":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:30035:28487":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:4413:7757":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:43502:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:9947:15478":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:7469:15208":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:8270:2290":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:4751:12218":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:473:8785":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:50235:28897":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:10476:15526":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:6496:9636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:1847:2076":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:7581:1969":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:20828:2431":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:9107:2420":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:40527:2207":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:3242:7574":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:9857:15454":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:9062:7590":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:39235:1973":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:39481:7967":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11828:1982":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:420:14181":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:6355:1983":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:4402:12182":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:21636:28565":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:7267:15195":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:13031:19264":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:5896:2377":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:4236:7747":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:5323:2334":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"18:574:33753":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"12:1085:14127":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:46503:7540":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:8272:15299":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:13382:19292":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:8329:2301":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:7386:13854":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:42530:7663":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"18:0:1757":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:3117:31540":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:39551:7982":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:11868:633":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:45365:2487":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:48504:2508":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:8772:2344":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4882:12233":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:2864:8025":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:10774:15330":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:42544:7660":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:929:2005":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:8055:15277":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:43337:8163":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:1514:9697":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:20654:2237":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:4552:2225":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:8393:15303":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:9738:15399":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:9913:1997":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:5574:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:1903:15410":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:5433:15130":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:7093:15190":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:487:15293":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:7426:15206":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:6667:13316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:4847:2142":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:12797:19247":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6654:15180":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:10403:15329":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:2757:7988":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:4327:14770":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:4687:12210":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:44659:2498":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:6107:31471":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:10699:7629":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:13492:19299":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:6880:20865":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:44358:2493":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:42556:7657":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:11748:18492":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:9293:15359":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:10506:15494":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:1074:2013":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:5949:15149":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:12884:19252":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:41026:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:30516:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"18:736:19335":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:13506:19300":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"12:777:14124":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:44536:28868":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:9048:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:1392:1999":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:3961:2226":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:7001:30066":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:6690:15182":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:11526:2328":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:10680:2124":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:6842:32944":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:1451:2034":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:6079:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:4841:12228":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:31738:7989":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:2228:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:4451:12188":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:21676:28453":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:1541:9701":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:2548:24004":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:7942:15224":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:2207:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:38792:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:9445:8134":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:11368:17996":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:6512:8669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"4:0:1747":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:11384:2204":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:35:2055":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13134:19274":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:46558:7545":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:2930:1888":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:6931:2054":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"12:725:1999":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:1302:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:11479:20434":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:11356:17995":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:7956:15225":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"18:599:33756":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:22387:2214":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:46447:2503":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:8776:28605":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:0:1755":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:679:1979":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:8101:2126":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:12349:18531":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13024:19263":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:39472:7961":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:11823:26834":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:11858:1491":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:3446:2129":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:12638:19238":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:13366:19290":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:4361:12177":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:1066:31577":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:719:19334":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:12368:2511":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"18:766:19336":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:868:1996":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:1687:9714":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12874:19251":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:10833:2338":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:4468:12190":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:38910:8028":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:6146:15158":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"7:0:1518":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:13082:19269":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:6903:15189":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:7525:2029":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:45129:2506":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:7970:15226":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:2465:14215":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11315:17992":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:11515:18480":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:4520:12195":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:6735:15184":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"14:7:14137":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:12695:19240":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:11315:8175":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:7511:15211":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:11133:7654":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:8758:2343":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:13459:19297":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:43218:7672":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:10642:15324":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:6634:13313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:5780:15145":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11787:18495":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:4099:2142":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:10270:15492":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:11247:20348":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:2971:7575":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"5:7194:7692":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:1704:9716":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:5917:12897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:11014:17972":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:9328:15353":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:3854:14417":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:8212:15297":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:12816:19231":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:41922:2322":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:6619:15179":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:9193:33721":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:7309:15199":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:11871:733":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:8510:14173":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12550:19234":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:9981:7641":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:3177:7742":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"18:707:7648":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:9303:15358":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:2385:1763":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:4100:2255":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:6241:15164":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:46409:2483":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:20823:2237":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:9764:15425":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:3172:2020":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:7798:2120":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:8740:2342":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:5813:12890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:10863:2345":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:3979:1997":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:43164:7688":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:3713:2002":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:3205:7573":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:11997:18507":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:11861:309":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:4742:28757":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:4921:12237":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:31729:8075":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:9323:7808":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11800:18496":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:9691:15396":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:11087:17976":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"9:649:13950":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"5:1046:30413":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:10121:15435":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:11500:18479":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:12674:19239":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:2605:14221":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:7929:15223":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:2370:2117":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"12:762:2002":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:38812:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:10412:2176":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:12164:18519":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:13518:19301":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:3188:14238":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:6922:23405":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"12:632:1996":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:4929:12238":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:8666:15308":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:4795:12224":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:6823:24017":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"6:1695:9715":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:10796:15279":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:3668:2204":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:9844:15432":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:10374:15489":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"12:669:2004":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:42392:7625":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:5541:15137":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}